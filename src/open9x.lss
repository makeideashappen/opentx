
open9x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011464  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  20000000  00411464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000004  20000104  00411568  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002070  20000108  0041156c  00020108  2**2
                  ALLOC
  4 .debug_info   0001204f  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000c47  00000000  00000000  00032157  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    0000dd67  00000000  00000000  00032d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000090  00000000  00000000  00040b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00004520  00000000  00000000  00040b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005603  00000000  00000000  000450b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f74  00000000  00000000  0004a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0005162c  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000031  00000000  00000000  0005163d  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000258c  00000000  00000000  00051670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_stext>:
  400000:	2000c000 	.word	0x2000c000
  400004:	0040f2a5 	.word	0x0040f2a5
  400008:	0040018d 	.word	0x0040018d
  40000c:	00400191 	.word	0x00400191
  400010:	00400195 	.word	0x00400195
  400014:	00400199 	.word	0x00400199
  400018:	0040019d 	.word	0x0040019d
	...
  40002c:	004001a1 	.word	0x004001a1
  400030:	004001a5 	.word	0x004001a5
  400034:	00000000 	.word	0x00000000
  400038:	004001a9 	.word	0x004001a9
  40003c:	004001ad 	.word	0x004001ad
  400040:	004001b1 	.word	0x004001b1
  400044:	004001b5 	.word	0x004001b5
  400048:	004001b9 	.word	0x004001b9
  40004c:	004001bd 	.word	0x004001bd
  400050:	004001c1 	.word	0x004001c1
  400054:	004001c5 	.word	0x004001c5
  400058:	004001c9 	.word	0x004001c9
  40005c:	00000000 	.word	0x00000000
  400060:	004001cd 	.word	0x004001cd
  400064:	004001d1 	.word	0x004001d1
  400068:	004001d5 	.word	0x004001d5
  40006c:	004001d9 	.word	0x004001d9
  400070:	004001dd 	.word	0x004001dd
  400074:	004001e1 	.word	0x004001e1
  400078:	004001e5 	.word	0x004001e5
  40007c:	004001e9 	.word	0x004001e9
	...
  400088:	004001ed 	.word	0x004001ed
  40008c:	00400251 	.word	0x00400251
  400090:	004001f1 	.word	0x004001f1
  400094:	00400161 	.word	0x00400161
  400098:	004001f5 	.word	0x004001f5
  40009c:	004001f9 	.word	0x004001f9
  4000a0:	004001fd 	.word	0x004001fd
  4000a4:	004065e1 	.word	0x004065e1
  4000a8:	004000d1 	.word	0x004000d1
  4000ac:	00400201 	.word	0x00400201
  4000b0:	00400205 	.word	0x00400205
  4000b4:	00400209 	.word	0x00400209
  4000b8:	00400219 	.word	0x00400219
  4000bc:	00401765 	.word	0x00401765
  4000c0:	0040020d 	.word	0x0040020d
  4000c4:	00400211 	.word	0x00400211
  4000c8:	00400215 	.word	0x00400215
  4000cc:	00000000 	.word	0x00000000

004000d0 <TC3_IRQHandler>:
// Timer 4 generates the 2MHz clock to clock Timer 3

uint16_t Temp_captures[8] ;

extern "C" void TC3_IRQHandler() //capture ppm in at 2MHz
{
  4000d0:	b470      	push	{r4, r5, r6}
  uint16_t val ;

  capture = TC1->TC_CHANNEL[0].TC_RA ;
  (void) TC1->TC_CHANNEL[0].TC_SR ;               // Acknowledgethe interrupt

  val = (capture - lastCapt) / 2 ;
  4000d2:	4b22      	ldr	r3, [pc, #136]	; (40015c <TC3_IRQHandler+0x8c>)
{
  uint16_t capture ;
  static uint16_t lastCapt ;
  uint16_t val ;

  capture = TC1->TC_CHANNEL[0].TC_RA ;
  4000d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4000d8:	f2c4 0201 	movt	r2, #16385	; 0x4001
  4000dc:	6951      	ldr	r1, [r2, #20]
  val = (capture - lastCapt) / 2 ;
  lastCapt = capture;

  // We prcoess g_ppmInsright here to make servo movement as smooth as possible
  //    while under trainee control
  if (ppmInState && ppmInState<=8) {
  4000de:	789c      	ldrb	r4, [r3, #2]
  uint16_t val ;

  capture = TC1->TC_CHANNEL[0].TC_RA ;
  (void) TC1->TC_CHANNEL[0].TC_SR ;               // Acknowledgethe interrupt

  val = (capture - lastCapt) / 2 ;
  4000e0:	8818      	ldrh	r0, [r3, #0]
{
  uint16_t capture ;
  static uint16_t lastCapt ;
  uint16_t val ;

  capture = TC1->TC_CHANNEL[0].TC_RA ;
  4000e2:	b289      	uxth	r1, r1
  val = (capture - lastCapt) / 2 ;
  lastCapt = capture;

  // We prcoess g_ppmInsright here to make servo movement as smooth as possible
  //    while under trainee control
  if (ppmInState && ppmInState<=8) {
  4000e4:	1e65      	subs	r5, r4, #1
  uint16_t val ;

  capture = TC1->TC_CHANNEL[0].TC_RA ;
  (void) TC1->TC_CHANNEL[0].TC_SR ;               // Acknowledgethe interrupt

  val = (capture - lastCapt) / 2 ;
  4000e6:	1a08      	subs	r0, r1, r0
  lastCapt = capture;

  // We prcoess g_ppmInsright here to make servo movement as smooth as possible
  //    while under trainee control
  if (ppmInState && ppmInState<=8) {
  4000e8:	b2ee      	uxtb	r6, r5
  uint16_t val ;

  capture = TC1->TC_CHANNEL[0].TC_RA ;
  (void) TC1->TC_CHANNEL[0].TC_SR ;               // Acknowledgethe interrupt

  val = (capture - lastCapt) / 2 ;
  4000ea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
  lastCapt = capture;

  // We prcoess g_ppmInsright here to make servo movement as smooth as possible
  //    while under trainee control
  if (ppmInState && ppmInState<=8) {
  4000ee:	2e07      	cmp	r6, #7
  uint16_t capture ;
  static uint16_t lastCapt ;
  uint16_t val ;

  capture = TC1->TC_CHANNEL[0].TC_RA ;
  (void) TC1->TC_CHANNEL[0].TC_SR ;               // Acknowledgethe interrupt
  4000f0:	6a12      	ldr	r2, [r2, #32]

  val = (capture - lastCapt) / 2 ;
  4000f2:	f3c0 004f 	ubfx	r0, r0, #1, #16
  lastCapt = capture;
  4000f6:	8019      	strh	r1, [r3, #0]

  // We prcoess g_ppmInsright here to make servo movement as smooth as possible
  //    while under trainee control
  if (ppmInState && ppmInState<=8) {
  4000f8:	d821      	bhi.n	40013e <TC3_IRQHandler+0x6e>
    if(val>800 && val<2200) {
  4000fa:	f5a0 7248 	sub.w	r2, r0, #800	; 0x320
  4000fe:	3a01      	subs	r2, #1
  400100:	b292      	uxth	r2, r2
  400102:	f240 5676 	movw	r6, #1398	; 0x576
  400106:	42b2      	cmp	r2, r6
  400108:	d824      	bhi.n	400154 <TC3_IRQHandler+0x84>
      Temp_captures[ppmInState - 1] = capture ;
      g_ppmIns[ppmInState++ - 1] = (int16_t)(val - PPM_CENTER)*(g_eeGeneral.PPM_Multiplier+10)/10; //+-500 != 512, but close enough.
  40010a:	f5a0 60ba 	sub.w	r0, r0, #1488	; 0x5d0
  40010e:	f993 206e 	ldrsb.w	r2, [r3, #110]	; 0x6e
  400112:	380c      	subs	r0, #12
  400114:	b200      	sxth	r0, r0
  400116:	320a      	adds	r2, #10
  400118:	fb02 f200 	mul.w	r2, r2, r0
  40011c:	f246 6067 	movw	r0, #26215	; 0x6667
  400120:	f2c6 6066 	movt	r0, #26214	; 0x6666
  400124:	fb80 6002 	smull	r6, r0, r0, r2
  400128:	17d2      	asrs	r2, r2, #31

  // We prcoess g_ppmInsright here to make servo movement as smooth as possible
  //    while under trainee control
  if (ppmInState && ppmInState<=8) {
    if(val>800 && val<2200) {
      Temp_captures[ppmInState - 1] = capture ;
  40012a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
      g_ppmIns[ppmInState++ - 1] = (int16_t)(val - PPM_CENTER)*(g_eeGeneral.PPM_Multiplier+10)/10; //+-500 != 512, but close enough.
  40012e:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
  400132:	3401      	adds	r4, #1

  // We prcoess g_ppmInsright here to make servo movement as smooth as possible
  //    while under trainee control
  if (ppmInState && ppmInState<=8) {
    if(val>800 && val<2200) {
      Temp_captures[ppmInState - 1] = capture ;
  400134:	80a9      	strh	r1, [r5, #4]
      g_ppmIns[ppmInState++ - 1] = (int16_t)(val - PPM_CENTER)*(g_eeGeneral.PPM_Multiplier+10)/10; //+-500 != 512, but close enough.
  400136:	82aa      	strh	r2, [r5, #20]
  400138:	709c      	strb	r4, [r3, #2]
  else {
    if (val>4000 && val < 16000) {
      ppmInState = 1; // triggered
    }
  }
}
  40013a:	bc70      	pop	{r4, r5, r6}
  40013c:	4770      	bx	lr
    else {
      ppmInState = 0; // not triggered
    }
  }
  else {
    if (val>4000 && val < 16000) {
  40013e:	f5a0 607a 	sub.w	r0, r0, #4000	; 0xfa0
  400142:	3801      	subs	r0, #1
  400144:	b280      	uxth	r0, r0
  400146:	f642 62de 	movw	r2, #11998	; 0x2ede
  40014a:	4290      	cmp	r0, r2
  40014c:	d8f5      	bhi.n	40013a <TC3_IRQHandler+0x6a>
      ppmInState = 1; // triggered
  40014e:	2201      	movs	r2, #1
  400150:	709a      	strb	r2, [r3, #2]
  400152:	e7f2      	b.n	40013a <TC3_IRQHandler+0x6a>
    if(val>800 && val<2200) {
      Temp_captures[ppmInState - 1] = capture ;
      g_ppmIns[ppmInState++ - 1] = (int16_t)(val - PPM_CENTER)*(g_eeGeneral.PPM_Multiplier+10)/10; //+-500 != 512, but close enough.
    }
    else {
      ppmInState = 0; // not triggered
  400154:	2200      	movs	r2, #0
  400156:	709a      	strb	r2, [r3, #2]
  400158:	e7ef      	b.n	40013a <TC3_IRQHandler+0x6a>
  40015a:	bf00      	nop
  40015c:	20000108 	.word	0x20000108

00400160 <SPI_IRQHandler>:
extern "C" void SPI_IRQHandler()
{
  register Spi *spiptr ;

  spiptr = SPI ;
  SPI->SPI_IDR = 0x07FF ;                 // All interrupts off
  400160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400164:	f2c4 0300 	movt	r3, #16384	; 0x4000
  400168:	f240 71ff 	movw	r1, #2047	; 0x7ff
  40016c:	6199      	str	r1, [r3, #24]
  spiptr->SPI_CR = 2 ;                    // Disable
  40016e:	2102      	movs	r1, #2
  400170:	6019      	str	r1, [r3, #0]
  (void) spiptr->SPI_RDR ;                // Dump any rx data
  400172:	6899      	ldr	r1, [r3, #8]
  (void) spiptr->SPI_SR ;                 // Clear error flags
  spiptr->SPI_PTCR = SPI_PTCR_RXTDIS | SPI_PTCR_TXTDIS ;  // Stop tramsfers
  Spi_complete = 1 ;                                      // Indicate completion
  400174:	f240 1208 	movw	r2, #264	; 0x108

  spiptr = SPI ;
  SPI->SPI_IDR = 0x07FF ;                 // All interrupts off
  spiptr->SPI_CR = 2 ;                    // Disable
  (void) spiptr->SPI_RDR ;                // Dump any rx data
  (void) spiptr->SPI_SR ;                 // Clear error flags
  400178:	6919      	ldr	r1, [r3, #16]
  spiptr->SPI_PTCR = SPI_PTCR_RXTDIS | SPI_PTCR_TXTDIS ;  // Stop tramsfers
  40017a:	f240 2102 	movw	r1, #514	; 0x202
  40017e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
  Spi_complete = 1 ;                                      // Indicate completion
  400182:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400186:	2301      	movs	r3, #1
  400188:	6793      	str	r3, [r2, #120]	; 0x78

// Power save
//  PMC->PMC_PCER0 &= ~0x00200000L ;      // Disable peripheral clock to SPI
}
  40018a:	4770      	bx	lr

0040018c <_Z11NMI_Handlerv>:
}; /* gVectors */

/*
 * And here are the weak interrupt handlers.
 */
void NMI_Handler (void) { while(1); }
  40018c:	e7fe      	b.n	40018c <_Z11NMI_Handlerv>
  40018e:	bf00      	nop

00400190 <_Z17HardFault_Handlerv>:
void HardFault_Handler (void) { while(1); }
  400190:	e7fe      	b.n	400190 <_Z17HardFault_Handlerv>
  400192:	bf00      	nop

00400194 <_Z17MemManage_Handlerv>:
void MemManage_Handler (void) { while(1); }
  400194:	e7fe      	b.n	400194 <_Z17MemManage_Handlerv>
  400196:	bf00      	nop

00400198 <_Z16BusFault_Handlerv>:
void BusFault_Handler (void) { while(1); }
  400198:	e7fe      	b.n	400198 <_Z16BusFault_Handlerv>
  40019a:	bf00      	nop

0040019c <_Z18UsageFault_Handlerv>:
void UsageFault_Handler (void) { while(1); }
  40019c:	e7fe      	b.n	40019c <_Z18UsageFault_Handlerv>
  40019e:	bf00      	nop

004001a0 <_Z11SVC_Handlerv>:
void SVC_Handler (void) { while(1); }
  4001a0:	e7fe      	b.n	4001a0 <_Z11SVC_Handlerv>
  4001a2:	bf00      	nop

004001a4 <_Z16DebugMon_Handlerv>:
void DebugMon_Handler (void) { while(1); }
  4001a4:	e7fe      	b.n	4001a4 <_Z16DebugMon_Handlerv>
  4001a6:	bf00      	nop

004001a8 <_Z14PendSV_Handlerv>:
void PendSV_Handler (void) { while(1); }
  4001a8:	e7fe      	b.n	4001a8 <_Z14PendSV_Handlerv>
  4001aa:	bf00      	nop

004001ac <_Z15SysTick_Handlerv>:
void SysTick_Handler (void) { while(1); }
  4001ac:	e7fe      	b.n	4001ac <_Z15SysTick_Handlerv>
  4001ae:	bf00      	nop

004001b0 <_Z15SUPC_IRQHandlerv>:

void SUPC_IRQHandler (void) { while(1); }
  4001b0:	e7fe      	b.n	4001b0 <_Z15SUPC_IRQHandlerv>
  4001b2:	bf00      	nop

004001b4 <_Z15RSTC_IRQHandlerv>:
void RSTC_IRQHandler (void) { while(1); }
  4001b4:	e7fe      	b.n	4001b4 <_Z15RSTC_IRQHandlerv>
  4001b6:	bf00      	nop

004001b8 <_Z14RTC_IRQHandlerv>:
void RTC_IRQHandler (void) { while(1); }
  4001b8:	e7fe      	b.n	4001b8 <_Z14RTC_IRQHandlerv>
  4001ba:	bf00      	nop

004001bc <_Z14RTT_IRQHandlerv>:
void RTT_IRQHandler (void) { while(1); }
  4001bc:	e7fe      	b.n	4001bc <_Z14RTT_IRQHandlerv>
  4001be:	bf00      	nop

004001c0 <_Z14WDT_IRQHandlerv>:
void WDT_IRQHandler (void) { while(1); }
  4001c0:	e7fe      	b.n	4001c0 <_Z14WDT_IRQHandlerv>
  4001c2:	bf00      	nop

004001c4 <_Z14PMC_IRQHandlerv>:
void PMC_IRQHandler (void) { while(1); }
  4001c4:	e7fe      	b.n	4001c4 <_Z14PMC_IRQHandlerv>
  4001c6:	bf00      	nop

004001c8 <_Z15EEFC_IRQHandlerv>:
void EEFC_IRQHandler (void) { while(1); }
  4001c8:	e7fe      	b.n	4001c8 <_Z15EEFC_IRQHandlerv>
  4001ca:	bf00      	nop

004001cc <_Z16UART0_IRQHandlerv>:
void UART0_IRQHandler (void) { while(1); }
  4001cc:	e7fe      	b.n	4001cc <_Z16UART0_IRQHandlerv>
  4001ce:	bf00      	nop

004001d0 <_Z16UART1_IRQHandlerv>:
void UART1_IRQHandler (void) { while(1); }
  4001d0:	e7fe      	b.n	4001d0 <_Z16UART1_IRQHandlerv>
  4001d2:	bf00      	nop

004001d4 <_Z14SMC_IRQHandlerv>:
void SMC_IRQHandler (void) { while(1); }
  4001d4:	e7fe      	b.n	4001d4 <_Z14SMC_IRQHandlerv>
  4001d6:	bf00      	nop

004001d8 <_Z15PIOA_IRQHandlerv>:
void PIOA_IRQHandler (void) { while(1); }
  4001d8:	e7fe      	b.n	4001d8 <_Z15PIOA_IRQHandlerv>
  4001da:	bf00      	nop

004001dc <_Z15PIOB_IRQHandlerv>:
void PIOB_IRQHandler (void) { while(1); }
  4001dc:	e7fe      	b.n	4001dc <_Z15PIOB_IRQHandlerv>
  4001de:	bf00      	nop

004001e0 <_Z15PIOC_IRQHandlerv>:
void PIOC_IRQHandler (void) { while(1); }
  4001e0:	e7fe      	b.n	4001e0 <_Z15PIOC_IRQHandlerv>
  4001e2:	bf00      	nop

004001e4 <_Z17USART0_IRQHandlerv>:
void USART0_IRQHandler (void) { while(1); }
  4001e4:	e7fe      	b.n	4001e4 <_Z17USART0_IRQHandlerv>
  4001e6:	bf00      	nop

004001e8 <_Z17USART1_IRQHandlerv>:
void USART1_IRQHandler (void) { while(1); }
  4001e8:	e7fe      	b.n	4001e8 <_Z17USART1_IRQHandlerv>
  4001ea:	bf00      	nop

004001ec <_Z14MCI_IRQHandlerv>:
void MCI_IRQHandler (void) { while(1); }
  4001ec:	e7fe      	b.n	4001ec <_Z14MCI_IRQHandlerv>
  4001ee:	bf00      	nop

004001f0 <_Z15TWI1_IRQHandlerv>:
// void TWI0_IRQHandler (void) { while(1); }
void TWI1_IRQHandler (void) { while(1); }
  4001f0:	e7fe      	b.n	4001f0 <_Z15TWI1_IRQHandlerv>
  4001f2:	bf00      	nop

004001f4 <_Z14SSC_IRQHandlerv>:
// void SPI_IRQHandler (void) { while(1); }
void SSC_IRQHandler (void) { while(1); }
  4001f4:	e7fe      	b.n	4001f4 <_Z14SSC_IRQHandlerv>
  4001f6:	bf00      	nop

004001f8 <_Z14TC0_IRQHandlerv>:
void TC0_IRQHandler (void) { while(1); }
  4001f8:	e7fe      	b.n	4001f8 <_Z14TC0_IRQHandlerv>
  4001fa:	bf00      	nop

004001fc <_Z14TC1_IRQHandlerv>:
void TC1_IRQHandler (void) { while(1); }
  4001fc:	e7fe      	b.n	4001fc <_Z14TC1_IRQHandlerv>
  4001fe:	bf00      	nop

00400200 <_Z14TC4_IRQHandlerv>:
// void TC2_IRQHandler (void) { while(1); }
// void TC3_IRQHandler (void) { while(1); }
void TC4_IRQHandler (void) { while(1); }
  400200:	e7fe      	b.n	400200 <_Z14TC4_IRQHandlerv>
  400202:	bf00      	nop

00400204 <_Z14TC5_IRQHandlerv>:
void TC5_IRQHandler (void) { while(1); }
  400204:	e7fe      	b.n	400204 <_Z14TC5_IRQHandlerv>
  400206:	bf00      	nop

00400208 <_Z14ADC_IRQHandlerv>:
void ADC_IRQHandler (void) { while(1); }
  400208:	e7fe      	b.n	400208 <_Z14ADC_IRQHandlerv>
  40020a:	bf00      	nop

0040020c <_Z16CRCCU_IRQHandlerv>:
// void DAC_IRQHandler (void) { while(1); }
// void PWM_IRQHandler (void) { while(1); }
void CRCCU_IRQHandler (void) { while(1); }
  40020c:	e7fe      	b.n	40020c <_Z16CRCCU_IRQHandlerv>
  40020e:	bf00      	nop

00400210 <_Z14ACC_IRQHandlerv>:
void ACC_IRQHandler (void) { while(1); }
  400210:	e7fe      	b.n	400210 <_Z14ACC_IRQHandlerv>
  400212:	bf00      	nop

00400214 <_Z15USBD_IRQHandlerv>:
void USBD_IRQHandler (void) { while(1); }
  400214:	e7fe      	b.n	400214 <_Z15USBD_IRQHandlerv>
  400216:	bf00      	nop

00400218 <DAC_IRQHandler>:

extern "C" void DAC_IRQHandler()
{
// Data for PDC must NOT be in flash, PDC needs a RAM source.
#ifndef SIMU
	DACC->DACC_TNPR = (uint32_t) Sine_values ;
  400218:	490b      	ldr	r1, [pc, #44]	; (400248 <DAC_IRQHandler+0x30>)
  40021a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  40021e:	f2c4 0303 	movt	r3, #16387	; 0x4003
  400222:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
#endif
	DACC->DACC_TNCR = 50 ;	// words, 100 16 bit values
	if ( Sound_g.Tone_timer )
  400226:	4a09      	ldr	r2, [pc, #36]	; (40024c <DAC_IRQHandler+0x34>)
{
// Data for PDC must NOT be in flash, PDC needs a RAM source.
#ifndef SIMU
	DACC->DACC_TNPR = (uint32_t) Sine_values ;
#endif
	DACC->DACC_TNCR = 50 ;	// words, 100 16 bit values
  400228:	2132      	movs	r1, #50	; 0x32
  40022a:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
	if ( Sound_g.Tone_timer )
  40022e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  400232:	b139      	cbz	r1, 400244 <DAC_IRQHandler+0x2c>
	{
		if ( --Sound_g.Tone_timer == 0 )
  400234:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  400238:	3901      	subs	r1, #1
  40023a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  40023e:	b909      	cbnz	r1, 400244 <DAC_IRQHandler+0x2c>
		{
			DACC->DACC_IDR = DACC_IDR_ENDTX ;
  400240:	2204      	movs	r2, #4
  400242:	629a      	str	r2, [r3, #40]	; 0x28
  400244:	4770      	bx	lr
  400246:	bf00      	nop
  400248:	20000000 	.word	0x20000000
  40024c:	20000108 	.word	0x20000108

00400250 <TWI0_IRQHandler>:
	__enable_irq() ;
}

extern "C" void TWI0_IRQHandler()
{
	if ( Volume_required >= 0 )
  400250:	4b0b      	ldr	r3, [pc, #44]	; (400280 <TWI0_IRQHandler+0x30>)
  400252:	f9b3 2098 	ldrsh.w	r2, [r3, #152]	; 0x98
  400256:	2a00      	cmp	r2, #0
  400258:	db0b      	blt.n	400272 <TWI0_IRQHandler+0x22>
	{
		TWI0->TWI_THR = Volume_required ;		// Send data
  40025a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40025e:	f2c4 0101 	movt	r1, #16385	; 0x4001
  400262:	634a      	str	r2, [r1, #52]	; 0x34
		Volume_required = -1 ;
  400264:	f04f 32ff 	mov.w	r2, #4294967295
  400268:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		TWI0->TWI_CR = TWI_CR_STOP ;		// Stop Tx
  40026c:	2302      	movs	r3, #2
  40026e:	600b      	str	r3, [r1, #0]
  400270:	4770      	bx	lr
	}
	else
	{
		TWI0->TWI_IDR = TWI_IDR_TXCOMP ;
  400272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400276:	f2c4 0301 	movt	r3, #16385	; 0x4001
  40027a:	2201      	movs	r2, #1
  40027c:	629a      	str	r2, [r3, #40]	; 0x28
  40027e:	4770      	bx	lr
  400280:	20000108 	.word	0x20000108

00400284 <_Z16check_soft_powerv>:

#endif

uint32_t check_soft_power()
{
  if ( PIOC->PIO_PDSR & 0x02000000 )
  400284:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  400288:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40028c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  40028e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
  400292:	d001      	beq.n	400298 <_Z16check_soft_powerv+0x14>
  {
    return e_power_usb ;            // Detected USB
  400294:	2002      	movs	r0, #2
    return e_power_trainer ;
  }
#endif

  return e_power_off;
}
  400296:	4770      	bx	lr
  {
    return e_power_usb ;            // Detected USB
  }

#ifdef REVB
  if ( PIOC->PIO_PDSR & PIO_PC17 )  // Power on
  400298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40029a:	039b      	lsls	r3, r3, #14
  40029c:	d4fb      	bmi.n	400296 <_Z16check_soft_powerv+0x12>
  {
    return e_power_on ;
  }

  if ( PIOA->PIO_PDSR & PIO_PA8 )   // Trainer plugged in
  40029e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  4002a2:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4002a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4002a8:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    return e_power_trainer ;
  4002ac:	bf0c      	ite	eq
  4002ae:	2003      	moveq	r0, #3
  4002b0:	2001      	movne	r0, #1
  4002b2:	4770      	bx	lr

004002b4 <_Z12start_timer4v>:
void start_timer4()
{
  register Tc *ptc ;
  register uint32_t timer ;

  timer = Master_frequency / (2*2000000) ;                // MCK/2 and 2MHz
  4002b4:	f240 1308 	movw	r3, #264	; 0x108
  ptc->TC_CHANNEL[0].TC_IER = TC_IER0_LDRAS ;
}

// Start Timer4 to provide 0.5uS clock for input capture
void start_timer4()
{
  4002b8:	b430      	push	{r4, r5}
  register Tc *ptc ;
  register uint32_t timer ;

  timer = Master_frequency / (2*2000000) ;                // MCK/2 and 2MHz
  4002ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4002be:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
  4002c2:	f64d 6383 	movw	r3, #56963	; 0xde83
  4002c6:	f2c4 331b 	movt	r3, #17179	; 0x431b
  4002ca:	fba3 2000 	umull	r2, r0, r3, r0

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x08000000L ;               // Enable peripheral clock to TC4
  4002ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4002d2:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4002d6:	6915      	ldr	r5, [r2, #16]

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  4002d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  register uint32_t timer ;

  timer = Master_frequency / (2*2000000) ;                // MCK/2 and 2MHz

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x08000000L ;               // Enable peripheral clock to TC4
  4002dc:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
  4002e0:	6115      	str	r5, [r2, #16]

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  4002e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4002e6:	2100      	movs	r1, #0
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;        // Waveform mode
  4002e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x08000000L ;               // Enable peripheral clock to TC4

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  4002ec:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
void start_timer4()
{
  register Tc *ptc ;
  register uint32_t timer ;

  timer = Master_frequency / (2*2000000) ;                // MCK/2 and 2MHz
  4002f0:	0d04      	lsrs	r4, r0, #20
  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x08000000L ;               // Enable peripheral clock to TC4

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  ptc->TC_BMR = 0 ;
  4002f2:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;        // Waveform mode
  ptc->TC_CHANNEL[1].TC_RC = timer ;
  ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  4002f6:	0d40      	lsrs	r0, r0, #21
  PMC->PMC_PCER0 |= 0x08000000L ;               // Enable peripheral clock to TC4

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;        // Waveform mode
  4002f8:	645a      	str	r2, [r3, #68]	; 0x44
  ptc->TC_CHANNEL[1].TC_RC = timer ;
  ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  ptc->TC_CHANNEL[1].TC_CMR = 0x0009C000 ;        // 0000 0000 0000 1001 1100 0000 0100 0000
  4002fa:	f44f 221c 	mov.w	r2, #638976	; 0x9c000

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;        // Waveform mode
  ptc->TC_CHANNEL[1].TC_RC = timer ;
  4002fe:	65dc      	str	r4, [r3, #92]	; 0x5c
  ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  400300:	6558      	str	r0, [r3, #84]	; 0x54
  ptc->TC_CHANNEL[1].TC_CMR = 0x0009C000 ;        // 0000 0000 0000 1001 1100 0000 0100 0000
  400302:	645a      	str	r2, [r3, #68]	; 0x44
                                                                                                                                                                                // MCK/2, set @ RA, Clear @ RC waveform
  ptc->TC_CHANNEL[1].TC_CCR = 5 ;         // Enable clock and trigger it (may only need trigger)
  400304:	2205      	movs	r2, #5
  400306:	641a      	str	r2, [r3, #64]	; 0x40
}
  400308:	bc30      	pop	{r4, r5}
  40030a:	4770      	bx	lr

0040030c <_Z15end_ppm_capturev>:
  start_timer3() ;
}

void end_ppm_capture()
{
  TC1->TC_CHANNEL[0].TC_IDR = TC_IDR0_LDRAS ;
  40030c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400310:	f2c4 0201 	movt	r2, #16385	; 0x4001
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400314:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  400318:	2120      	movs	r1, #32
  40031a:	6291      	str	r1, [r2, #40]	; 0x28
  40031c:	f2ce 0300 	movt	r3, #57344	; 0xe000
  400320:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC_DisableIRQ(TC3_IRQn) ;
}
  400328:	4770      	bx	lr
  40032a:	bf00      	nop

0040032c <_Z14configure_pinsmt>:

void configure_pins( uint32_t pins, uint16_t config )
{
        register Pio *pioptr ;

        pioptr = PIOA + ( ( config & PIN_PORT_MASK ) >> 6) ;
  40032c:	f3c1 1281 	ubfx	r2, r1, #6, #2
  400330:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  400334:	0252      	lsls	r2, r2, #9
  400336:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40033a:	18d3      	adds	r3, r2, r3
        if ( config & PIN_PULLUP )
  40033c:	074a      	lsls	r2, r1, #29
        {
                pioptr->PIO_PPDDR = pins ;
  40033e:	bf4a      	itet	mi
  400340:	f8c3 0090 	strmi.w	r0, [r3, #144]	; 0x90
                pioptr->PIO_PUER = pins ;
        }
        else
        {
                pioptr->PIO_PUDR = pins ;
  400344:	6618      	strpl	r0, [r3, #96]	; 0x60

        pioptr = PIOA + ( ( config & PIN_PORT_MASK ) >> 6) ;
        if ( config & PIN_PULLUP )
        {
                pioptr->PIO_PPDDR = pins ;
                pioptr->PIO_PUER = pins ;
  400346:	6658      	strmi	r0, [r3, #100]	; 0x64
        else
        {
                pioptr->PIO_PUDR = pins ;
        }

        if ( config & PIN_PULLDOWN )
  400348:	070a      	lsls	r2, r1, #28
        {
                pioptr->PIO_PUDR = pins ;
  40034a:	bf4a      	itet	mi
  40034c:	6618      	strmi	r0, [r3, #96]	; 0x60
                pioptr->PIO_PPDER = pins ;
        }
        else
        {
                pioptr->PIO_PPDDR = pins ;
  40034e:	f8c3 0090 	strpl.w	r0, [r3, #144]	; 0x90
        }

        if ( config & PIN_PULLDOWN )
        {
                pioptr->PIO_PUDR = pins ;
                pioptr->PIO_PPDER = pins ;
  400352:	f8c3 0094 	strmi.w	r0, [r3, #148]	; 0x94
        else
        {
                pioptr->PIO_PPDDR = pins ;
        }

        if ( config & PIN_HIGH )
  400356:	05ca      	lsls	r2, r1, #23
        {
                pioptr->PIO_SODR = pins ;
  400358:	bf4c      	ite	mi
  40035a:	6318      	strmi	r0, [r3, #48]	; 0x30
        }
        else
        {
                pioptr->PIO_CODR = pins ;
  40035c:	6358      	strpl	r0, [r3, #52]	; 0x34
        }

        if ( config & PIN_INPUT )
  40035e:	078a      	lsls	r2, r1, #30
        {
                pioptr->PIO_ODR = pins ;
  400360:	bf4c      	ite	mi
  400362:	6158      	strmi	r0, [r3, #20]
        }
        else
        {
                pioptr->PIO_OER = pins ;
  400364:	6118      	strpl	r0, [r3, #16]
        }

        if ( config & PIN_PERI_MASK_L )
        {
                pioptr->PIO_ABCDSR[0] |= pins ;
  400366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        else
        {
                pioptr->PIO_OER = pins ;
        }

        if ( config & PIN_PERI_MASK_L )
  400368:	f011 0f10 	tst.w	r1, #16
        {
                pioptr->PIO_ABCDSR[0] |= pins ;
  40036c:	bf14      	ite	ne
  40036e:	4302      	orrne	r2, r0
        }
        else
        {
                pioptr->PIO_ABCDSR[0] &= ~pins ;
  400370:	4382      	biceq	r2, r0
  400372:	671a      	str	r2, [r3, #112]	; 0x70
        }
        if ( config & PIN_PERI_MASK_H )
        {
                pioptr->PIO_ABCDSR[1] |= pins ;
  400374:	6f5a      	ldr	r2, [r3, #116]	; 0x74
        }
        else
        {
                pioptr->PIO_ABCDSR[0] &= ~pins ;
        }
        if ( config & PIN_PERI_MASK_H )
  400376:	f011 0f20 	tst.w	r1, #32
        {
                pioptr->PIO_ABCDSR[1] |= pins ;
  40037a:	bf14      	ite	ne
  40037c:	4302      	orrne	r2, r0
        }
        else
        {
                pioptr->PIO_ABCDSR[1] &= ~pins ;
  40037e:	4382      	biceq	r2, r0
  400380:	675a      	str	r2, [r3, #116]	; 0x74
        }

        if ( config & PIN_ENABLE )
  400382:	07ca      	lsls	r2, r1, #31
        {
                pioptr->PIO_PER = pins ;
  400384:	bf4c      	ite	mi
  400386:	6018      	strmi	r0, [r3, #0]
        }
        else
        {
                pioptr->PIO_PDR = pins ;
  400388:	6058      	strpl	r0, [r3, #4]
  40038a:	4770      	bx	lr

0040038c <_Z8init_pwmv>:
// PWML2, output as peripheral C on PA16, is for HAPTIC
// For testing, just drive it out with PWM
// PWML1 for PPM2 output as peripheral B on PC15
// For testing, just drive it out with PWM
void init_pwm()
{
  40038c:	b510      	push	{r4, lr}
  register Pwm *pwmptr ;
  register uint32_t timer ;

  PMC->PMC_PCER0 |= ( 1 << ID_PWM ) ;           // Enable peripheral clock to PWM
  40038e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400392:	f2c4 020e 	movt	r2, #16398	; 0x400e
  400396:	6911      	ldr	r1, [r2, #16]

  MATRIX->CCFG_SYSIO |= 0x00000020L ;                             // Disable TDO let PB5 work!
  400398:	f44f 7300 	mov.w	r3, #512	; 0x200
void init_pwm()
{
  register Pwm *pwmptr ;
  register uint32_t timer ;

  PMC->PMC_PCER0 |= ( 1 << ID_PWM ) ;           // Enable peripheral clock to PWM
  40039c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000

  MATRIX->CCFG_SYSIO |= 0x00000020L ;                             // Disable TDO let PB5 work!
  4003a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
void init_pwm()
{
  register Pwm *pwmptr ;
  register uint32_t timer ;

  PMC->PMC_PCER0 |= ( 1 << ID_PWM ) ;           // Enable peripheral clock to PWM
  4003a4:	6111      	str	r1, [r2, #16]

  MATRIX->CCFG_SYSIO |= 0x00000020L ;                             // Disable TDO let PB5 work!
  4003a6:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114

  /* Configure PIO */
#ifdef REVB
  configure_pins( PIO_PA16, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_C | PIN_PORTA | PIN_NO_PULLUP ) ;
  4003aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  register Pwm *pwmptr ;
  register uint32_t timer ;

  PMC->PMC_PCER0 |= ( 1 << ID_PWM ) ;           // Enable peripheral clock to PWM

  MATRIX->CCFG_SYSIO |= 0x00000020L ;                             // Disable TDO let PB5 work!
  4003ae:	f042 0220 	orr.w	r2, r2, #32
  4003b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Configure PIO */
#ifdef REVB
  configure_pins( PIO_PA16, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_C | PIN_PORTA | PIN_NO_PULLUP ) ;
  4003b6:	2122      	movs	r1, #34	; 0x22
  4003b8:	f7ff ffb8 	bl	40032c <_Z14configure_pinsmt>
  register Pio *pioptr = PIOB ;
  pioptr->PIO_PER = 0x00000020L ;         // Enable bit B5
  pioptr->PIO_ODR = 0x00000020L ;         // set as input
#endif

  configure_pins( PIO_PC18, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_B | PIN_PORTC | PIN_NO_PULLUP ) ;
  4003bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4003c0:	2192      	movs	r1, #146	; 0x92
  4003c2:	f7ff ffb3 	bl	40032c <_Z14configure_pinsmt>

#ifdef REVB
  configure_pins( PIO_PC15, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_B | PIN_PORTC | PIN_NO_PULLUP ) ;
  4003c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4003ca:	2192      	movs	r1, #146	; 0x92
  4003cc:	f7ff ffae 	bl	40032c <_Z14configure_pinsmt>
  configure_pins( PIO_PC22, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_B | PIN_PORTC | PIN_NO_PULLUP ) ;
  4003d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  4003d4:	2192      	movs	r1, #146	; 0x92
  4003d6:	f7ff ffa9 	bl	40032c <_Z14configure_pinsmt>
#endif

  // Configure clock - depends on MCK frequency
  timer = Master_frequency / 2000000 ;
  4003da:	f240 1308 	movw	r3, #264	; 0x108
  4003de:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4003e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
  timer |= ( Master_frequency / ( 32* 10000 ) ) << 16 ;
  4003e6:	f241 7159 	movw	r1, #5977	; 0x1759
  4003ea:	f2cd 11b7 	movt	r1, #53687	; 0xd1b7
  4003ee:	fba1 0402 	umull	r0, r4, r1, r2
  configure_pins( PIO_PC15, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_B | PIN_PORTC | PIN_NO_PULLUP ) ;
  configure_pins( PIO_PC22, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_B | PIN_PORTC | PIN_NO_PULLUP ) ;
#endif

  // Configure clock - depends on MCK frequency
  timer = Master_frequency / 2000000 ;
  4003f2:	f64d 6383 	movw	r3, #56963	; 0xde83
  4003f6:	f2c4 331b 	movt	r3, #17179	; 0x431b
  4003fa:	fba3 1302 	umull	r1, r3, r3, r2
  timer |= ( Master_frequency / ( 32* 10000 ) ) << 16 ;
  4003fe:	0ca4      	lsrs	r4, r4, #18
  400400:	0424      	lsls	r4, r4, #16
  400402:	ea44 44d3 	orr.w	r4, r4, r3, lsr #19
  timer &= 0x00FF00FF ;
  400406:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff

  pwmptr = PWM ;
  pwmptr->PWM_CLK = 0x05000000 | timer ;  // MCK for DIVA, DIVA = 18 gives 0.5uS clock period @35MHz                                                                                                                                              // MCK/32 / timer = 10000Hz for CLKB
  40040a:	2300      	movs	r3, #0
  40040c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  400410:	f044 64a0 	orr.w	r4, r4, #83886080	; 0x5000000
  400414:	601c      	str	r4, [r3, #0]

  // PWM0 for LED backlight
  pwmptr->PWM_CH_NUM[0].PWM_CMR = 0x0000000C ;    // CLKB
  pwmptr->PWM_CH_NUM[0].PWM_CPDR = 100 ;                  // Period
  pwmptr->PWM_CH_NUM[0].PWM_CPDRUPD = 100 ;               // Period
  pwmptr->PWM_CH_NUM[0].PWM_CDTY = 40 ;                           // Duty
  400416:	2228      	movs	r2, #40	; 0x28
  pwmptr = PWM ;
  pwmptr->PWM_CLK = 0x05000000 | timer ;  // MCK for DIVA, DIVA = 18 gives 0.5uS clock period @35MHz                                                                                                                                              // MCK/32 / timer = 10000Hz for CLKB

  // PWM0 for LED backlight
  pwmptr->PWM_CH_NUM[0].PWM_CMR = 0x0000000C ;    // CLKB
  pwmptr->PWM_CH_NUM[0].PWM_CPDR = 100 ;                  // Period
  400418:	2164      	movs	r1, #100	; 0x64

  pwmptr = PWM ;
  pwmptr->PWM_CLK = 0x05000000 | timer ;  // MCK for DIVA, DIVA = 18 gives 0.5uS clock period @35MHz                                                                                                                                              // MCK/32 / timer = 10000Hz for CLKB

  // PWM0 for LED backlight
  pwmptr->PWM_CH_NUM[0].PWM_CMR = 0x0000000C ;    // CLKB
  40041a:	200c      	movs	r0, #12
  pwmptr->PWM_CH_NUM[0].PWM_CPDR = 100 ;                  // Period
  pwmptr->PWM_CH_NUM[0].PWM_CPDRUPD = 100 ;               // Period
  pwmptr->PWM_CH_NUM[0].PWM_CDTY = 40 ;                           // Duty
  pwmptr->PWM_CH_NUM[0].PWM_CDTYUPD = 40 ;                // Duty
  pwmptr->PWM_ENA = PWM_ENA_CHID0 ;                                               // Enable channel 0
  40041c:	2401      	movs	r4, #1

  pwmptr = PWM ;
  pwmptr->PWM_CLK = 0x05000000 | timer ;  // MCK for DIVA, DIVA = 18 gives 0.5uS clock period @35MHz                                                                                                                                              // MCK/32 / timer = 10000Hz for CLKB

  // PWM0 for LED backlight
  pwmptr->PWM_CH_NUM[0].PWM_CMR = 0x0000000C ;    // CLKB
  40041e:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  pwmptr->PWM_CH_NUM[0].PWM_CPDR = 100 ;                  // Period
  400422:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
  pwmptr->PWM_CH_NUM[0].PWM_CPDRUPD = 100 ;               // Period
  400426:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  pwmptr->PWM_CH_NUM[0].PWM_CDTY = 40 ;                           // Duty
  40042a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  pwmptr->PWM_CH_NUM[0].PWM_CDTYUPD = 40 ;                // Duty
  40042e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  pwmptr->PWM_ENA = PWM_ENA_CHID0 ;                                               // Enable channel 0
  400432:	605c      	str	r4, [r3, #4]
  pwmptr->PWM_CH_NUM[1].PWM_CMR = 0x0000000C ;    // CLKB
  pwmptr->PWM_CH_NUM[1].PWM_CPDR = 100 ;                  // Period
  pwmptr->PWM_CH_NUM[1].PWM_CPDRUPD = 100 ;               // Period
  pwmptr->PWM_CH_NUM[1].PWM_CDTY = 40 ;                           // Duty
  pwmptr->PWM_CH_NUM[1].PWM_CDTYUPD = 40 ;                // Duty
  pwmptr->PWM_ENA = PWM_ENA_CHID1 ;                                               // Enable channel 1
  400434:	2402      	movs	r4, #2
  pwmptr->PWM_CH_NUM[0].PWM_CDTYUPD = 40 ;                // Duty
  pwmptr->PWM_ENA = PWM_ENA_CHID0 ;                                               // Enable channel 0

#ifdef REVB
  // PWM1 for PPM2 output 100Hz test
  pwmptr->PWM_CH_NUM[1].PWM_CMR = 0x0000000C ;    // CLKB
  400436:	f8c3 0220 	str.w	r0, [r3, #544]	; 0x220
  pwmptr->PWM_CH_NUM[1].PWM_CPDR = 100 ;                  // Period
  40043a:	f8c3 122c 	str.w	r1, [r3, #556]	; 0x22c
  pwmptr->PWM_CH_NUM[1].PWM_CPDRUPD = 100 ;               // Period
  40043e:	f8c3 1230 	str.w	r1, [r3, #560]	; 0x230
  pwmptr->PWM_CH_NUM[1].PWM_CDTY = 40 ;                           // Duty
  400442:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
  pwmptr->PWM_CH_NUM[1].PWM_CDTYUPD = 40 ;                // Duty
  400446:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
  pwmptr->PWM_ENA = PWM_ENA_CHID1 ;                                               // Enable channel 1
  40044a:	605c      	str	r4, [r3, #4]
#endif

#ifdef REVB
  // PWM2 for HAPTIC drive 100Hz test
  pwmptr->PWM_CH_NUM[2].PWM_CMR = 0x0000000C ;    // CLKB
  40044c:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
  pwmptr->PWM_CH_NUM[2].PWM_CPDR = 100 ;                  // Period
  400450:	f8c3 124c 	str.w	r1, [r3, #588]	; 0x24c
  pwmptr->PWM_CH_NUM[2].PWM_CPDRUPD = 100 ;               // Period
  400454:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  pwmptr->PWM_CH_NUM[2].PWM_CDTY = 40 ;                           // Duty
  400458:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  pwmptr->PWM_CH_NUM[2].PWM_CDTYUPD = 40 ;                // Duty
  40045c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
  pwmptr->PWM_OOV &= ~0x00040000 ;      // Force low
  400460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  400462:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  400466:	645a      	str	r2, [r3, #68]	; 0x44
  pwmptr->PWM_OSS = 0x00040000 ;  // Force low
  400468:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40046c:	64da      	str	r2, [r3, #76]	; 0x4c
  // pwmptr->PWM_ENA = PWM_ENA_CHID2 ;                                               // Enable channel 2 // TODO on REVA?
#endif
}
  40046e:	bd10      	pop	{r4, pc}

00400470 <_Z17start_ppm_capturev>:
    }
  }
}

void start_ppm_capture()
{
  400470:	b538      	push	{r3, r4, r5, lr}
  start_timer4() ;
  400472:	f7ff ff1f 	bl	4002b4 <_Z12start_timer4v>
inline void start_timer3()
{
  register Tc *ptc ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x04000000L ;               // Enable peripheral clock to TC3
  400476:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40047a:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40047e:	6908      	ldr	r0, [r1, #16]

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  400480:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  ptc->TC_BMR = 2 ;
  ptc->TC_CHANNEL[0].TC_CMR = 0x00000000 ;        // Capture mode
  ptc->TC_CHANNEL[0].TC_CMR = 0x00090005 ;        // 0000 0000 0000 1001 0000 0000 0000 0101, XC0, A rise, b fall
  400484:	2305      	movs	r3, #5

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x04000000L ;               // Enable peripheral clock to TC3

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  400486:	f2c4 0401 	movt	r4, #16385	; 0x4001
  40048a:	2200      	movs	r2, #0
inline void start_timer3()
{
  register Tc *ptc ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x04000000L ;               // Enable peripheral clock to TC3
  40048c:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  ptc->TC_BMR = 2 ;
  ptc->TC_CHANNEL[0].TC_CMR = 0x00000000 ;        // Capture mode
  ptc->TC_CHANNEL[0].TC_CMR = 0x00090005 ;        // 0000 0000 0000 1001 0000 0000 0000 0101, XC0, A rise, b fall
  400490:	f2c0 0309 	movt	r3, #9
  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x04000000L ;               // Enable peripheral clock to TC3

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  ptc->TC_BMR = 2 ;
  400494:	2502      	movs	r5, #2
inline void start_timer3()
{
  register Tc *ptc ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x04000000L ;               // Enable peripheral clock to TC3
  400496:	6108      	str	r0, [r1, #16]

  ptc = TC1 ;           // Tc block 1 (TC3-5)
  ptc->TC_BCR = 0 ;                       // No sync
  400498:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
  ptc->TC_BMR = 2 ;
  40049c:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
  ptc->TC_CHANNEL[0].TC_CMR = 0x00000000 ;        // Capture mode
  4004a0:	6062      	str	r2, [r4, #4]
  ptc->TC_CHANNEL[0].TC_CMR = 0x00090005 ;        // 0000 0000 0000 1001 0000 0000 0000 0101, XC0, A rise, b fall
  4004a2:	6063      	str	r3, [r4, #4]
  ptc->TC_CHANNEL[0].TC_CCR = 5 ;         // Enable clock and trigger it (may only need trigger)
  4004a4:	2305      	movs	r3, #5
  4004a6:	6023      	str	r3, [r4, #0]

  configure_pins( PIO_PC23, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_B | PIN_PORTC | PIN_PULLUP ) ;
  4004a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  4004ac:	2196      	movs	r1, #150	; 0x96
  4004ae:	f7ff ff3d 	bl	40032c <_Z14configure_pinsmt>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4004b2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  4004b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
  4004ba:	22f0      	movs	r2, #240	; 0xf0
  4004bc:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  4004c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4004c4:	601a      	str	r2, [r3, #0]

  NVIC_SetPriority( TC3_IRQn, 15 ) ; // Low ppiority interrupt
  NVIC_EnableIRQ(TC3_IRQn) ;
  ptc->TC_CHANNEL[0].TC_IER = TC_IER0_LDRAS ;
  4004c6:	2320      	movs	r3, #32
  4004c8:	6263      	str	r3, [r4, #36]	; 0x24

void start_ppm_capture()
{
  start_timer4() ;
  start_timer3() ;
}
  4004ca:	bd38      	pop	{r3, r4, r5, pc}

004004cc <_Z14soft_power_offv>:

// turn off soft power
void soft_power_off()
{
#ifdef REVB
  configure_pins( PIO_PA8, PIN_ENABLE | PIN_OUTPUT | PIN_LOW | PIN_PORTA | PIN_NO_PULLUP ) ;
  4004cc:	f44f 7080 	mov.w	r0, #256	; 0x100
  4004d0:	2101      	movs	r1, #1
  4004d2:	e72b      	b.n	40032c <_Z14configure_pinsmt>

004004d4 <_Z9read_keysv>:
uint32_t read_keys()
{
  register uint32_t x;
  register uint32_t y;

  x = PIOC->PIO_PDSR << 1; // 6 LEFT, 5 RIGHT, 4 DOWN, 3 UP ()
  4004d4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  4004d8:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4004dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4004de:	005b      	lsls	r3, r3, #1

#ifdef REVB
  y = x & 0x00000020; // RIGHT
  4004e0:	f003 0020 	and.w	r0, r3, #32
  if ( x & 0x00000004 )
  4004e4:	075a      	lsls	r2, r3, #29
  {
    y |= 0x00000010; // UP
  4004e6:	bf48      	it	mi
  4004e8:	f040 0010 	orrmi.w	r0, r0, #16
  }
  if ( x & 0x00000010 )
  4004ec:	06d9      	lsls	r1, r3, #27
  {
    y |= 0x00000040; // LEFT
  4004ee:	bf48      	it	mi
  4004f0:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  }
  if ( x & 0x00000040 )
  4004f4:	065a      	lsls	r2, r3, #25
  if (x & 0x00000010) {
    y |= 0x00000008;
  }
#endif
#ifdef REVB
  if ( PIOC->PIO_PDSR & 0x01000000 )
  4004f6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  4004fa:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4004fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    y |= 0x00000040; // LEFT
  }
  if ( x & 0x00000040 )
  {
    y |= 0x00000008; // DOWN
  400500:	bf48      	it	mi
  400502:	f040 0008 	orrmi.w	r0, r0, #8
  if (x & 0x00000010) {
    y |= 0x00000008;
  }
#endif
#ifdef REVB
  if ( PIOC->PIO_PDSR & 0x01000000 )
  400506:	01db      	lsls	r3, r3, #7
#endif
  {
    y |= 4; // EXIT
  }
#ifdef REVB
  if ( PIOB->PIO_PDSR & 0x000000020 )
  400508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40050c:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  if ( PIOC->PIO_PDSR & 0x01000000 )
#else
  if (PIOA->PIO_PDSR & 0x80000000)
#endif
  {
    y |= 4; // EXIT
  400512:	bf48      	it	mi
  400514:	f040 0004 	orrmi.w	r0, r0, #4
  }
#ifdef REVB
  if ( PIOB->PIO_PDSR & 0x000000020 )
  400518:	0699      	lsls	r1, r3, #26
#else
  if (PIOB->PIO_PDSR & 0x000000040)
#endif
  {
    y |= 2; // MENU
  40051a:	bf48      	it	mi
  40051c:	f040 0002 	orrmi.w	r0, r0, #2
  }

  return y ;
}
  400520:	4770      	bx	lr
  400522:	bf00      	nop

00400524 <_Z10read_trimsv>:
  uint32_t trims;
  uint32_t trima;

  trims = 0;

  trima = PIOA->PIO_PDSR;
  400524:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  400528:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40052c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
uint32_t read_trims()
{
  uint32_t trims;
  uint32_t trima;

  trims = 0;
  40052e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400532:	bf14      	ite	ne
  400534:	2000      	movne	r0, #0
  400536:	2001      	moveq	r0, #1
    trims |= 1;
  }

// TRIM_LV_DOWN  PA27 (PA24)
#ifdef REVB
  if ((trima & 0x01000000) == 0)
  400538:	01da      	lsls	r2, r3, #7
#else
  if ( ( trima & 0x08000000 ) == 0 )
#endif
  {
    trims |= 4;
  40053a:	bf58      	it	pl
  40053c:	f040 0004 	orrpl.w	r0, r0, #4
  }

// TRIM_RV_UP    PA30 (PA1)
#ifdef REVB
  if ((trima & 0x00000002) == 0)
  400540:	0799      	lsls	r1, r3, #30
#else
  if ( ( trima & 0x40000000 ) == 0 )
#endif
  {
    trims |= 0x20;
  400542:	bf58      	it	pl
  400544:	f040 0020 	orrpl.w	r0, r0, #32
  }

// TRIM_RH_DOWN    PA29 (PA0)
#ifdef REVB
  if ((trima & 0x00000001) == 0)
  400548:	07da      	lsls	r2, r3, #31
  {
    trims |= 0x40;
  }

// TRIM_LH_UP PB4
  if ((PIOB->PIO_PDSR & 0x10) == 0) {
  40054a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40054e:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  if ((trima & 0x00000001) == 0)
#else
  if ( ( trima & 0x20000000 ) == 0 )
#endif
  {
    trims |= 0x40;
  400554:	bf58      	it	pl
  400556:	f040 0040 	orrpl.w	r0, r0, #64	; 0x40
  }

// TRIM_LH_UP PB4
  if ((PIOB->PIO_PDSR & 0x10) == 0) {
  40055a:	06db      	lsls	r3, r3, #27
    trims |= 2;
  }

  trima = PIOC->PIO_PDSR;
  40055c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  400560:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    trims |= 0x40;
  }

// TRIM_LH_UP PB4
  if ((PIOB->PIO_PDSR & 0x10) == 0) {
    trims |= 2;
  400566:	bf58      	it	pl
  400568:	f040 0002 	orrpl.w	r0, r0, #2
  }

  trima = PIOC->PIO_PDSR;
// TRIM_LV_UP   PC28
  if ((trima & 0x10000000) == 0) {
  40056c:	00d9      	lsls	r1, r3, #3
    trims |= 8;
  40056e:	bf58      	it	pl
  400570:	f040 0008 	orrpl.w	r0, r0, #8
  }

// TRIM_RV_DOWN   PC10
  if ((trima & 0x00000400) == 0) {
  400574:	055a      	lsls	r2, r3, #21
    trims |= 0x10;
  400576:	bf58      	it	pl
  400578:	f040 0010 	orrpl.w	r0, r0, #16
  }

// TRIM_RH_UP   PC9
  if ((trima & 0x00000200) == 0) {
  40057c:	0599      	lsls	r1, r3, #22
    trims |= 0x80;
  40057e:	bf58      	it	pl
  400580:	f040 0080 	orrpl.w	r0, r0, #128	; 0x80
  }

  return trims;
}
  400584:	4770      	bx	lr
  400586:	bf00      	nop

00400588 <_Z7keyDownv>:

uint8_t keyDown()
{
  400588:	b508      	push	{r3, lr}
  return ~read_keys() & 0x7E ;
  40058a:	f7ff ffa3 	bl	4004d4 <_Z9read_keysv>
  40058e:	43c0      	mvns	r0, r0
  400590:	f000 007e 	and.w	r0, r0, #126	; 0x7e
}
  400594:	bd08      	pop	{r3, pc}
  400596:	bf00      	nop

00400598 <_Z8keyState8EnumKeys>:
  register uint32_t a ;
  register uint32_t c ;

  CPU_UINT xxx = 0;

  if (enuk < (int) DIM(keys)) return keys[enuk].state() ? 1 : 0;
  400598:	280d      	cmp	r0, #13
  40059a:	d80b      	bhi.n	4005b4 <_Z8keyState8EnumKeys+0x1c>
  uint8_t m_dblcnt:2;
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  40059c:	4b22      	ldr	r3, [pc, #136]	; (400628 <_Z8keyState8EnumKeys+0x90>)
  40059e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4005a2:	5c18      	ldrb	r0, [r3, r0]
  4005a4:	f000 000f 	and.w	r0, r0, #15
  4005a8:	f1a0 010f 	sub.w	r1, r0, #15
  4005ac:	4248      	negs	r0, r1
  4005ae:	eb40 0001 	adc.w	r0, r0, r1
  4005b2:	4770      	bx	lr

  a = PIOA->PIO_PDSR ;
  4005b4:	f44f 6260 	mov.w	r2, #3584	; 0xe00
  c = PIOC->PIO_PDSR ;
  4005b8:	f44f 5390 	mov.w	r3, #4608	; 0x1200

  CPU_UINT xxx = 0;

  if (enuk < (int) DIM(keys)) return keys[enuk].state() ? 1 : 0;

  a = PIOA->PIO_PDSR ;
  4005bc:	f2c4 020e 	movt	r2, #16398	; 0x400e
  c = PIOC->PIO_PDSR ;
  4005c0:	f2c4 030e 	movt	r3, #16398	; 0x400e

  switch ((uint8_t) enuk) {
  4005c4:	380e      	subs	r0, #14

  CPU_UINT xxx = 0;

  if (enuk < (int) DIM(keys)) return keys[enuk].state() ? 1 : 0;

  a = PIOA->PIO_PDSR ;
  4005c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  c = PIOC->PIO_PDSR ;
  4005c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  switch ((uint8_t) enuk) {
  4005ca:	2808      	cmp	r0, #8
  4005cc:	d80c      	bhi.n	4005e8 <_Z8keyState8EnumKeys+0x50>
  4005ce:	e8df f000 	tbb	[pc, r0]
  4005d2:	100d      	.short	0x100d
  4005d4:	201a1613 	.word	0x201a1613
  4005d8:	2724      	.short	0x2724
  4005da:	05          	.byte	0x05
  4005db:	00          	.byte	0x00
      xxx = a & 0x10000000; // SW_TCUT     PA28
#endif
      break;

    case SW_Trainer:
      xxx = c & 0x00000100; // SW-TRAIN    PC8
  4005dc:	f403 7080 	and.w	r0, r3, #256	; 0x100
uint8_t keyDown()
{
  return ~read_keys() & 0x7E ;
}

extern uint32_t keyState(EnumKeys enuk)
  4005e0:	3000      	adds	r0, #0
  4005e2:	bf18      	it	ne
  4005e4:	2001      	movne	r0, #1
  4005e6:	4770      	bx	lr
  }

  if (xxx) {
    return 1;
  }
  return 0;
  4005e8:	2000      	movs	r0, #0
}
  4005ea:	4770      	bx	lr
      xxx = c & 0x00010000; // SW_GEAR     PC16
      break;

#ifdef REVB
    case SW_ThrCt:
      xxx = c & 0x00100000; // SW_TCUT     PC20
  4005ec:	f403 1080 	and.w	r0, r3, #1048576	; 0x100000
  4005f0:	e7f6      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
    case SW_AileDR:
      xxx = a & 0x00000004; // AIL-DR  PA2
      break;

    case SW_RuddDR:
      xxx = a & 0x00008000; // RUN_DR   PA15
  4005f2:	f402 4000 	and.w	r0, r2, #32768	; 0x8000
  4005f6:	e7f3      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
  c = PIOC->PIO_PDSR ;

  switch ((uint8_t) enuk) {
#ifdef REVB
    case SW_ElevDR:
      xxx = c & 0x80000000; // ELE_DR   PC31
  4005f8:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
  4005fc:	e7f0      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
      //     INP_G_ID1 INP_E_ID2
      // id0    0        1
      // id1    1        1
      // id2    1        0
    case SW_ID0:
      xxx = ~c & 0x00004000; // SW_IDL1     PC14
  4005fe:	43db      	mvns	r3, r3
  400600:	f403 4080 	and.w	r0, r3, #16384	; 0x4000
  400604:	e7ec      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
      break;
    case SW_ID1:
      xxx = (c & 0x00004000);
      if (xxx) xxx = (c & 0x00000800);
  400606:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
  40060a:	d0ee      	beq.n	4005ea <_Z8keyState8EnumKeys+0x52>
      break;
    case SW_ID2:
      xxx = ~c & 0x00000800; // SW_IDL2     PC11
  40060c:	f403 6000 	and.w	r0, r3, #2048	; 0x800
  400610:	e7e6      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
  400612:	43db      	mvns	r3, r3
  400614:	f403 6000 	and.w	r0, r3, #2048	; 0x800
  400618:	e7e2      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
      xxx = a & 0x00000100; // ELE_DR   PA8
#endif
      break;

    case SW_AileDR:
      xxx = a & 0x00000004; // AIL-DR  PA2
  40061a:	f002 0004 	and.w	r0, r2, #4
  40061e:	e7df      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
    case SW_ID2:
      xxx = ~c & 0x00000800; // SW_IDL2     PC11
      break;

    case SW_Gear:
      xxx = c & 0x00010000; // SW_GEAR     PC16
  400620:	f403 3080 	and.w	r0, r3, #65536	; 0x10000
  400624:	e7dc      	b.n	4005e0 <_Z8keyState8EnumKeys+0x48>
  400626:	bf00      	nop
  400628:	200001a8 	.word	0x200001a8

0040062c <_Z10read_9_adcv>:
uint16_t maxTemperature ;          // Raw temp reading

// Read 8 (9 for REVB) ADC channels
// Documented bug, must do them 1 by 1
void read_9_adc()
{
  40062c:	b410      	push	{r4}
  register Adc *padc;
  register uint32_t y;
  register uint32_t x;

  padc = ADC;
  y = padc->ADC_ISR; // Clear EOC flags
  40062e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400632:	f2c4 0103 	movt	r1, #16387	; 0x4003
  400636:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400638:	2009      	movs	r0, #9
  for (y = NUMBER_ANALOG+1; --y > 0;) {
    padc->ADC_CR = 2; // Start conversion
  40063a:	2402      	movs	r4, #2
    x = 0;
    while ((padc->ADC_ISR & 0x01000000) == 0) {
  40063c:	f244 2341 	movw	r3, #16961	; 0x4241
  register uint32_t x;

  padc = ADC;
  y = padc->ADC_ISR; // Clear EOC flags
  for (y = NUMBER_ANALOG+1; --y > 0;) {
    padc->ADC_CR = 2; // Start conversion
  400640:	600c      	str	r4, [r1, #0]
    x = 0;
    while ((padc->ADC_ISR & 0x01000000) == 0) {
  400642:	f2c0 030f 	movt	r3, #15
  400646:	e001      	b.n	40064c <_Z10read_9_adcv+0x20>
      // wait for DRDY flag
      if (++x > 1000000) {
  400648:	3b01      	subs	r3, #1
  40064a:	d002      	beq.n	400652 <_Z10read_9_adcv+0x26>
  padc = ADC;
  y = padc->ADC_ISR; // Clear EOC flags
  for (y = NUMBER_ANALOG+1; --y > 0;) {
    padc->ADC_CR = 2; // Start conversion
    x = 0;
    while ((padc->ADC_ISR & 0x01000000) == 0) {
  40064c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40064e:	01d2      	lsls	r2, r2, #7
  400650:	d5fa      	bpl.n	400648 <_Z10read_9_adcv+0x1c>
      // wait for DRDY flag
      if (++x > 1000000) {
        break; // Software timeout
      }
    }
    x = padc->ADC_LCDR; // Clear DRSY flag
  400652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  register uint32_t y;
  register uint32_t x;

  padc = ADC;
  y = padc->ADC_ISR; // Clear EOC flags
  for (y = NUMBER_ANALOG+1; --y > 0;) {
  400656:	3801      	subs	r0, #1
      // wait for DRDY flag
      if (++x > 1000000) {
        break; // Software timeout
      }
    }
    x = padc->ADC_LCDR; // Clear DRSY flag
  400658:	6a0a      	ldr	r2, [r1, #32]
  40065a:	f2c4 0303 	movt	r3, #16387	; 0x4003
  register uint32_t y;
  register uint32_t x;

  padc = ADC;
  y = padc->ADC_ISR; // Clear EOC flags
  for (y = NUMBER_ANALOG+1; --y > 0;) {
  40065e:	d1ed      	bne.n	40063c <_Z10read_9_adcv+0x10>
      }
    }
    x = padc->ADC_LCDR; // Clear DRSY flag
  }
  // Next bit may be done using the PDC
  Analog_values[0] = ADC->ADC_CDR1;
  400660:	6d59      	ldr	r1, [r3, #84]	; 0x54
  400662:	4a18      	ldr	r2, [pc, #96]	; (4006c4 <_Z10read_9_adcv+0x98>)
  400664:	f8a2 10cc 	strh.w	r1, [r2, #204]	; 0xcc
  Analog_values[1] = ADC->ADC_CDR2;
  400668:	6d98      	ldr	r0, [r3, #88]	; 0x58

#ifdef REVB
  Analog_values[8] = ADC->ADC_CDR8 ;
#endif

  Temperature = ( Temperature * 7 + ADC->ADC_CDR15 ) >> 3 ;     // Filter it
  40066a:	f8b2 10de 	ldrh.w	r1, [r2, #222]	; 0xde
    }
    x = padc->ADC_LCDR; // Clear DRSY flag
  }
  // Next bit may be done using the PDC
  Analog_values[0] = ADC->ADC_CDR1;
  Analog_values[1] = ADC->ADC_CDR2;
  40066e:	f8a2 00ce 	strh.w	r0, [r2, #206]	; 0xce
  Analog_values[2] = ADC->ADC_CDR3;
  400672:	6dd8      	ldr	r0, [r3, #92]	; 0x5c

#ifdef REVB
  Analog_values[8] = ADC->ADC_CDR8 ;
#endif

  Temperature = ( Temperature * 7 + ADC->ADC_CDR15 ) >> 3 ;     // Filter it
  400674:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    x = padc->ADC_LCDR; // Clear DRSY flag
  }
  // Next bit may be done using the PDC
  Analog_values[0] = ADC->ADC_CDR1;
  Analog_values[1] = ADC->ADC_CDR2;
  Analog_values[2] = ADC->ADC_CDR3;
  400678:	f8a2 00d0 	strh.w	r0, [r2, #208]	; 0xd0
  Analog_values[3] = ADC->ADC_CDR4;
  40067c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
#ifdef REVB
  Analog_values[8] = ADC->ADC_CDR8 ;
#endif

  Temperature = ( Temperature * 7 + ADC->ADC_CDR15 ) >> 3 ;     // Filter it
  if ( Temperature > maxTemperature ) {
  40067e:	f8b2 00e0 	ldrh.w	r0, [r2, #224]	; 0xe0
  }
  // Next bit may be done using the PDC
  Analog_values[0] = ADC->ADC_CDR1;
  Analog_values[1] = ADC->ADC_CDR2;
  Analog_values[2] = ADC->ADC_CDR3;
  Analog_values[3] = ADC->ADC_CDR4;
  400682:	f8a2 40d2 	strh.w	r4, [r2, #210]	; 0xd2
  Analog_values[4] = ADC->ADC_CDR5;
  400686:	6e5c      	ldr	r4, [r3, #100]	; 0x64
  400688:	f8a2 40d4 	strh.w	r4, [r2, #212]	; 0xd4
  Analog_values[5] = ADC->ADC_CDR9;
  40068c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40068e:	f8a2 40d6 	strh.w	r4, [r2, #214]	; 0xd6
  Analog_values[6] = ADC->ADC_CDR13;
  400692:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
  400696:	f8a2 40d8 	strh.w	r4, [r2, #216]	; 0xd8
  Analog_values[7] = ADC->ADC_CDR14;
  40069a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
  40069e:	f8a2 40da 	strh.w	r4, [r2, #218]	; 0xda

#ifdef REVB
  Analog_values[8] = ADC->ADC_CDR8 ;
  4006a2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4006a4:	f8a2 40dc 	strh.w	r4, [r2, #220]	; 0xdc
#endif

  Temperature = ( Temperature * 7 + ADC->ADC_CDR15 ) >> 3 ;     // Filter it
  4006a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  4006ac:	18cb      	adds	r3, r1, r3
  4006ae:	f3c3 03cf 	ubfx	r3, r3, #3, #16
  if ( Temperature > maxTemperature ) {
  4006b2:	4298      	cmp	r0, r3

#ifdef REVB
  Analog_values[8] = ADC->ADC_CDR8 ;
#endif

  Temperature = ( Temperature * 7 + ADC->ADC_CDR15 ) >> 3 ;     // Filter it
  4006b4:	f8a2 30de 	strh.w	r3, [r2, #222]	; 0xde
  if ( Temperature > maxTemperature ) {
    maxTemperature = Temperature ;
  4006b8:	bf38      	it	cc
  4006ba:	f8a2 30e0 	strhcc.w	r3, [r2, #224]	; 0xe0
  }
}
  4006be:	bc10      	pop	{r4}
  4006c0:	4770      	bx	lr
  4006c2:	bf00      	nop
  4006c4:	20000108 	.word	0x20000108

004006c8 <_Z20startPdcUsartReceivev>:

void startPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  TelemetryInBuffer[0].outPtr = TelemetryInBuffer[0].fifo ;
  4006c8:	f240 1308 	movw	r3, #264	; 0x108
  4006cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  TelemetryInBuffer[1].outPtr = TelemetryInBuffer[1].fifo ;
#ifndef SIMU
  // TODO because of the 64bits cast ...
  pUsart->US_RPR = (uint32_t)TelemetryInBuffer[0].fifo ;
  4006d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000

struct t_rxUartBuffer TelemetryInBuffer[2] ;
uint32_t TelemetryActiveBuffer ;

void startPdcUsartReceive()
{
  4006d4:	b410      	push	{r4}

  TelemetryInBuffer[0].outPtr = TelemetryInBuffer[0].fifo ;
  TelemetryInBuffer[1].outPtr = TelemetryInBuffer[1].fifo ;
#ifndef SIMU
  // TODO because of the 64bits cast ...
  pUsart->US_RPR = (uint32_t)TelemetryInBuffer[0].fifo ;
  4006d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
  pUsart->US_RNPR = (uint32_t)TelemetryInBuffer[1].fifo ;
#endif
  pUsart->US_RCR = RX_UART_BUFFER_SIZE ;
  4006da:	2120      	movs	r1, #32

void startPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  TelemetryInBuffer[0].outPtr = TelemetryInBuffer[0].fifo ;
  4006dc:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
  TelemetryInBuffer[1].outPtr = TelemetryInBuffer[1].fifo ;
  4006e0:	f503 7084 	add.w	r0, r3, #264	; 0x108

void startPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  TelemetryInBuffer[0].outPtr = TelemetryInBuffer[0].fifo ;
  4006e4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
  TelemetryInBuffer[1].outPtr = TelemetryInBuffer[1].fifo ;
  4006e8:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
#ifndef SIMU
  // TODO because of the 64bits cast ...
  pUsart->US_RPR = (uint32_t)TelemetryInBuffer[0].fifo ;
  4006ec:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  pUsart->US_RNPR = (uint32_t)TelemetryInBuffer[1].fifo ;
  4006f0:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
#endif
  pUsart->US_RCR = RX_UART_BUFFER_SIZE ;
  4006f4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
  pUsart->US_RNCR = RX_UART_BUFFER_SIZE ;
  4006f8:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
  pUsart->US_PTCR = US_PTCR_RXTEN ;
  4006fc:	2101      	movs	r1, #1
  4006fe:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
  TelemetryActiveBuffer = 0 ;
  400702:	2200      	movs	r2, #0
  400704:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
  400708:	bc10      	pop	{r4}
  40070a:	4770      	bx	lr

0040070c <_Z18endPdcUsartReceivev>:

void endPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  pUsart->US_PTCR = US_PTCR_RXTDIS ;
  40070c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400710:	f2c4 0302 	movt	r3, #16386	; 0x4002
  400714:	2202      	movs	r2, #2
  400716:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
  40071a:	4770      	bx	lr

0040071c <_Z10rxPdcUsartPFvhE>:

void rxPdcUsart( void (*pChProcess)(uint8_t x) )
{
  40071c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ptr = TelemetryInBuffer[TelemetryActiveBuffer].outPtr ;
  if ( j == 0 )           // First buf is full
  {
    endPtr = &TelemetryInBuffer[TelemetryActiveBuffer].fifo[RX_UART_BUFFER_SIZE-1] ;                // last byte
  }
  while ( ptr <= endPtr )
  400720:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4007b4 <_Z10rxPdcUsartPFvhE+0x98>
//      uint32_t i ;
  uint32_t j ;

 //Find out where the DMA has got to
  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_RXTDIS ;              // Freeze DMA
  400724:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  ptr = TelemetryInBuffer[TelemetryActiveBuffer].outPtr ;
  if ( j == 0 )           // First buf is full
  {
    endPtr = &TelemetryInBuffer[TelemetryActiveBuffer].fifo[RX_UART_BUFFER_SIZE-1] ;                // last byte
  }
  while ( ptr <= endPtr )
  400728:	f8d8 312c 	ldr.w	r3, [r8, #300]	; 0x12c

  pUsart->US_PTCR = US_PTCR_RXTDIS ;
}

void rxPdcUsart( void (*pChProcess)(uint8_t x) )
{
  40072c:	4606      	mov	r6, r0
//      uint32_t i ;
  uint32_t j ;

 //Find out where the DMA has got to
  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_RXTDIS ;              // Freeze DMA
  40072e:	f2c4 0702 	movt	r7, #16386	; 0x4002
  400732:	f04f 0b02 	mov.w	fp, #2

  endPtr = ptr - 1 ;
  ptr = TelemetryInBuffer[TelemetryActiveBuffer].outPtr ;
  if ( j == 0 )           // First buf is full
  {
    endPtr = &TelemetryInBuffer[TelemetryActiveBuffer].fifo[RX_UART_BUFFER_SIZE-1] ;                // last byte
  400736:	f108 0ae4 	add.w	sl, r8, #228	; 0xe4

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq(void)              { __ASM volatile ("cpsid i"); }
  40073a:	b672      	cpsid	i
 //Find out where the DMA has got to
  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_RXTDIS ;              // Freeze DMA
  ptr = (uint8_t *)pUsart->US_RPR ;
  j = pUsart->US_RNCR ;
  pUsart->US_PTCR = US_PTCR_RXTEN ;                       // DMA active again
  40073c:	2201      	movs	r2, #1
//      uint32_t i ;
  uint32_t j ;

 //Find out where the DMA has got to
  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_RXTDIS ;              // Freeze DMA
  40073e:	f8c7 b120 	str.w	fp, [r7, #288]	; 0x120
  ptr = (uint8_t *)pUsart->US_RPR ;
  400742:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
  j = pUsart->US_RNCR ;
  400746:	f8d7 9114 	ldr.w	r9, [r7, #276]	; 0x114
  pUsart->US_PTCR = US_PTCR_RXTEN ;                       // DMA active again
  40074a:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
  40074e:	b662      	cpsie	i
  __enable_irq() ;

  endPtr = ptr - 1 ;
  ptr = TelemetryInBuffer[TelemetryActiveBuffer].outPtr ;
  400750:	00da      	lsls	r2, r3, #3
  400752:	18d1      	adds	r1, r2, r3
  400754:	0089      	lsls	r1, r1, #2
  400756:	eb08 0001 	add.w	r0, r8, r1
  40075a:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
  ptr = (uint8_t *)pUsart->US_RPR ;
  j = pUsart->US_RNCR ;
  pUsart->US_PTCR = US_PTCR_RXTEN ;                       // DMA active again
  __enable_irq() ;

  endPtr = ptr - 1 ;
  40075e:	3d01      	subs	r5, #1
  ptr = TelemetryInBuffer[TelemetryActiveBuffer].outPtr ;
  if ( j == 0 )           // First buf is full
  400760:	f1b9 0f00 	cmp.w	r9, #0
  400764:	d102      	bne.n	40076c <_Z10rxPdcUsartPFvhE+0x50>
  {
    endPtr = &TelemetryInBuffer[TelemetryActiveBuffer].fifo[RX_UART_BUFFER_SIZE-1] ;                // last byte
  400766:	311f      	adds	r1, #31
  400768:	eb0a 0501 	add.w	r5, sl, r1
  }
  while ( ptr <= endPtr )
  40076c:	42ac      	cmp	r4, r5
  40076e:	d808      	bhi.n	400782 <_Z10rxPdcUsartPFvhE+0x66>
  {
    (*pChProcess)(*ptr++) ;
  400770:	f814 0b01 	ldrb.w	r0, [r4], #1
  400774:	47b0      	blx	r6
  ptr = TelemetryInBuffer[TelemetryActiveBuffer].outPtr ;
  if ( j == 0 )           // First buf is full
  {
    endPtr = &TelemetryInBuffer[TelemetryActiveBuffer].fifo[RX_UART_BUFFER_SIZE-1] ;                // last byte
  }
  while ( ptr <= endPtr )
  400776:	42a5      	cmp	r5, r4
  400778:	d2fa      	bcs.n	400770 <_Z10rxPdcUsartPFvhE+0x54>
  register Usart *pUsart = SECOND_USART;

  pUsart->US_PTCR = US_PTCR_RXTDIS ;
}

void rxPdcUsart( void (*pChProcess)(uint8_t x) )
  40077a:	f8d8 312c 	ldr.w	r3, [r8, #300]	; 0x12c
  40077e:	1c6c      	adds	r4, r5, #1
  400780:	00da      	lsls	r2, r3, #3
  }
  while ( ptr <= endPtr )
  {
    (*pChProcess)(*ptr++) ;
  }
  TelemetryInBuffer[TelemetryActiveBuffer].outPtr = ptr ;
  400782:	18d2      	adds	r2, r2, r3
  400784:	0092      	lsls	r2, r2, #2
  400786:	eb08 0102 	add.w	r1, r8, r2
  40078a:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
  if ( j == 0 )           // First buf is full
  40078e:	f1b9 0f00 	cmp.w	r9, #0
  400792:	d10d      	bne.n	4007b0 <_Z10rxPdcUsartPFvhE+0x94>
  {
    TelemetryInBuffer[TelemetryActiveBuffer].outPtr = TelemetryInBuffer[TelemetryActiveBuffer].fifo ;
  400794:	4452      	add	r2, sl
  400796:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    pUsart->US_RNPR = (uint32_t)TelemetryInBuffer[TelemetryActiveBuffer].fifo ;
  40079a:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
    pUsart->US_RNCR = RX_UART_BUFFER_SIZE ;
  40079e:	2220      	movs	r2, #32
  4007a0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
    TelemetryActiveBuffer ^= 1 ;            // Other buffer is active
  4007a4:	4a03      	ldr	r2, [pc, #12]	; (4007b4 <_Z10rxPdcUsartPFvhE+0x98>)
  4007a6:	f083 0301 	eor.w	r3, r3, #1
  4007aa:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
  4007ae:	e7c4      	b.n	40073a <_Z10rxPdcUsartPFvhE+0x1e>
  4007b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4007b4:	20000108 	.word	0x20000108

004007b8 <_Z10txPdcUsartPhm>:

uint32_t txPdcUsart( uint8_t *buffer, uint32_t size )
{
  register Usart *pUsart = SECOND_USART;

  if ( pUsart->US_TNCR == 0 )
  4007b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4007bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
  4007c0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
  4007c4:	b94a      	cbnz	r2, 4007da <_Z10txPdcUsartPhm+0x22>
  {
#ifndef SIMU
    pUsart->US_TNPR = (uint32_t)buffer ;
#endif
    pUsart->US_TNCR = size ;
    pUsart->US_PTCR = US_PTCR_TXTEN ;
  4007c6:	f44f 7280 	mov.w	r2, #256	; 0x100
  register Usart *pUsart = SECOND_USART;

  if ( pUsart->US_TNCR == 0 )
  {
#ifndef SIMU
    pUsart->US_TNPR = (uint32_t)buffer ;
  4007ca:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
#endif
    pUsart->US_TNCR = size ;
  4007ce:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
    pUsart->US_PTCR = US_PTCR_TXTEN ;
    return 1 ;
  4007d2:	2001      	movs	r0, #1
  {
#ifndef SIMU
    pUsart->US_TNPR = (uint32_t)buffer ;
#endif
    pUsart->US_TNCR = size ;
    pUsart->US_PTCR = US_PTCR_TXTEN ;
  4007d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    return 1 ;
  4007d8:	4770      	bx	lr
  }
  return 0 ;
  4007da:	2000      	movs	r0, #0
}
  4007dc:	4770      	bx	lr
  4007de:	bf00      	nop

004007e0 <_Z12txPdcPendingv>:
static __INLINE void __disable_irq(void)              { __ASM volatile ("cpsid i"); }
  4007e0:	b672      	cpsid	i
{
  register Usart *pUsart = SECOND_USART;
  uint32_t x ;

  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_TXTDIS ;              // Freeze DMA
  4007e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4007e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
  4007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  4007ee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  x = pUsart->US_TNCR ;                           // Total
  x += pUsart->US_TCR ;                           // Still to send
  pUsart->US_PTCR = US_PTCR_TXTEN ;                       // DMA active again
  4007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
  register Usart *pUsart = SECOND_USART;
  uint32_t x ;

  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_TXTDIS ;              // Freeze DMA
  x = pUsart->US_TNCR ;                           // Total
  4007f6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
  x += pUsart->US_TCR ;                           // Still to send
  4007fa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
  pUsart->US_PTCR = US_PTCR_TXTEN ;                       // DMA active again
  4007fe:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
  400802:	b662      	cpsie	i
  uint32_t x ;

  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_TXTDIS ;              // Freeze DMA
  x = pUsart->US_TNCR ;                           // Total
  x += pUsart->US_TCR ;                           // Still to send
  400804:	1880      	adds	r0, r0, r2
  pUsart->US_PTCR = US_PTCR_TXTEN ;                       // DMA active again
  __enable_irq() ;

  return x ;
}
  400806:	4770      	bx	lr

00400808 <_Z10getCurrentv>:
{
  static uint16_t Current ;
  static uint32_t Current_sum ;
  static uint8_t  Current_count ;

  Current_sum += anaIn(NUMBER_ANALOG-1);
  400808:	4b15      	ldr	r3, [pc, #84]	; (400860 <_Z10getCurrentv+0x58>)
  if ( ++Current_count > 49 ) {
  40080a:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
{
  static uint16_t Current ;
  static uint32_t Current_sum ;
  static uint8_t  Current_count ;

  Current_sum += anaIn(NUMBER_ANALOG-1);
  40080e:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
  if ( ++Current_count > 49 ) {
  400812:	3201      	adds	r2, #1
{
  static uint16_t Current ;
  static uint32_t Current_sum ;
  static uint8_t  Current_count ;

  Current_sum += anaIn(NUMBER_ANALOG-1);
  400814:	f8b3 0130 	ldrh.w	r0, [r3, #304]	; 0x130
  if ( ++Current_count > 49 ) {
  400818:	b2d2      	uxtb	r2, r2
{
  static uint16_t Current ;
  static uint32_t Current_sum ;
  static uint8_t  Current_count ;

  Current_sum += anaIn(NUMBER_ANALOG-1);
  40081a:	1841      	adds	r1, r0, r1
  if ( ++Current_count > 49 ) {
  40081c:	2a31      	cmp	r2, #49	; 0x31
  40081e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
{
  static uint16_t Current ;
  static uint32_t Current_sum ;
  static uint8_t  Current_count ;

  Current_sum += anaIn(NUMBER_ANALOG-1);
  400822:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
  if ( ++Current_count > 49 ) {
  400826:	bf98      	it	ls
  400828:	f8b3 213a 	ldrhls.w	r2, [r3, #314]	; 0x13a
  40082c:	d90e      	bls.n	40084c <_Z10getCurrentv+0x44>
    Current = Current_sum / 5 ;
  40082e:	f64c 42cd 	movw	r2, #52429	; 0xcccd
  400832:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
  400836:	fba2 0201 	umull	r0, r2, r2, r1
    Current_sum = 0 ;
  40083a:	2000      	movs	r0, #0
  static uint32_t Current_sum ;
  static uint8_t  Current_count ;

  Current_sum += anaIn(NUMBER_ANALOG-1);
  if ( ++Current_count > 49 ) {
    Current = Current_sum / 5 ;
  40083c:	f3c2 028f 	ubfx	r2, r2, #2, #16
  400840:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
    Current_sum = 0 ;
  400844:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
    Current_count = 0 ;
  400848:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
  }

  uint32_t current_scale = 488 + g_eeGeneral.currentCalib ;
  40084c:	f993 0075 	ldrsb.w	r0, [r3, #117]	; 0x75
  400850:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
  return (current_scale * Current) / 8192;
  400854:	fb00 f202 	mul.w	r2, r0, r2
  400858:	f3c2 304f 	ubfx	r0, r2, #13, #16
}
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	20000108 	.word	0x20000108

00400864 <_Z13channel_orderh>:
    0x87, 0x8D, 0x93, 0x9C, 0xB1, 0xB4,
    0xC6, 0xC9, 0xD2, 0xD8, 0xE1, 0xE4 };

uint8_t channel_order(uint8_t x)
{
  return ( ((pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup) >> (6-(x-1) * 2)) & 3 ) + 1 );
  400864:	f240 1208 	movw	r2, #264	; 0x108
  400868:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40086c:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
  400870:	f24f 7330 	movw	r3, #63280	; 0xf730
  400874:	f2c0 0340 	movt	r3, #64	; 0x40
  400878:	5c9b      	ldrb	r3, [r3, r2]
  40087a:	f1c0 0004 	rsb	r0, r0, #4
  40087e:	0040      	lsls	r0, r0, #1
  400880:	fa53 f000 	asrs.w	r0, r3, r0
  400884:	f000 0003 	and.w	r0, r0, #3
  400888:	3001      	adds	r0, #1
}
  40088a:	4770      	bx	lr

0040088c <_Z8idx2chara>:
    4, 2, 3, 1,
    4, 3, 2, 1 };

char idx2char(int8_t idx)
{
  if (idx == 0) return ' ';
  40088c:	2800      	cmp	r0, #0
  40088e:	d101      	bne.n	400894 <_Z8idx2chara+0x8>
  400890:	2020      	movs	r0, #32
  if (idx < 27) return 'A' + idx - 1;
  if (idx < 37) return '0' + idx - 27;
  if (idx <= 40) return pgm_read_byte(s_charTab+idx-37);
  if (idx <= ZCHAR_MAX) return 'z' + 5 + idx - 40;
  return ' ';
}
  400892:	4770      	bx	lr
    4, 3, 2, 1 };

char idx2char(int8_t idx)
{
  if (idx == 0) return ' ';
  if (idx < 0) {
  400894:	db0e      	blt.n	4008b4 <_Z8idx2chara+0x28>
    if (idx > -27) return 'a' - idx - 1;
    idx = -idx;
  }
  if (idx < 27) return 'A' + idx - 1;
  400896:	281a      	cmp	r0, #26
  400898:	dd09      	ble.n	4008ae <_Z8idx2chara+0x22>
  if (idx < 37) return '0' + idx - 27;
  40089a:	2824      	cmp	r0, #36	; 0x24
  40089c:	dd10      	ble.n	4008c0 <_Z8idx2chara+0x34>
  if (idx <= 40) return pgm_read_byte(s_charTab+idx-37);
  40089e:	2828      	cmp	r0, #40	; 0x28
  4008a0:	bfdd      	ittte	le
  4008a2:	4b0b      	ldrle	r3, [pc, #44]	; (4008d0 <_Z8idx2chara+0x44>)
  4008a4:	1818      	addle	r0, r3, r0
  4008a6:	f810 0c0d 	ldrble.w	r0, [r0, #-13]
  if (idx <= ZCHAR_MAX) return 'z' + 5 + idx - 40;
  return ' ';
  4008aa:	2020      	movgt	r0, #32
  4008ac:	4770      	bx	lr
  if (idx == 0) return ' ';
  if (idx < 0) {
    if (idx > -27) return 'a' - idx - 1;
    idx = -idx;
  }
  if (idx < 27) return 'A' + idx - 1;
  4008ae:	3040      	adds	r0, #64	; 0x40
  4008b0:	b2c0      	uxtb	r0, r0
  4008b2:	4770      	bx	lr

char idx2char(int8_t idx)
{
  if (idx == 0) return ' ';
  if (idx < 0) {
    if (idx > -27) return 'a' - idx - 1;
  4008b4:	f110 0f1a 	cmn.w	r0, #26
  4008b8:	da05      	bge.n	4008c6 <_Z8idx2chara+0x3a>
    idx = -idx;
  4008ba:	4240      	negs	r0, r0
  4008bc:	b240      	sxtb	r0, r0
  4008be:	e7ea      	b.n	400896 <_Z8idx2chara+0xa>
  }
  if (idx < 27) return 'A' + idx - 1;
  if (idx < 37) return '0' + idx - 27;
  4008c0:	3015      	adds	r0, #21
  4008c2:	b2c0      	uxtb	r0, r0
  4008c4:	4770      	bx	lr

char idx2char(int8_t idx)
{
  if (idx == 0) return ' ';
  if (idx < 0) {
    if (idx > -27) return 'a' - idx - 1;
  4008c6:	f1c0 0060 	rsb	r0, r0, #96	; 0x60
  4008ca:	b2c0      	uxtb	r0, r0
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	0040f730 	.word	0x0040f730

004008d4 <_Z12phaseaddressh>:
  return ' ';
}

PhaseData *phaseaddress(uint8_t idx)
{
  return &g_model.phaseData[idx];
  4008d4:	4b02      	ldr	r3, [pc, #8]	; (4008e0 <_Z12phaseaddressh+0xc>)
  4008d6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4008da:	f500 60d1 	add.w	r0, r0, #1672	; 0x688
}
  4008de:	4770      	bx	lr
  4008e0:	20000244 	.word	0x20000244

004008e4 <_Z11expoaddressh>:

ExpoData *expoaddress(uint8_t idx )
{
  return &g_model.expoData[idx];
  4008e4:	4b02      	ldr	r3, [pc, #8]	; (4008f0 <_Z11expoaddressh+0xc>)
  4008e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4008ea:	18c0      	adds	r0, r0, r3
}
  4008ec:	4770      	bx	lr
  4008ee:	bf00      	nop
  4008f0:	200006b9 	.word	0x200006b9

004008f4 <_Z10mixaddressh>:

MixData *mixaddress(uint8_t idx)
{
  return &g_model.mixData[idx];
  4008f4:	4b02      	ldr	r3, [pc, #8]	; (400900 <_Z10mixaddressh+0xc>)
  4008f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4008fa:	18c0      	adds	r0, r0, r3
}
  4008fc:	4770      	bx	lr
  4008fe:	bf00      	nop
  400900:	20000259 	.word	0x20000259

00400904 <_Z12limitaddressh>:

LimitData *limitaddress(uint8_t idx)
{
  return &g_model.limitData[idx];
  400904:	4b02      	ldr	r3, [pc, #8]	; (400910 <_Z12limitaddressh+0xc>)
  400906:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40090a:	18c0      	adds	r0, r0, r3
}
  40090c:	4770      	bx	lr
  40090e:	bf00      	nop
  400910:	20000619 	.word	0x20000619

00400914 <_Z14generalDefaultv>:

void generalDefault()
{
  400914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(&g_eeGeneral, 0, sizeof(g_eeGeneral));
  400916:	4c1d      	ldr	r4, [pc, #116]	; (40098c <_Z14generalDefaultv+0x78>)
  400918:	2252      	movs	r2, #82	; 0x52
  40091a:	2100      	movs	r1, #0
  40091c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400920:	f00e fd98 	bl	40f454 <memset>
  g_eeGeneral.lightSw  = SWITCH_ON;
  400924:	222a      	movs	r2, #42	; 0x2a
  400926:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
  g_eeGeneral.myVers   = EEPROM_VER;
  40092a:	22d0      	movs	r2, #208	; 0xd0
  40092c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  g_eeGeneral.contrast = 25;
  400930:	2219      	movs	r2, #25
  g_eeGeneral.vBatWarn = 90;
  for (int i = 0; i < 7; ++i) {
  400932:	2300      	movs	r3, #0
void generalDefault()
{
  memset(&g_eeGeneral, 0, sizeof(g_eeGeneral));
  g_eeGeneral.lightSw  = SWITCH_ON;
  g_eeGeneral.myVers   = EEPROM_VER;
  g_eeGeneral.contrast = 25;
  400934:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
  g_eeGeneral.vBatWarn = 90;
  400938:	225a      	movs	r2, #90	; 0x5a
  40093a:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
  for (int i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
  40093e:	469c      	mov	ip, r3
  400940:	2702      	movs	r7, #2
    g_eeGeneral.calibSpanNeg[i] = 0x180;
  400942:	f06f 067f 	mvn.w	r6, #127	; 0x7f
  400946:	2501      	movs	r5, #1
  g_eeGeneral.lightSw  = SWITCH_ON;
  g_eeGeneral.myVers   = EEPROM_VER;
  g_eeGeneral.contrast = 25;
  g_eeGeneral.vBatWarn = 90;
  for (int i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
  400948:	eb04 0043 	add.w	r0, r4, r3, lsl #1
    g_eeGeneral.calibSpanNeg[i] = 0x180;
  40094c:	1d19      	adds	r1, r3, #4
    g_eeGeneral.calibSpanPos[i] = 0x180;
  40094e:	f103 020c 	add.w	r2, r3, #12
  memset(&g_eeGeneral, 0, sizeof(g_eeGeneral));
  g_eeGeneral.lightSw  = SWITCH_ON;
  g_eeGeneral.myVers   = EEPROM_VER;
  g_eeGeneral.contrast = 25;
  g_eeGeneral.vBatWarn = 90;
  for (int i = 0; i < 7; ++i) {
  400952:	3301      	adds	r3, #1
    g_eeGeneral.calibMid[i]     = 0x200;
    g_eeGeneral.calibSpanNeg[i] = 0x180;
  400954:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    g_eeGeneral.calibSpanPos[i] = 0x180;
  400958:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  memset(&g_eeGeneral, 0, sizeof(g_eeGeneral));
  g_eeGeneral.lightSw  = SWITCH_ON;
  g_eeGeneral.myVers   = EEPROM_VER;
  g_eeGeneral.contrast = 25;
  g_eeGeneral.vBatWarn = 90;
  for (int i = 0; i < 7; ++i) {
  40095c:	2b07      	cmp	r3, #7
    g_eeGeneral.calibMid[i]     = 0x200;
  40095e:	f880 c025 	strb.w	ip, [r0, #37]	; 0x25
  400962:	f880 7026 	strb.w	r7, [r0, #38]	; 0x26
    g_eeGeneral.calibSpanNeg[i] = 0x180;
  400966:	f881 602b 	strb.w	r6, [r1, #43]	; 0x2b
  40096a:	f881 502c 	strb.w	r5, [r1, #44]	; 0x2c
  g_eeGeneral.lightSw  = SWITCH_ON;
  g_eeGeneral.myVers   = EEPROM_VER;
  g_eeGeneral.contrast = 25;
  g_eeGeneral.vBatWarn = 90;
  for (int i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
  40096e:	4807      	ldr	r0, [pc, #28]	; (40098c <_Z14generalDefaultv+0x78>)
    g_eeGeneral.calibSpanNeg[i] = 0x180;
    g_eeGeneral.calibSpanPos[i] = 0x180;
  400970:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
  400974:	f882 502a 	strb.w	r5, [r2, #42]	; 0x2a
  memset(&g_eeGeneral, 0, sizeof(g_eeGeneral));
  g_eeGeneral.lightSw  = SWITCH_ON;
  g_eeGeneral.myVers   = EEPROM_VER;
  g_eeGeneral.contrast = 25;
  g_eeGeneral.vBatWarn = 90;
  for (int i = 0; i < 7; ++i) {
  400978:	d1e6      	bne.n	400948 <_Z14generalDefaultv+0x34>
    g_eeGeneral.calibMid[i]     = 0x200;
    g_eeGeneral.calibSpanNeg[i] = 0x180;
    g_eeGeneral.calibSpanPos[i] = 0x180;
  }
  g_eeGeneral.chkSum = (0x200 * 7) + (0x180 * 5);
  40097a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  40097e:	f880 304f 	strb.w	r3, [r0, #79]	; 0x4f
  400982:	2315      	movs	r3, #21
  400984:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
  400988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40098a:	bf00      	nop
  40098c:	20000108 	.word	0x20000108

00400990 <_Z10evalChkSumv>:

uint16_t evalChkSum()
{
  400990:	b410      	push	{r4}
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  400992:	2300      	movs	r3, #0
  400994:	4c08      	ldr	r4, [pc, #32]	; (4009b8 <_Z10evalChkSumv+0x28>)
  g_eeGeneral.chkSum = (0x200 * 7) + (0x180 * 5);
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  400996:	4618      	mov	r0, r3
  for (int i=0; i<12;i++)
    sum += g_eeGeneral.calibMid[i];
  400998:	eb04 0243 	add.w	r2, r4, r3, lsl #1
  40099c:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
  4009a0:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  4009a4:	3301      	adds	r3, #1
    sum += g_eeGeneral.calibMid[i];
  4009a6:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  4009aa:	1810      	adds	r0, r2, r0
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  4009ac:	2b0c      	cmp	r3, #12
    sum += g_eeGeneral.calibMid[i];
  4009ae:	b280      	uxth	r0, r0
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  4009b0:	d1f2      	bne.n	400998 <_Z10evalChkSumv+0x8>
    sum += g_eeGeneral.calibMid[i];
  return sum;
}
  4009b2:	bc10      	pop	{r4}
  4009b4:	4770      	bx	lr
  4009b6:	bf00      	nop
  4009b8:	20000108 	.word	0x20000108

004009bc <_Z10resetProtov>:
void FRSKY_Init(void);
void check_frsky(void);

inline void FRSKY_setModelAlarms(void)
{
  FrskyAlarmSendState = SEND_MODEL_ALARMS;
  4009bc:	f240 1308 	movw	r3, #264	; 0x108
  4009c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4009c4:	2206      	movs	r2, #6
  4009c6:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
#endif
  }
#elif defined(FRSKY)
  FRSKY_setModelAlarms();
#endif
}
  4009ca:	4770      	bx	lr

004009cc <_Z6intpolsh>:

int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
  4009cc:	2907      	cmp	r1, #7
  4009ce:	bf94      	ite	ls
  4009d0:	2300      	movls	r3, #0
  4009d2:	2301      	movhi	r3, #1
  FRSKY_setModelAlarms();
#endif
}

int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
  4009d4:	b410      	push	{r4}
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
  int8_t *crv = cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx];
  4009d6:	2b00      	cmp	r3, #0
  4009d8:	d02d      	beq.n	400a36 <_Z6intpolsh+0x6a>
  4009da:	4a23      	ldr	r2, [pc, #140]	; (400a68 <_Z6intpolsh+0x9c>)
  int16_t erg;

  x+=RESXu;
  4009dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
  int8_t *crv = cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx];
  4009e0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
  int16_t erg;

  x+=RESXu;
  4009e4:	b280      	uxth	r0, r0
int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
  int8_t *crv = cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx];
  4009e6:	1889      	adds	r1, r1, r2
  int16_t erg;

  x+=RESXu;
  4009e8:	b202      	sxth	r2, r0
  if(x < 0) {
  4009ea:	2a00      	cmp	r2, #0
  4009ec:	db2d      	blt.n	400a4a <_Z6intpolsh+0x7e>
    erg = (int16_t)crv[0] * (RESX/4);
  } else if(x >= (RESX*2)) {
  4009ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
  4009f2:	da2d      	bge.n	400a50 <_Z6intpolsh+0x84>
    erg = (int16_t)crv[(cv9 ? 8 : 4)] * (RESX/4);
  } else {
    int16_t a,dx;
    if(cv9){
  4009f4:	2b00      	cmp	r3, #0
  4009f6:	d032      	beq.n	400a5e <_Z6intpolsh+0x92>
      a   = (uint16_t)x / D9;
      dx  =((uint16_t)x % D9) * 2;
  4009f8:	b2c2      	uxtb	r2, r0
  4009fa:	0052      	lsls	r2, r2, #1
  } else if(x >= (RESX*2)) {
    erg = (int16_t)crv[(cv9 ? 8 : 4)] * (RESX/4);
  } else {
    int16_t a,dx;
    if(cv9){
      a   = (uint16_t)x / D9;
  4009fc:	0a00      	lsrs	r0, r0, #8
      dx  =((uint16_t)x % D9) * 2;
    } else {
      a   = (uint16_t)x / D5;
      dx  = (uint16_t)x % D5;
    }
    erg  = (int16_t)crv[a]*((D5-dx)/2) + (int16_t)crv[a+1]*(dx/2);
  4009fe:	b200      	sxth	r0, r0
  400a00:	b212      	sxth	r2, r2
  400a02:	560b      	ldrsb	r3, [r1, r0]
  400a04:	f5c2 7400 	rsb	r4, r2, #512	; 0x200
  400a08:	1064      	asrs	r4, r4, #1
  400a0a:	fb03 f404 	mul.w	r4, r3, r4
  400a0e:	1809      	adds	r1, r1, r0
  400a10:	f991 1001 	ldrsb.w	r1, [r1, #1]
  400a14:	1053      	asrs	r3, r2, #1
  400a16:	fb03 4301 	mla	r3, r3, r1, r4
  400a1a:	b29b      	uxth	r3, r3
  }
  return erg / 25; // 100*D5/RESX;
  400a1c:	f248 521f 	movw	r2, #34079	; 0x851f
  400a20:	b21b      	sxth	r3, r3
  400a22:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
  400a26:	fb82 1003 	smull	r1, r0, r2, r3
  400a2a:	17db      	asrs	r3, r3, #31
  400a2c:	ebc3 00e0 	rsb	r0, r3, r0, asr #3
  400a30:	b200      	sxth	r0, r0
}
  400a32:	bc10      	pop	{r4}
  400a34:	4770      	bx	lr
int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
  int8_t *crv = cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx];
  400a36:	4a0d      	ldr	r2, [pc, #52]	; (400a6c <_Z6intpolsh+0xa0>)
  int16_t erg;

  x+=RESXu;
  400a38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
  int8_t *crv = cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx];
  400a3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  int16_t erg;

  x+=RESXu;
  400a40:	b280      	uxth	r0, r0
int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
  int8_t *crv = cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx];
  400a42:	1889      	adds	r1, r1, r2
  int16_t erg;

  x+=RESXu;
  400a44:	b202      	sxth	r2, r0
  if(x < 0) {
  400a46:	2a00      	cmp	r2, #0
  400a48:	dad1      	bge.n	4009ee <_Z6intpolsh+0x22>
    erg = (int16_t)crv[0] * (RESX/4);
  400a4a:	780b      	ldrb	r3, [r1, #0]
  400a4c:	021b      	lsls	r3, r3, #8
  400a4e:	e7e5      	b.n	400a1c <_Z6intpolsh+0x50>
  } else if(x >= (RESX*2)) {
    erg = (int16_t)crv[(cv9 ? 8 : 4)] * (RESX/4);
  400a50:	2b00      	cmp	r3, #0
  400a52:	bf0c      	ite	eq
  400a54:	2304      	moveq	r3, #4
  400a56:	2308      	movne	r3, #8
  400a58:	5ccb      	ldrb	r3, [r1, r3]
  400a5a:	021b      	lsls	r3, r3, #8
  400a5c:	e7de      	b.n	400a1c <_Z6intpolsh+0x50>
    if(cv9){
      a   = (uint16_t)x / D9;
      dx  =((uint16_t)x % D9) * 2;
    } else {
      a   = (uint16_t)x / D5;
      dx  = (uint16_t)x % D5;
  400a5e:	05d2      	lsls	r2, r2, #23
    int16_t a,dx;
    if(cv9){
      a   = (uint16_t)x / D9;
      dx  =((uint16_t)x % D9) * 2;
    } else {
      a   = (uint16_t)x / D5;
  400a60:	0a40      	lsrs	r0, r0, #9
      dx  = (uint16_t)x % D5;
  400a62:	0dd2      	lsrs	r2, r2, #23
  400a64:	e7cb      	b.n	4009fe <_Z6intpolsh+0x32>
  400a66:	bf00      	nop
  400a68:	20000779 	.word	0x20000779
  400a6c:	20000799 	.word	0x20000799

00400a70 <_Z7curveFns>:
  return anas[ed->chn];
}

int16_t curveFn(int16_t x)
{
  return intpol(x, s_curveChan);
  400a70:	f240 1308 	movw	r3, #264	; 0x108
  400a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400a78:	f893 1897 	ldrb.w	r1, [r3, #2199]	; 0x897
  400a7c:	e7a6      	b.n	4009cc <_Z6intpolsh>
  400a7e:	bf00      	nop

00400a80 <_Z10applyCurvesa>:
}

int16_t applyCurve(int16_t x, int8_t idx)
{
  /* already tried to have only one return at the end */
  switch(idx) {
  400a80:	2906      	cmp	r1, #6
  400a82:	d810      	bhi.n	400aa6 <_Z10applyCurvesa+0x26>
  400a84:	e8df f001 	tbb	[pc, r1]
  400a88:	1a171404 	.word	0x1a171404
  400a8c:	251f      	.short	0x251f
  400a8e:	05          	.byte	0x05
  400a8f:	00          	.byte	0x00
  if (idx < 0) {
    x = -x;
    idx = -idx + 6;
  }
  return intpol(x, idx - 7);
}
  400a90:	4770      	bx	lr
    case 4: //f|f>0
      return x > 0 ? RESX : 0;
    case 5: //f|f<0
      return x < 0 ? -RESX : 0;
    case 6: //f|abs(f)
      return x > 0 ? RESX : -RESX;
  400a92:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
  400a96:	f6cf 73ff 	movt	r3, #65535	; 0xffff
  400a9a:	2800      	cmp	r0, #0
  400a9c:	bfd4      	ite	le
  400a9e:	4618      	movle	r0, r3
  400aa0:	f44f 6080 	movgt.w	r0, #1024	; 0x400
  400aa4:	4770      	bx	lr
  }
  if (idx < 0) {
  400aa6:	2900      	cmp	r1, #0
  400aa8:	db1a      	blt.n	400ae0 <_Z10applyCurvesa+0x60>
    x = -x;
    idx = -idx + 6;
  }
  return intpol(x, idx - 7);
  400aaa:	3907      	subs	r1, #7
  400aac:	b2c9      	uxtb	r1, r1
  400aae:	e78d      	b.n	4009cc <_Z6intpolsh>
}

int16_t applyCurve(int16_t x, int8_t idx)
{
  /* already tried to have only one return at the end */
  switch(idx) {
  400ab0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  400ab4:	4770      	bx	lr
  400ab6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
  400aba:	4770      	bx	lr
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  400abc:	2800      	cmp	r0, #0
  400abe:	bfb8      	it	lt
  400ac0:	4240      	neglt	r0, r0
  400ac2:	b200      	sxth	r0, r0
      return x;
    case 2:
      if (x > 0) x = 0; //x|x<0
      return x;
    case 3: // x|abs(x)
      return abs(x);
  400ac4:	4770      	bx	lr
    case 4: //f|f>0
      return x > 0 ? RESX : 0;
  400ac6:	2800      	cmp	r0, #0
  400ac8:	bfcc      	ite	gt
  400aca:	f44f 6080 	movgt.w	r0, #1024	; 0x400
  400ace:	2000      	movle	r0, #0
  400ad0:	4770      	bx	lr
    case 5: //f|f<0
      return x < 0 ? -RESX : 0;
  400ad2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
  400ad6:	f6cf 73ff 	movt	r3, #65535	; 0xffff
  400ada:	ea03 70e0 	and.w	r0, r3, r0, asr #31
  400ade:	4770      	bx	lr
    case 6: //f|abs(f)
      return x > 0 ? RESX : -RESX;
  }
  if (idx < 0) {
    x = -x;
  400ae0:	4240      	negs	r0, r0
    idx = -idx + 6;
  400ae2:	f1c1 0106 	rsb	r1, r1, #6
      return x < 0 ? -RESX : 0;
    case 6: //f|abs(f)
      return x > 0 ? RESX : -RESX;
  }
  if (idx < 0) {
    x = -x;
  400ae6:	b200      	sxth	r0, r0
    idx = -idx + 6;
  400ae8:	b249      	sxtb	r1, r1
  400aea:	e7de      	b.n	400aaa <_Z10applyCurvesa+0x2a>

00400aec <_Z5expoutt>:
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

uint16_t expou(uint16_t x, uint16_t k)
{
  // k*x*x*x + (1-k)*x
  return ((unsigned long)x*x*x/0x10000*k/(RESXul*RESXul/0x10000) + (RESKul-k)*x+RESKul/2)/RESKul;
  400aec:	fb00 f300 	mul.w	r3, r0, r0
  400af0:	fb00 f303 	mul.w	r3, r0, r3
  400af4:	f1c1 0264 	rsb	r2, r1, #100	; 0x64
  400af8:	0c1b      	lsrs	r3, r3, #16
  400afa:	fb00 f002 	mul.w	r0, r0, r2
  400afe:	fb01 f103 	mul.w	r1, r1, r3
  400b02:	3032      	adds	r0, #50	; 0x32
  400b04:	f248 521f 	movw	r2, #34079	; 0x851f
  400b08:	eb00 1011 	add.w	r0, r0, r1, lsr #4
  400b0c:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
  400b10:	fba2 3200 	umull	r3, r2, r2, r0
  400b14:	f3c2 104f 	ubfx	r0, r2, #5, #16
}
  400b18:	4770      	bx	lr
  400b1a:	bf00      	nop

00400b1c <_Z4exposs>:

int16_t expo(int16_t x, int16_t k)
{
  400b1c:	b410      	push	{r4}
  if(k == 0) return x;
  400b1e:	b301      	cbz	r1, 400b62 <_Z4exposs+0x46>
  int16_t   y;
  bool    neg =  x < 0;
  if(neg)   x = -x;
  400b20:	0fc2      	lsrs	r2, r0, #31
  400b22:	d001      	beq.n	400b28 <_Z4exposs+0xc>
  400b24:	4240      	negs	r0, r0
  400b26:	b200      	sxth	r0, r0
  if(k<0){
  400b28:	2900      	cmp	r1, #0
  400b2a:	db1c      	blt.n	400b66 <_Z4exposs+0x4a>
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

uint16_t expou(uint16_t x, uint16_t k)
{
  // k*x*x*x + (1-k)*x
  return ((unsigned long)x*x*x/0x10000*k/(RESXul*RESXul/0x10000) + (RESKul-k)*x+RESKul/2)/RESKul;
  400b2c:	b280      	uxth	r0, r0
  400b2e:	fb00 f300 	mul.w	r3, r0, r0
  400b32:	fb00 f303 	mul.w	r3, r0, r3
  400b36:	b289      	uxth	r1, r1
  400b38:	f1c1 0464 	rsb	r4, r1, #100	; 0x64
  400b3c:	0c1b      	lsrs	r3, r3, #16
  400b3e:	fb04 f000 	mul.w	r0, r4, r0
  400b42:	fb01 f103 	mul.w	r1, r1, r3
  400b46:	3032      	adds	r0, #50	; 0x32
  400b48:	f248 531f 	movw	r3, #34079	; 0x851f
  400b4c:	eb00 1011 	add.w	r0, r0, r1, lsr #4
  400b50:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
  400b54:	fba3 1000 	umull	r1, r0, r3, r0
  bool    neg =  x < 0;
  if(neg)   x = -x;
  if(k<0){
    y = RESXu-expou(RESXu-x,-k);
  }else{
    y = expou(x,k);
  400b58:	f3c0 104f 	ubfx	r0, r0, #5, #16
  }
  return neg? -y:y;
  400b5c:	b10a      	cbz	r2, 400b62 <_Z4exposs+0x46>
  400b5e:	4240      	negs	r0, r0
  400b60:	b280      	uxth	r0, r0
}
  400b62:	bc10      	pop	{r4}
  400b64:	4770      	bx	lr
  if(k == 0) return x;
  int16_t   y;
  bool    neg =  x < 0;
  if(neg)   x = -x;
  if(k<0){
    y = RESXu-expou(RESXu-x,-k);
  400b66:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

uint16_t expou(uint16_t x, uint16_t k)
{
  // k*x*x*x + (1-k)*x
  return ((unsigned long)x*x*x/0x10000*k/(RESXul*RESXul/0x10000) + (RESKul-k)*x+RESKul/2)/RESKul;
  400b6a:	b280      	uxth	r0, r0
  400b6c:	fb00 f300 	mul.w	r3, r0, r0
  400b70:	fb00 f303 	mul.w	r3, r0, r3
  if(k == 0) return x;
  int16_t   y;
  bool    neg =  x < 0;
  if(neg)   x = -x;
  if(k<0){
    y = RESXu-expou(RESXu-x,-k);
  400b74:	4249      	negs	r1, r1
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

uint16_t expou(uint16_t x, uint16_t k)
{
  // k*x*x*x + (1-k)*x
  return ((unsigned long)x*x*x/0x10000*k/(RESXul*RESXul/0x10000) + (RESKul-k)*x+RESKul/2)/RESKul;
  400b76:	b289      	uxth	r1, r1
  400b78:	f1c1 0464 	rsb	r4, r1, #100	; 0x64
  400b7c:	0c1b      	lsrs	r3, r3, #16
  400b7e:	fb04 f000 	mul.w	r0, r4, r0
  400b82:	fb01 f103 	mul.w	r1, r1, r3
  400b86:	3032      	adds	r0, #50	; 0x32
  400b88:	f248 531f 	movw	r3, #34079	; 0x851f
  400b8c:	eb00 1011 	add.w	r0, r0, r1, lsr #4
  400b90:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
  400b94:	fba3 1000 	umull	r1, r0, r3, r0
  400b98:	0940      	lsrs	r0, r0, #5
  if(k == 0) return x;
  int16_t   y;
  bool    neg =  x < 0;
  if(neg)   x = -x;
  if(k<0){
    y = RESXu-expou(RESXu-x,-k);
  400b9a:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
  400b9e:	b280      	uxth	r0, r0
  400ba0:	e7dc      	b.n	400b5c <_Z4exposs+0x40>
  400ba2:	bf00      	nop

00400ba4 <_Z11applyLimitshl>:
    }
  }
}

int16_t applyLimits(uint8_t channel, int32_t value)
{
  400ba4:	b4f0      	push	{r4, r5, r6, r7}
  int16_t ofs = g_model.limitData[channel].offset;
  400ba6:	0085      	lsls	r5, r0, #2
  400ba8:	4c31      	ldr	r4, [pc, #196]	; (400c70 <_Z11applyLimitshl+0xcc>)
  400baa:	182b      	adds	r3, r5, r0
  400bac:	18e3      	adds	r3, r4, r3
  int16_t lim_p = 10 * (g_model.limitData[channel].max + 100);
  400bae:	f993 6512 	ldrsb.w	r6, [r3, #1298]	; 0x512
  }
}

int16_t applyLimits(uint8_t channel, int32_t value)
{
  int16_t ofs = g_model.limitData[channel].offset;
  400bb2:	f893 7514 	ldrb.w	r7, [r3, #1300]	; 0x514
  400bb6:	f893 c515 	ldrb.w	ip, [r3, #1301]	; 0x515
  int16_t lim_p = 10 * (g_model.limitData[channel].max + 100);
  int16_t lim_n = 10 * (g_model.limitData[channel].min - 100); //multiply by 10 to get same range as ofs (-1000..1000)
  400bba:	f993 2511 	ldrsb.w	r2, [r3, #1297]	; 0x511
}

int16_t applyLimits(uint8_t channel, int32_t value)
{
  int16_t ofs = g_model.limitData[channel].offset;
  int16_t lim_p = 10 * (g_model.limitData[channel].max + 100);
  400bbe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400bc2:	0073      	lsls	r3, r6, #1
  }
}

int16_t applyLimits(uint8_t channel, int32_t value)
{
  int16_t ofs = g_model.limitData[channel].offset;
  400bc4:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
  int16_t lim_p = 10 * (g_model.limitData[channel].max + 100);
  int16_t lim_n = 10 * (g_model.limitData[channel].min - 100); //multiply by 10 to get same range as ofs (-1000..1000)
  400bc8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400bcc:	0052      	lsls	r2, r2, #1
  400bce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
  400bd2:	b23e      	sxth	r6, r7
  400bd4:	42b3      	cmp	r3, r6
  400bd6:	bfb8      	it	lt
  400bd8:	461e      	movlt	r6, r3
  400bda:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
  400bde:	4296      	cmp	r6, r2
  400be0:	bfb8      	it	lt
  400be2:	4616      	movlt	r6, r2
  400be4:	b2b6      	uxth	r6, r6
  if (ofs > lim_p) ofs = lim_p;
  if (ofs < lim_n) ofs = lim_n;

  if (value) value =
  400be6:	2900      	cmp	r1, #0
      (value > 0) ? value * ((int32_t) lim_p - ofs) / 100000 :
          -value * ((int32_t) lim_n - ofs) / 100000; //div by 100000 -> output = -1024..1024
  400be8:	b236      	sxth	r6, r6
  int16_t lim_p = 10 * (g_model.limitData[channel].max + 100);
  int16_t lim_n = 10 * (g_model.limitData[channel].min - 100); //multiply by 10 to get same range as ofs (-1000..1000)
  if (ofs > lim_p) ofs = lim_p;
  if (ofs < lim_n) ofs = lim_n;

  if (value) value =
  400bea:	d00f      	beq.n	400c0c <_Z11applyLimitshl+0x68>
      (value > 0) ? value * ((int32_t) lim_p - ofs) / 100000 :
          -value * ((int32_t) lim_n - ofs) / 100000; //div by 100000 -> output = -1024..1024
  400bec:	bfcc      	ite	gt
  400bee:	ebc6 0703 	rsbgt	r7, r6, r3
  400bf2:	ebc2 0706 	rsble	r7, r2, r6
  400bf6:	fb01 f107 	mul.w	r1, r1, r7
  400bfa:	f24b 5789 	movw	r7, #46473	; 0xb589
  400bfe:	f2c1 47f8 	movt	r7, #5368	; 0x14f8
  400c02:	fb87 c701 	smull	ip, r7, r7, r1
  400c06:	17c9      	asrs	r1, r1, #31
  400c08:	ebc1 3167 	rsb	r1, r1, r7, asr #13
}

inline int16_t calc1000toRESX( register int32_t x)  // improve calc time by Pat MacKenzie
{
    register int32_t y = x>>5;
    x+=y;
  400c0c:	eb06 1766 	add.w	r7, r6, r6, asr #5
    y=y>>2;
    x-=y;
  400c10:	eba7 17e6 	sub.w	r7, r7, r6, asr #7
}

inline int16_t calc1000toRESX( register int32_t x)  // improve calc time by Pat MacKenzie
{
    register int32_t y = x>>5;
    x+=y;
  400c14:	eb03 1c63 	add.w	ip, r3, r3, asr #5
    y=y>>2;
    x-=y;
    return x+(y>>2);
  400c18:	eb07 2666 	add.w	r6, r7, r6, asr #9
inline int16_t calc1000toRESX( register int32_t x)  // improve calc time by Pat MacKenzie
{
    register int32_t y = x>>5;
    x+=y;
    y=y>>2;
    x-=y;
  400c1c:	ebac 1ce3 	sub.w	ip, ip, r3, asr #7
}

inline int16_t calc1000toRESX( register int32_t x)  // improve calc time by Pat MacKenzie
{
    register int32_t y = x>>5;
    x+=y;
  400c20:	eb02 1762 	add.w	r7, r2, r2, asr #5

  value += calc1000toRESX(ofs);
  400c24:	b236      	sxth	r6, r6
    y=y>>2;
    x-=y;
    return x+(y>>2);
  400c26:	eb0c 2363 	add.w	r3, ip, r3, asr #9
inline int16_t calc1000toRESX( register int32_t x)  // improve calc time by Pat MacKenzie
{
    register int32_t y = x>>5;
    x+=y;
    y=y>>2;
    x-=y;
  400c2a:	eba7 17e2 	sub.w	r7, r7, r2, asr #7
  lim_n = calc1000toRESX(lim_n);
  if (value > lim_p) value = lim_p;
  if (value < lim_n) value = lim_n;

  ofs = value; // we convert value to a 16bit value and reuse ofs
  if (g_model.limitData[channel].revert) ofs = -ofs; // finally do the reverse.
  400c2e:	182d      	adds	r5, r5, r0

  if (value) value =
      (value > 0) ? value * ((int32_t) lim_p - ofs) / 100000 :
          -value * ((int32_t) lim_n - ofs) / 100000; //div by 100000 -> output = -1024..1024

  value += calc1000toRESX(ofs);
  400c30:	1871      	adds	r1, r6, r1
  lim_p = calc1000toRESX(lim_p);
  lim_n = calc1000toRESX(lim_n);
  if (value > lim_p) value = lim_p;
  400c32:	b21b      	sxth	r3, r3
    return x+(y>>2);
  400c34:	eb07 2262 	add.w	r2, r7, r2, asr #9
  if (value < lim_n) value = lim_n;

  ofs = value; // we convert value to a 16bit value and reuse ofs
  if (g_model.limitData[channel].revert) ofs = -ofs; // finally do the reverse.
  400c38:	1965      	adds	r5, r4, r5

inline int16_t calc1000toRESX( register int32_t x)  // improve calc time by Pat MacKenzie
{
    register int32_t y = x>>5;
    x+=y;
    y=y>>2;
  400c3a:	4299      	cmp	r1, r3
  400c3c:	bfa8      	it	ge
  400c3e:	4619      	movge	r1, r3

  value += calc1000toRESX(ofs);
  lim_p = calc1000toRESX(lim_p);
  lim_n = calc1000toRESX(lim_n);
  if (value > lim_p) value = lim_p;
  if (value < lim_n) value = lim_n;
  400c40:	b212      	sxth	r2, r2

  ofs = value; // we convert value to a 16bit value and reuse ofs
  if (g_model.limitData[channel].revert) ofs = -ofs; // finally do the reverse.
  400c42:	f895 5513 	ldrb.w	r5, [r5, #1299]	; 0x513
  lim_p = calc1000toRESX(lim_p);
  lim_n = calc1000toRESX(lim_n);
  if (value > lim_p) value = lim_p;
  if (value < lim_n) value = lim_n;

  ofs = value; // we convert value to a 16bit value and reuse ofs
  400c46:	4291      	cmp	r1, r2
  400c48:	bfa8      	it	ge
  400c4a:	460a      	movge	r2, r1
  400c4c:	b292      	uxth	r2, r2
  if (g_model.limitData[channel].revert) ofs = -ofs; // finally do the reverse.
  400c4e:	b10d      	cbz	r5, 400c54 <_Z11applyLimitshl+0xb0>
  400c50:	4252      	negs	r2, r2
  400c52:	b292      	uxth	r2, r2

  if (safetyCh[channel] != -128) // if safety channel available for channel check
  400c54:	1820      	adds	r0, r4, r0
  400c56:	f990 3898 	ldrsb.w	r3, [r0, #2200]	; 0x898
  400c5a:	f113 0f80 	cmn.w	r3, #128	; 0x80
void resetProto();

#if defined(PCBARM)
inline int32_t calc100toRESX(register int8_t x)
{
  return ((uint32_t)x*655)>>6 ;
  400c5e:	bf1e      	ittt	ne
  400c60:	f240 228f 	movwne	r2, #655	; 0x28f
  400c64:	435a      	mulne	r2, r3
    ofs = calc100toRESX(safetyCh[channel]);
  400c66:	f3c2 128f 	ubfxne	r2, r2, #6, #16

  return ofs;
  400c6a:	b210      	sxth	r0, r2
}
  400c6c:	bcf0      	pop	{r4, r5, r6, r7}
  400c6e:	4770      	bx	lr
  400c70:	20000108 	.word	0x20000108

00400c74 <_Z8getValueh>:

int16_t getValue(uint8_t i)
{
  /*srcRaw is shifted +1!*/

  if(i<NUM_STICKS+NUM_POTS) return calibratedStick[i];
  400c74:	2806      	cmp	r0, #6
#ifdef HELI
int16_t cyc_anas[3] = {0};
#endif

int16_t getValue(uint8_t i)
{
  400c76:	b508      	push	{r3, lr}
  /*srcRaw is shifted +1!*/

  if(i<NUM_STICKS+NUM_POTS) return calibratedStick[i];
  400c78:	f240 8082 	bls.w	400d80 <_Z8getValueh+0x10c>
#if defined(PCBV4)
  else if(i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS) return getRotaryEncoder(i-(NUM_STICKS+NUM_POTS));
#endif
  else if(i<MIXSRC_MAX) return 1024;
  400c7c:	2807      	cmp	r0, #7
  400c7e:	bf08      	it	eq
  400c80:	f44f 6080 	moveq.w	r0, #1024	; 0x400
  400c84:	d101      	bne.n	400c8a <_Z8getValueh+0x16>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ACCz) return frskyHubData.accelZ;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_HDG) return frskyHubData.gpsCourse_bp;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_VSPD) return frskyHubData.varioSpeed;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_A1) return frskyTelemetry[0].min;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_A2) return frskyTelemetry[1].min;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MAX_DIST) return *(((int16_t*)(&frskyHubData.minAltitude))+i-(CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_ALT-1));
  400c86:	b200      	sxth	r0, r0
#endif
#endif
  else return 0;
}
  400c88:	bd08      	pop	{r3, pc}
  if(i<NUM_STICKS+NUM_POTS) return calibratedStick[i];
#if defined(PCBV4)
  else if(i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS) return getRotaryEncoder(i-(NUM_STICKS+NUM_POTS));
#endif
  else if(i<MIXSRC_MAX) return 1024;
  else if(i<MIXSRC_3POS) return (keyState(SW_ID0) ? -1024 : (keyState(SW_ID1) ? 0 : 1024));
  400c8a:	2808      	cmp	r0, #8
  400c8c:	d07f      	beq.n	400d8e <_Z8getValueh+0x11a>
  else if(i<MIXSRC_3POS+3)
  400c8e:	280b      	cmp	r0, #11
  400c90:	f240 8084 	bls.w	400d9c <_Z8getValueh+0x128>
#ifdef HELI
    return cyc_anas[i-MIXSRC_3POS];
#else
    return 0;
#endif
  else if(i<CSW_PPM_BASE+NUM_CAL_PPM) return (g_ppmIns[i-CSW_PPM_BASE] - g_eeGeneral.trainer.calib[i-CSW_PPM_BASE])*2;
  400c94:	280f      	cmp	r0, #15
  400c96:	f240 8094 	bls.w	400dc2 <_Z8getValueh+0x14e>
  else if(i<CSW_PPM_BASE+NUM_PPM) return g_ppmIns[i-CSW_PPM_BASE]*2;
  400c9a:	2813      	cmp	r0, #19
  400c9c:	f240 8089 	bls.w	400db2 <_Z8getValueh+0x13e>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT) return ex_chans[i-CSW_CHOUT_BASE];
  400ca0:	2833      	cmp	r0, #51	; 0x33
  400ca2:	f240 8099 	bls.w	400dd8 <_Z8getValueh+0x164>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_TM2) return s_timerVal[i-CSW_CHOUT_BASE-NUM_CHNOUT];
  400ca6:	2835      	cmp	r0, #53	; 0x35
  400ca8:	f240 8096 	bls.w	400dd8 <_Z8getValueh+0x164>
#if defined(FRSKY)
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_A2) return frskyTelemetry[i-CSW_CHOUT_BASE-NUM_CHNOUT-2].value;
  400cac:	2837      	cmp	r0, #55	; 0x37
  400cae:	f240 8099 	bls.w	400de4 <_Z8getValueh+0x170>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_RSSI_TX) return frskyRSSI[1].value;
  400cb2:	2838      	cmp	r0, #56	; 0x38
  400cb4:	f000 809e 	beq.w	400df4 <_Z8getValueh+0x180>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_RSSI_RX) return frskyRSSI[0].value;
  400cb8:	2839      	cmp	r0, #57	; 0x39
  400cba:	f000 809f 	beq.w	400dfc <_Z8getValueh+0x188>
#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ALT) return frskyHubData.baroAltitude_bp;
  400cbe:	283a      	cmp	r0, #58	; 0x3a
  400cc0:	f000 80a0 	beq.w	400e04 <_Z8getValueh+0x190>
#endif
#if defined(FRSKY_HUB)
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_RPM) return frskyHubData.rpm;
  400cc4:	283b      	cmp	r0, #59	; 0x3b
  400cc6:	bf04      	itt	eq
  400cc8:	4b53      	ldreq	r3, [pc, #332]	; (400e18 <_Z8getValueh+0x1a4>)
  400cca:	f8b3 091e 	ldrheq.w	r0, [r3, #2334]	; 0x91e
  400cce:	d0da      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_FUEL) return frskyHubData.fuelLevel;
  400cd0:	283c      	cmp	r0, #60	; 0x3c
  400cd2:	bf04      	itt	eq
  400cd4:	4b50      	ldreq	r3, [pc, #320]	; (400e18 <_Z8getValueh+0x1a4>)
  400cd6:	f8b3 0920 	ldrheq.w	r0, [r3, #2336]	; 0x920
  400cda:	d0d4      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_T1) return frskyHubData.temperature1;
  400cdc:	283d      	cmp	r0, #61	; 0x3d
  400cde:	bf04      	itt	eq
  400ce0:	4b4d      	ldreq	r3, [pc, #308]	; (400e18 <_Z8getValueh+0x1a4>)
  400ce2:	f8b3 091c 	ldrheq.w	r0, [r3, #2332]	; 0x91c
  400ce6:	d0ce      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_T2) return frskyHubData.temperature2;
  400ce8:	283e      	cmp	r0, #62	; 0x3e
  400cea:	bf04      	itt	eq
  400cec:	4b4a      	ldreq	r3, [pc, #296]	; (400e18 <_Z8getValueh+0x1a4>)
  400cee:	f8b3 0922 	ldrheq.w	r0, [r3, #2338]	; 0x922
  400cf2:	d0c8      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_SPEED) return frskyHubData.gpsSpeed_bp;
  400cf4:	283f      	cmp	r0, #63	; 0x3f
  400cf6:	bf04      	itt	eq
  400cf8:	4b47      	ldreq	r3, [pc, #284]	; (400e18 <_Z8getValueh+0x1a4>)
  400cfa:	f8b3 093a 	ldrheq.w	r0, [r3, #2362]	; 0x93a
  400cfe:	d0c2      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_DIST) return frskyHubData.gpsDistance;
  400d00:	2840      	cmp	r0, #64	; 0x40
  400d02:	bf04      	itt	eq
  400d04:	4b44      	ldreq	r3, [pc, #272]	; (400e18 <_Z8getValueh+0x1a4>)
  400d06:	f8b3 0990 	ldrheq.w	r0, [r3, #2448]	; 0x990
  400d0a:	d0bc      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_GPSALT) return frskyHubData.gpsAltitude_bp;
  400d0c:	2841      	cmp	r0, #65	; 0x41
  400d0e:	bf04      	itt	eq
  400d10:	4b41      	ldreq	r3, [pc, #260]	; (400e18 <_Z8getValueh+0x1a4>)
  400d12:	f8b3 091a 	ldrheq.w	r0, [r3, #2330]	; 0x91a
  400d16:	d0b6      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_CELL) return (int16_t)frskyHubData.minCellVolts * 2;
  400d18:	2842      	cmp	r0, #66	; 0x42
  400d1a:	d077      	beq.n	400e0c <_Z8getValueh+0x198>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ACCx) return frskyHubData.accelX;
  400d1c:	2843      	cmp	r0, #67	; 0x43
  400d1e:	bf04      	itt	eq
  400d20:	4b3d      	ldreq	r3, [pc, #244]	; (400e18 <_Z8getValueh+0x1a4>)
  400d22:	f8b3 0960 	ldrheq.w	r0, [r3, #2400]	; 0x960
  400d26:	d0ae      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ACCy) return frskyHubData.accelY;
  400d28:	2844      	cmp	r0, #68	; 0x44
  400d2a:	bf04      	itt	eq
  400d2c:	4b3a      	ldreq	r3, [pc, #232]	; (400e18 <_Z8getValueh+0x1a4>)
  400d2e:	f8b3 0962 	ldrheq.w	r0, [r3, #2402]	; 0x962
  400d32:	d0a8      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ACCz) return frskyHubData.accelZ;
  400d34:	2845      	cmp	r0, #69	; 0x45
  400d36:	bf04      	itt	eq
  400d38:	4b37      	ldreq	r3, [pc, #220]	; (400e18 <_Z8getValueh+0x1a4>)
  400d3a:	f8b3 0964 	ldrheq.w	r0, [r3, #2404]	; 0x964
  400d3e:	d0a2      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_HDG) return frskyHubData.gpsCourse_bp;
  400d40:	2846      	cmp	r0, #70	; 0x46
  400d42:	bf04      	itt	eq
  400d44:	4b34      	ldreq	r3, [pc, #208]	; (400e18 <_Z8getValueh+0x1a4>)
  400d46:	f8b3 0940 	ldrheq.w	r0, [r3, #2368]	; 0x940
  400d4a:	d09c      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_VSPD) return frskyHubData.varioSpeed;
  400d4c:	2847      	cmp	r0, #71	; 0x47
  400d4e:	bf04      	itt	eq
  400d50:	4b31      	ldreq	r3, [pc, #196]	; (400e18 <_Z8getValueh+0x1a4>)
  400d52:	f8b3 0978 	ldrheq.w	r0, [r3, #2424]	; 0x978
  400d56:	d096      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_A1) return frskyTelemetry[0].min;
  400d58:	2848      	cmp	r0, #72	; 0x48
  400d5a:	bf04      	itt	eq
  400d5c:	4b2e      	ldreq	r3, [pc, #184]	; (400e18 <_Z8getValueh+0x1a4>)
  400d5e:	f893 090d 	ldrbeq.w	r0, [r3, #2317]	; 0x90d
  400d62:	d090      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_A2) return frskyTelemetry[1].min;
  400d64:	2849      	cmp	r0, #73	; 0x49
  400d66:	bf04      	itt	eq
  400d68:	4b2b      	ldreq	r3, [pc, #172]	; (400e18 <_Z8getValueh+0x1a4>)
  400d6a:	f893 0910 	ldrbeq.w	r0, [r3, #2320]	; 0x910
  400d6e:	d08a      	beq.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MAX_DIST) return *(((int16_t*)(&frskyHubData.minAltitude))+i-(CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_ALT-1));
  400d70:	2850      	cmp	r0, #80	; 0x50
  400d72:	d813      	bhi.n	400d9c <_Z8getValueh+0x128>
  400d74:	4b29      	ldr	r3, [pc, #164]	; (400e1c <_Z8getValueh+0x1a8>)
  400d76:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  400d7a:	f830 0c32 	ldrh.w	r0, [r0, #-50]
  400d7e:	e782      	b.n	400c86 <_Z8getValueh+0x12>

int16_t getValue(uint8_t i)
{
  /*srcRaw is shifted +1!*/

  if(i<NUM_STICKS+NUM_POTS) return calibratedStick[i];
  400d80:	4b25      	ldr	r3, [pc, #148]	; (400e18 <_Z8getValueh+0x1a4>)
  400d82:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  400d86:	f8b0 08b8 	ldrh.w	r0, [r0, #2232]	; 0x8b8
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ACCz) return frskyHubData.accelZ;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_HDG) return frskyHubData.gpsCourse_bp;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_VSPD) return frskyHubData.varioSpeed;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_A1) return frskyTelemetry[0].min;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_A2) return frskyTelemetry[1].min;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MAX_DIST) return *(((int16_t*)(&frskyHubData.minAltitude))+i-(CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_MIN_ALT-1));
  400d8a:	b200      	sxth	r0, r0
#endif
#endif
  else return 0;
}
  400d8c:	bd08      	pop	{r3, pc}
  if(i<NUM_STICKS+NUM_POTS) return calibratedStick[i];
#if defined(PCBV4)
  else if(i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS) return getRotaryEncoder(i-(NUM_STICKS+NUM_POTS));
#endif
  else if(i<MIXSRC_MAX) return 1024;
  else if(i<MIXSRC_3POS) return (keyState(SW_ID0) ? -1024 : (keyState(SW_ID1) ? 0 : 1024));
  400d8e:	2011      	movs	r0, #17
  400d90:	f7ff fc02 	bl	400598 <_Z8keyState8EnumKeys>
  400d94:	b120      	cbz	r0, 400da0 <_Z8getValueh+0x12c>
  400d96:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  400d9a:	e774      	b.n	400c86 <_Z8getValueh+0x12>
  else if(i<MIXSRC_3POS+3)
#ifdef HELI
    return cyc_anas[i-MIXSRC_3POS];
#else
    return 0;
  400d9c:	2000      	movs	r0, #0
  400d9e:	e772      	b.n	400c86 <_Z8getValueh+0x12>
  if(i<NUM_STICKS+NUM_POTS) return calibratedStick[i];
#if defined(PCBV4)
  else if(i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS) return getRotaryEncoder(i-(NUM_STICKS+NUM_POTS));
#endif
  else if(i<MIXSRC_MAX) return 1024;
  else if(i<MIXSRC_3POS) return (keyState(SW_ID0) ? -1024 : (keyState(SW_ID1) ? 0 : 1024));
  400da0:	2012      	movs	r0, #18
  400da2:	f7ff fbf9 	bl	400598 <_Z8keyState8EnumKeys>
  400da6:	2800      	cmp	r0, #0
  400da8:	bf0c      	ite	eq
  400daa:	f44f 6080 	moveq.w	r0, #1024	; 0x400
  400dae:	2000      	movne	r0, #0
  400db0:	e769      	b.n	400c86 <_Z8getValueh+0x12>
    return cyc_anas[i-MIXSRC_3POS];
#else
    return 0;
#endif
  else if(i<CSW_PPM_BASE+NUM_CAL_PPM) return (g_ppmIns[i-CSW_PPM_BASE] - g_eeGeneral.trainer.calib[i-CSW_PPM_BASE])*2;
  else if(i<CSW_PPM_BASE+NUM_PPM) return g_ppmIns[i-CSW_PPM_BASE]*2;
  400db2:	4b19      	ldr	r3, [pc, #100]	; (400e18 <_Z8getValueh+0x1a4>)
  400db4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  400db8:	f830 0c04 	ldrh.w	r0, [r0, #-4]
  400dbc:	0040      	lsls	r0, r0, #1
  400dbe:	b280      	uxth	r0, r0
  400dc0:	e761      	b.n	400c86 <_Z8getValueh+0x12>
#ifdef HELI
    return cyc_anas[i-MIXSRC_3POS];
#else
    return 0;
#endif
  else if(i<CSW_PPM_BASE+NUM_CAL_PPM) return (g_ppmIns[i-CSW_PPM_BASE] - g_eeGeneral.trainer.calib[i-CSW_PPM_BASE])*2;
  400dc2:	4b15      	ldr	r3, [pc, #84]	; (400e18 <_Z8getValueh+0x1a4>)
  400dc4:	eb03 0240 	add.w	r2, r3, r0, lsl #1
  400dc8:	f932 0c04 	ldrsh.w	r0, [r2, #-4]
  400dcc:	f9b2 303e 	ldrsh.w	r3, [r2, #62]	; 0x3e
  400dd0:	1ac0      	subs	r0, r0, r3
  400dd2:	0040      	lsls	r0, r0, #1
  400dd4:	b280      	uxth	r0, r0
  400dd6:	e756      	b.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_PPM_BASE+NUM_PPM) return g_ppmIns[i-CSW_PPM_BASE]*2;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT) return ex_chans[i-CSW_CHOUT_BASE];
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_TM2) return s_timerVal[i-CSW_CHOUT_BASE-NUM_CHNOUT];
  400dd8:	4b0f      	ldr	r3, [pc, #60]	; (400e18 <_Z8getValueh+0x1a4>)
  400dda:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  400dde:	f8b0 08a0 	ldrh.w	r0, [r0, #2208]	; 0x8a0
  400de2:	e750      	b.n	400c86 <_Z8getValueh+0x12>
#if defined(FRSKY)
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_A2) return frskyTelemetry[i-CSW_CHOUT_BASE-NUM_CHNOUT-2].value;
  400de4:	3836      	subs	r0, #54	; 0x36
  400de6:	4b0c      	ldr	r3, [pc, #48]	; (400e18 <_Z8getValueh+0x1a4>)
  400de8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400dec:	181b      	adds	r3, r3, r0
  400dee:	f893 090c 	ldrb.w	r0, [r3, #2316]	; 0x90c
  400df2:	e748      	b.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_RSSI_TX) return frskyRSSI[1].value;
  400df4:	4b08      	ldr	r3, [pc, #32]	; (400e18 <_Z8getValueh+0x1a4>)
  400df6:	f893 0916 	ldrb.w	r0, [r3, #2326]	; 0x916
  400dfa:	e744      	b.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_RSSI_RX) return frskyRSSI[0].value;
  400dfc:	4b06      	ldr	r3, [pc, #24]	; (400e18 <_Z8getValueh+0x1a4>)
  400dfe:	f893 0914 	ldrb.w	r0, [r3, #2324]	; 0x914
  400e02:	e740      	b.n	400c86 <_Z8getValueh+0x12>
#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ALT) return frskyHubData.baroAltitude_bp;
  400e04:	4b04      	ldr	r3, [pc, #16]	; (400e18 <_Z8getValueh+0x1a4>)
  400e06:	f8b3 0938 	ldrh.w	r0, [r3, #2360]	; 0x938
  400e0a:	e73c      	b.n	400c86 <_Z8getValueh+0x12>
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_T1) return frskyHubData.temperature1;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_T2) return frskyHubData.temperature2;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_SPEED) return frskyHubData.gpsSpeed_bp;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_DIST) return frskyHubData.gpsDistance;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_GPSALT) return frskyHubData.gpsAltitude_bp;
  else if(i<CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_CELL) return (int16_t)frskyHubData.minCellVolts * 2;
  400e0c:	4b02      	ldr	r3, [pc, #8]	; (400e18 <_Z8getValueh+0x1a4>)
  400e0e:	f893 0967 	ldrb.w	r0, [r3, #2407]	; 0x967
  400e12:	0040      	lsls	r0, r0, #1
  400e14:	e737      	b.n	400c86 <_Z8getValueh+0x12>
  400e16:	bf00      	nop
  400e18:	20000108 	.word	0x20000108
  400e1c:	20000a20 	.word	0x20000a20

00400e20 <_Z15getRawTrimValuehh>:
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  400e20:	4b0c      	ldr	r3, [pc, #48]	; (400e54 <_Z15getRawTrimValuehh+0x34>)
  400e22:	eb03 0281 	add.w	r2, r3, r1, lsl #2
  400e26:	f8d2 2998 	ldr.w	r2, [r2, #2456]	; 0x998
  400e2a:	b122      	cbz	r2, 400e36 <_Z15getRawTrimValuehh+0x16>
    result = *s_trimPtr[idx];
  400e2c:	f992 0000 	ldrsb.w	r0, [r2]
  400e30:	b280      	uxth	r0, r0
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
#endif
  }
  return result;
  400e32:	b200      	sxth	r0, r0
}
  400e34:	4770      	bx	lr
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  400e36:	f503 739e 	add.w	r3, r3, #316	; 0x13c
  400e3a:	0100      	lsls	r0, r0, #4
  400e3c:	f500 60d1 	add.w	r0, r0, #1672	; 0x688
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  400e40:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  400e44:	180a      	adds	r2, r1, r0
  400e46:	5c0b      	ldrb	r3, [r1, r0]
  400e48:	7850      	ldrb	r0, [r2, #1]
  400e4a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
#endif
  }
  return result;
  400e4e:	b200      	sxth	r0, r0
}
  400e50:	4770      	bx	lr
  400e52:	bf00      	nop
  400e54:	20000108 	.word	0x20000108

00400e58 <_Z12setTrimValuehhs>:
  return getRawTrimValue(getTrimFlightPhase(phase, idx), idx);
}

void setTrimValue(uint8_t phase, uint8_t idx, int16_t trim)
{
  if (s_trimPtr[idx]) {
  400e58:	4b15      	ldr	r3, [pc, #84]	; (400eb0 <_Z12setTrimValuehhs+0x58>)
{
  return getRawTrimValue(getTrimFlightPhase(phase, idx), idx);
}

void setTrimValue(uint8_t phase, uint8_t idx, int16_t trim)
{
  400e5a:	b430      	push	{r4, r5}
  if (s_trimPtr[idx]) {
  400e5c:	eb03 0481 	add.w	r4, r3, r1, lsl #2
  400e60:	f8d4 4998 	ldr.w	r4, [r4, #2456]	; 0x998
  400e64:	b1b4      	cbz	r4, 400e94 <_Z12setTrimValuehhs+0x3c>
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  400e66:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
  400e6a:	db11      	blt.n	400e90 <_Z12setTrimValuehhs+0x38>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  400e6c:	2a7c      	cmp	r2, #124	; 0x7c
  400e6e:	bfd8      	it	le
  400e70:	b2d2      	uxtble	r2, r2
  400e72:	dd00      	ble.n	400e76 <_Z12setTrimValuehhs+0x1e>
  400e74:	227d      	movs	r2, #125	; 0x7d
    *s_trimPtr[idx] = limit((int16_t)-125, trim, (int16_t)+125);
  400e76:	7022      	strb	r2, [r4, #0]
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  400e78:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  400e7c:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  400e80:	f041 0102 	orr.w	r1, r1, #2
  400e84:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  400e88:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
#else
    p->trim[idx] = trim;
#endif
  }
  STORE_MODELVARS;
}
  400e8c:	bc30      	pop	{r4, r5}
  400e8e:	4770      	bx	lr
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  400e90:	2283      	movs	r2, #131	; 0x83
  400e92:	e7f0      	b.n	400e76 <_Z12setTrimValuehhs+0x1e>
{
  if (s_trimPtr[idx]) {
    *s_trimPtr[idx] = limit((int16_t)-125, trim, (int16_t)+125);
  }
  else {
    PhaseData *p = phaseaddress(phase);
  400e94:	f503 749e 	add.w	r4, r3, #316	; 0x13c
  400e98:	0100      	lsls	r0, r0, #4
  400e9a:	f500 60d1 	add.w	r0, r0, #1672	; 0x688
#if defined(PCBSTD)
    p->trim[idx] = (int8_t)(trim >> 2);
    p->trim_ext = (p->trim_ext & ~(0x03 << (2*idx))) + (((trim & 0x03) << (2*idx)));
#else
    p->trim[idx] = trim;
  400e9e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  400ea2:	b292      	uxth	r2, r2
  400ea4:	180c      	adds	r4, r1, r0
  400ea6:	0a15      	lsrs	r5, r2, #8
  400ea8:	540a      	strb	r2, [r1, r0]
  400eaa:	7065      	strb	r5, [r4, #1]
  400eac:	e7e4      	b.n	400e78 <_Z12setTrimValuehhs+0x20>
  400eae:	bf00      	nop
  400eb0:	20000108 	.word	0x20000108

00400eb4 <_Z18getTrimFlightPhasehh>:
  }
  STORE_MODELVARS;
}

uint8_t getTrimFlightPhase(uint8_t phase, uint8_t idx)
{
  400eb4:	b430      	push	{r4, r5}
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
  400eb6:	b128      	cbz	r0, 400ec4 <_Z18getTrimFlightPhasehh+0x10>
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  400eb8:	4b1c      	ldr	r3, [pc, #112]	; (400f2c <_Z18getTrimFlightPhasehh+0x78>)
  400eba:	eb03 0281 	add.w	r2, r3, r1, lsl #2
  400ebe:	f8d2 2998 	ldr.w	r2, [r2, #2456]	; 0x998
  400ec2:	b10a      	cbz	r2, 400ec8 <_Z18getTrimFlightPhasehh+0x14>
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
    if (result >= phase) result++;
    phase = result;
  }
  return 0;
}
  400ec4:	bc30      	pop	{r4, r5}
  400ec6:	4770      	bx	lr
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  400ec8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
  400ecc:	0102      	lsls	r2, r0, #4
  400ece:	f502 62d1 	add.w	r2, r2, #1672	; 0x688
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  400ed2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
  400ed6:	18a1      	adds	r1, r4, r2
  400ed8:	5ca3      	ldrb	r3, [r4, r2]
  400eda:	784a      	ldrb	r2, [r1, #1]
  400edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
uint8_t getTrimFlightPhase(uint8_t phase, uint8_t idx)
{
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
    int16_t trim = getRawTrimValue(phase, idx);
    if (trim <= TRIM_EXTENDED_MAX) return phase;
  400ee0:	b21a      	sxth	r2, r3
  400ee2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400ee6:	dded      	ble.n	400ec4 <_Z18getTrimFlightPhasehh+0x10>
  400ee8:	2209      	movs	r2, #9
  400eea:	e008      	b.n	400efe <_Z18getTrimFlightPhasehh+0x4a>
}

uint8_t getTrimFlightPhase(uint8_t phase, uint8_t idx)
{
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
  400eec:	b1db      	cbz	r3, 400f26 <_Z18getTrimFlightPhasehh+0x72>
  else {
    PhaseData *p = phaseaddress(phase);
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  400eee:	5c63      	ldrb	r3, [r4, r1]
  400ef0:	7869      	ldrb	r1, [r5, #1]
  400ef2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
uint8_t getTrimFlightPhase(uint8_t phase, uint8_t idx)
{
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
    int16_t trim = getRawTrimValue(phase, idx);
    if (trim <= TRIM_EXTENDED_MAX) return phase;
  400ef6:	b219      	sxth	r1, r3
  400ef8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
  400efc:	dde2      	ble.n	400ec4 <_Z18getTrimFlightPhasehh+0x10>
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
  400efe:	b2d9      	uxtb	r1, r3
  400f00:	f101 030b 	add.w	r3, r1, #11
  400f04:	b2db      	uxtb	r3, r3
    if (result >= phase) result++;
  400f06:	4283      	cmp	r3, r0
  400f08:	bf24      	itt	cs
  400f0a:	f101 030c 	addcs.w	r3, r1, #12
  400f0e:	b2db      	uxtbcs	r3, r3
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  400f10:	0119      	lsls	r1, r3, #4
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
    int16_t trim = getRawTrimValue(phase, idx);
    if (trim <= TRIM_EXTENDED_MAX) return phase;
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
    if (result >= phase) result++;
  400f12:	3a01      	subs	r2, #1
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  400f14:	f501 61d1 	add.w	r1, r1, #1672	; 0x688
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
    int16_t trim = getRawTrimValue(phase, idx);
    if (trim <= TRIM_EXTENDED_MAX) return phase;
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
    if (result >= phase) result++;
  400f18:	b2d2      	uxtb	r2, r2
  else {
    PhaseData *p = phaseaddress(phase);
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  400f1a:	1865      	adds	r5, r4, r1
  400f1c:	4618      	mov	r0, r3
  STORE_MODELVARS;
}

uint8_t getTrimFlightPhase(uint8_t phase, uint8_t idx)
{
  for (uint8_t i=0; i<MAX_PHASES; i++) {
  400f1e:	2a00      	cmp	r2, #0
  400f20:	d1e4      	bne.n	400eec <_Z18getTrimFlightPhasehh+0x38>
    if (trim <= TRIM_EXTENDED_MAX) return phase;
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
    if (result >= phase) result++;
    phase = result;
  }
  return 0;
  400f22:	4610      	mov	r0, r2
  400f24:	e7ce      	b.n	400ec4 <_Z18getTrimFlightPhasehh+0x10>
}

uint8_t getTrimFlightPhase(uint8_t phase, uint8_t idx)
{
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
  400f26:	4618      	mov	r0, r3
  400f28:	e7cc      	b.n	400ec4 <_Z18getTrimFlightPhasehh+0x10>
  400f2a:	bf00      	nop
  400f2c:	20000108 	.word	0x20000108

00400f30 <_Z12getTrimValuehh>:
  }
  return result;
}

int16_t getTrimValue(uint8_t phase, uint8_t idx)
{
  400f30:	b510      	push	{r4, lr}
  400f32:	460c      	mov	r4, r1
  return getRawTrimValue(getTrimFlightPhase(phase, idx), idx);
  400f34:	f7ff ffbe 	bl	400eb4 <_Z18getTrimFlightPhasehh>
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  400f38:	4a0c      	ldr	r2, [pc, #48]	; (400f6c <_Z12getTrimValuehh+0x3c>)
  400f3a:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  400f3e:	f8d3 3998 	ldr.w	r3, [r3, #2456]	; 0x998
  400f42:	b123      	cbz	r3, 400f4e <_Z12getTrimValuehh+0x1e>
    result = *s_trimPtr[idx];
  400f44:	f993 0000 	ldrsb.w	r0, [r3]
  400f48:	b280      	uxth	r0, r0
  return result;
}

int16_t getTrimValue(uint8_t phase, uint8_t idx)
{
  return getRawTrimValue(getTrimFlightPhase(phase, idx), idx);
  400f4a:	b200      	sxth	r0, r0
}
  400f4c:	bd10      	pop	{r4, pc}
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  400f4e:	f502 729e 	add.w	r2, r2, #316	; 0x13c
  400f52:	0100      	lsls	r0, r0, #4
  400f54:	f500 60d1 	add.w	r0, r0, #1672	; 0x688
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  400f58:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  400f5c:	1822      	adds	r2, r4, r0
  400f5e:	5c23      	ldrb	r3, [r4, r0]
  400f60:	7850      	ldrb	r0, [r2, #1]
  400f62:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  return result;
}

int16_t getTrimValue(uint8_t phase, uint8_t idx)
{
  return getRawTrimValue(getTrimFlightPhase(phase, idx), idx);
  400f66:	b200      	sxth	r0, r0
}
  400f68:	bd10      	pop	{r4, pc}
  400f6a:	bf00      	nop
  400f6c:	20000108 	.word	0x20000108

00400f70 <_Z14clearKeyEventsv>:
    lcd_putsiAtt(lcd_lastPos/*+1*/, y, STR_VTELEMUNIT, unit, 0);
}
#endif

void clearKeyEvents()
{
  400f70:	b508      	push	{r3, lr}
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while (keyDown());  // loop until all keys are up
  400f72:	f7ff fb09 	bl	400588 <_Z7keyDownv>
  400f76:	2800      	cmp	r0, #0
  400f78:	d1fb      	bne.n	400f72 <_Z14clearKeyEventsv+0x2>
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  400f7a:	4b02      	ldr	r3, [pc, #8]	; (400f84 <_Z14clearKeyEventsv+0x14>)
  400f7c:	f883 09ae 	strb.w	r0, [r3, #2478]	; 0x9ae
#endif
    putEvent(0);
}
  400f80:	bd08      	pop	{r3, pc}
  400f82:	bf00      	nop
  400f84:	20000108 	.word	0x20000108

00400f88 <_Z14stickMoveValuev>:

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  400f88:	4b08      	ldr	r3, [pc, #32]	; (400fac <_Z14stickMoveValuev+0x24>)
    putEvent(0);
}

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  400f8a:	b410      	push	{r4}
  400f8c:	4c08      	ldr	r4, [pc, #32]	; (400fb0 <_Z14stickMoveValuev+0x28>)
#endif
    putEvent(0);
}

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
  400f8e:	1d19      	adds	r1, r3, #4
{
  uint16_t sum = 0;
  400f90:	2000      	movs	r0, #0
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  400f92:	f813 2b01 	ldrb.w	r2, [r3], #1
  return *p;
  400f96:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  400f9a:	f8b2 29b0 	ldrh.w	r2, [r2, #2480]	; 0x9b0

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  for (uint8_t i=0; i<4; i++)
  400f9e:	428b      	cmp	r3, r1
    sum += anaIn(i)/INAC_DEVISOR;
  400fa0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
  400fa4:	b280      	uxth	r0, r0

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  for (uint8_t i=0; i<4; i++)
  400fa6:	d1f4      	bne.n	400f92 <_Z14stickMoveValuev+0xa>
    sum += anaIn(i)/INAC_DEVISOR;
  return sum;
}
  400fa8:	bc10      	pop	{r4}
  400faa:	4770      	bx	lr
  400fac:	0040f750 	.word	0x0040f750
  400fb0:	20000108 	.word	0x20000108

00400fb4 <_Z5anaInh>:
  //static pm_char crossAna[] PROGMEM ={4,2,3,1,5,6,7,0}; // wenn schon Tabelle, dann muss sich auch lohnen
  //                        Google Translate (German): // if table already, then it must also be worthwhile
#if defined(PCBARM)
  static const uint8_t crossAna[]={1,5,7,0,4,6,2,3,8};
#if defined(REVB)
  if ( chan == 8 ) {
  400fb4:	2808      	cmp	r0, #8
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  400fb6:	bf17      	itett	ne
  400fb8:	4b06      	ldrne	r3, [pc, #24]	; (400fd4 <_Z5anaInh+0x20>)
  //                        Google Translate (German): // if table already, then it must also be worthwhile
#if defined(PCBARM)
  static const uint8_t crossAna[]={1,5,7,0,4,6,2,3,8};
#if defined(REVB)
  if ( chan == 8 ) {
    return Current_analogue ;
  400fba:	4b07      	ldreq	r3, [pc, #28]	; (400fd8 <_Z5anaInh+0x24>)
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  400fbc:	1818      	addne	r0, r3, r0
  400fbe:	f890 2020 	ldrbne.w	r2, [r0, #32]
  return *p;
  400fc2:	bf17      	itett	ne
  400fc4:	4b04      	ldrne	r3, [pc, #16]	; (400fd8 <_Z5anaInh+0x24>)
  //                        Google Translate (German): // if table already, then it must also be worthwhile
#if defined(PCBARM)
  static const uint8_t crossAna[]={1,5,7,0,4,6,2,3,8};
#if defined(REVB)
  if ( chan == 8 ) {
    return Current_analogue ;
  400fc6:	f8b3 0130 	ldrheq.w	r0, [r3, #304]	; 0x130
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  400fca:	eb03 0342 	addne.w	r3, r3, r2, lsl #1
  400fce:	f8b3 09b0 	ldrhne.w	r0, [r3, #2480]	; 0x9b0
}
  400fd2:	4770      	bx	lr
  400fd4:	0040f730 	.word	0x0040f730
  400fd8:	20000108 	.word	0x20000108

00400fdc <_Z11getADC_filtv>:

#if defined(PCBARM)
void getADC_filt()
{
  400fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        register uint32_t x ;
        static uint16_t t_ana[2][NUMBER_ANALOG] ;

        read_9_adc() ;
  400fe0:	4c0f      	ldr	r4, [pc, #60]	; (401020 <_Z11getADC_filtv+0x44>)
  400fe2:	4f10      	ldr	r7, [pc, #64]	; (401024 <_Z11getADC_filtv+0x48>)
  400fe4:	f7ff fb22 	bl	40062c <_Z10read_9_adcv>
  400fe8:	f1a4 0514 	sub.w	r5, r4, #20
  400fec:	4622      	mov	r2, r4
  400fee:	2300      	movs	r3, #0
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
  400ff0:	8a51      	ldrh	r1, [r2, #18]
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
  400ff2:	5ae0      	ldrh	r0, [r4, r3]
        static uint16_t t_ana[2][NUMBER_ANALOG] ;

        read_9_adc() ;
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
  400ff4:	f835 c003 	ldrh.w	ip, [r5, r3]
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
                t_ana[0][x] = ( t_ana[0][x] + Analog_values[x] ) >> 1 ;
  400ff8:	f837 8003 	ldrh.w	r8, [r7, r3]

        read_9_adc() ;
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
  400ffc:	180e      	adds	r6, r1, r0
        static uint16_t t_ana[2][NUMBER_ANALOG] ;

        read_9_adc() ;
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
  400ffe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
                t_ana[0][x] = ( t_ana[0][x] + Analog_values[x] ) >> 1 ;
  401002:	4440      	add	r0, r8

        read_9_adc() ;
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
  401004:	1076      	asrs	r6, r6, #1
                t_ana[0][x] = ( t_ana[0][x] + Analog_values[x] ) >> 1 ;
  401006:	1040      	asrs	r0, r0, #1
        static uint16_t t_ana[2][NUMBER_ANALOG] ;

        read_9_adc() ;
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
  401008:	eb0c 0191 	add.w	r1, ip, r1, lsr #2
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
  40100c:	8256      	strh	r6, [r2, #18]
        static uint16_t t_ana[2][NUMBER_ANALOG] ;

        read_9_adc() ;
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
  40100e:	52e9      	strh	r1, [r5, r3]
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
                t_ana[0][x] = ( t_ana[0][x] + Analog_values[x] ) >> 1 ;
  401010:	52e0      	strh	r0, [r4, r3]
  401012:	3302      	adds	r3, #2
  401014:	3202      	adds	r2, #2
{
        register uint32_t x ;
        static uint16_t t_ana[2][NUMBER_ANALOG] ;

        read_9_adc() ;
        for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
  401016:	2b12      	cmp	r3, #18
  401018:	d1ea      	bne.n	400ff0 <_Z11getADC_filtv+0x14>
        {
                s_anaFilt[x] = s_anaFilt[x]/2 + (t_ana[1][x] >> 2 ) ;
                t_ana[1][x] = ( t_ana[1][x] + t_ana[0][x] ) >> 1 ;
                t_ana[0][x] = ( t_ana[0][x] + Analog_values[x] ) >> 1 ;
        }
}
  40101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40101e:	bf00      	nop
  401020:	20000acc 	.word	0x20000acc
  401024:	200001d4 	.word	0x200001d4

00401028 <_Z11getADC_osmpv>:
}
#endif

#if defined(PCBARM)
void getADC_osmp()
{
  401028:	b570      	push	{r4, r5, r6, lr}
  40102a:	b086      	sub	sp, #24

  for( x = 0; x < NUMBER_ANALOG; x += 1 )
  {
    temp[x] = 0;
  }
  for( y = 0; y < 4; y += 1 )
  40102c:	f10d 0302 	add.w	r3, sp, #2
  }
}
#endif

#if defined(PCBARM)
void getADC_osmp()
  401030:	aa05      	add	r2, sp, #20
  register uint32_t y;
  uint16_t temp[NUMBER_ANALOG];

  for( x = 0; x < NUMBER_ANALOG; x += 1 )
  {
    temp[x] = 0;
  401032:	2100      	movs	r1, #0
  401034:	f823 1f02 	strh.w	r1, [r3, #2]!
{
  register uint32_t x;
  register uint32_t y;
  uint16_t temp[NUMBER_ANALOG];

  for( x = 0; x < NUMBER_ANALOG; x += 1 )
  401038:	4293      	cmp	r3, r2
  40103a:	d1fa      	bne.n	401032 <_Z11getADC_osmpv+0xa>
  40103c:	2604      	movs	r6, #4
  40103e:	4d0c      	ldr	r5, [pc, #48]	; (401070 <_Z11getADC_osmpv+0x48>)
  401040:	eb0d 0406 	add.w	r4, sp, r6
  {
    temp[x] = 0;
  }
  for( y = 0; y < 4; y += 1 )
  {
    read_9_adc();
  401044:	f7ff faf2 	bl	40062c <_Z10read_9_adcv>
  401048:	2300      	movs	r3, #0
    for( x = 0; x < NUMBER_ANALOG; x += 1 )
    {
      temp[x] += Analog_values[x];
  40104a:	5ae2      	ldrh	r2, [r4, r3]
  40104c:	5ae9      	ldrh	r1, [r5, r3]
  40104e:	188a      	adds	r2, r1, r2
  401050:	52e2      	strh	r2, [r4, r3]
  401052:	3302      	adds	r3, #2
    temp[x] = 0;
  }
  for( y = 0; y < 4; y += 1 )
  {
    read_9_adc();
    for( x = 0; x < NUMBER_ANALOG; x += 1 )
  401054:	2b12      	cmp	r3, #18
  401056:	d1f8      	bne.n	40104a <_Z11getADC_osmpv+0x22>

  for( x = 0; x < NUMBER_ANALOG; x += 1 )
  {
    temp[x] = 0;
  }
  for( y = 0; y < 4; y += 1 )
  401058:	3e01      	subs	r6, #1
  40105a:	d1f3      	bne.n	401044 <_Z11getADC_osmpv+0x1c>
  40105c:	4905      	ldr	r1, [pc, #20]	; (401074 <_Z11getADC_osmpv+0x4c>)
  40105e:	4633      	mov	r3, r6
      temp[x] += Analog_values[x];
    }
  }
  for( x = 0; x < NUMBER_ANALOG; x += 1 )
  {
    s_anaFilt[x] = temp[x] >> 3;
  401060:	5ae2      	ldrh	r2, [r4, r3]
  401062:	10d2      	asrs	r2, r2, #3
  401064:	52ca      	strh	r2, [r1, r3]
  401066:	3302      	adds	r3, #2
    for( x = 0; x < NUMBER_ANALOG; x += 1 )
    {
      temp[x] += Analog_values[x];
    }
  }
  for( x = 0; x < NUMBER_ANALOG; x += 1 )
  401068:	2b12      	cmp	r3, #18
  40106a:	d1f9      	bne.n	401060 <_Z11getADC_osmpv+0x38>
  {
    s_anaFilt[x] = temp[x] >> 3;
  }
}
  40106c:	b006      	add	sp, #24
  40106e:	bd70      	pop	{r4, r5, r6, pc}
  401070:	200001d4 	.word	0x200001d4
  401074:	20000ab8 	.word	0x20000ab8

00401078 <_Z13getADC_singlev>:
}
#endif

#if defined(PCBARM)
void getADC_single()
{
  401078:	b508      	push	{r3, lr}
  register uint32_t x ;

  read_9_adc() ;
  40107a:	f7ff fad7 	bl	40062c <_Z10read_9_adcv>
  40107e:	4805      	ldr	r0, [pc, #20]	; (401094 <_Z13getADC_singlev+0x1c>)
  401080:	4905      	ldr	r1, [pc, #20]	; (401098 <_Z13getADC_singlev+0x20>)
  401082:	2300      	movs	r3, #0

  for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
  {
    s_anaFilt[x] = Analog_values[x] >> 1 ;
  401084:	5aca      	ldrh	r2, [r1, r3]
  401086:	1052      	asrs	r2, r2, #1
  401088:	52c2      	strh	r2, [r0, r3]
  40108a:	3302      	adds	r3, #2
{
  register uint32_t x ;

  read_9_adc() ;

  for( x = 0 ; x < NUMBER_ANALOG ; x += 1 )
  40108c:	2b12      	cmp	r3, #18
  40108e:	d1f9      	bne.n	401084 <_Z13getADC_singlev+0xc>
  {
    s_anaFilt[x] = Analog_values[x] >> 1 ;
  }
}
  401090:	bd08      	pop	{r3, pc}
  401092:	bf00      	nop
  401094:	20000ab8 	.word	0x20000ab8
  401098:	200001d4 	.word	0x200001d4

0040109c <_Z10resetTimerh>:
uint8_t  s_timerVal_10ms[2] = {0, 0};

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  40109c:	b430      	push	{r4, r5}
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  40109e:	f240 1308 	movw	r3, #264	; 0x108
  4010a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  s_timerVal[idx] = g_model.timers[idx].val;
  4010a6:	0044      	lsls	r4, r0, #1

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  4010a8:	181a      	adds	r2, r3, r0
  4010aa:	2100      	movs	r1, #0
  s_timerVal[idx] = g_model.timers[idx].val;
  4010ac:	1820      	adds	r0, r4, r0
  4010ae:	1818      	adds	r0, r3, r0

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  4010b0:	f882 19e8 	strb.w	r1, [r2, #2536]	; 0x9e8
  s_timerVal[idx] = g_model.timers[idx].val;
  4010b4:	f890 5147 	ldrb.w	r5, [r0, #327]	; 0x147
  4010b8:	f890 0148 	ldrb.w	r0, [r0, #328]	; 0x148
  4010bc:	191b      	adds	r3, r3, r4
  4010be:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
  4010c2:	f8a3 0908 	strh.w	r0, [r3, #2312]	; 0x908
  s_timerVal_10ms[idx] = 0 ;
  4010c6:	f882 19ec 	strb.w	r1, [r2, #2540]	; 0x9ec
}
  4010ca:	bc30      	pop	{r4, r5}
  4010cc:	4770      	bx	lr
  4010ce:	bf00      	nop

004010d0 <_Z7isqrt32m>:

#if defined(HELI) || defined(FRSKY_HUB)
uint16_t isqrt32(uint32_t n)
{
    uint16_t c = 0x8000;
    uint16_t g = 0x8000;
  4010d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
uint8_t s_traceWr;
int8_t s_traceCnt;

#if defined(HELI) || defined(FRSKY_HUB)
uint16_t isqrt32(uint32_t n)
{
  4010d4:	b410      	push	{r4}
  4010d6:	2110      	movs	r1, #16
    uint16_t c = 0x8000;
  4010d8:	461a      	mov	r2, r3
  4010da:	e000      	b.n	4010de <_Z7isqrt32m+0xe>
        if((uint32_t)g*g > n)
            g ^= c;
        c >>= 1;
        if(c == 0)
            return g;
        g |= c;
  4010dc:	4313      	orrs	r3, r2
{
    uint16_t c = 0x8000;
    uint16_t g = 0x8000;

    for(;;) {
        if((uint32_t)g*g > n)
  4010de:	fb03 f403 	mul.w	r4, r3, r3
  4010e2:	4284      	cmp	r4, r0
            g ^= c;
  4010e4:	bf88      	it	hi
  4010e6:	4053      	eorhi	r3, r2
        c >>= 1;
  4010e8:	0852      	lsrs	r2, r2, #1
        if(c == 0)
  4010ea:	3901      	subs	r1, #1
  4010ec:	d1f6      	bne.n	4010dc <_Z7isqrt32m+0xc>
            return g;
        g |= c;
    }
}
  4010ee:	4618      	mov	r0, r3
  4010f0:	bc10      	pop	{r4}
  4010f2:	4770      	bx	lr

004010f4 <_Z16disable_main_ppmv>:
void disable_main_ppm()
{
  register Pio *pioptr ;

  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                            // Assign A17 to PIO
  4010f4:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  4010f8:	f2c4 010e 	movt	r1, #16398	; 0x400e

  PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  4010fc:	2200      	movs	r2, #0
void disable_main_ppm()
{
  register Pio *pioptr ;

  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                            // Assign A17 to PIO
  4010fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  401102:	6008      	str	r0, [r1, #0]

  PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  401104:	f2c4 0202 	movt	r2, #16386	; 0x4002
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401108:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  40110c:	2108      	movs	r1, #8
  40110e:	6151      	str	r1, [r2, #20]
  401110:	f2ce 0300 	movt	r3, #57344	; 0xe000
  401114:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC_DisableIRQ(PWM_IRQn) ;
}
  40111c:	4770      	bx	lr
  40111e:	bf00      	nop

00401120 <_Z8init_sscv>:

// Initialise the SSC to allow PXX output.
// TD is on PA17, peripheral A
void init_ssc()
{
  401120:	b508      	push	{r3, lr}
  register Ssc *sscptr ;

  PMC->PMC_PCER0 |= 0x00400000L ;               // Enable peripheral clock to SSC
  401122:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401126:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40112a:	691a      	ldr	r2, [r3, #16]

  configure_pins( PIO_PA17, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;
  40112c:	2102      	movs	r1, #2
// TD is on PA17, peripheral A
void init_ssc()
{
  register Ssc *sscptr ;

  PMC->PMC_PCER0 |= 0x00400000L ;               // Enable peripheral clock to SSC
  40112e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  401132:	611a      	str	r2, [r3, #16]

  configure_pins( PIO_PA17, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;
  401134:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  401138:	f7ff f8f8 	bl	40032c <_Z14configure_pinsmt>

  sscptr = SSC ;
  sscptr->SSC_CMR = Master_frequency / (125000*2) ;               // 8uS per bit
  40113c:	f240 1308 	movw	r3, #264	; 0x108
  401140:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401144:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
  401148:	f64d 6383 	movw	r3, #56963	; 0xde83
  40114c:	f2c4 331b 	movt	r3, #17179	; 0x431b
  401150:	fba3 1202 	umull	r1, r2, r3, r2
  401154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
  401158:	0c12      	lsrs	r2, r2, #16
  40115a:	605a      	str	r2, [r3, #4]
  sscptr->SSC_TCMR = 0 ;          //  0000 0000 0000 0000 0000 0000 0000 0000
  40115c:	2200      	movs	r2, #0
  40115e:	619a      	str	r2, [r3, #24]
  sscptr->SSC_TFMR = 0x00000027 ;         //  0000 0000 0000 0000 0000 0000 1010 0111 (8 bit data, lsb)
  401160:	2227      	movs	r2, #39	; 0x27
  401162:	61da      	str	r2, [r3, #28]
  sscptr->SSC_CR = SSC_CR_TXEN ;
  401164:	f44f 7280 	mov.w	r2, #256	; 0x100
  401168:	601a      	str	r2, [r3, #0]
}
  40116a:	bd08      	pop	{r3, pc}

0040116c <_Z11disable_sscv>:
  register Pio *pioptr ;
  register Ssc *sscptr ;

  // Revert back to pwm output
  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                         // Assign A17 to PIO
  40116c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  401170:	f2c4 030e 	movt	r3, #16398	; 0x400e
  401174:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401178:	601a      	str	r2, [r3, #0]

  sscptr = SSC ;
  sscptr->SSC_CR = SSC_CR_TXDIS ;
  40117a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40117e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
  401182:	601a      	str	r2, [r3, #0]
}
  401184:	4770      	bx	lr
  401186:	bf00      	nop

00401188 <_Z14setupPulsesPPMv>:
{
  init_main_ppm( 3000, 1 ) ;            // Default for now, initial period 1.5 mS, output on
}

void setupPulsesPPM()                   // Don't enable interrupts through here
{
  401188:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  register Pwm *pwmptr;

  pwmptr = PWM;
  // Now set up pulses

  int16_t PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2; //range of 0.7..1.7msec
  40118c:	4b3b      	ldr	r3, [pc, #236]	; (40127c <_Z14setupPulsesPPMv+0xf4>)
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr;
  ptr = Pulses;
  uint32_t p = 8 + g_model.ppmNCH * 2; //Channels *2

  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
  40118e:	2064      	movs	r0, #100	; 0x64
  401190:	f993 214e 	ldrsb.w	r2, [r3, #334]	; 0x14e
  register Pwm *pwmptr;

  pwmptr = PWM;
  // Now set up pulses

  int16_t PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2; //range of 0.7..1.7msec
  401194:	f893 114d 	ldrb.w	r1, [r3, #333]	; 0x14d
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr;
  ptr = Pulses;
  uint32_t p = 8 + g_model.ppmNCH * 2; //Channels *2

  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
  401198:	fb00 f002 	mul.w	r0, r0, r2
  //Total frame length = 22.5msec
  //each pulse is 0.7..1.7ms long with a 0.3ms stop tail
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr;
  ptr = Pulses;
  uint32_t p = 8 + g_model.ppmNCH * 2; //Channels *2
  40119c:	f893 614c 	ldrb.w	r6, [r3, #332]	; 0x14c
  register Pwm *pwmptr;

  pwmptr = PWM;
  // Now set up pulses

  int16_t PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2; //range of 0.7..1.7msec
  4011a0:	f001 0920 	and.w	r9, r1, #32
  //Total frame length = 22.5msec
  //each pulse is 0.7..1.7ms long with a 0.3ms stop tail
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr;
  ptr = Pulses;
  uint32_t p = 8 + g_model.ppmNCH * 2; //Channels *2
  4011a4:	f346 1603 	sbfx	r6, r6, #4, #4

  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
  4011a8:	2200      	movs	r2, #0
  if (g_model.pulsePol)
  4011aa:	f001 0110 	and.w	r1, r1, #16
  register Pwm *pwmptr;

  pwmptr = PWM;
  // Now set up pulses

  int16_t PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2; //range of 0.7..1.7msec
  4011ae:	fa5f f989 	uxtb.w	r9, r9
  //Total frame length = 22.5msec
  //each pulse is 0.7..1.7ms long with a 0.3ms stop tail
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr;
  ptr = Pulses;
  uint32_t p = 8 + g_model.ppmNCH * 2; //Channels *2
  4011b2:	3604      	adds	r6, #4

  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
  4011b4:	f500 7016 	add.w	r0, r0, #600	; 0x258
  4011b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
  if (g_model.pulsePol)
  4011bc:	b2c9      	uxtb	r1, r1
  register Pwm *pwmptr;

  pwmptr = PWM;
  // Now set up pulses

  int16_t PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2; //range of 0.7..1.7msec
  4011be:	f1b9 0f00 	cmp.w	r9, #0
  4011c2:	bf0c      	ite	eq
  4011c4:	f44f 6980 	moveq.w	r9, #1024	; 0x400
  4011c8:	f44f 69a0 	movne.w	r9, #1280	; 0x500
  //Total frame length = 22.5msec
  //each pulse is 0.7..1.7ms long with a 0.3ms stop tail
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr;
  ptr = Pulses;
  uint32_t p = 8 + g_model.ppmNCH * 2; //Channels *2
  4011cc:	0076      	lsls	r6, r6, #1

  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
  4011ce:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
  if (g_model.pulsePol)
  4011d2:	2900      	cmp	r1, #0
  4011d4:	d04b      	beq.n	40126e <_Z14setupPulsesPPMv+0xe6>
    pwmptr->PWM_CH_NUM[3].PWM_CMR |= 0x00000200 ;   // CPOL
  4011d6:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
  4011da:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4011de:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
  else
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  4011e2:	f993 386b 	ldrsb.w	r3, [r3, #2155]	; 0x86b
  4011e6:	ebc3 1043 	rsb	r0, r3, r3, lsl #5
  4011ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4011ee:	00c0      	lsls	r0, r0, #3
  4011f0:	f5a0 40a0 	sub.w	r0, r0, #20480	; 0x5000
  4011f4:	3838      	subs	r0, #56	; 0x38
  4011f6:	b280      	uxth	r0, r0

  //Total frame length = 22.5msec
  //each pulse is 0.7..1.7ms long with a 0.3ms stop tail
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr;
  ptr = Pulses;
  4011f8:	4b21      	ldr	r3, [pc, #132]	; (401280 <_Z14setupPulsesPPMv+0xf8>)
  else
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
  4011fa:	2e00      	cmp	r6, #0
  4011fc:	d031      	beq.n	401262 <_Z14setupPulsesPPMv+0xda>
  4011fe:	fa1f f489 	uxth.w	r4, r9
  401202:	f1c4 0800 	rsb	r8, r4, #0
  401206:	fa1f f888 	uxth.w	r8, r8
  40120a:	f8df c078 	ldr.w	ip, [pc, #120]	; 401284 <_Z14setupPulsesPPMv+0xfc>
  40120e:	4f1c      	ldr	r7, [pc, #112]	; (401280 <_Z14setupPulsesPPMv+0xf8>)
void startPulses()
{
  init_main_ppm( 3000, 1 ) ;            // Default for now, initial period 1.5 mS, output on
}

void setupPulsesPPM()                   // Don't enable interrupts through here
  401210:	0076      	lsls	r6, r6, #1
  401212:	2300      	movs	r3, #0
  401214:	fa0f f588 	sxth.w	r5, r8
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  401218:	fa0f f989 	sxth.w	r9, r9
  40121c:	e00b      	b.n	401236 <_Z14setupPulsesPPMv+0xae>
  40121e:	45d1      	cmp	r9, sl
  401220:	dc12      	bgt.n	401248 <_Z14setupPulsesPPMv+0xc0>
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
  401222:	f502 623a 	add.w	r2, r2, #2976	; 0xba0
  401226:	3218      	adds	r2, #24
  401228:	b292      	uxth	r2, r2
    rest -= (v);
    *ptr++ = v; /* as Pat MacKenzie suggests */
  40122a:	52fa      	strh	r2, [r7, r3]
  40122c:	3302      	adds	r3, #2

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
    rest -= (v);
  40122e:	1a80      	subs	r0, r0, r2
  else
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
  401230:	42b3      	cmp	r3, r6
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
    rest -= (v);
  401232:	b280      	uxth	r0, r0
  else
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
  401234:	d013      	beq.n	40125e <_Z14setupPulsesPPMv+0xd6>
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
  401236:	f83c 1003 	ldrh.w	r1, [ip, r3]
  40123a:	4622      	mov	r2, r4
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  40123c:	fa0f fa81 	sxth.w	sl, r1
  401240:	45aa      	cmp	sl, r5
  401242:	bfb8      	it	lt
  401244:	4641      	movlt	r1, r8
  401246:	daea      	bge.n	40121e <_Z14setupPulsesPPMv+0x96>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  401248:	b28a      	uxth	r2, r1
  40124a:	f502 623a 	add.w	r2, r2, #2976	; 0xba0
  40124e:	3218      	adds	r2, #24
  401250:	b292      	uxth	r2, r2
    rest -= (v);
    *ptr++ = v; /* as Pat MacKenzie suggests */
  401252:	52fa      	strh	r2, [r7, r3]
  401254:	3302      	adds	r3, #2

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
    rest -= (v);
  401256:	1a80      	subs	r0, r0, r2
  else
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
  401258:	42b3      	cmp	r3, r6
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
    rest -= (v);
  40125a:	b280      	uxth	r0, r0
  else
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL

  uint16_t rest = 22500u * 2; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength)) * 1000;
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
  40125c:	d1eb      	bne.n	401236 <_Z14setupPulsesPPMv+0xae>
  40125e:	4a08      	ldr	r2, [pc, #32]	; (401280 <_Z14setupPulsesPPMv+0xf8>)
  401260:	18d3      	adds	r3, r2, r3
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
    rest -= (v);
    *ptr++ = v; /* as Pat MacKenzie suggests */
  }
  *ptr = rest;
  *(ptr + 1) = 0;
  401262:	2200      	movs	r2, #0
  for (uint32_t i = 0; i < p; i++) { //NUM_CHNOUT
    int16_t v = limit((int16_t)-PPM_range, g_chans512[i], (int16_t)PPM_range) + 2*PPM_CENTER;
    rest -= (v);
    *ptr++ = v; /* as Pat MacKenzie suggests */
  }
  *ptr = rest;
  401264:	8018      	strh	r0, [r3, #0]
  *(ptr + 1) = 0;
  401266:	805a      	strh	r2, [r3, #2]
}
  401268:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  40126c:	4770      	bx	lr

  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
  if (g_model.pulsePol)
    pwmptr->PWM_CH_NUM[3].PWM_CMR |= 0x00000200 ;   // CPOL
  else
    pwmptr->PWM_CH_NUM[3].PWM_CMR &= ~0x00000200 ;  // CPOL
  40126e:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
  401272:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  401276:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
  40127a:	e7b2      	b.n	4011e2 <_Z14setupPulsesPPMv+0x5a>
  40127c:	20000108 	.word	0x20000108
  401280:	200000c8 	.word	0x200000c8
  401284:	20000af8 	.word	0x20000af8

00401288 <_ZL13init_main_ppmmm>:
void setupPulsesPPM();
void setupPulsesDsm2(uint8_t chns);
void setupPulsesPXX();

static void init_main_ppm( uint32_t period, uint32_t out_enable )
{
  401288:	b538      	push	{r3, r4, r5, lr}
  40128a:	460c      	mov	r4, r1
  40128c:	4605      	mov	r5, r0
  register Pio *pioptr ;
  register Pwm *pwmptr ;

  // TODO ? perOut(g_chans512, 0) ;
  setupPulsesPPM() ;
  40128e:	f7ff ff7b 	bl	401188 <_Z14setupPulsesPPMv>

  if ( out_enable )
  401292:	b174      	cbz	r4, 4012b2 <_ZL13init_main_ppmmm+0x2a>
  {
    pioptr = PIOA ;
    pioptr->PIO_ABCDSR[0] &= ~PIO_PA17 ;            // Peripheral C
  401294:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  401298:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40129c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40129e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4012a2:	671a      	str	r2, [r3, #112]	; 0x70
    pioptr->PIO_ABCDSR[1] |= PIO_PA17 ;                     // Peripheral C
  4012a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4012a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4012aa:	675a      	str	r2, [r3, #116]	; 0x74
    pioptr->PIO_PDR = PIO_PA17 ;                                            // Disable bit A17 Assign to peripheral
  4012ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4012b0:	605a      	str	r2, [r3, #4]
  }

  pwmptr = PWM ;
  // PWM3 for PPM output
  pwmptr->PWM_CH_NUM[3].PWM_CMR = 0x0000000B ;                  // CLKA
  4012b2:	2300      	movs	r3, #0
  4012b4:	210b      	movs	r1, #11
  4012b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
  if (g_model.pulsePol)
  4012ba:	4a16      	ldr	r2, [pc, #88]	; (401314 <_ZL13init_main_ppmmm+0x8c>)
    pioptr->PIO_PDR = PIO_PA17 ;                                            // Disable bit A17 Assign to peripheral
  }

  pwmptr = PWM ;
  // PWM3 for PPM output
  pwmptr->PWM_CH_NUM[3].PWM_CMR = 0x0000000B ;                  // CLKA
  4012bc:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
  if (g_model.pulsePol)
  4012c0:	f892 114d 	ldrb.w	r1, [r2, #333]	; 0x14d
  4012c4:	f001 0110 	and.w	r1, r1, #16
  4012c8:	b2c9      	uxtb	r1, r1
  4012ca:	b129      	cbz	r1, 4012d8 <_ZL13init_main_ppmmm+0x50>
    pwmptr->PWM_CH_NUM[3].PWM_CMR |= 0x00000200 ;               // CPOL
  4012cc:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
  4012d0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4012d4:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
  pwmptr->PWM_CH_NUM[3].PWM_CPDR = period ;                     // Period in half uS
  4012d8:	2300      	movs	r3, #0
  4012da:	f2c4 0302 	movt	r3, #16386	; 0x4002
  4012de:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
  pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = period ;                  // Period in half uS
  4012e2:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
  pwmptr->PWM_CH_NUM[3].PWM_CDTY = g_model.ppmDelay*100+600;    // Duty in half uS
  4012e6:	f992 214e 	ldrsb.w	r2, [r2, #334]	; 0x14e
  4012ea:	2064      	movs	r0, #100	; 0x64
  4012ec:	fb00 f002 	mul.w	r0, r0, r2
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  4012f0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
  4012f4:	f500 7016 	add.w	r0, r0, #600	; 0x258
  4012f8:	f8c3 0264 	str.w	r0, [r3, #612]	; 0x264
  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = g_model.ppmDelay*100+600; // Duty in half uS
  pwmptr->PWM_ENA = PWM_ENA_CHID3 ;                             // Enable channel 3
  4012fc:	2208      	movs	r2, #8
  if (g_model.pulsePol)
    pwmptr->PWM_CH_NUM[3].PWM_CMR |= 0x00000200 ;               // CPOL
  pwmptr->PWM_CH_NUM[3].PWM_CPDR = period ;                     // Period in half uS
  pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = period ;                  // Period in half uS
  pwmptr->PWM_CH_NUM[3].PWM_CDTY = g_model.ppmDelay*100+600;    // Duty in half uS
  pwmptr->PWM_CH_NUM[3].PWM_CDTYUPD = g_model.ppmDelay*100+600; // Duty in half uS
  4012fe:	f8c3 0268 	str.w	r0, [r3, #616]	; 0x268
  401302:	f2ce 0100 	movt	r1, #57344	; 0xe000
  401306:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  pwmptr->PWM_ENA = PWM_ENA_CHID3 ;                             // Enable channel 3
  40130a:	605a      	str	r2, [r3, #4]
  40130c:	6008      	str	r0, [r1, #0]

  NVIC_EnableIRQ(PWM_IRQn) ;
  pwmptr->PWM_IER1 = PWM_IER1_CHID3 ;
  40130e:	611a      	str	r2, [r3, #16]
}
  401310:	bd38      	pop	{r3, r4, r5, pc}
  401312:	bf00      	nop
  401314:	20000108 	.word	0x20000108

00401318 <_Z11startPulsesv>:
  sscptr->SSC_CR = SSC_CR_TXDIS ;
}

void startPulses()
{
  init_main_ppm( 3000, 1 ) ;            // Default for now, initial period 1.5 mS, output on
  401318:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40131c:	2101      	movs	r1, #1
  40131e:	e7b3      	b.n	401288 <_ZL13init_main_ppmmm>

00401320 <_Z14put_serial_bith>:
  *(ptr + 1) = 0;
}

void put_serial_bit( uint8_t bit )
{
  Serial_byte >>= 1 ;
  401320:	4b12      	ldr	r3, [pc, #72]	; (40136c <_Z14put_serial_bith+0x4c>)
  401322:	f893 2a30 	ldrb.w	r2, [r3, #2608]	; 0xa30
  401326:	0852      	lsrs	r2, r2, #1
  if ( bit & 1 )
  401328:	07c1      	lsls	r1, r0, #31
  {
    Serial_byte |= 0x80 ;
  }
  if ( ++Serial_bit_count >= 8 )
  40132a:	f893 1a31 	ldrb.w	r1, [r3, #2609]	; 0xa31
  *(ptr + 1) = 0;
}

void put_serial_bit( uint8_t bit )
{
  Serial_byte >>= 1 ;
  40132e:	f883 2a30 	strb.w	r2, [r3, #2608]	; 0xa30
  if ( bit & 1 )
  {
    Serial_byte |= 0x80 ;
  401332:	bf44      	itt	mi
  401334:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
  401338:	f883 2a30 	strbmi.w	r2, [r3, #2608]	; 0xa30
  }
  if ( ++Serial_bit_count >= 8 )
  40133c:	3101      	adds	r1, #1
  40133e:	b2c9      	uxtb	r1, r1
  401340:	2907      	cmp	r1, #7
  401342:	4a0a      	ldr	r2, [pc, #40]	; (40136c <_Z14put_serial_bith+0x4c>)
  401344:	f883 1a31 	strb.w	r1, [r3, #2609]	; 0xa31
  401348:	d90f      	bls.n	40136a <_Z14put_serial_bith+0x4a>
  {
    *Pulses2MHzptr++ = Serial_byte ;
  40134a:	f8d2 3a34 	ldr.w	r3, [r2, #2612]	; 0xa34
  40134e:	f892 1a30 	ldrb.w	r1, [r2, #2608]	; 0xa30
  401352:	f803 1b01 	strb.w	r1, [r3], #1
    Serial_bit_count = 0 ;
    Serial_byte_count += 1 ;
  401356:	f892 1a38 	ldrb.w	r1, [r2, #2616]	; 0xa38
  {
    Serial_byte |= 0x80 ;
  }
  if ( ++Serial_bit_count >= 8 )
  {
    *Pulses2MHzptr++ = Serial_byte ;
  40135a:	f8c2 3a34 	str.w	r3, [r2, #2612]	; 0xa34
    Serial_bit_count = 0 ;
    Serial_byte_count += 1 ;
  40135e:	1c4b      	adds	r3, r1, #1
    Serial_byte |= 0x80 ;
  }
  if ( ++Serial_bit_count >= 8 )
  {
    *Pulses2MHzptr++ = Serial_byte ;
    Serial_bit_count = 0 ;
  401360:	2100      	movs	r1, #0
  401362:	f882 1a31 	strb.w	r1, [r2, #2609]	; 0xa31
    Serial_byte_count += 1 ;
  401366:	f882 3a38 	strb.w	r3, [r2, #2616]	; 0xa38
  40136a:	4770      	bx	lr
  40136c:	20000108 	.word	0x20000108

00401370 <_Z3crch>:

void crc( uint8_t data )
{
  //  uint8_t i ;

  PcmCrc=(PcmCrc>>8)^(CRCTable[(PcmCrc^data) & 0xFF]);
  401370:	f240 1308 	movw	r3, #264	; 0x108
  401374:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401378:	f8b3 2a3a 	ldrh.w	r2, [r3, #2618]	; 0xa3a
  40137c:	f24f 7130 	movw	r1, #63280	; 0xf730
  401380:	4050      	eors	r0, r2
  401382:	f2c0 0140 	movt	r1, #64	; 0x40
  401386:	b2c0      	uxtb	r0, r0
  401388:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  40138c:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  40138e:	ea81 2212 	eor.w	r2, r1, r2, lsr #8
  401392:	f8a3 2a3a 	strh.w	r2, [r3, #2618]	; 0xa3a
}
  401396:	4770      	bx	lr

00401398 <_Z10putPcmParth>:

// 8uS/bit 01 = 0, 001 = 1
void putPcmPart( uint8_t value )
{
  401398:	b510      	push	{r4, lr}
  40139a:	4604      	mov	r4, r0
  put_serial_bit( 0 ) ;
  40139c:	2000      	movs	r0, #0
  40139e:	f7ff ffbf 	bl	401320 <_Z14put_serial_bith>
  if ( value )
  4013a2:	b114      	cbz	r4, 4013aa <_Z10putPcmParth+0x12>
  {
    put_serial_bit( 0 ) ;
  4013a4:	2000      	movs	r0, #0
  4013a6:	f7ff ffbb 	bl	401320 <_Z14put_serial_bith>
  }
  put_serial_bit( 1 ) ;
  4013aa:	2001      	movs	r0, #1
}
  4013ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  put_serial_bit( 0 ) ;
  if ( value )
  {
    put_serial_bit( 0 ) ;
  }
  put_serial_bit( 1 ) ;
  4013b0:	e7b6      	b.n	401320 <_Z14put_serial_bith>
  4013b2:	bf00      	nop

004013b4 <_Z11putPcmFlushv>:
}

void putPcmFlush()
{
  4013b4:	b510      	push	{r4, lr}
  while ( Serial_bit_count != 0 )
  4013b6:	4c06      	ldr	r4, [pc, #24]	; (4013d0 <_Z11putPcmFlushv+0x1c>)
  4013b8:	f894 3a31 	ldrb.w	r3, [r4, #2609]	; 0xa31
  4013bc:	b133      	cbz	r3, 4013cc <_Z11putPcmFlushv+0x18>
  {
    put_serial_bit( 1 ) ;           // Line idle level
  4013be:	2001      	movs	r0, #1
  4013c0:	f7ff ffae 	bl	401320 <_Z14put_serial_bith>
  put_serial_bit( 1 ) ;
}

void putPcmFlush()
{
  while ( Serial_bit_count != 0 )
  4013c4:	f894 3a31 	ldrb.w	r3, [r4, #2609]	; 0xa31
  4013c8:	2b00      	cmp	r3, #0
  4013ca:	d1f8      	bne.n	4013be <_Z11putPcmFlushv+0xa>
  4013cc:	bd10      	pop	{r4, pc}
  4013ce:	bf00      	nop
  4013d0:	20000108 	.word	0x20000108

004013d4 <_Z9putPcmBith>:
    put_serial_bit( 1 ) ;           // Line idle level
  }
}

void putPcmBit( uint8_t bit )
{
  4013d4:	b510      	push	{r4, lr}
  if ( bit )
  {
    PcmOnesCount += 1 ;
  4013d6:	4c0d      	ldr	r4, [pc, #52]	; (40140c <_Z9putPcmBith+0x38>)
  }
}

void putPcmBit( uint8_t bit )
{
  if ( bit )
  4013d8:	b160      	cbz	r0, 4013f4 <_Z9putPcmBith+0x20>
  {
    PcmOnesCount += 1 ;
  4013da:	f894 3a3c 	ldrb.w	r3, [r4, #2620]	; 0xa3c
    putPcmPart( 1 ) ;
  4013de:	2001      	movs	r0, #1

void putPcmBit( uint8_t bit )
{
  if ( bit )
  {
    PcmOnesCount += 1 ;
  4013e0:	3301      	adds	r3, #1
  4013e2:	f884 3a3c 	strb.w	r3, [r4, #2620]	; 0xa3c
    putPcmPart( 1 ) ;
  4013e6:	f7ff ffd7 	bl	401398 <_Z10putPcmParth>
  else
  {
    PcmOnesCount = 0 ;
    putPcmPart( 0 ) ;
  }
  if ( PcmOnesCount >= 5 )
  4013ea:	f894 3a3c 	ldrb.w	r3, [r4, #2620]	; 0xa3c
  {
    putPcmBit( 0 ) ;                                // Stuff a 0 bit in
  4013ee:	2000      	movs	r0, #0
  else
  {
    PcmOnesCount = 0 ;
    putPcmPart( 0 ) ;
  }
  if ( PcmOnesCount >= 5 )
  4013f0:	2b04      	cmp	r3, #4
  4013f2:	d909      	bls.n	401408 <_Z9putPcmBith+0x34>
    PcmOnesCount += 1 ;
    putPcmPart( 1 ) ;
  }
  else
  {
    PcmOnesCount = 0 ;
  4013f4:	f884 0a3c 	strb.w	r0, [r4, #2620]	; 0xa3c
    putPcmPart( 0 ) ;
  4013f8:	2000      	movs	r0, #0
  4013fa:	f7ff ffcd 	bl	401398 <_Z10putPcmParth>
  }
  if ( PcmOnesCount >= 5 )
  4013fe:	f894 3a3c 	ldrb.w	r3, [r4, #2620]	; 0xa3c
  {
    putPcmBit( 0 ) ;                                // Stuff a 0 bit in
  401402:	2000      	movs	r0, #0
  else
  {
    PcmOnesCount = 0 ;
    putPcmPart( 0 ) ;
  }
  if ( PcmOnesCount >= 5 )
  401404:	2b04      	cmp	r3, #4
  401406:	d8f5      	bhi.n	4013f4 <_Z9putPcmBith+0x20>
  {
    putPcmBit( 0 ) ;                                // Stuff a 0 bit in
  }
}
  401408:	bd10      	pop	{r4, pc}
  40140a:	bf00      	nop
  40140c:	20000108 	.word	0x20000108

00401410 <_Z10putPcmByteh>:

void putPcmByte( uint8_t byte )
{
  401410:	b538      	push	{r3, r4, r5, lr}

void crc( uint8_t data )
{
  //  uint8_t i ;

  PcmCrc=(PcmCrc>>8)^(CRCTable[(PcmCrc^data) & 0xFF]);
  401412:	4b0e      	ldr	r3, [pc, #56]	; (40144c <_Z10putPcmByteh+0x3c>)
    putPcmBit( 0 ) ;                                // Stuff a 0 bit in
  }
}

void putPcmByte( uint8_t byte )
{
  401414:	4604      	mov	r4, r0

void crc( uint8_t data )
{
  //  uint8_t i ;

  PcmCrc=(PcmCrc>>8)^(CRCTable[(PcmCrc^data) & 0xFF]);
  401416:	f8b3 2a3a 	ldrh.w	r2, [r3, #2618]	; 0xa3a
  40141a:	2508      	movs	r5, #8
  40141c:	ea80 0102 	eor.w	r1, r0, r2
  401420:	480b      	ldr	r0, [pc, #44]	; (401450 <_Z10putPcmByteh+0x40>)
  401422:	b2c9      	uxtb	r1, r1
  401424:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401428:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  40142a:	ea81 2212 	eor.w	r2, r1, r2, lsr #8
  40142e:	f8a3 2a3a 	strh.w	r2, [r3, #2618]	; 0xa3a

  crc( byte ) ;

  for ( i = 0 ; i < 8 ; i += 1 )
  {
    putPcmBit( byte & 0x80 ) ;
  401432:	f024 007f 	bic.w	r0, r4, #127	; 0x7f
    byte <<= 1 ;
  401436:	3d01      	subs	r5, #1

  crc( byte ) ;

  for ( i = 0 ; i < 8 ; i += 1 )
  {
    putPcmBit( byte & 0x80 ) ;
  401438:	b2c0      	uxtb	r0, r0
    byte <<= 1 ;
  40143a:	0064      	lsls	r4, r4, #1
  40143c:	b2ed      	uxtb	r5, r5

  crc( byte ) ;

  for ( i = 0 ; i < 8 ; i += 1 )
  {
    putPcmBit( byte & 0x80 ) ;
  40143e:	f7ff ffc9 	bl	4013d4 <_Z9putPcmBith>
    byte <<= 1 ;
  401442:	b2e4      	uxtb	r4, r4
{
  uint8_t i ;

  crc( byte ) ;

  for ( i = 0 ; i < 8 ; i += 1 )
  401444:	2d00      	cmp	r5, #0
  401446:	d1f4      	bne.n	401432 <_Z10putPcmByteh+0x22>
  {
    putPcmBit( byte & 0x80 ) ;
    byte <<= 1 ;
  }
}
  401448:	bd38      	pop	{r3, r4, r5, pc}
  40144a:	bf00      	nop
  40144c:	20000108 	.word	0x20000108
  401450:	0040f730 	.word	0x0040f730

00401454 <_Z10putPcmHeadv>:

void putPcmHead()
{
  401454:	b508      	push	{r3, lr}
  // send 7E, do not CRC
  // 01111110
  putPcmPart( 0 ) ;
  401456:	2000      	movs	r0, #0
  401458:	f7ff ff9e 	bl	401398 <_Z10putPcmParth>
  putPcmPart( 1 ) ;
  40145c:	2001      	movs	r0, #1
  40145e:	f7ff ff9b 	bl	401398 <_Z10putPcmParth>
  putPcmPart( 1 ) ;
  401462:	2001      	movs	r0, #1
  401464:	f7ff ff98 	bl	401398 <_Z10putPcmParth>
  putPcmPart( 1 ) ;
  401468:	2001      	movs	r0, #1
  40146a:	f7ff ff95 	bl	401398 <_Z10putPcmParth>
  putPcmPart( 1 ) ;
  40146e:	2001      	movs	r0, #1
  401470:	f7ff ff92 	bl	401398 <_Z10putPcmParth>
  putPcmPart( 1 ) ;
  401474:	2001      	movs	r0, #1
  401476:	f7ff ff8f 	bl	401398 <_Z10putPcmParth>
  putPcmPart( 1 ) ;
  40147a:	2001      	movs	r0, #1
  40147c:	f7ff ff8c 	bl	401398 <_Z10putPcmParth>
  putPcmPart( 0 ) ;
  401480:	2000      	movs	r0, #0
}
  401482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  putPcmPart( 1 ) ;
  putPcmPart( 1 ) ;
  putPcmPart( 1 ) ;
  putPcmPart( 1 ) ;
  putPcmPart( 1 ) ;
  putPcmPart( 0 ) ;
  401486:	e787      	b.n	401398 <_Z10putPcmParth>

00401488 <_Z14setupPulsesPXXv>:
}

void setupPulsesPXX()
{
  401488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i ;
  uint16_t chan ;
  uint16_t chan_1 ;

  Serial_byte = 0 ;
  40148c:	4d2f      	ldr	r5, [pc, #188]	; (40154c <_Z14setupPulsesPXXv+0xc4>)
  40148e:	2600      	movs	r6, #0
  Serial_bit_count = 0 ;
  Serial_byte_count = 0 ;
  Pulses2MHzptr = Bit_pulses ;
  401490:	f505 6324 	add.w	r3, r5, #2624	; 0xa40
  401494:	f8c5 3a34 	str.w	r3, [r5, #2612]	; 0xa34
{
  uint8_t i ;
  uint16_t chan ;
  uint16_t chan_1 ;

  Serial_byte = 0 ;
  401498:	f885 6a30 	strb.w	r6, [r5, #2608]	; 0xa30
  Serial_bit_count = 0 ;
  40149c:	f885 6a31 	strb.w	r6, [r5, #2609]	; 0xa31
  Serial_byte_count = 0 ;
  4014a0:	f885 6a38 	strb.w	r6, [r5, #2616]	; 0xa38
  Pulses2MHzptr = Bit_pulses ;
  PcmCrc = 0 ;
  4014a4:	f8a5 6a3a 	strh.w	r6, [r5, #2618]	; 0xa3a
  PcmOnesCount = 0 ;
  4014a8:	f885 6a3c 	strb.w	r6, [r5, #2620]	; 0xa3c
  putPcmHead(  ) ;  // sync byte
  4014ac:	f7ff ffd2 	bl	401454 <_Z10putPcmHeadv>
  putPcmByte( g_model.ppmNCH ) ;     // putPcmByte( g_model.rxnum ) ;  //
  4014b0:	f895 014c 	ldrb.w	r0, [r5, #332]	; 0x14c
  putPcmByte( pxxFlag ) ;     // First byte of flags
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  4014b4:	f505 641f 	add.w	r4, r5, #2544	; 0x9f0
  Serial_byte_count = 0 ;
  Pulses2MHzptr = Bit_pulses ;
  PcmCrc = 0 ;
  PcmOnesCount = 0 ;
  putPcmHead(  ) ;  // sync byte
  putPcmByte( g_model.ppmNCH ) ;     // putPcmByte( g_model.rxnum ) ;  //
  4014b8:	f340 1003 	sbfx	r0, r0, #4, #4
  4014bc:	b2c0      	uxtb	r0, r0
  4014be:	f7ff ffa7 	bl	401410 <_Z10putPcmByteh>
  putPcmByte( pxxFlag ) ;     // First byte of flags
  4014c2:	f895 0a80 	ldrb.w	r0, [r5, #2688]	; 0xa80
  4014c6:	f7ff ffa3 	bl	401410 <_Z10putPcmByteh>
  putPcmByte( 0 ) ;     // Second byte of flags
  4014ca:	4630      	mov	r0, r6
  4014cc:	f7ff ffa0 	bl	401410 <_Z10putPcmByteh>
  putPcmPart( 1 ) ;
  putPcmPart( 1 ) ;
  putPcmPart( 0 ) ;
}

void setupPulsesPXX()
  4014d0:	f505 6820 	add.w	r8, r5, #2560	; 0xa00
  PcmOnesCount = 0 ;
  putPcmHead(  ) ;  // sync byte
  putPcmByte( g_model.ppmNCH ) ;     // putPcmByte( g_model.rxnum ) ;  //
  putPcmByte( pxxFlag ) ;     // First byte of flags
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  4014d4:	f885 6a80 	strb.w	r6, [r5, #2688]	; 0xa80
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  {                                                                                                                                   // Next 8 channels would have 2048 added
    chan = g_chans512[i] *3 / 4 + 2250 ;
  4014d8:	f9b4 7000 	ldrsh.w	r7, [r4]
    chan_1 = g_chans512[i+1] *3 / 4 + 2250 ;
  4014dc:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
  putPcmByte( pxxFlag ) ;     // First byte of flags
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  {                                                                                                                                   // Next 8 channels would have 2048 added
    chan = g_chans512[i] *3 / 4 + 2250 ;
  4014e0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4014e4:	1cfb      	adds	r3, r7, #3
  4014e6:	ea37 0727 	bics.w	r7, r7, r7, asr #32
  4014ea:	bf28      	it	cs
  4014ec:	461f      	movcs	r7, r3
    chan_1 = g_chans512[i+1] *3 / 4 + 2250 ;
  4014ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  4014f2:	1cf3      	adds	r3, r6, #3
  putPcmByte( pxxFlag ) ;     // First byte of flags
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  {                                                                                                                                   // Next 8 channels would have 2048 added
    chan = g_chans512[i] *3 / 4 + 2250 ;
  4014f4:	10bf      	asrs	r7, r7, #2
    chan_1 = g_chans512[i+1] *3 / 4 + 2250 ;
  4014f6:	ea36 0626 	bics.w	r6, r6, r6, asr #32
  4014fa:	bf28      	it	cs
  4014fc:	461e      	movcs	r6, r3
  putPcmByte( pxxFlag ) ;     // First byte of flags
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  {                                                                                                                                   // Next 8 channels would have 2048 added
    chan = g_chans512[i] *3 / 4 + 2250 ;
  4014fe:	f507 670c 	add.w	r7, r7, #2240	; 0x8c0
  401502:	370a      	adds	r7, #10
    chan_1 = g_chans512[i+1] *3 / 4 + 2250 ;
  401504:	10b6      	asrs	r6, r6, #2
  putPcmByte( pxxFlag ) ;     // First byte of flags
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  {                                                                                                                                   // Next 8 channels would have 2048 added
    chan = g_chans512[i] *3 / 4 + 2250 ;
  401506:	b2bf      	uxth	r7, r7
    chan_1 = g_chans512[i+1] *3 / 4 + 2250 ;
  401508:	f506 660c 	add.w	r6, r6, #2240	; 0x8c0
//        }
//        if ( chan_1 > 2047 )
//        {
//            chan_1 = 2047 ;
//        }
    putPcmByte( chan ) ; // Low byte of channel
  40150c:	b2f8      	uxtb	r0, r7
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  {                                                                                                                                   // Next 8 channels would have 2048 added
    chan = g_chans512[i] *3 / 4 + 2250 ;
    chan_1 = g_chans512[i+1] *3 / 4 + 2250 ;
  40150e:	360a      	adds	r6, #10
//        }
//        if ( chan_1 > 2047 )
//        {
//            chan_1 = 2047 ;
//        }
    putPcmByte( chan ) ; // Low byte of channel
  401510:	f7ff ff7e 	bl	401410 <_Z10putPcmByteh>
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  {                                                                                                                                   // Next 8 channels would have 2048 added
    chan = g_chans512[i] *3 / 4 + 2250 ;
    chan_1 = g_chans512[i+1] *3 / 4 + 2250 ;
  401514:	b2b6      	uxth	r6, r6
//        if ( chan_1 > 2047 )
//        {
//            chan_1 = 2047 ;
//        }
    putPcmByte( chan ) ; // Low byte of channel
    putPcmByte( ( ( chan >> 8 ) & 0x0F ) | ( chan_1 << 4) ) ;  // 4 bits each from 2 channels
  401516:	f3c7 2003 	ubfx	r0, r7, #8, #4
  40151a:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  40151e:	b2c0      	uxtb	r0, r0
  401520:	f7ff ff76 	bl	401410 <_Z10putPcmByteh>
    putPcmByte( chan_1 >> 4 ) ;  // High byte of channel
  401524:	3404      	adds	r4, #4
  401526:	f3c6 1007 	ubfx	r0, r6, #4, #8
  40152a:	f7ff ff71 	bl	401410 <_Z10putPcmByteh>
  putPcmHead(  ) ;  // sync byte
  putPcmByte( g_model.ppmNCH ) ;     // putPcmByte( g_model.rxnum ) ;  //
  putPcmByte( pxxFlag ) ;     // First byte of flags
  putPcmByte( 0 ) ;     // Second byte of flags
  pxxFlag = 0;          // reset flag after send
  for ( i = 0 ; i < 8 ; i += 2 )              // First 8 channels only
  40152e:	4544      	cmp	r4, r8
  401530:	d1d2      	bne.n	4014d8 <_Z14setupPulsesPXXv+0x50>
//        }
    putPcmByte( chan ) ; // Low byte of channel
    putPcmByte( ( ( chan >> 8 ) & 0x0F ) | ( chan_1 << 4) ) ;  // 4 bits each from 2 channels
    putPcmByte( chan_1 >> 4 ) ;  // High byte of channel
  }
  chan = PcmCrc ;                     // get the crc
  401532:	f8b5 4a3a 	ldrh.w	r4, [r5, #2618]	; 0xa3a
  putPcmByte( chan ) ;                        // Checksum lo
  401536:	b2e0      	uxtb	r0, r4
  401538:	f7ff ff6a 	bl	401410 <_Z10putPcmByteh>
  putPcmByte( chan >> 8 ) ; // Checksum hi
  40153c:	0a20      	lsrs	r0, r4, #8
  40153e:	f7ff ff67 	bl	401410 <_Z10putPcmByteh>
  putPcmHead(  ) ;      // sync byte
  401542:	f7ff ff87 	bl	401454 <_Z10putPcmHeadv>
  putPcmFlush() ;
}
  401546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  }
  chan = PcmCrc ;                     // get the crc
  putPcmByte( chan ) ;                        // Checksum lo
  putPcmByte( chan >> 8 ) ; // Checksum hi
  putPcmHead(  ) ;      // sync byte
  putPcmFlush() ;
  40154a:	e733      	b.n	4013b4 <_Z11putPcmFlushv>
  40154c:	20000108 	.word	0x20000108

00401550 <_Z12sendByteDsm2h>:
}

#define BITLEN_DSM2 (8*2) //125000 Baud => 8uS per bit
void sendByteDsm2(uint8_t b) //max 10changes 0 10 10 10 10 1
{
  401550:	b538      	push	{r3, r4, r5, lr}
  401552:	4605      	mov	r5, r0
  put_serial_bit( 0 ) ;           // Start bit
  401554:	2000      	movs	r0, #0
  401556:	f7ff fee3 	bl	401320 <_Z14put_serial_bith>
  40155a:	2408      	movs	r4, #8
  for( uint8_t i=0; i<8; i++)    // 8 data Bits
  {
    put_serial_bit( b & 1 ) ;
    b >>= 1 ;
  40155c:	3c01      	subs	r4, #1
void sendByteDsm2(uint8_t b) //max 10changes 0 10 10 10 10 1
{
  put_serial_bit( 0 ) ;           // Start bit
  for( uint8_t i=0; i<8; i++)    // 8 data Bits
  {
    put_serial_bit( b & 1 ) ;
  40155e:	f005 0001 	and.w	r0, r5, #1
    b >>= 1 ;
  401562:	b2e4      	uxtb	r4, r4
void sendByteDsm2(uint8_t b) //max 10changes 0 10 10 10 10 1
{
  put_serial_bit( 0 ) ;           // Start bit
  for( uint8_t i=0; i<8; i++)    // 8 data Bits
  {
    put_serial_bit( b & 1 ) ;
  401564:	f7ff fedc 	bl	401320 <_Z14put_serial_bith>
    b >>= 1 ;
  401568:	086d      	lsrs	r5, r5, #1

#define BITLEN_DSM2 (8*2) //125000 Baud => 8uS per bit
void sendByteDsm2(uint8_t b) //max 10changes 0 10 10 10 10 1
{
  put_serial_bit( 0 ) ;           // Start bit
  for( uint8_t i=0; i<8; i++)    // 8 data Bits
  40156a:	2c00      	cmp	r4, #0
  40156c:	d1f6      	bne.n	40155c <_Z12sendByteDsm2h+0xc>
  {
    put_serial_bit( b & 1 ) ;
    b >>= 1 ;
  }

  put_serial_bit( 1 ) ;           // Stop bit
  40156e:	2001      	movs	r0, #1
  401570:	f7ff fed6 	bl	401320 <_Z14put_serial_bith>
  put_serial_bit( 1 ) ;           // Stop bit
  401574:	2001      	movs	r0, #1
}
  401576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    put_serial_bit( b & 1 ) ;
    b >>= 1 ;
  }

  put_serial_bit( 1 ) ;           // Stop bit
  put_serial_bit( 1 ) ;           // Stop bit
  40157a:	e6d1      	b.n	401320 <_Z14put_serial_bith>

0040157c <_Z15setupPulsesDsm2h>:
// Send after 22.5 mS


//static uint8_t *Dsm2_pulsePtr = pulses2MHz.pbyte ;
void setupPulsesDsm2(uint8_t chns)
{
  40157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial_bit_count = 0 ;
  Serial_byte_count = 0 ;
  Pulses2MHzptr = Bit_pulses ;

  // If more channels needed make sure the pulses union/array is large enough
  if (dsmDat[0]&BAD_DATA)  //first time through, setup header
  40157e:	4e3b      	ldr	r6, [pc, #236]	; (40166c <_Z15setupPulsesDsm2h+0xf0>)
{
  static uint8_t dsmDat[2+6*2]={0xFF,0x00,  0x00,0xAA,  0x05,0xFF,  0x09,0xFF,  0x0D,0xFF,  0x13,0x54,  0x14,0xAA};
  uint8_t counter ;
  //    CSwData &cs = g_model.customSw[NUM_CSW-1];

  Serial_byte = 0 ;
  401580:	4d3b      	ldr	r5, [pc, #236]	; (401670 <_Z15setupPulsesDsm2h+0xf4>)
  Serial_bit_count = 0 ;
  Serial_byte_count = 0 ;
  Pulses2MHzptr = Bit_pulses ;

  // If more channels needed make sure the pulses union/array is large enough
  if (dsmDat[0]&BAD_DATA)  //first time through, setup header
  401582:	f896 20ec 	ldrb.w	r2, [r6, #236]	; 0xec
{
  static uint8_t dsmDat[2+6*2]={0xFF,0x00,  0x00,0xAA,  0x05,0xFF,  0x09,0xFF,  0x0D,0xFF,  0x13,0x54,  0x14,0xAA};
  uint8_t counter ;
  //    CSwData &cs = g_model.customSw[NUM_CSW-1];

  Serial_byte = 0 ;
  401586:	2300      	movs	r3, #0
  Serial_bit_count = 0 ;
  Serial_byte_count = 0 ;
  Pulses2MHzptr = Bit_pulses ;
  401588:	f505 6124 	add.w	r1, r5, #2624	; 0xa40

  // If more channels needed make sure the pulses union/array is large enough
  if (dsmDat[0]&BAD_DATA)  //first time through, setup header
  40158c:	f012 0f47 	tst.w	r2, #71	; 0x47
{
  static uint8_t dsmDat[2+6*2]={0xFF,0x00,  0x00,0xAA,  0x05,0xFF,  0x09,0xFF,  0x0D,0xFF,  0x13,0x54,  0x14,0xAA};
  uint8_t counter ;
  //    CSwData &cs = g_model.customSw[NUM_CSW-1];

  Serial_byte = 0 ;
  401590:	f885 3a30 	strb.w	r3, [r5, #2608]	; 0xa30
  Serial_bit_count = 0 ;
  401594:	f885 3a31 	strb.w	r3, [r5, #2609]	; 0xa31
  Serial_byte_count = 0 ;
  401598:	f885 3a38 	strb.w	r3, [r5, #2616]	; 0xa38
  Pulses2MHzptr = Bit_pulses ;
  40159c:	f8c5 1a34 	str.w	r1, [r5, #2612]	; 0xa34
// Send after 22.5 mS


//static uint8_t *Dsm2_pulsePtr = pulses2MHz.pbyte ;
void setupPulsesDsm2(uint8_t chns)
{
  4015a0:	4604      	mov	r4, r0
  Serial_bit_count = 0 ;
  Serial_byte_count = 0 ;
  Pulses2MHzptr = Bit_pulses ;

  // If more channels needed make sure the pulses union/array is large enough
  if (dsmDat[0]&BAD_DATA)  //first time through, setup header
  4015a2:	d013      	beq.n	4015cc <_Z15setupPulsesDsm2h+0x50>
  {
    switch(g_model.ppmNCH)
  4015a4:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
  4015a8:	f343 1303 	sbfx	r3, r3, #4, #4
  4015ac:	2b00      	cmp	r3, #0
  4015ae:	d153      	bne.n	401658 <_Z15setupPulsesDsm2h+0xdc>
    {
      case LPXDSM2:
        dsmDat[0]= 0x80;
  4015b0:	2380      	movs	r3, #128	; 0x80
  4015b2:	f886 30ec 	strb.w	r3, [r6, #236]	; 0xec
      default:
        dsmDat[0]=0x98;  //dsmx, bind mode
        break;
    }
  }
  if ((dsmDat[0] & BIND_BIT) && (!keyState(SW_Trainer))) dsmDat[0] &= ~BIND_BIT; // clear bind bit if trainer not pulled
  4015b6:	2016      	movs	r0, #22
  4015b8:	f7fe ffee 	bl	400598 <_Z8keyState8EnumKeys>
  4015bc:	b940      	cbnz	r0, 4015d0 <_Z15setupPulsesDsm2h+0x54>
  4015be:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
  4015c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4015c6:	f886 30ec 	strb.w	r3, [r6, #236]	; 0xec
  4015ca:	e001      	b.n	4015d0 <_Z15setupPulsesDsm2h+0x54>
  4015cc:	0610      	lsls	r0, r2, #24
  4015ce:	d4f2      	bmi.n	4015b6 <_Z15setupPulsesDsm2h+0x3a>
  // TODO find a way to do that, FUNC SWITCH: if ((!(dsmDat[0] & BIND_BIT)) && getSwitch(MAX_DRSWITCH-1, 0, 0)) dsmDat[0] |= RANGECHECK_BIT;   // range check function
  // else dsmDat[0] &= ~RANGECHECK_BIT;
  dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
  4015d0:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
  4015d4:	3301      	adds	r3, #1
  4015d6:	f886 30ed 	strb.w	r3, [r6, #237]	; 0xed
  for(uint8_t i=0; i<chns; i++)
  4015da:	b33c      	cbz	r4, 40162c <_Z15setupPulsesDsm2h+0xb0>
  4015dc:	4d25      	ldr	r5, [pc, #148]	; (401674 <_Z15setupPulsesDsm2h+0xf8>)
  4015de:	4a26      	ldr	r2, [pc, #152]	; (401678 <_Z15setupPulsesDsm2h+0xfc>)
  4015e0:	2300      	movs	r3, #0
  4015e2:	f240 37fe 	movw	r7, #1022	; 0x3fe
  4015e6:	e00b      	b.n	401600 <_Z15setupPulsesDsm2h+0x84>
  4015e8:	2603      	movs	r6, #3
  4015ea:	42b9      	cmp	r1, r7
  4015ec:	dd30      	ble.n	401650 <_Z15setupPulsesDsm2h+0xd4>
  {
    uint16_t pulse = limit(0, ((g_chans512[i]*13)>>5)+512,1023);
    dsmDat[2+2*i] = (i<<2) | ((pulse>>8)&0x03);
  4015ee:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
    dsmDat[3+2*i] = pulse & 0xff;
  4015f2:	3301      	adds	r3, #1
  }
  if ((dsmDat[0] & BIND_BIT) && (!keyState(SW_Trainer))) dsmDat[0] &= ~BIND_BIT; // clear bind bit if trainer not pulled
  // TODO find a way to do that, FUNC SWITCH: if ((!(dsmDat[0] & BIND_BIT)) && getSwitch(MAX_DRSWITCH-1, 0, 0)) dsmDat[0] |= RANGECHECK_BIT;   // range check function
  // else dsmDat[0] &= ~RANGECHECK_BIT;
  dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
  for(uint8_t i=0; i<chns; i++)
  4015f4:	b2d9      	uxtb	r1, r3
  {
    uint16_t pulse = limit(0, ((g_chans512[i]*13)>>5)+512,1023);
    dsmDat[2+2*i] = (i<<2) | ((pulse>>8)&0x03);
  4015f6:	7096      	strb	r6, [r2, #2]
    dsmDat[3+2*i] = pulse & 0xff;
  4015f8:	70d0      	strb	r0, [r2, #3]
  4015fa:	3202      	adds	r2, #2
  }
  if ((dsmDat[0] & BIND_BIT) && (!keyState(SW_Trainer))) dsmDat[0] &= ~BIND_BIT; // clear bind bit if trainer not pulled
  // TODO find a way to do that, FUNC SWITCH: if ((!(dsmDat[0] & BIND_BIT)) && getSwitch(MAX_DRSWITCH-1, 0, 0)) dsmDat[0] |= RANGECHECK_BIT;   // range check function
  // else dsmDat[0] &= ~RANGECHECK_BIT;
  dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
  for(uint8_t i=0; i<chns; i++)
  4015fc:	428c      	cmp	r4, r1
  4015fe:	d915      	bls.n	40162c <_Z15setupPulsesDsm2h+0xb0>
  {
    uint16_t pulse = limit(0, ((g_chans512[i]*13)>>5)+512,1023);
  401600:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
  401604:	20ff      	movs	r0, #255	; 0xff
  401606:	eb01 0641 	add.w	r6, r1, r1, lsl #1
  40160a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
  40160e:	1149      	asrs	r1, r1, #5
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  401610:	f511 7100 	adds.w	r1, r1, #512	; 0x200
  401614:	d5e8      	bpl.n	4015e8 <_Z15setupPulsesDsm2h+0x6c>
  401616:	2000      	movs	r0, #0
  401618:	4606      	mov	r6, r0
    dsmDat[2+2*i] = (i<<2) | ((pulse>>8)&0x03);
  40161a:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
    dsmDat[3+2*i] = pulse & 0xff;
  40161e:	3301      	adds	r3, #1
  }
  if ((dsmDat[0] & BIND_BIT) && (!keyState(SW_Trainer))) dsmDat[0] &= ~BIND_BIT; // clear bind bit if trainer not pulled
  // TODO find a way to do that, FUNC SWITCH: if ((!(dsmDat[0] & BIND_BIT)) && getSwitch(MAX_DRSWITCH-1, 0, 0)) dsmDat[0] |= RANGECHECK_BIT;   // range check function
  // else dsmDat[0] &= ~RANGECHECK_BIT;
  dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
  for(uint8_t i=0; i<chns; i++)
  401620:	b2d9      	uxtb	r1, r3
  {
    uint16_t pulse = limit(0, ((g_chans512[i]*13)>>5)+512,1023);
    dsmDat[2+2*i] = (i<<2) | ((pulse>>8)&0x03);
  401622:	7096      	strb	r6, [r2, #2]
    dsmDat[3+2*i] = pulse & 0xff;
  401624:	70d0      	strb	r0, [r2, #3]
  401626:	3202      	adds	r2, #2
  }
  if ((dsmDat[0] & BIND_BIT) && (!keyState(SW_Trainer))) dsmDat[0] &= ~BIND_BIT; // clear bind bit if trainer not pulled
  // TODO find a way to do that, FUNC SWITCH: if ((!(dsmDat[0] & BIND_BIT)) && getSwitch(MAX_DRSWITCH-1, 0, 0)) dsmDat[0] |= RANGECHECK_BIT;   // range check function
  // else dsmDat[0] &= ~RANGECHECK_BIT;
  dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
  for(uint8_t i=0; i<chns; i++)
  401628:	428c      	cmp	r4, r1
  40162a:	d8e9      	bhi.n	401600 <_Z15setupPulsesDsm2h+0x84>
  }
  for ( counter = 0 ; counter < 16 ; counter += 1 )
  {
    put_serial_bit( 1 ) ;           // 16 extra stop bits
  }
}
  40162c:	4c13      	ldr	r4, [pc, #76]	; (40167c <_Z15setupPulsesDsm2h+0x100>)
// This is the data stream to send, prepare after 19.5 mS
// Send after 22.5 mS


//static uint8_t *Dsm2_pulsePtr = pulses2MHz.pbyte ;
void setupPulsesDsm2(uint8_t chns)
  40162e:	f104 050e 	add.w	r5, r4, #14
    dsmDat[3+2*i] = pulse & 0xff;
  }

  for ( counter = 0 ; counter < 14 ; counter += 1 )
  {
    sendByteDsm2(dsmDat[counter]);
  401632:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401636:	f7ff ff8b 	bl	401550 <_Z12sendByteDsm2h>
    uint16_t pulse = limit(0, ((g_chans512[i]*13)>>5)+512,1023);
    dsmDat[2+2*i] = (i<<2) | ((pulse>>8)&0x03);
    dsmDat[3+2*i] = pulse & 0xff;
  }

  for ( counter = 0 ; counter < 14 ; counter += 1 )
  40163a:	42ac      	cmp	r4, r5
  40163c:	d1f9      	bne.n	401632 <_Z15setupPulsesDsm2h+0xb6>
  40163e:	2410      	movs	r4, #16
  {
    sendByteDsm2(dsmDat[counter]);
  }
  for ( counter = 0 ; counter < 16 ; counter += 1 )
  {
    put_serial_bit( 1 ) ;           // 16 extra stop bits
  401640:	3c01      	subs	r4, #1
  401642:	2001      	movs	r0, #1
  401644:	b2e4      	uxtb	r4, r4
  401646:	f7ff fe6b 	bl	401320 <_Z14put_serial_bith>

  for ( counter = 0 ; counter < 14 ; counter += 1 )
  {
    sendByteDsm2(dsmDat[counter]);
  }
  for ( counter = 0 ; counter < 16 ; counter += 1 )
  40164a:	2c00      	cmp	r4, #0
  40164c:	d1f8      	bne.n	401640 <_Z15setupPulsesDsm2h+0xc4>
  40164e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  401650:	b289      	uxth	r1, r1
  401652:	0a0e      	lsrs	r6, r1, #8
  401654:	b2c8      	uxtb	r0, r1
  401656:	e7ca      	b.n	4015ee <_Z15setupPulsesDsm2h+0x72>
  Pulses2MHzptr = Bit_pulses ;

  // If more channels needed make sure the pulses union/array is large enough
  if (dsmDat[0]&BAD_DATA)  //first time through, setup header
  {
    switch(g_model.ppmNCH)
  401658:	2b01      	cmp	r3, #1
  40165a:	d003      	beq.n	401664 <_Z15setupPulsesDsm2h+0xe8>
        break;
      case DSM2only:
        dsmDat[0]=0x90;
        break;
      default:
        dsmDat[0]=0x98;  //dsmx, bind mode
  40165c:	2398      	movs	r3, #152	; 0x98
  40165e:	f886 30ec 	strb.w	r3, [r6, #236]	; 0xec
        break;
  401662:	e7a8      	b.n	4015b6 <_Z15setupPulsesDsm2h+0x3a>
    {
      case LPXDSM2:
        dsmDat[0]= 0x80;
        break;
      case DSM2only:
        dsmDat[0]=0x90;
  401664:	2390      	movs	r3, #144	; 0x90
  401666:	f886 30ec 	strb.w	r3, [r6, #236]	; 0xec
        break;
  40166a:	e7a4      	b.n	4015b6 <_Z15setupPulsesDsm2h+0x3a>
  40166c:	20000000 	.word	0x20000000
  401670:	20000108 	.word	0x20000108
  401674:	20000af6 	.word	0x20000af6
  401678:	200000ec 	.word	0x200000ec
  40167c:	200000eb 	.word	0x200000eb

00401680 <_Z11setupPulsesv>:
    }
  }
}

void setupPulses()
{
  401680:	b510      	push	{r4, lr}
  heartbeat |= HEART_TIMER_PULSES;
  401682:	4c37      	ldr	r4, [pc, #220]	; (401760 <_Z11setupPulsesv+0xe0>)

  if (Current_protocol != g_model.protocol) {
  401684:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
  }
}

void setupPulses()
{
  heartbeat |= HEART_TIMER_PULSES;
  401688:	f894 2a81 	ldrb.w	r2, [r4, #2689]	; 0xa81

  if (Current_protocol != g_model.protocol) {
  40168c:	f894 1a82 	ldrb.w	r1, [r4, #2690]	; 0xa82
  401690:	f003 0307 	and.w	r3, r3, #7
  }
}

void setupPulses()
{
  heartbeat |= HEART_TIMER_PULSES;
  401694:	f042 0201 	orr.w	r2, r2, #1

  if (Current_protocol != g_model.protocol) {
  401698:	428b      	cmp	r3, r1
  }
}

void setupPulses()
{
  heartbeat |= HEART_TIMER_PULSES;
  40169a:	f884 2a81 	strb.w	r2, [r4, #2689]	; 0xa81

  if (Current_protocol != g_model.protocol) {
  40169e:	461a      	mov	r2, r3
  4016a0:	d031      	beq.n	401706 <_Z11setupPulsesv+0x86>
    switch (Current_protocol) { // stop existing protocol hardware
  4016a2:	2904      	cmp	r1, #4
  4016a4:	d81d      	bhi.n	4016e2 <_Z11setupPulsesv+0x62>
  4016a6:	e8df f001 	tbb	[pc, r1]
  4016aa:	0303      	.short	0x0303
  4016ac:	401c      	.short	0x401c
  4016ae:	40          	.byte	0x40
  4016af:	00          	.byte	0x00
void disable_main_ppm()
{
  register Pio *pioptr ;

  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                            // Assign A17 to PIO
  4016b0:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  4016b4:	f2c4 010e 	movt	r1, #16398	; 0x400e

  PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  4016b8:	2200      	movs	r2, #0
void disable_main_ppm()
{
  register Pio *pioptr ;

  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                            // Assign A17 to PIO
  4016ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  4016be:	6008      	str	r0, [r1, #0]

  PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  4016c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4016c4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  4016c8:	2108      	movs	r1, #8
  4016ca:	6151      	str	r1, [r2, #20]
  4016cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
  4016d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4016d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4016d8:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
  4016dc:	f003 0307 	and.w	r3, r3, #7
  4016e0:	461a      	mov	r2, r3
      case PROTO_PPM16:
        disable_main_ppm();
        break;
    }

    Current_protocol = g_model.protocol;
  4016e2:	f884 3a82 	strb.w	r3, [r4, #2690]	; 0xa82
    switch (Current_protocol) { // Start new protocol hardware here
  4016e6:	2b04      	cmp	r3, #4
  4016e8:	d80d      	bhi.n	401706 <_Z11setupPulsesv+0x86>
  4016ea:	e8df f003 	tbb	[pc, r3]
  4016ee:	1616      	.short	0x1616
  4016f0:	030c      	.short	0x030c
  4016f2:	03          	.byte	0x03
  4016f3:	00          	.byte	0x00
      case PROTO_PXX:
        init_main_ppm(5000, 0); // Initial period 2.5 mS, output off
        init_ssc();
        break;
      case PROTO_DSM2:
        init_main_ppm(5000, 0); // Initial period 2.5 mS, output off
  4016f4:	f241 3088 	movw	r0, #5000	; 0x1388
  4016f8:	2100      	movs	r1, #0
  4016fa:	f7ff fdc5 	bl	401288 <_ZL13init_main_ppmmm>
        init_ssc();
  4016fe:	f7ff fd0f 	bl	401120 <_Z8init_sscv>
  401702:	f894 2a82 	ldrb.w	r2, [r4, #2690]	; 0xa82
        break;
    }
  }

// Set up output data here
  switch (Current_protocol) {
  401706:	2a04      	cmp	r2, #4
  401708:	d828      	bhi.n	40175c <_Z11setupPulsesv+0xdc>
  40170a:	e8df f002 	tbb	[pc, r2]
  40170e:	0303      	.short	0x0303
  401710:	2027      	.short	0x2027
  401712:	23          	.byte	0x23
  401713:	00          	.byte	0x00
      break;
    case PROTO_PPM16:
      setupPulsesPPM(); // Don't enable interrupts through here
      break ;
  }
}
  401714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    case PROTO_DSM2:
      setupPulsesDsm2(6);
      break;
    case PROTO_PPM16:
      setupPulsesPPM(); // Don't enable interrupts through here
  401718:	e536      	b.n	401188 <_Z14setupPulsesPPMv>
      case PROTO_DSM2:
        init_main_ppm(5000, 0); // Initial period 2.5 mS, output off
        init_ssc();
        break;
      case PROTO_PPM16:
        init_main_ppm(3000, 1); // Initial period 1.5 mS, output on
  40171a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40171e:	2101      	movs	r1, #1
  401720:	f7ff fdb2 	bl	401288 <_ZL13init_main_ppmmm>
  401724:	f894 2a82 	ldrb.w	r2, [r4, #2690]	; 0xa82
        break;
  401728:	e7ed      	b.n	401706 <_Z11setupPulsesv+0x86>
  register Pio *pioptr ;
  register Ssc *sscptr ;

  // Revert back to pwm output
  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                         // Assign A17 to PIO
  40172a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  40172e:	f2c4 030e 	movt	r3, #16398	; 0x400e
  401732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401736:	601a      	str	r2, [r3, #0]

  sscptr = SSC ;
  sscptr->SSC_CR = SSC_CR_TXDIS ;
  401738:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
  40173c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
  401740:	f003 0307 	and.w	r3, r3, #7
  401744:	f44f 7100 	mov.w	r1, #512	; 0x200
  401748:	6011      	str	r1, [r2, #0]
  40174a:	461a      	mov	r2, r3
  40174c:	e7c9      	b.n	4016e2 <_Z11setupPulsesv+0x62>
      break;
    case PROTO_PPM16:
      setupPulsesPPM(); // Don't enable interrupts through here
      break ;
  }
}
  40174e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  switch (Current_protocol) {
    case PROTO_PPM:
      setupPulsesPPM(); // Don't enable interrupts through here
      break;
    case PROTO_PXX:
      setupPulsesPXX();
  401752:	e699      	b.n	401488 <_Z14setupPulsesPXXv>
      break;
    case PROTO_DSM2:
      setupPulsesDsm2(6);
  401754:	2006      	movs	r0, #6
      break;
    case PROTO_PPM16:
      setupPulsesPPM(); // Don't enable interrupts through here
      break ;
  }
}
  401756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    case PROTO_PXX:
      setupPulsesPXX();
      break;
    case PROTO_DSM2:
      setupPulsesDsm2(6);
  40175a:	e70f      	b.n	40157c <_Z15setupPulsesDsm2h>
  40175c:	bd10      	pop	{r4, pc}
  40175e:	bf00      	nop
  401760:	20000108 	.word	0x20000108

00401764 <PWM_IRQHandler>:
    put_serial_bit( 1 ) ;           // 16 extra stop bits
  }
}

extern "C" void PWM_IRQHandler(void)
{
  401764:	b410      	push	{r4}
  register Pwm *pwmptr;
  register Ssc *sscptr;
  uint32_t period;

  pwmptr = PWM;
  if (pwmptr->PWM_ISR1 & PWM_ISR1_CHID3) {
  401766:	2300      	movs	r3, #0
  401768:	f2c4 0302 	movt	r3, #16386	; 0x4002
  40176c:	69db      	ldr	r3, [r3, #28]
  40176e:	071b      	lsls	r3, r3, #28
  401770:	d521      	bpl.n	4017b6 <PWM_IRQHandler+0x52>
    switch (Current_protocol) // Use the current, don't switch until set_up_pulses
  401772:	4b2a      	ldr	r3, [pc, #168]	; (40181c <PWM_IRQHandler+0xb8>)
  401774:	f893 2a82 	ldrb.w	r2, [r3, #2690]	; 0xa82
  401778:	2a04      	cmp	r2, #4
  40177a:	d81c      	bhi.n	4017b6 <PWM_IRQHandler+0x52>
  40177c:	e8df f002 	tbb	[pc, r2]
  401780:	391b1d1d 	.word	0x391b1d1d
  401784:	03          	.byte	0x03
  401785:	00          	.byte	0x00
        }
        break;

      case PROTO_DSM2:
        // Alternate periods of 19.5mS and 2.5 mS
        period = pwmptr->PWM_CH_NUM[3].PWM_CPDR;
  401786:	2200      	movs	r2, #0
  401788:	f2c4 0202 	movt	r2, #16386	; 0x4002
  40178c:	f8d2 026c 	ldr.w	r0, [r2, #620]	; 0x26c
        if (period == 5000) // 2.5 mS
  401790:	f241 3188 	movw	r1, #5000	; 0x1388
  401794:	4288      	cmp	r0, r1
  401796:	d03b      	beq.n	401810 <PWM_IRQHandler+0xac>
          // Kick off serial output here
          sscptr = SSC;
#ifndef SIMU
          sscptr->SSC_TPR = (uint32_t) Bit_pulses;
#endif
          sscptr->SSC_TCR = Serial_byte_count;
  401798:	f893 0a38 	ldrb.w	r0, [r3, #2616]	; 0xa38
          period = 19500 * 2;
        }
        else {
          period = 5000;
        }
        pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = period; // Period in half uS
  40179c:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
        }
        else {
          // Kick off serial output here
          sscptr = SSC;
#ifndef SIMU
          sscptr->SSC_TPR = (uint32_t) Bit_pulses;
  4017a0:	4a1f      	ldr	r2, [pc, #124]	; (401820 <PWM_IRQHandler+0xbc>)
  4017a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
  4017a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif
          sscptr->SSC_TCR = Serial_byte_count;
          sscptr->SSC_PTCR = SSC_PTCR_TXTEN; // Start transfers
  4017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
          // Kick off serial output here
          sscptr = SSC;
#ifndef SIMU
          sscptr->SSC_TPR = (uint32_t) Bit_pulses;
#endif
          sscptr->SSC_TCR = Serial_byte_count;
  4017ae:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
          sscptr->SSC_PTCR = SSC_PTCR_TXTEN; // Start transfers
  4017b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        }
        break;
    }
  }
}
  4017b6:	bc10      	pop	{r4}
  4017b8:	4770      	bx	lr
  if (pwmptr->PWM_ISR1 & PWM_ISR1_CHID3) {
    switch (Current_protocol) // Use the current, don't switch until set_up_pulses
    {
      case PROTO_PPM:
      case PROTO_PPM16:
        pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = Pulses[Pulses_index++]; // Period in half uS
  4017ba:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
  4017be:	4a19      	ldr	r2, [pc, #100]	; (401824 <PWM_IRQHandler+0xc0>)
  4017c0:	2100      	movs	r1, #0
  4017c2:	eb02 0440 	add.w	r4, r2, r0, lsl #1
  4017c6:	f8b4 40c8 	ldrh.w	r4, [r4, #200]	; 0xc8
  4017ca:	f2c4 0102 	movt	r1, #16386	; 0x4002
  4017ce:	3001      	adds	r0, #1
  4017d0:	f8c1 4270 	str.w	r4, [r1, #624]	; 0x270
  4017d4:	f8c3 0a84 	str.w	r0, [r3, #2692]	; 0xa84
        if (Pulses[Pulses_index] == 0) {
  4017d8:	f8d3 3a84 	ldr.w	r3, [r3, #2692]	; 0xa84
  4017dc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4017e0:	f8b2 30c8 	ldrh.w	r3, [r2, #200]	; 0xc8
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	d1e6      	bne.n	4017b6 <PWM_IRQHandler+0x52>
          Pulses_index = 0;
  4017e8:	4a0c      	ldr	r2, [pc, #48]	; (40181c <PWM_IRQHandler+0xb8>)
  4017ea:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
          sscptr->SSC_PTCR = SSC_PTCR_TXTEN; // Start transfers
        }
        break;
    }
  }
}
  4017ee:	bc10      	pop	{r4}
      case PROTO_PPM16:
        pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = Pulses[Pulses_index++]; // Period in half uS
        if (Pulses[Pulses_index] == 0) {
          Pulses_index = 0;

          setupPulses();
  4017f0:	e746      	b.n	401680 <_Z11setupPulsesv>
        }
        break;

      case PROTO_PXX:
        // Alternate periods of 15.5mS and 2.5 mS
        period = pwmptr->PWM_CH_NUM[3].PWM_CPDR;
  4017f2:	2200      	movs	r2, #0
  4017f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
  4017f8:	f8d2 026c 	ldr.w	r0, [r2, #620]	; 0x26c
        if (period == 5000) // 2.5 mS
  4017fc:	f241 3188 	movw	r1, #5000	; 0x1388
  401800:	4288      	cmp	r0, r1
  401802:	d1c9      	bne.n	401798 <PWM_IRQHandler+0x34>
          period = 15500 * 2;
        }
        else {
          period = 5000;
        }
        pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = period; // Period in half uS
  401804:	f647 1318 	movw	r3, #31000	; 0x7918
  401808:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
          sscptr->SSC_PTCR = SSC_PTCR_TXTEN; // Start transfers
        }
        break;
    }
  }
}
  40180c:	bc10      	pop	{r4}
          period = 5000;
        }
        pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = period; // Period in half uS
        if (period != 5000) // 2.5 mS
            {
          setupPulses();
  40180e:	e737      	b.n	401680 <_Z11setupPulsesv>
          period = 19500 * 2;
        }
        else {
          period = 5000;
        }
        pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = period; // Period in half uS
  401810:	f649 0358 	movw	r3, #39000	; 0x9858
  401814:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
          sscptr->SSC_PTCR = SSC_PTCR_TXTEN; // Start transfers
        }
        break;
    }
  }
}
  401818:	bc10      	pop	{r4}
          period = 5000;
        }
        pwmptr->PWM_CH_NUM[3].PWM_CPDRUPD = period; // Period in half uS
        if (period != 5000) // 2.5 mS
            {
          setupPulses();
  40181a:	e731      	b.n	401680 <_Z11setupPulsesv>
  40181c:	20000108 	.word	0x20000108
  401820:	20000b48 	.word	0x20000b48
  401824:	20000000 	.word	0x20000000

00401828 <_Z15getExpoMixCounth>:

  DrawCurve(curveFn);
}

uint8_t getExpoMixCount(uint8_t expo)
{
  401828:	b430      	push	{r4, r5}
  uint8_t count = 0;
  uint8_t ch ;

  for(int8_t i=(expo ? MAX_EXPOS-1 : MAX_MIXERS-1); i>=0; i--) {
  40182a:	2800      	cmp	r0, #0
  40182c:	bf0c      	ite	eq
  40182e:	233f      	moveq	r3, #63	; 0x3f
  401830:	231f      	movne	r3, #31

  DrawCurve(curveFn);
}

uint8_t getExpoMixCount(uint8_t expo)
{
  401832:	4605      	mov	r5, r0
  401834:	4a0c      	ldr	r2, [pc, #48]	; (401868 <_Z15getExpoMixCounth+0x40>)
  uint8_t count = 0;
  uint8_t ch ;

  for(int8_t i=(expo ? MAX_EXPOS-1 : MAX_MIXERS-1); i>=0; i--) {
  401836:	2000      	movs	r0, #0
  401838:	e008      	b.n	40184c <_Z15getExpoMixCounth+0x24>
    ch = (expo ? expoaddress(i)->mode : mixaddress(i)->srcRaw);
  40183a:	f891 1475 	ldrb.w	r1, [r1, #1141]	; 0x475
uint8_t getExpoMixCount(uint8_t expo)
{
  uint8_t count = 0;
  uint8_t ch ;

  for(int8_t i=(expo ? MAX_EXPOS-1 : MAX_MIXERS-1); i>=0; i--) {
  40183e:	3b01      	subs	r3, #1
  401840:	b2db      	uxtb	r3, r3
    ch = (expo ? expoaddress(i)->mode : mixaddress(i)->srcRaw);
    if (ch != 0) {
      count++;
  401842:	1c44      	adds	r4, r0, #1
  uint8_t count = 0;
  uint8_t ch ;

  for(int8_t i=(expo ? MAX_EXPOS-1 : MAX_MIXERS-1); i>=0; i--) {
    ch = (expo ? expoaddress(i)->mode : mixaddress(i)->srcRaw);
    if (ch != 0) {
  401844:	b101      	cbz	r1, 401848 <_Z15getExpoMixCounth+0x20>
      count++;
  401846:	b2e0      	uxtb	r0, r4
uint8_t getExpoMixCount(uint8_t expo)
{
  uint8_t count = 0;
  uint8_t ch ;

  for(int8_t i=(expo ? MAX_EXPOS-1 : MAX_MIXERS-1); i>=0; i--) {
  401848:	0619      	lsls	r1, r3, #24
  40184a:	d40a      	bmi.n	401862 <_Z15getExpoMixCounth+0x3a>
    ch = (expo ? expoaddress(i)->mode : mixaddress(i)->srcRaw);
  40184c:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  401850:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401854:	1914      	adds	r4, r2, r4
  401856:	1851      	adds	r1, r2, r1
  401858:	2d00      	cmp	r5, #0
  40185a:	d1ee      	bne.n	40183a <_Z15getExpoMixCounth+0x12>
  40185c:	f894 1020 	ldrb.w	r1, [r4, #32]
  401860:	e7ed      	b.n	40183e <_Z15getExpoMixCounth+0x16>
    if (ch != 0) {
      count++;
    }
  }
  return count;
}
  401862:	bc30      	pop	{r4, r5}
  401864:	4770      	bx	lr
  401866:	bf00      	nop
  401868:	20000244 	.word	0x20000244

0040186c <_Z22reachExpoMixCountLimith>:

bool reachExpoMixCountLimit(uint8_t expo)
{
  40186c:	b510      	push	{r4, lr}
  40186e:	4604      	mov	r4, r0
  // check mixers count limit
  if (getExpoMixCount(expo) >= (expo ? MAX_EXPOS : MAX_MIXERS)) {
  401870:	f7ff ffda 	bl	401828 <_Z15getExpoMixCounth>
  401874:	2c00      	cmp	r4, #0
  401876:	bf0c      	ite	eq
  401878:	2340      	moveq	r3, #64	; 0x40
  40187a:	2320      	movne	r3, #32
  40187c:	4283      	cmp	r3, r0
  40187e:	dc0b      	bgt.n	401898 <_Z22reachExpoMixCountLimith+0x2c>
    s_warning = (expo ? STR_NOFREEEXPO : STR_NOFREEMIXER);
  401880:	4b06      	ldr	r3, [pc, #24]	; (40189c <_Z22reachExpoMixCountLimith+0x30>)
    return true;
  401882:	2001      	movs	r0, #1

bool reachExpoMixCountLimit(uint8_t expo)
{
  // check mixers count limit
  if (getExpoMixCount(expo) >= (expo ? MAX_EXPOS : MAX_MIXERS)) {
    s_warning = (expo ? STR_NOFREEEXPO : STR_NOFREEMIXER);
  401884:	f1a3 0210 	sub.w	r2, r3, #16
  401888:	2c00      	cmp	r4, #0
  40188a:	bf0c      	ite	eq
  40188c:	461c      	moveq	r4, r3
  40188e:	4614      	movne	r4, r2
  401890:	4a03      	ldr	r2, [pc, #12]	; (4018a0 <_Z22reachExpoMixCountLimith+0x34>)
  401892:	f8c2 4a88 	str.w	r4, [r2, #2696]	; 0xa88
    return true;
  401896:	bd10      	pop	{r4, pc}
  }
  return false;
  401898:	2000      	movs	r0, #0
}
  40189a:	bd10      	pop	{r4, pc}
  40189c:	0040f96c 	.word	0x0040f96c
  4018a0:	20000108 	.word	0x20000108

004018a4 <_Z13deleteExpoMixhh>:

void deleteExpoMix(uint8_t expo, uint8_t idx)
{
  4018a4:	b538      	push	{r3, r4, r5, lr}
  4018a6:	4604      	mov	r4, r0
  if (expo) {
    memmove(expoaddress(idx), expoaddress(idx+1), (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  4018a8:	1c4b      	adds	r3, r1, #1
  return false;
}

void deleteExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
  4018aa:	bb60      	cbnz	r0, 401906 <_Z13deleteExpoMixhh+0x62>
    memmove(expoaddress(idx), expoaddress(idx+1), (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
    memset(expoaddress(MAX_EXPOS-1), 0, sizeof(ExpoData));
  }
  else {
    memmove(mixaddress(idx), mixaddress(idx+1), (MAX_MIXERS-(idx+1))*sizeof(MixData));
  4018ac:	4d25      	ldr	r5, [pc, #148]	; (401944 <_Z13deleteExpoMixhh+0xa0>)
  return &g_model.expoData[idx];
}

MixData *mixaddress(uint8_t idx)
{
  return &g_model.mixData[idx];
  4018ae:	b2db      	uxtb	r3, r3
  4018b0:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
  4018b4:	43ca      	mvns	r2, r1
  4018b6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4018ba:	18eb      	adds	r3, r5, r3
  4018bc:	1828      	adds	r0, r5, r0
  4018be:	3240      	adds	r2, #64	; 0x40
  4018c0:	3015      	adds	r0, #21
  4018c2:	f103 0115 	add.w	r1, r3, #21
  4018c6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  4018ca:	f00d fd5f 	bl	40f38c <memmove>
    memset(mixaddress(MAX_MIXERS-1), 0, sizeof(MixData));
  4018ce:	f8a5 43c6 	strh.w	r4, [r5, #966]	; 0x3c6
  4018d2:	f8a5 43c8 	strh.w	r4, [r5, #968]	; 0x3c8
  4018d6:	f8a5 43ca 	strh.w	r4, [r5, #970]	; 0x3ca
  4018da:	f8a5 43cc 	strh.w	r4, [r5, #972]	; 0x3cc
  4018de:	f8a5 43ce 	strh.w	r4, [r5, #974]	; 0x3ce
  4018e2:	f8a5 43d0 	strh.w	r4, [r5, #976]	; 0x3d0
  4018e6:	f8a5 43d2 	strh.w	r4, [r5, #978]	; 0x3d2
  4018ea:	f885 43d4 	strb.w	r4, [r5, #980]	; 0x3d4
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4018ee:	4b16      	ldr	r3, [pc, #88]	; (401948 <_Z13deleteExpoMixhh+0xa4>)
  4018f0:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  4018f4:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4018f8:	f041 0102 	orr.w	r1, r1, #2
  4018fc:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401900:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
  }
  STORE_MODELVARS;
}
  401904:	bd38      	pop	{r3, r4, r5, pc}
}

void deleteExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
    memmove(expoaddress(idx), expoaddress(idx+1), (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  401906:	4c0f      	ldr	r4, [pc, #60]	; (401944 <_Z13deleteExpoMixhh+0xa0>)
  return &g_model.phaseData[idx];
}

ExpoData *expoaddress(uint8_t idx )
{
  return &g_model.expoData[idx];
  401908:	b2db      	uxtb	r3, r3
  40190a:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  40190e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  401912:	18e3      	adds	r3, r4, r3
  401914:	43ca      	mvns	r2, r1
  401916:	1820      	adds	r0, r4, r0
  401918:	f503 618e 	add.w	r1, r3, #1136	; 0x470
  40191c:	f500 608e 	add.w	r0, r0, #1136	; 0x470
  401920:	3220      	adds	r2, #32
  401922:	3005      	adds	r0, #5
  401924:	3105      	adds	r1, #5
  401926:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  40192a:	f00d fd2f 	bl	40f38c <memmove>
    memset(expoaddress(MAX_EXPOS-1), 0, sizeof(ExpoData));
  40192e:	2300      	movs	r3, #0
  401930:	f8a4 354e 	strh.w	r3, [r4, #1358]	; 0x54e
  401934:	f8a4 3550 	strh.w	r3, [r4, #1360]	; 0x550
  401938:	f8a4 3552 	strh.w	r3, [r4, #1362]	; 0x552
  40193c:	f884 3554 	strb.w	r3, [r4, #1364]	; 0x554
  401940:	e7d5      	b.n	4018ee <_Z13deleteExpoMixhh+0x4a>
  401942:	bf00      	nop
  401944:	20000244 	.word	0x20000244
  401948:	20000108 	.word	0x20000108

0040194c <_Z13insertExpoMixhh>:
  STORE_MODELVARS;
}

static int8_t s_currCh;
void insertExpoMix(uint8_t expo, uint8_t idx)
{
  40194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40194e:	4606      	mov	r6, r0
  if (expo) {
    ExpoData *expo = expoaddress(idx);
  401950:	4c32      	ldr	r4, [pc, #200]	; (401a1c <_Z13insertExpoMixhh+0xd0>)
}

static int8_t s_currCh;
void insertExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
  401952:	2800      	cmp	r0, #0
  401954:	d137      	bne.n	4019c6 <_Z13insertExpoMixhh+0x7a>
    expo->mode = 3; // pos&neg
    expo->chn = s_currCh - 1;
    expo->weight = 100;
  }
  else {
    MixData *mix = mixaddress(idx);
  401956:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
  40195a:	19e7      	adds	r7, r4, r7
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
  40195c:	43c9      	mvns	r1, r1
    expo->mode = 3; // pos&neg
    expo->chn = s_currCh - 1;
    expo->weight = 100;
  }
  else {
    MixData *mix = mixaddress(idx);
  40195e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
  401962:	1d7d      	adds	r5, r7, #5
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
  401964:	f101 0240 	add.w	r2, r1, #64	; 0x40
  401968:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  40196c:	4629      	mov	r1, r5
  40196e:	f107 0014 	add.w	r0, r7, #20
  401972:	f00d fd0b 	bl	40f38c <memmove>
    memset(mix,0,sizeof(MixData));
  401976:	220f      	movs	r2, #15
  401978:	4631      	mov	r1, r6
  40197a:	4628      	mov	r0, r5
  40197c:	f00d fd6a 	bl	40f454 <memset>
    mix->destCh = s_currCh-1;
  401980:	f894 2a8c 	ldrb.w	r2, [r4, #2700]	; 0xa8c
  401984:	b2d3      	uxtb	r3, r2
    mix->srcRaw = (s_currCh > 4 ? s_currCh : channel_order(s_currCh));
  401986:	b252      	sxtb	r2, r2
  }
  else {
    MixData *mix = mixaddress(idx);
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
    memset(mix,0,sizeof(MixData));
    mix->destCh = s_currCh-1;
  401988:	1e59      	subs	r1, r3, #1
    mix->srcRaw = (s_currCh > 4 ? s_currCh : channel_order(s_currCh));
  40198a:	2a04      	cmp	r2, #4
  }
  else {
    MixData *mix = mixaddress(idx);
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
    memset(mix,0,sizeof(MixData));
    mix->destCh = s_currCh-1;
  40198c:	7179      	strb	r1, [r7, #5]
    mix->srcRaw = (s_currCh > 4 ? s_currCh : channel_order(s_currCh));
  40198e:	dd0d      	ble.n	4019ac <_Z13insertExpoMixhh+0x60>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401990:	f894 29a8 	ldrb.w	r2, [r4, #2472]	; 0x9a8
  401994:	72eb      	strb	r3, [r5, #11]
    mix->weight = 100;
  401996:	2364      	movs	r3, #100	; 0x64
  401998:	70ab      	strb	r3, [r5, #2]
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40199a:	f8b4 39aa 	ldrh.w	r3, [r4, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40199e:	f042 0202 	orr.w	r2, r2, #2
  4019a2:	f884 29a8 	strb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  4019a6:	f8a4 39ac 	strh.w	r3, [r4, #2476]	; 0x9ac
  }
  STORE_MODELVARS;
}
  4019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    0x87, 0x8D, 0x93, 0x9C, 0xB1, 0xB4,
    0xC6, 0xC9, 0xD2, 0xD8, 0xE1, 0xE4 };

uint8_t channel_order(uint8_t x)
{
  return ( ((pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup) >> (6-(x-1) * 2)) & 3 ) + 1 );
  4019ac:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
  4019b0:	491b      	ldr	r1, [pc, #108]	; (401a20 <_Z13insertExpoMixhh+0xd4>)
  4019b2:	f1c3 0304 	rsb	r3, r3, #4
  4019b6:	5c8a      	ldrb	r2, [r1, r2]
  4019b8:	005b      	lsls	r3, r3, #1
  4019ba:	fa52 f303 	asrs.w	r3, r2, r3
  4019be:	f003 0303 	and.w	r3, r3, #3
  4019c2:	3301      	adds	r3, #1
  4019c4:	e7e4      	b.n	401990 <_Z13insertExpoMixhh+0x44>

static int8_t s_currCh;
void insertExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
  4019c6:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
  4019ca:	1965      	adds	r5, r4, r5
  4019cc:	f505 65b4 	add.w	r5, r5, #1440	; 0x5a0
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  4019d0:	43ca      	mvns	r2, r1

static int8_t s_currCh;
void insertExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
  4019d2:	f105 0611 	add.w	r6, r5, #17
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  4019d6:	3220      	adds	r2, #32
  4019d8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  4019dc:	f105 0018 	add.w	r0, r5, #24
  4019e0:	4631      	mov	r1, r6
  4019e2:	f00d fcd3 	bl	40f38c <memmove>
    memset(expo,0,sizeof(ExpoData));
  4019e6:	2300      	movs	r3, #0
  4019e8:	74ab      	strb	r3, [r5, #18]
  4019ea:	75ab      	strb	r3, [r5, #22]
  4019ec:	74eb      	strb	r3, [r5, #19]
  4019ee:	752b      	strb	r3, [r5, #20]
  4019f0:	756b      	strb	r3, [r5, #21]
  4019f2:	75eb      	strb	r3, [r5, #23]
    expo->mode = 3; // pos&neg
    expo->chn = s_currCh - 1;
  4019f4:	f894 3a8c 	ldrb.w	r3, [r4, #2700]	; 0xa8c
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
    memset(expo,0,sizeof(ExpoData));
    expo->mode = 3; // pos&neg
  4019f8:	2203      	movs	r2, #3
    expo->chn = s_currCh - 1;
  4019fa:	3b01      	subs	r3, #1
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
    memset(expo,0,sizeof(ExpoData));
    expo->mode = 3; // pos&neg
  4019fc:	746a      	strb	r2, [r5, #17]
    expo->chn = s_currCh - 1;
  4019fe:	74ab      	strb	r3, [r5, #18]
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401a00:	f894 29a8 	ldrb.w	r2, [r4, #2472]	; 0x9a8
    expo->weight = 100;
  401a04:	2364      	movs	r3, #100	; 0x64
  401a06:	75ab      	strb	r3, [r5, #22]
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401a08:	f8b4 39aa 	ldrh.w	r3, [r4, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401a0c:	f042 0202 	orr.w	r2, r2, #2

static int8_t s_currCh;
void insertExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
  401a10:	350c      	adds	r5, #12
  401a12:	f884 29a8 	strb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401a16:	f8a4 39ac 	strh.w	r3, [r4, #2476]	; 0x9ac
    mix->destCh = s_currCh-1;
    mix->srcRaw = (s_currCh > 4 ? s_currCh : channel_order(s_currCh));
    mix->weight = 100;
  }
  STORE_MODELVARS;
}
  401a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a1c:	20000108 	.word	0x20000108
  401a20:	0040f730 	.word	0x0040f730

00401a24 <_Z11copyExpoMixhh>:

void copyExpoMix(uint8_t expo, uint8_t idx)
{
  401a24:	b508      	push	{r3, lr}
  if (expo) {
  401a26:	b9b8      	cbnz	r0, 401a58 <_Z11copyExpoMixhh+0x34>
    ExpoData *expo = expoaddress(idx);
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  }
  else {
    MixData *mix = mixaddress(idx);
  401a28:	4b12      	ldr	r3, [pc, #72]	; (401a74 <_Z11copyExpoMixhh+0x50>)
  401a2a:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
  401a2e:	43ca      	mvns	r2, r1
  if (expo) {
    ExpoData *expo = expoaddress(idx);
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  }
  else {
    MixData *mix = mixaddress(idx);
  401a30:	18c0      	adds	r0, r0, r3
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
  401a32:	3240      	adds	r2, #64	; 0x40
  if (expo) {
    ExpoData *expo = expoaddress(idx);
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  }
  else {
    MixData *mix = mixaddress(idx);
  401a34:	1d41      	adds	r1, r0, #5
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
  401a36:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  401a3a:	3014      	adds	r0, #20
  401a3c:	f00d fca6 	bl	40f38c <memmove>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401a40:	4b0d      	ldr	r3, [pc, #52]	; (401a78 <_Z11copyExpoMixhh+0x54>)
  401a42:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401a46:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401a4a:	f041 0102 	orr.w	r1, r1, #2
  401a4e:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401a52:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
  }
  STORE_MODELVARS;
}
  401a56:	bd08      	pop	{r3, pc}
}

void copyExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
  401a58:	4b08      	ldr	r3, [pc, #32]	; (401a7c <_Z11copyExpoMixhh+0x58>)
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  401a5a:	43ca      	mvns	r2, r1
}

void copyExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
  401a5c:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  401a60:	18c0      	adds	r0, r0, r3
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  401a62:	3220      	adds	r2, #32
}

void copyExpoMix(uint8_t expo, uint8_t idx)
{
  if (expo) {
    ExpoData *expo = expoaddress(idx);
  401a64:	1d41      	adds	r1, r0, #5
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
  401a66:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  401a6a:	300c      	adds	r0, #12
  401a6c:	f00d fc8e 	bl	40f38c <memmove>
  401a70:	e7e6      	b.n	401a40 <_Z11copyExpoMixhh+0x1c>
  401a72:	bf00      	nop
  401a74:	20000254 	.word	0x20000254
  401a78:	20000108 	.word	0x20000108
  401a7c:	200006b4 	.word	0x200006b4

00401a80 <_Z7memswapPvS_h>:
  }
  STORE_MODELVARS;
}

void memswap(void *a, void *b, uint8_t size)
{
  401a80:	b410      	push	{r4}
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401a82:	b15a      	cbz	r2, 401a9c <_Z7memswapPvS_h+0x1c>
  401a84:	3a01      	subs	r2, #1
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
  }
  STORE_MODELVARS;
}

void memswap(void *a, void *b, uint8_t size)
  401a86:	1c43      	adds	r3, r0, #1
  401a88:	b2d2      	uxtb	r2, r2
  401a8a:	189a      	adds	r2, r3, r2
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
    temp = *x;
    *x++ = *y;
  401a8c:	780c      	ldrb	r4, [r1, #0]
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
    temp = *x;
  401a8e:	7803      	ldrb	r3, [r0, #0]
    *x++ = *y;
  401a90:	f800 4b01 	strb.w	r4, [r0], #1
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401a94:	4290      	cmp	r0, r2
    temp = *x;
    *x++ = *y;
    *y++ = temp;
  401a96:	f801 3b01 	strb.w	r3, [r1], #1
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401a9a:	d1f7      	bne.n	401a8c <_Z7memswapPvS_h+0xc>
    temp = *x;
    *x++ = *y;
    *y++ = temp;
  }
}
  401a9c:	bc10      	pop	{r4}
  401a9e:	4770      	bx	lr

00401aa0 <_Z8swapExpoRhh>:

bool swapExpo(uint8_t &idx, uint8_t up)
{
  401aa0:	b4f0      	push	{r4, r5, r6, r7}
  ExpoData *x = expoaddress(idx);
  401aa2:	7802      	ldrb	r2, [r0, #0]
  401aa4:	4c26      	ldr	r4, [pc, #152]	; (401b40 <_Z8swapExpoRhh+0xa0>)
  401aa6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  401aaa:	18e3      	adds	r3, r4, r3
  401aac:	f503 638e 	add.w	r3, r3, #1136	; 0x470
  401ab0:	3305      	adds	r3, #5
  int8_t tgt_idx = (up ? idx-1 : idx+1);
  401ab2:	b1c9      	cbz	r1, 401ae8 <_Z8swapExpoRhh+0x48>
  401ab4:	3a01      	subs	r2, #1
  401ab6:	b2d2      	uxtb	r2, r2

  if (tgt_idx < 0) {
  401ab8:	b255      	sxtb	r5, r2
  401aba:	2d00      	cmp	r5, #0
  401abc:	db19      	blt.n	401af2 <_Z8swapExpoRhh+0x52>
      return false;
    x->chn--;
    return true;
  }

  if (tgt_idx == MAX_EXPOS) {
  401abe:	2d20      	cmp	r5, #32
  401ac0:	d026      	beq.n	401b10 <_Z8swapExpoRhh+0x70>
      return false;
    x->chn++;
    return true;
  }

  ExpoData *y = expoaddress(tgt_idx);
  401ac2:	b2d2      	uxtb	r2, r2
  401ac4:	ebc2 05c2 	rsb	r5, r2, r2, lsl #3
  401ac8:	f505 658e 	add.w	r5, r5, #1136	; 0x470
  401acc:	1964      	adds	r4, r4, r5
  401ace:	1d65      	adds	r5, r4, #5
  if(x->chn != y->chn || !y->mode) {
  401ad0:	785e      	ldrb	r6, [r3, #1]
  401ad2:	786f      	ldrb	r7, [r5, #1]
  401ad4:	42b7      	cmp	r7, r6
  401ad6:	d023      	beq.n	401b20 <_Z8swapExpoRhh+0x80>
    if (up) {
  401ad8:	b191      	cbz	r1, 401b00 <_Z8swapExpoRhh+0x60>
      if (x->chn>0) x->chn--;
      else return false;
  401ada:	4630      	mov	r0, r6
  }

  ExpoData *y = expoaddress(tgt_idx);
  if(x->chn != y->chn || !y->mode) {
    if (up) {
      if (x->chn>0) x->chn--;
  401adc:	b116      	cbz	r6, 401ae4 <_Z8swapExpoRhh+0x44>
  401ade:	3e01      	subs	r6, #1
  401ae0:	705e      	strb	r6, [r3, #1]
    }
    else {
      if (x->chn<NUM_STICKS-1) x->chn++;
      else return false;
    }
    return true;
  401ae2:	2001      	movs	r0, #1
  }

  memswap(x, y, sizeof(ExpoData));
  idx = tgt_idx;
  return true;
}
  401ae4:	bcf0      	pop	{r4, r5, r6, r7}
  401ae6:	4770      	bx	lr
}

bool swapExpo(uint8_t &idx, uint8_t up)
{
  ExpoData *x = expoaddress(idx);
  int8_t tgt_idx = (up ? idx-1 : idx+1);
  401ae8:	3201      	adds	r2, #1
  401aea:	b2d2      	uxtb	r2, r2

  if (tgt_idx < 0) {
  401aec:	b255      	sxtb	r5, r2
  401aee:	2d00      	cmp	r5, #0
  401af0:	dae5      	bge.n	401abe <_Z8swapExpoRhh+0x1e>
    if (x->chn == 0)
  401af2:	7858      	ldrb	r0, [r3, #1]
  401af4:	2800      	cmp	r0, #0
  401af6:	d0f5      	beq.n	401ae4 <_Z8swapExpoRhh+0x44>
      return false;
    x->chn--;
  401af8:	3801      	subs	r0, #1
  401afa:	7058      	strb	r0, [r3, #1]
    return true;
  401afc:	2001      	movs	r0, #1
  401afe:	e7f1      	b.n	401ae4 <_Z8swapExpoRhh+0x44>
    if (up) {
      if (x->chn>0) x->chn--;
      else return false;
    }
    else {
      if (x->chn<NUM_STICKS-1) x->chn++;
  401b00:	2e02      	cmp	r6, #2
      else return false;
  401b02:	bf88      	it	hi
  401b04:	4608      	movhi	r0, r1
    if (up) {
      if (x->chn>0) x->chn--;
      else return false;
    }
    else {
      if (x->chn<NUM_STICKS-1) x->chn++;
  401b06:	d8ed      	bhi.n	401ae4 <_Z8swapExpoRhh+0x44>
  401b08:	3601      	adds	r6, #1
  401b0a:	705e      	strb	r6, [r3, #1]
      else return false;
    }
    return true;
  401b0c:	2001      	movs	r0, #1
  401b0e:	e7e9      	b.n	401ae4 <_Z8swapExpoRhh+0x44>
    x->chn--;
    return true;
  }

  if (tgt_idx == MAX_EXPOS) {
    if (x->chn == NUM_STICKS-1)
  401b10:	785a      	ldrb	r2, [r3, #1]
      return false;
  401b12:	2000      	movs	r0, #0
    x->chn--;
    return true;
  }

  if (tgt_idx == MAX_EXPOS) {
    if (x->chn == NUM_STICKS-1)
  401b14:	2a03      	cmp	r2, #3
  401b16:	d0e5      	beq.n	401ae4 <_Z8swapExpoRhh+0x44>
      return false;
    x->chn++;
  401b18:	3201      	adds	r2, #1
  401b1a:	705a      	strb	r2, [r3, #1]
    return true;
  401b1c:	2001      	movs	r0, #1
  401b1e:	e7e1      	b.n	401ae4 <_Z8swapExpoRhh+0x44>
  }

  ExpoData *y = expoaddress(tgt_idx);
  if(x->chn != y->chn || !y->mode) {
  401b20:	7964      	ldrb	r4, [r4, #5]
  401b22:	2c00      	cmp	r4, #0
  401b24:	d0d8      	beq.n	401ad8 <_Z8swapExpoRhh+0x38>
  401b26:	2100      	movs	r1, #0
  401b28:	e002      	b.n	401b30 <_Z8swapExpoRhh+0x90>
    *x++ = *y;
    *y++ = temp;
  }
}

bool swapExpo(uint8_t &idx, uint8_t up)
  401b2a:	186c      	adds	r4, r5, r1
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401b2c:	7864      	ldrb	r4, [r4, #1]
  401b2e:	3101      	adds	r1, #1
    temp = *x;
  401b30:	5c5e      	ldrb	r6, [r3, r1]
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401b32:	2906      	cmp	r1, #6
    temp = *x;
    *x++ = *y;
  401b34:	545c      	strb	r4, [r3, r1]
    *y++ = temp;
  401b36:	546e      	strb	r6, [r5, r1]
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401b38:	d1f7      	bne.n	401b2a <_Z8swapExpoRhh+0x8a>
    }
    return true;
  }

  memswap(x, y, sizeof(ExpoData));
  idx = tgt_idx;
  401b3a:	7002      	strb	r2, [r0, #0]
  return true;
  401b3c:	2001      	movs	r0, #1
  401b3e:	e7d1      	b.n	401ae4 <_Z8swapExpoRhh+0x44>
  401b40:	20000244 	.word	0x20000244

00401b44 <_Z7swapMixRhh>:
}

bool swapMix(uint8_t &idx, uint8_t up)
{
  401b44:	b4f0      	push	{r4, r5, r6, r7}
  MixData *x = mixaddress(idx);
  401b46:	7803      	ldrb	r3, [r0, #0]
  401b48:	4c25      	ldr	r4, [pc, #148]	; (401be0 <_Z7swapMixRhh+0x9c>)
  401b4a:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
  401b4e:	3210      	adds	r2, #16
  401b50:	18a2      	adds	r2, r4, r2
  401b52:	1d56      	adds	r6, r2, #5
  int8_t tgt_idx = (up ? idx-1 : idx+1);
  401b54:	b1c1      	cbz	r1, 401b88 <_Z7swapMixRhh+0x44>
  401b56:	3b01      	subs	r3, #1
  401b58:	b2db      	uxtb	r3, r3

  if (tgt_idx < 0) {
  401b5a:	b25f      	sxtb	r7, r3
  401b5c:	2f00      	cmp	r7, #0
  401b5e:	db18      	blt.n	401b92 <_Z7swapMixRhh+0x4e>
      return false;
    x->destCh--;
    return true;
  }

  if (tgt_idx == MAX_MIXERS) {
  401b60:	2f40      	cmp	r7, #64	; 0x40
  401b62:	d01d      	beq.n	401ba0 <_Z7swapMixRhh+0x5c>
      return false;
    x->destCh++;
    return true;
  }

  MixData *y = mixaddress(tgt_idx);
  401b64:	b2db      	uxtb	r3, r3
  401b66:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
  401b6a:	3510      	adds	r5, #16
  401b6c:	1964      	adds	r4, r4, r5
  if(x->destCh != y->destCh) {
  401b6e:	7967      	ldrb	r7, [r4, #5]
  401b70:	7955      	ldrb	r5, [r2, #5]
      return false;
    x->destCh++;
    return true;
  }

  MixData *y = mixaddress(tgt_idx);
  401b72:	3405      	adds	r4, #5
  if(x->destCh != y->destCh) {
  401b74:	42af      	cmp	r7, r5
  401b76:	d023      	beq.n	401bc0 <_Z7swapMixRhh+0x7c>
    if (up) {
  401b78:	b1d1      	cbz	r1, 401bb0 <_Z7swapMixRhh+0x6c>
      if (x->destCh>0) x->destCh--;
      else return false;
  401b7a:	4628      	mov	r0, r5
  }

  MixData *y = mixaddress(tgt_idx);
  if(x->destCh != y->destCh) {
    if (up) {
      if (x->destCh>0) x->destCh--;
  401b7c:	b115      	cbz	r5, 401b84 <_Z7swapMixRhh+0x40>
  401b7e:	3d01      	subs	r5, #1
  401b80:	7155      	strb	r5, [r2, #5]
    }
    else {
      if (x->destCh<NUM_CHNOUT-1) x->destCh++;
      else return false;
    }
    return true;
  401b82:	2001      	movs	r0, #1
  }

  memswap(x, y, sizeof(MixData));
  idx = tgt_idx;
  return true;
}
  401b84:	bcf0      	pop	{r4, r5, r6, r7}
  401b86:	4770      	bx	lr
}

bool swapMix(uint8_t &idx, uint8_t up)
{
  MixData *x = mixaddress(idx);
  int8_t tgt_idx = (up ? idx-1 : idx+1);
  401b88:	3301      	adds	r3, #1
  401b8a:	b2db      	uxtb	r3, r3

  if (tgt_idx < 0) {
  401b8c:	b25f      	sxtb	r7, r3
  401b8e:	2f00      	cmp	r7, #0
  401b90:	dae6      	bge.n	401b60 <_Z7swapMixRhh+0x1c>
    if (x->destCh == 0)
  401b92:	7950      	ldrb	r0, [r2, #5]
  401b94:	2800      	cmp	r0, #0
  401b96:	d0f5      	beq.n	401b84 <_Z7swapMixRhh+0x40>
      return false;
    x->destCh--;
  401b98:	3801      	subs	r0, #1
  401b9a:	7150      	strb	r0, [r2, #5]
    return true;
  401b9c:	2001      	movs	r0, #1
  401b9e:	e7f1      	b.n	401b84 <_Z7swapMixRhh+0x40>
  }

  if (tgt_idx == MAX_MIXERS) {
    if (x->destCh == NUM_CHNOUT-1)
  401ba0:	7953      	ldrb	r3, [r2, #5]
      return false;
  401ba2:	2000      	movs	r0, #0
    x->destCh--;
    return true;
  }

  if (tgt_idx == MAX_MIXERS) {
    if (x->destCh == NUM_CHNOUT-1)
  401ba4:	2b1f      	cmp	r3, #31
  401ba6:	d0ed      	beq.n	401b84 <_Z7swapMixRhh+0x40>
      return false;
    x->destCh++;
  401ba8:	3301      	adds	r3, #1
  401baa:	7153      	strb	r3, [r2, #5]
    return true;
  401bac:	2001      	movs	r0, #1
  401bae:	e7e9      	b.n	401b84 <_Z7swapMixRhh+0x40>
    if (up) {
      if (x->destCh>0) x->destCh--;
      else return false;
    }
    else {
      if (x->destCh<NUM_CHNOUT-1) x->destCh++;
  401bb0:	2d1e      	cmp	r5, #30
      else return false;
  401bb2:	bf88      	it	hi
  401bb4:	4608      	movhi	r0, r1
    if (up) {
      if (x->destCh>0) x->destCh--;
      else return false;
    }
    else {
      if (x->destCh<NUM_CHNOUT-1) x->destCh++;
  401bb6:	d8e5      	bhi.n	401b84 <_Z7swapMixRhh+0x40>
  401bb8:	3501      	adds	r5, #1
  401bba:	7155      	strb	r5, [r2, #5]
      else return false;
    }
    return true;
  401bbc:	2001      	movs	r0, #1
  401bbe:	e7e1      	b.n	401b84 <_Z7swapMixRhh+0x40>
    x->destCh++;
    return true;
  }

  MixData *y = mixaddress(tgt_idx);
  if(x->destCh != y->destCh) {
  401bc0:	4629      	mov	r1, r5
  401bc2:	2200      	movs	r2, #0
  401bc4:	e004      	b.n	401bd0 <_Z7swapMixRhh+0x8c>
  memswap(x, y, sizeof(ExpoData));
  idx = tgt_idx;
  return true;
}

bool swapMix(uint8_t &idx, uint8_t up)
  401bc6:	18b5      	adds	r5, r6, r2
  401bc8:	18a1      	adds	r1, r4, r2
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401bca:	786d      	ldrb	r5, [r5, #1]
  401bcc:	7849      	ldrb	r1, [r1, #1]
  401bce:	3201      	adds	r2, #1
  401bd0:	2a0e      	cmp	r2, #14
    temp = *x;
    *x++ = *y;
  401bd2:	54b1      	strb	r1, [r6, r2]
    *y++ = temp;
  401bd4:	54a5      	strb	r5, [r4, r2]
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
  401bd6:	d1f6      	bne.n	401bc6 <_Z7swapMixRhh+0x82>
    }
    return true;
  }

  memswap(x, y, sizeof(MixData));
  idx = tgt_idx;
  401bd8:	7003      	strb	r3, [r0, #0]
  return true;
  401bda:	2001      	movs	r0, #1
  401bdc:	e7d2      	b.n	401b84 <_Z7swapMixRhh+0x40>
  401bde:	bf00      	nop
  401be0:	20000244 	.word	0x20000244

00401be4 <_Z11swapExpoMixhRhh>:
}

bool swapExpoMix(uint8_t expo, uint8_t &idx, uint8_t up)
{
  401be4:	b508      	push	{r3, lr}
  401be6:	4603      	mov	r3, r0
  bool result = (expo ? swapExpo(idx, up) : swapMix(idx, up));
  401be8:	4608      	mov	r0, r1
  401bea:	4611      	mov	r1, r2
  401bec:	b173      	cbz	r3, 401c0c <_Z11swapExpoMixhRhh+0x28>
  401bee:	f7ff ff57 	bl	401aa0 <_Z8swapExpoRhh>
  if (result)
  401bf2:	b150      	cbz	r0, 401c0a <_Z11swapExpoMixhRhh+0x26>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401bf4:	4b07      	ldr	r3, [pc, #28]	; (401c14 <_Z11swapExpoMixhRhh+0x30>)
  401bf6:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401bfa:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401bfe:	f041 0102 	orr.w	r1, r1, #2
  401c02:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401c06:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
    STORE_MODELVARS;
  return result;
}
  401c0a:	bd08      	pop	{r3, pc}
  return true;
}

bool swapExpoMix(uint8_t expo, uint8_t &idx, uint8_t up)
{
  bool result = (expo ? swapExpo(idx, up) : swapMix(idx, up));
  401c0c:	f7ff ff9a 	bl	401b44 <_Z7swapMixRhh>
  401c10:	e7ef      	b.n	401bf2 <_Z11swapExpoMixhRhh+0xe>
  401c12:	bf00      	nop
  401c14:	20000108 	.word	0x20000108

00401c18 <_Z7eeDirtyh>:
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401c18:	f240 1308 	movw	r3, #264	; 0x108
  401c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401c20:	f893 29a8 	ldrb.w	r2, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401c24:	f8b3 19aa 	ldrh.w	r1, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  401c28:	4302      	orrs	r2, r0
  401c2a:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  401c2e:	f8a3 19ac 	strh.w	r1, [r3, #2476]	; 0x9ac
}
  401c32:	4770      	bx	lr

00401c34 <_Z14spi_PDC_actionPhS_S_mm>:
  Eeprom32_process_state = E32_BLANKCHECK ;
  eeWaitFinished();
}

uint32_t spi_PDC_action( register uint8_t *command, register uint8_t *tx, register uint8_t *rx, register uint32_t comlen, register uint32_t count )
{
  401c34:	b4f0      	push	{r4, r5, r6, r7}
  register uint32_t condition ;
  static uint8_t discard_rx_command[4] ;

//  PMC->PMC_PCER0 |= 0x00200000L ;             // Enable peripheral clock to SPI

  Spi_complete = 0 ;
  401c36:	4c25      	ldr	r4, [pc, #148]	; (401ccc <_Z14spi_PDC_actionPhS_S_mm+0x98>)
  401c38:	2500      	movs	r5, #0
  if ( comlen > 4 )
  401c3a:	2b04      	cmp	r3, #4
  register uint32_t condition ;
  static uint8_t discard_rx_command[4] ;

//  PMC->PMC_PCER0 |= 0x00200000L ;             // Enable peripheral clock to SPI

  Spi_complete = 0 ;
  401c3c:	67a5      	str	r5, [r4, #120]	; 0x78
  Eeprom32_process_state = E32_BLANKCHECK ;
  eeWaitFinished();
}

uint32_t spi_PDC_action( register uint8_t *command, register uint8_t *tx, register uint8_t *rx, register uint32_t comlen, register uint32_t count )
{
  401c3e:	9e04      	ldr	r6, [sp, #16]
  static uint8_t discard_rx_command[4] ;

//  PMC->PMC_PCER0 |= 0x00200000L ;             // Enable peripheral clock to SPI

  Spi_complete = 0 ;
  if ( comlen > 4 )
  401c40:	d907      	bls.n	401c52 <_Z14spi_PDC_actionPhS_S_mm+0x1e>
  {
    Spi_complete = 1 ;
    return 0x4FFFF ;
  401c42:	f64f 70ff 	movw	r0, #65535	; 0xffff
//  PMC->PMC_PCER0 |= 0x00200000L ;             // Enable peripheral clock to SPI

  Spi_complete = 0 ;
  if ( comlen > 4 )
  {
    Spi_complete = 1 ;
  401c46:	2301      	movs	r3, #1
  401c48:	67a3      	str	r3, [r4, #120]	; 0x78
    return 0x4FFFF ;
  401c4a:	f2c0 0004 	movt	r0, #4
  spiptr->SPI_IER = condition ;

#endif

  return 0 ;
}
  401c4e:	bcf0      	pop	{r4, r5, r6, r7}
  401c50:	4770      	bx	lr
    Spi_complete = 1 ;
    return 0x4FFFF ;
  }
  condition = SPI_SR_TXEMPTY ;
  spiptr = SPI ;
  spiptr->SPI_CR = 1 ;                    // Enable
  401c52:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  401c56:	f2c4 0500 	movt	r5, #16384	; 0x4000
  401c5a:	2701      	movs	r7, #1
  401c5c:	602f      	str	r7, [r5, #0]
  (void) spiptr->SPI_RDR ;                // Dump any rx data
  (void) spiptr->SPI_SR ;                 // Clear error flags
  spiptr->SPI_RPR = (uint32_t)discard_rx_command ;
  401c5e:	f504 6429 	add.w	r4, r4, #2704	; 0xa90
    return 0x4FFFF ;
  }
  condition = SPI_SR_TXEMPTY ;
  spiptr = SPI ;
  spiptr->SPI_CR = 1 ;                    // Enable
  (void) spiptr->SPI_RDR ;                // Dump any rx data
  401c62:	68af      	ldr	r7, [r5, #8]
  (void) spiptr->SPI_SR ;                 // Clear error flags
  401c64:	692f      	ldr	r7, [r5, #16]
  spiptr->SPI_RPR = (uint32_t)discard_rx_command ;
  401c66:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
  if ( comlen > 4 )
  {
    Spi_complete = 1 ;
    return 0x4FFFF ;
  }
  condition = SPI_SR_TXEMPTY ;
  401c6a:	f44f 7700 	mov.w	r7, #512	; 0x200
  spiptr = SPI ;
  spiptr->SPI_CR = 1 ;                    // Enable
  (void) spiptr->SPI_RDR ;                // Dump any rx data
  (void) spiptr->SPI_SR ;                 // Clear error flags
  spiptr->SPI_RPR = (uint32_t)discard_rx_command ;
  spiptr->SPI_RCR = comlen ;
  401c6e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
  if ( rx )
  401c72:	b122      	cbz	r2, 401c7e <_Z14spi_PDC_actionPhS_S_mm+0x4a>
  {
    spiptr->SPI_RNPR = (uint32_t)rx ;
  401c74:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
    spiptr->SPI_RNCR = count ;
    condition = SPI_SR_RXBUFF ;
  401c78:	2740      	movs	r7, #64	; 0x40
  spiptr->SPI_RPR = (uint32_t)discard_rx_command ;
  spiptr->SPI_RCR = comlen ;
  if ( rx )
  {
    spiptr->SPI_RNPR = (uint32_t)rx ;
    spiptr->SPI_RNCR = count ;
  401c7a:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
    condition = SPI_SR_RXBUFF ;
  }
  spiptr->SPI_TPR = (uint32_t)command ;
  401c7e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  401c82:	f2c4 0400 	movt	r4, #16384	; 0x4000
  401c86:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
  spiptr->SPI_TCR = comlen ;
  401c8a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  if ( tx )
  401c8e:	b1d1      	cbz	r1, 401cc6 <_Z14spi_PDC_actionPhS_S_mm+0x92>
  {
    spiptr->SPI_TNPR = (uint32_t)tx ;
  401c90:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
  }
  else
  {
    spiptr->SPI_TNPR = (uint32_t)rx ;
  }
  spiptr->SPI_TNCR = count ;
  401c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c98:	f2c4 0100 	movt	r1, #16384	; 0x4000

  spiptr->SPI_PTCR = SPI_PTCR_RXTEN | SPI_PTCR_TXTEN ;    // Start transfers
  401c9c:	f240 1201 	movw	r2, #257	; 0x101
  }
  else
  {
    spiptr->SPI_TNPR = (uint32_t)rx ;
  }
  spiptr->SPI_TNCR = count ;
  401ca0:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c

  spiptr->SPI_PTCR = SPI_PTCR_RXTEN | SPI_PTCR_TXTEN ;    // Start transfers
  401ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401ca8:	f8c1 2120 	str.w	r2, [r1, #288]	; 0x120
  401cac:	e001      	b.n	401cb2 <_Z14spi_PDC_actionPhS_S_mm+0x7e>

  // Wait for things to get started, avoids early interrupt
  for ( count = 0 ; count < 1000 ; count += 1 )
  401cae:	3b01      	subs	r3, #1
  401cb0:	d002      	beq.n	401cb8 <_Z14spi_PDC_actionPhS_S_mm+0x84>
  {
    if ( ( spiptr->SPI_SR & SPI_SR_TXEMPTY ) == 0 )
  401cb2:	690a      	ldr	r2, [r1, #16]
  401cb4:	0590      	lsls	r0, r2, #22
  401cb6:	d4fa      	bmi.n	401cae <_Z14spi_PDC_actionPhS_S_mm+0x7a>
    {
      break ;
    }
  }
  spiptr->SPI_IER = condition ;
  401cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401cbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
  401cc0:	615f      	str	r7, [r3, #20]
  401cc2:	2000      	movs	r0, #0
  401cc4:	e7c3      	b.n	401c4e <_Z14spi_PDC_actionPhS_S_mm+0x1a>
  {
    spiptr->SPI_TNPR = (uint32_t)tx ;
  }
  else
  {
    spiptr->SPI_TNPR = (uint32_t)rx ;
  401cc6:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
  401cca:	e7e3      	b.n	401c94 <_Z14spi_PDC_actionPhS_S_mm+0x60>
  401ccc:	20000108 	.word	0x20000108

00401cd0 <_Z16eeprom_write_onehh>:
#ifndef SIMU
  register Spi *spiptr;
  register uint32_t result;

  spiptr = SPI;
  spiptr->SPI_CR = 1; // Enable
  401cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401cd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  401cd8:	2201      	movs	r2, #1
  401cda:	601a      	str	r2, [r3, #0]
  (void) spiptr->SPI_RDR; // Dump any rx data
  401cdc:	689a      	ldr	r2, [r3, #8]

  spiptr->SPI_TDR = byte;
  401cde:	60d8      	str	r0, [r3, #12]

  result = 0;
  while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
  401ce0:	f242 7211 	movw	r2, #10001	; 0x2711
  401ce4:	e001      	b.n	401cea <_Z16eeprom_write_onehh+0x1a>
    // wait for received
    if (++result > 10000) {
  401ce6:	3a01      	subs	r2, #1
  401ce8:	d002      	beq.n	401cf0 <_Z16eeprom_write_onehh+0x20>
  (void) spiptr->SPI_RDR; // Dump any rx data

  spiptr->SPI_TDR = byte;

  result = 0;
  while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
  401cea:	6918      	ldr	r0, [r3, #16]
  401cec:	07c0      	lsls	r0, r0, #31
  401cee:	d5fa      	bpl.n	401ce6 <_Z16eeprom_write_onehh+0x16>
    // wait for received
    if (++result > 10000) {
      break;
    }
  }
  if (count == 0) {
  401cf0:	b1b1      	cbz	r1, 401d20 <_Z16eeprom_write_onehh+0x50>
    spiptr->SPI_CR = 2; // Disable
    return spiptr->SPI_RDR;
  }
  (void) spiptr->SPI_RDR; // Dump the rx data
  401cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401cf6:	f2c4 0100 	movt	r1, #16384	; 0x4000
  spiptr->SPI_TDR = 0;
  401cfa:	2200      	movs	r2, #0
  }
  if (count == 0) {
    spiptr->SPI_CR = 2; // Disable
    return spiptr->SPI_RDR;
  }
  (void) spiptr->SPI_RDR; // Dump the rx data
  401cfc:	688b      	ldr	r3, [r1, #8]
  spiptr->SPI_TDR = 0;
  401cfe:	f242 7311 	movw	r3, #10001	; 0x2711
  401d02:	60ca      	str	r2, [r1, #12]
  401d04:	e001      	b.n	401d0a <_Z16eeprom_write_onehh+0x3a>
  result = 0;
  while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
    // wait for received
    if (++result > 10000) {
  401d06:	3b01      	subs	r3, #1
  401d08:	d002      	beq.n	401d10 <_Z16eeprom_write_onehh+0x40>
    return spiptr->SPI_RDR;
  }
  (void) spiptr->SPI_RDR; // Dump the rx data
  spiptr->SPI_TDR = 0;
  result = 0;
  while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
  401d0a:	690a      	ldr	r2, [r1, #16]
  401d0c:	07d2      	lsls	r2, r2, #31
  401d0e:	d5fa      	bpl.n	401d06 <_Z16eeprom_write_onehh+0x36>
    // wait for received
    if (++result > 10000) {
      break;
    }
  }
  spiptr->SPI_CR = 2; // Disable
  401d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d14:	f2c4 0300 	movt	r3, #16384	; 0x4000
  401d18:	2202      	movs	r2, #2
  401d1a:	601a      	str	r2, [r3, #0]
  return spiptr->SPI_RDR ;
  401d1c:	6898      	ldr	r0, [r3, #8]
#else
  return !Spi_complete;
#endif
}
  401d1e:	4770      	bx	lr
    if (++result > 10000) {
      break;
    }
  }
  if (count == 0) {
    spiptr->SPI_CR = 2; // Disable
  401d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d24:	f2c4 0300 	movt	r3, #16384	; 0x4000
  401d28:	2202      	movs	r2, #2
  401d2a:	601a      	str	r2, [r3, #0]
    return spiptr->SPI_RDR;
  401d2c:	6898      	ldr	r0, [r3, #8]
  401d2e:	4770      	bx	lr

00401d30 <_Z19eeprom_write_enablev>:
#endif
}

void eeprom_write_enable()
{
  eeprom_write_one( 6, 0 ) ;
  401d30:	2006      	movs	r0, #6
  401d32:	2100      	movs	r1, #0
  401d34:	e7cc      	b.n	401cd0 <_Z16eeprom_write_onehh>
  401d36:	bf00      	nop

00401d38 <_Z18eeprom_read_statusv>:
}

uint32_t eeprom_read_status()
{
  return eeprom_write_one( 5, 1 ) ;
  401d38:	2005      	movs	r0, #5
  401d3a:	2101      	movs	r1, #1
  401d3c:	e7c8      	b.n	401cd0 <_Z16eeprom_write_onehh>
  401d3e:	bf00      	nop

00401d40 <_Z18read32_eeprom_datamPhmm>:
}

// Read eeprom data starting at random address
void read32_eeprom_data( uint32_t eeAddress, register uint8_t *buffer, uint32_t size, uint32_t immediate )
{
  401d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  eeprom_read_operation = true;
  Spi_complete = false;
  sem_post(&eeprom_write_sem);
#else
  register uint8_t *p = Spi_tx_buf ;
  *p = 3 ;                     // Read command
  401d42:	4c0f      	ldr	r4, [pc, #60]	; (401d80 <_Z18read32_eeprom_datamPhmm+0x40>)
  *(p+1) = eeAddress >> 16 ;
  401d44:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  *(p+2) = eeAddress >> 8 ;
  401d48:	0a07      	lsrs	r7, r0, #8
  return eeprom_write_one( 5, 1 ) ;
}

// Read eeprom data starting at random address
void read32_eeprom_data( uint32_t eeAddress, register uint8_t *buffer, uint32_t size, uint32_t immediate )
{
  401d4a:	461d      	mov	r5, r3
#else
  register uint8_t *p = Spi_tx_buf ;
  *p = 3 ;                     // Read command
  *(p+1) = eeAddress >> 16 ;
  *(p+2) = eeAddress >> 8 ;
  *(p+3) = eeAddress ;	       // 3 bytes address
  401d4c:	f884 0a97 	strb.w	r0, [r4, #2711]	; 0xa97
  eeprom_read_operation = true;
  Spi_complete = false;
  sem_post(&eeprom_write_sem);
#else
  register uint8_t *p = Spi_tx_buf ;
  *p = 3 ;                     // Read command
  401d50:	2303      	movs	r3, #3
  *(p+1) = eeAddress >> 16 ;
  *(p+2) = eeAddress >> 8 ;
  *(p+3) = eeAddress ;	       // 3 bytes address
  spi_PDC_action( p, 0, buffer, 4, size ) ;
  401d52:	f504 6028 	add.w	r0, r4, #2688	; 0xa80
  return eeprom_write_one( 5, 1 ) ;
}

// Read eeprom data starting at random address
void read32_eeprom_data( uint32_t eeAddress, register uint8_t *buffer, uint32_t size, uint32_t immediate )
{
  401d56:	4616      	mov	r6, r2
  401d58:	b083      	sub	sp, #12
  401d5a:	460a      	mov	r2, r1
  eeprom_read_operation = true;
  Spi_complete = false;
  sem_post(&eeprom_write_sem);
#else
  register uint8_t *p = Spi_tx_buf ;
  *p = 3 ;                     // Read command
  401d5c:	f884 3a94 	strb.w	r3, [r4, #2708]	; 0xa94
  *(p+1) = eeAddress >> 16 ;
  *(p+2) = eeAddress >> 8 ;
  *(p+3) = eeAddress ;	       // 3 bytes address
  spi_PDC_action( p, 0, buffer, 4, size ) ;
  401d60:	3014      	adds	r0, #20
  401d62:	2100      	movs	r1, #0
  401d64:	2304      	movs	r3, #4
  Spi_complete = false;
  sem_post(&eeprom_write_sem);
#else
  register uint8_t *p = Spi_tx_buf ;
  *p = 3 ;                     // Read command
  *(p+1) = eeAddress >> 16 ;
  401d66:	f884 ea95 	strb.w	lr, [r4, #2709]	; 0xa95
  *(p+2) = eeAddress >> 8 ;
  401d6a:	f884 7a96 	strb.w	r7, [r4, #2710]	; 0xa96
  *(p+3) = eeAddress ;	       // 3 bytes address
  spi_PDC_action( p, 0, buffer, 4, size ) ;
  401d6e:	9600      	str	r6, [sp, #0]
  401d70:	f7ff ff60 	bl	401c34 <_Z14spi_PDC_actionPhS_S_mm>
#endif

  if (immediate )
  401d74:	b915      	cbnz	r5, 401d7c <_Z18read32_eeprom_datamPhmm+0x3c>
    return ;

  while (!Spi_complete) {
  401d76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  401d78:	2b00      	cmp	r3, #0
  401d7a:	d0fc      	beq.n	401d76 <_Z18read32_eeprom_datamPhmm+0x36>
#ifdef SIMU
    sleep(5/*ms*/);
#endif
  }
}
  401d7c:	b003      	add	sp, #12
  401d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401d80:	20000108 	.word	0x20000108

00401d84 <_Z20write32_eeprom_blockmPhmm>:

void write32_eeprom_block( uint32_t eeAddress, register uint8_t *buffer, uint32_t size, uint32_t immediate )
{
  401d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sem_post(&eeprom_write_sem);
#else
  eeprom_write_enable();

  register uint8_t *p = Spi_tx_buf;
  *p = 2; // Write command
  401d88:	4c11      	ldr	r4, [pc, #68]	; (401dd0 <_Z20write32_eeprom_blockmPhmm+0x4c>)
#endif
  }
}

void write32_eeprom_block( uint32_t eeAddress, register uint8_t *buffer, uint32_t size, uint32_t immediate )
{
  401d8a:	4606      	mov	r6, r0
  401d8c:	b082      	sub	sp, #8
  401d8e:	4617      	mov	r7, r2
  401d90:	461d      	mov	r5, r3
  401d92:	4688      	mov	r8, r1
  eeprom_buffer_size = size+1;
  eeprom_read_operation = false;
  Spi_complete = false;
  sem_post(&eeprom_write_sem);
#else
  eeprom_write_enable();
  401d94:	f7ff ffcc 	bl	401d30 <_Z19eeprom_write_enablev>

  register uint8_t *p = Spi_tx_buf;
  *p = 2; // Write command
  *(p + 1) = eeAddress >> 16;
  401d98:	0c32      	lsrs	r2, r6, #16
  *(p + 2) = eeAddress >> 8;
  401d9a:	0a33      	lsrs	r3, r6, #8
  sem_post(&eeprom_write_sem);
#else
  eeprom_write_enable();

  register uint8_t *p = Spi_tx_buf;
  *p = 2; // Write command
  401d9c:	2102      	movs	r1, #2
  *(p + 1) = eeAddress >> 16;
  *(p + 2) = eeAddress >> 8;
  *(p + 3) = eeAddress; // 3 bytes address
  spi_PDC_action(p, buffer, 0, 4, size);
  401d9e:	f504 6028 	add.w	r0, r4, #2688	; 0xa80
  sem_post(&eeprom_write_sem);
#else
  eeprom_write_enable();

  register uint8_t *p = Spi_tx_buf;
  *p = 2; // Write command
  401da2:	f884 1a94 	strb.w	r1, [r4, #2708]	; 0xa94
  *(p + 1) = eeAddress >> 16;
  401da6:	f884 2a95 	strb.w	r2, [r4, #2709]	; 0xa95
  *(p + 2) = eeAddress >> 8;
  401daa:	f884 3a96 	strb.w	r3, [r4, #2710]	; 0xa96
  *(p + 3) = eeAddress; // 3 bytes address
  spi_PDC_action(p, buffer, 0, 4, size);
  401dae:	3014      	adds	r0, #20
  401db0:	4641      	mov	r1, r8
  401db2:	2200      	movs	r2, #0
  401db4:	2304      	movs	r3, #4

  register uint8_t *p = Spi_tx_buf;
  *p = 2; // Write command
  *(p + 1) = eeAddress >> 16;
  *(p + 2) = eeAddress >> 8;
  *(p + 3) = eeAddress; // 3 bytes address
  401db6:	f884 6a97 	strb.w	r6, [r4, #2711]	; 0xa97
  spi_PDC_action(p, buffer, 0, 4, size);
  401dba:	9700      	str	r7, [sp, #0]
  401dbc:	f7ff ff3a 	bl	401c34 <_Z14spi_PDC_actionPhS_S_mm>
#endif

  if (immediate)
  401dc0:	b915      	cbnz	r5, 401dc8 <_Z20write32_eeprom_blockmPhmm+0x44>
    return;

  while (!Spi_complete) {
  401dc2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  401dc4:	2b00      	cmp	r3, #0
  401dc6:	d0fc      	beq.n	401dc2 <_Z20write32_eeprom_blockmPhmm+0x3e>
#ifdef SIMU
    sleep(5/*ms*/);
#endif
  }
}
  401dc8:	b002      	add	sp, #8
  401dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401dce:	bf00      	nop
  401dd0:	20000108 	.word	0x20000108

00401dd4 <_Z13byte_checksumPhm>:
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401dd4:	b139      	cbz	r1, 401de6 <_Z13byte_checksumPhm+0x12>
  401dd6:	2300      	movs	r3, #0
	{
		csum += *p++ ;
  401dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401ddc:	3901      	subs	r1, #1
	{
		csum += *p++ ;
  401dde:	4413      	add	r3, r2
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401de0:	d1fa      	bne.n	401dd8 <_Z13byte_checksumPhm+0x4>
  401de2:	b2d8      	uxtb	r0, r3
  401de4:	4770      	bx	lr
  401de6:	4608      	mov	r0, r1
	{
		csum += *p++ ;
		size -= 1 ;
	}
	return csum ;
}
  401de8:	4770      	bx	lr
  401dea:	bf00      	nop

00401dec <_Z17ee32_check_headerP15t_eeprom_header>:

uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
  401dec:	2300      	movs	r3, #0

uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
  401dee:	461a      	mov	r2, r3
	while( size )
	{
		csum += *p++ ;
  401df0:	5cc1      	ldrb	r1, [r0, r3]
  401df2:	3301      	adds	r3, #1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401df4:	2b07      	cmp	r3, #7
	{
		csum += *p++ ;
  401df6:	440a      	add	r2, r1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401df8:	d1fa      	bne.n	401df0 <_Z17ee32_check_headerP15t_eeprom_header+0x4>
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
	{
		return 1 ;
  401dfa:	79c0      	ldrb	r0, [r0, #7]
  401dfc:	b2d2      	uxtb	r2, r2
  401dfe:	ebc2 0c00 	rsb	ip, r2, r0
  401e02:	f1dc 0000 	rsbs	r0, ip, #0
  401e06:	eb40 000c 	adc.w	r0, r0, ip
	}
	return 0 ;
}
  401e0a:	4770      	bx	lr

00401e0c <_Z24get_current_block_numbermPtPm>:
// Pass in an even block number, this and the next block will be checked
// to see which is the most recent, the block_no of the most recent
// is returned, with the corresponding data size if required
// and the sequence number if required
uint32_t get_current_block_number( uint32_t block_no, uint16_t *p_size, uint32_t *p_seq )
{
  401e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401e10:	4605      	mov	r5, r0
  401e12:	b085      	sub	sp, #20
  struct t_eeprom_header b0 ;
  struct t_eeprom_header b1 ;
  uint32_t sequence_no ;
  uint16_t size ;
  read32_eeprom_data( block_no << 12, ( uint8_t *)&b0, sizeof(b0), EE_WAIT ) ;		// Sequence # 0
  401e14:	0300      	lsls	r0, r0, #12
  401e16:	2300      	movs	r3, #0
// Pass in an even block number, this and the next block will be checked
// to see which is the most recent, the block_no of the most recent
// is returned, with the corresponding data size if required
// and the sequence number if required
uint32_t get_current_block_number( uint32_t block_no, uint16_t *p_size, uint32_t *p_seq )
{
  401e18:	460f      	mov	r7, r1
  401e1a:	4616      	mov	r6, r2
  struct t_eeprom_header b0 ;
  struct t_eeprom_header b1 ;
  uint32_t sequence_no ;
  uint16_t size ;
  read32_eeprom_data( block_no << 12, ( uint8_t *)&b0, sizeof(b0), EE_WAIT ) ;		// Sequence # 0
  401e1c:	4669      	mov	r1, sp
  401e1e:	2208      	movs	r2, #8
  read32_eeprom_data( (block_no+1) << 12, ( uint8_t *)&b1, sizeof(b1), EE_WAIT ) ;	// Sequence # 1
  401e20:	f105 0801 	add.w	r8, r5, #1
  401e24:	ac02      	add	r4, sp, #8
{
  struct t_eeprom_header b0 ;
  struct t_eeprom_header b1 ;
  uint32_t sequence_no ;
  uint16_t size ;
  read32_eeprom_data( block_no << 12, ( uint8_t *)&b0, sizeof(b0), EE_WAIT ) ;		// Sequence # 0
  401e26:	f7ff ff8b 	bl	401d40 <_Z18read32_eeprom_datamPhmm>
  read32_eeprom_data( (block_no+1) << 12, ( uint8_t *)&b1, sizeof(b1), EE_WAIT ) ;	// Sequence # 1
  401e2a:	2208      	movs	r2, #8
  401e2c:	2300      	movs	r3, #0
  401e2e:	ea4f 3008 	mov.w	r0, r8, lsl #12
  401e32:	4621      	mov	r1, r4
  401e34:	f7ff ff84 	bl	401d40 <_Z18read32_eeprom_datamPhmm>
  401e38:	2300      	movs	r3, #0

uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
  401e3a:	461a      	mov	r2, r3
	while( size )
	{
		csum += *p++ ;
  401e3c:	f81d 1003 	ldrb.w	r1, [sp, r3]
  401e40:	3301      	adds	r3, #1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401e42:	2b07      	cmp	r3, #7
	{
		csum += *p++ ;
  401e44:	440a      	add	r2, r1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401e46:	d1f9      	bne.n	401e3c <_Z24get_current_block_numbermPtPm+0x30>
uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
  401e48:	f89d 9007 	ldrb.w	r9, [sp, #7]
  401e4c:	b2d2      	uxtb	r2, r2
  401e4e:	454a      	cmp	r2, r9
  401e50:	d03f      	beq.n	401ed2 <_Z24get_current_block_numbermPtPm+0xc6>
  read32_eeprom_data( block_no << 12, ( uint8_t *)&b0, sizeof(b0), EE_WAIT ) ;		// Sequence # 0
  read32_eeprom_data( (block_no+1) << 12, ( uint8_t *)&b1, sizeof(b1), EE_WAIT ) ;	// Sequence # 1

  if ( ee32_check_header( &b0 ) == 0 )
  {
    b0.sequence_no = 0 ;
  401e52:	2300      	movs	r3, #0
    b0.data_size = 0 ;
    b0.flags = 0 ;
  401e54:	4618      	mov	r0, r3
  read32_eeprom_data( block_no << 12, ( uint8_t *)&b0, sizeof(b0), EE_WAIT ) ;		// Sequence # 0
  read32_eeprom_data( (block_no+1) << 12, ( uint8_t *)&b1, sizeof(b1), EE_WAIT ) ;	// Sequence # 1

  if ( ee32_check_header( &b0 ) == 0 )
  {
    b0.sequence_no = 0 ;
  401e56:	9300      	str	r3, [sp, #0]
    b0.data_size = 0 ;
  401e58:	f8ad 3004 	strh.w	r3, [sp, #4]
    b0.flags = 0 ;
  401e5c:	f88d 3006 	strb.w	r3, [sp, #6]
  401e60:	469c      	mov	ip, r3
  401e62:	2300      	movs	r3, #0

uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
  401e64:	461a      	mov	r2, r3
	while( size )
	{
		csum += *p++ ;
  401e66:	f81d 1003 	ldrb.w	r1, [sp, r3]
  401e6a:	3301      	adds	r3, #1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401e6c:	2b07      	cmp	r3, #7
	{
		csum += *p++ ;
  401e6e:	440a      	add	r2, r1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401e70:	d1f9      	bne.n	401e66 <_Z24get_current_block_numbermPtPm+0x5a>
uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
  401e72:	b2d2      	uxtb	r2, r2
  401e74:	2300      	movs	r3, #0
  401e76:	4591      	cmp	r9, r2
  401e78:	461a      	mov	r2, r3
  401e7a:	d019      	beq.n	401eb0 <_Z24get_current_block_numbermPtPm+0xa4>
	uint32_t csum ;

	csum = 0 ;
	while( size )
	{
		csum += *p++ ;
  401e7c:	5ce1      	ldrb	r1, [r4, r3]
  401e7e:	3301      	adds	r3, #1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401e80:	2b07      	cmp	r3, #7
	{
		csum += *p++ ;
  401e82:	440a      	add	r2, r1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401e84:	d1fa      	bne.n	401e7c <_Z24get_current_block_numbermPtPm+0x70>
uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
  401e86:	f89d 300f 	ldrb.w	r3, [sp, #15]
  401e8a:	b2d2      	uxtb	r2, r2
      block_no += 1 ;
    }
    else
    {
      size = 0 ;
      sequence_no = 1 ;
  401e8c:	2001      	movs	r0, #1
uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
  401e8e:	4293      	cmp	r3, r2
      sequence_no = b1.sequence_no ;
      block_no += 1 ;
    }
    else
    {
      size = 0 ;
  401e90:	f04f 0c00 	mov.w	ip, #0
uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
  401e94:	d021      	beq.n	401eda <_Z24get_current_block_numbermPtPm+0xce>
  
  if ( size == 0xFFFF )
  {
    size = 0 ;
  }
  if ( p_size )
  401e96:	b10f      	cbz	r7, 401e9c <_Z24get_current_block_numbermPtPm+0x90>
  {
    *p_size = size ;
  401e98:	f8a7 c000 	strh.w	ip, [r7]
  }
  if ( sequence_no == 0xFFFFFFFF )
  {
    sequence_no = 0 ;
  401e9c:	f1b0 3fff 	cmp.w	r0, #4294967295
  401ea0:	bf08      	it	eq
  401ea2:	2000      	moveq	r0, #0
  }
  if ( p_seq )
  401ea4:	b106      	cbz	r6, 401ea8 <_Z24get_current_block_numbermPtPm+0x9c>
  {
    *p_seq = sequence_no ;
  401ea6:	6030      	str	r0, [r6, #0]
  }
//	Block_needs_erasing = erase ;		
  
  return block_no ;
}
  401ea8:	4628      	mov	r0, r5
  401eaa:	b005      	add	sp, #20
  401eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t csum ;

	csum = 0 ;
	while( size )
	{
		csum += *p++ ;
  401eb0:	5ce1      	ldrb	r1, [r4, r3]
  401eb2:	3301      	adds	r3, #1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401eb4:	2b07      	cmp	r3, #7
	{
		csum += *p++ ;
  401eb6:	440a      	add	r2, r1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  401eb8:	d1fa      	bne.n	401eb0 <_Z24get_current_block_numbermPtPm+0xa4>
uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
  401eba:	f89d 300f 	ldrb.w	r3, [sp, #15]
  401ebe:	b2d2      	uxtb	r2, r2
  401ec0:	4293      	cmp	r3, r2
  401ec2:	d015      	beq.n	401ef0 <_Z24get_current_block_numbermPtPm+0xe4>
        block_no += 1 ;
      }
    }
  }
  
  if ( size == 0xFFFF )
  401ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    size = 0 ;
  401ec8:	459c      	cmp	ip, r3
  401eca:	bf08      	it	eq
  401ecc:	f04f 0c00 	moveq.w	ip, #0
  401ed0:	e7e1      	b.n	401e96 <_Z24get_current_block_numbermPtPm+0x8a>
uint32_t ee32_check_header( struct t_eeprom_header *hptr )
{
	uint8_t csum ;

	csum = byte_checksum( ( uint8_t *) hptr, 7 ) ;
	if ( csum == hptr->hcsum )
  401ed2:	f8bd c004 	ldrh.w	ip, [sp, #4]
  401ed6:	9800      	ldr	r0, [sp, #0]
  401ed8:	e7c3      	b.n	401e62 <_Z24get_current_block_numbermPtPm+0x56>
  sequence_no = b0.sequence_no ;
  if ( ee32_check_header( &b0 ) == 0 )
  {
    if ( ee32_check_header( &b1 ) != 0 )
    {
      size = b1.data_size ;
  401eda:	f8bd c00c 	ldrh.w	ip, [sp, #12]
        block_no += 1 ;
      }
    }
  }
  
  if ( size == 0xFFFF )
  401ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if ( ee32_check_header( &b0 ) == 0 )
  {
    if ( ee32_check_header( &b1 ) != 0 )
    {
      size = b1.data_size ;
      sequence_no = b1.sequence_no ;
  401ee2:	9802      	ldr	r0, [sp, #8]
      block_no += 1 ;
  401ee4:	4645      	mov	r5, r8
    }
  }
  
  if ( size == 0xFFFF )
  {
    size = 0 ;
  401ee6:	459c      	cmp	ip, r3
  401ee8:	bf08      	it	eq
  401eea:	f04f 0c00 	moveq.w	ip, #0
  401eee:	e7d2      	b.n	401e96 <_Z24get_current_block_numbermPtPm+0x8a>
  }
  else
  {
    if ( ee32_check_header( &b1 ) != 0 )
    {
      if ( b1.sequence_no > b0.sequence_no )
  401ef0:	9b02      	ldr	r3, [sp, #8]
  401ef2:	4283      	cmp	r3, r0
      {
        size = b1.data_size ;
  401ef4:	bf84      	itt	hi
  401ef6:	f8bd c00c 	ldrhhi.w	ip, [sp, #12]
  401efa:	4618      	movhi	r0, r3
        block_no += 1 ;
      }
    }
  }
  
  if ( size == 0xFFFF )
  401efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    {
      if ( b1.sequence_no > b0.sequence_no )
      {
        size = b1.data_size ;
        sequence_no = b1.sequence_no ;
        block_no += 1 ;
  401f00:	bf88      	it	hi
  401f02:	4645      	movhi	r5, r8
    }
  }
  
  if ( size == 0xFFFF )
  {
    size = 0 ;
  401f04:	459c      	cmp	ip, r3
  401f06:	bf08      	it	eq
  401f08:	f04f 0c00 	moveq.w	ip, #0
  401f0c:	e7c3      	b.n	401e96 <_Z24get_current_block_numbermPtPm+0x8a>
  401f0e:	bf00      	nop

00401f10 <_Z15ee32LoadGeneralv>:
  
  return block_no ;
}

bool ee32LoadGeneral()
{
  401f10:	b538      	push	{r3, r4, r5, lr}
  uint16_t size ;
	
  size = File_system[0].size ;
  401f12:	4c1d      	ldr	r4, [pc, #116]	; (401f88 <_Z15ee32LoadGeneralv+0x78>)

  memset(&g_eeGeneral, 0, sizeof(EEGeneral));
  401f14:	2252      	movs	r2, #82	; 0x52

bool ee32LoadGeneral()
{
  uint16_t size ;
	
  size = File_system[0].size ;
  401f16:	f8b4 5ab4 	ldrh.w	r5, [r4, #2740]	; 0xab4

  memset(&g_eeGeneral, 0, sizeof(EEGeneral));
  401f1a:	2100      	movs	r1, #0
  401f1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f20:	f00d fa98 	bl	40f454 <memset>

  if (size > sizeof(EEGeneral)) {
  401f24:	2252      	movs	r2, #82	; 0x52
  401f26:	2d52      	cmp	r5, #82	; 0x52
  401f28:	d926      	bls.n	401f78 <_Z15ee32LoadGeneralv+0x68>
    size = sizeof(EEGeneral) ;
  }

  if (size) {
    read32_eeprom_data( ( File_system[0].block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&g_eeGeneral, size, 0 ) ;
  401f2a:	f8d4 0aac 	ldr.w	r0, [r4, #2732]	; 0xaac
  401f2e:	2300      	movs	r3, #0
  401f30:	0300      	lsls	r0, r0, #12
  401f32:	3008      	adds	r0, #8
  401f34:	4915      	ldr	r1, [pc, #84]	; (401f8c <_Z15ee32LoadGeneralv+0x7c>)
  401f36:	f7ff ff03 	bl	401d40 <_Z18read32_eeprom_datamPhmm>
  }

  if (g_eeGeneral.myVers == EEPROM_VER) {
  401f3a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401f3e:	2bd0      	cmp	r3, #208	; 0xd0
  401f40:	d11f      	bne.n	401f82 <_Z15ee32LoadGeneralv+0x72>
  401f42:	2500      	movs	r5, #0
  401f44:	462b      	mov	r3, r5

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
    sum += g_eeGeneral.calibMid[i];
  401f46:	eb04 0243 	add.w	r2, r4, r3, lsl #1
  401f4a:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
  401f4e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  401f52:	3301      	adds	r3, #1
    sum += g_eeGeneral.calibMid[i];
  401f54:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401f58:	1955      	adds	r5, r2, r5
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  401f5a:	2b0c      	cmp	r3, #12
    sum += g_eeGeneral.calibMid[i];
  401f5c:	4a0a      	ldr	r2, [pc, #40]	; (401f88 <_Z15ee32LoadGeneralv+0x78>)
  401f5e:	b2ad      	uxth	r5, r5
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  401f60:	d1f1      	bne.n	401f46 <_Z15ee32LoadGeneralv+0x36>
    uint16_t sum = evalChkSum();
    if (g_eeGeneral.chkSum == sum) {
  401f62:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
  401f66:	f892 0050 	ldrb.w	r0, [r2, #80]	; 0x50
//	Block_needs_erasing = erase ;		
  
  return block_no ;
}

bool ee32LoadGeneral()
  401f6a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401f6e:	1b43      	subs	r3, r0, r5
  401f70:	4258      	negs	r0, r3
  401f72:	eb40 0003 	adc.w	r0, r0, r3
  401f76:	bd38      	pop	{r3, r4, r5, pc}

  if (size > sizeof(EEGeneral)) {
    size = sizeof(EEGeneral) ;
  }

  if (size) {
  401f78:	462a      	mov	r2, r5
  401f7a:	2d00      	cmp	r5, #0
  401f7c:	d1d5      	bne.n	401f2a <_Z15ee32LoadGeneralv+0x1a>
    printf("EEPROM version %d instead of %d\n", g_eeGeneral.myVers, EEPROM_VER);
    fflush(stdout);
  }
#endif

  return false;
  401f7e:	4628      	mov	r0, r5
  401f80:	bd38      	pop	{r3, r4, r5, pc}
  401f82:	2000      	movs	r0, #0
}
  401f84:	bd38      	pop	{r3, r4, r5, pc}
  401f86:	bf00      	nop
  401f88:	20000108 	.word	0x20000108
  401f8c:	2000012c 	.word	0x2000012c

00401f90 <_Z13eeModelExistsh>:
  }
}

bool eeModelExists(uint8_t id)
{
  return ( File_system[id+1].size > 0 ) ;
  401f90:	3001      	adds	r0, #1
  401f92:	f240 1308 	movw	r3, #264	; 0x108
  401f96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401f9e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401fa2:	f8b3 0ab4 	ldrh.w	r0, [r3, #2740]	; 0xab4
  401fa6:	3000      	adds	r0, #0
  401fa8:	bf18      	it	ne
  401faa:	2001      	movne	r0, #1
}
  401fac:	4770      	bx	lr
  401fae:	bf00      	nop

00401fb0 <_Z17ee32LoadModelNamehPch>:

void ee32LoadModelName(uint8_t id, char *buf, uint8_t len)
{
  if (id < MAX_MODELS) {
  401fb0:	283b      	cmp	r0, #59	; 0x3b
{
  return ( File_system[id+1].size > 0 ) ;
}

void ee32LoadModelName(uint8_t id, char *buf, uint8_t len)
{
  401fb2:	b570      	push	{r4, r5, r6, lr}
  401fb4:	4604      	mov	r4, r0
  401fb6:	460d      	mov	r5, r1
  if (id < MAX_MODELS) {
  401fb8:	d900      	bls.n	401fbc <_Z17ee32LoadModelNamehPch+0xc>
  401fba:	bd70      	pop	{r4, r5, r6, pc}
    id += 1;
    memset(buf, 0, len);
  401fbc:	4608      	mov	r0, r1
}

void ee32LoadModelName(uint8_t id, char *buf, uint8_t len)
{
  if (id < MAX_MODELS) {
    id += 1;
  401fbe:	3401      	adds	r4, #1
    memset(buf, 0, len);
  401fc0:	2100      	movs	r1, #0
  401fc2:	f00d fa47 	bl	40f454 <memset>
    if (File_system[id].size > sizeof(g_model.name) ) {
  401fc6:	b2e4      	uxtb	r4, r4
  401fc8:	4b09      	ldr	r3, [pc, #36]	; (401ff0 <_Z17ee32LoadModelNamehPch+0x40>)
  401fca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  401fce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401fd2:	f8b4 3ab4 	ldrh.w	r3, [r4, #2740]	; 0xab4
  401fd6:	2b0a      	cmp	r3, #10
  401fd8:	d9ef      	bls.n	401fba <_Z17ee32LoadModelNamehPch+0xa>
      read32_eeprom_data( ( File_system[id].block_no << 12) + 8, ( uint8_t *)buf, sizeof(g_model.name), 0 ) ;
  401fda:	f8d4 0aac 	ldr.w	r0, [r4, #2732]	; 0xaac
  401fde:	4629      	mov	r1, r5
  401fe0:	0300      	lsls	r0, r0, #12
  401fe2:	3008      	adds	r0, #8
  401fe4:	220a      	movs	r2, #10
  401fe6:	2300      	movs	r3, #0
    }
  }
}
  401fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  if (id < MAX_MODELS) {
    id += 1;
    memset(buf, 0, len);
    if (File_system[id].size > sizeof(g_model.name) ) {
      read32_eeprom_data( ( File_system[id].block_no << 12) + 8, ( uint8_t *)buf, sizeof(g_model.name), 0 ) ;
  401fec:	e6a8      	b.n	401d40 <_Z18read32_eeprom_datamPhmm>
  401fee:	bf00      	nop
  401ff0:	20000108 	.word	0x20000108

00401ff4 <_Z13spi_operationPhS_m>:

  stickMode = g_eeGeneral.stickMode; // TODO common!
}

uint32_t spi_operation( register uint8_t *tx, register uint8_t *rx, register uint32_t count )
{
  401ff4:	b4f0      	push	{r4, r5, r6, r7}

//  PMC->PMC_PCER0 |= 0x00200000L ;             // Enable peripheral clock to SPI

  result = 0;
  spiptr = SPI;
  spiptr->SPI_CR = 1; // Enable
  401ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ffa:	f2c4 0300 	movt	r3, #16384	; 0x4000
  401ffe:	2401      	movs	r4, #1
  402000:	601c      	str	r4, [r3, #0]
  (void) spiptr->SPI_RDR; // Dump any rx data
  402002:	689c      	ldr	r4, [r3, #8]
  while (count) {
  402004:	b1e2      	cbz	r2, 402040 <_Z13spi_operationPhS_m+0x4c>

  stickMode = g_eeGeneral.stickMode; // TODO common!
}

uint32_t spi_operation( register uint8_t *tx, register uint8_t *rx, register uint32_t count )
{
  402006:	f242 7611 	movw	r6, #10001	; 0x2711
  spiptr = SPI;
  spiptr->SPI_CR = 1; // Enable
  (void) spiptr->SPI_RDR; // Dump any rx data
  while (count) {
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_TXEMPTY) == 0) {
  40200a:	461f      	mov	r7, r3

  stickMode = g_eeGeneral.stickMode; // TODO common!
}

uint32_t spi_operation( register uint8_t *tx, register uint8_t *rx, register uint32_t count )
{
  40200c:	f242 7411 	movw	r4, #10001	; 0x2711
  402010:	e001      	b.n	402016 <_Z13spi_operationPhS_m+0x22>
  (void) spiptr->SPI_RDR; // Dump any rx data
  while (count) {
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_TXEMPTY) == 0) {
      // wait
      if (++result > 10000) {
  402012:	3c01      	subs	r4, #1
  402014:	d016      	beq.n	402044 <_Z13spi_operationPhS_m+0x50>
  spiptr = SPI;
  spiptr->SPI_CR = 1; // Enable
  (void) spiptr->SPI_RDR; // Dump any rx data
  while (count) {
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_TXEMPTY) == 0) {
  402016:	691d      	ldr	r5, [r3, #16]
  402018:	f415 7f00 	tst.w	r5, #512	; 0x200
  40201c:	d0f9      	beq.n	402012 <_Z13spi_operationPhS_m+0x1e>
    }
//              if ( count == 1 )
//              {
//                      spiptr->SPI_CR = SPI_CR_LASTXFER ;              // LastXfer bit
//              }
    spiptr->SPI_TDR = *tx++;
  40201e:	f810 5b01 	ldrb.w	r5, [r0], #1
    result = 0;
  402022:	2400      	movs	r4, #0
    }
//              if ( count == 1 )
//              {
//                      spiptr->SPI_CR = SPI_CR_LASTXFER ;              // LastXfer bit
//              }
    spiptr->SPI_TDR = *tx++;
  402024:	60fd      	str	r5, [r7, #12]
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
  402026:	e001      	b.n	40202c <_Z13spi_operationPhS_m+0x38>
      // wait for received
      if (++result > 10000) {
  402028:	42b4      	cmp	r4, r6
  40202a:	d015      	beq.n	402058 <_Z13spi_operationPhS_m+0x64>
//              {
//                      spiptr->SPI_CR = SPI_CR_LASTXFER ;              // LastXfer bit
//              }
    spiptr->SPI_TDR = *tx++;
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
  40202c:	691d      	ldr	r5, [r3, #16]
      // wait for received
      if (++result > 10000) {
  40202e:	3401      	adds	r4, #1
//              {
//                      spiptr->SPI_CR = SPI_CR_LASTXFER ;              // LastXfer bit
//              }
    spiptr->SPI_TDR = *tx++;
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
  402030:	f015 0f01 	tst.w	r5, #1
  402034:	d0f8      	beq.n	402028 <_Z13spi_operationPhS_m+0x34>
      }
    }
    if (result > 10000) {
      break;
    }
    *rx++ = spiptr->SPI_RDR;
  402036:	68bc      	ldr	r4, [r7, #8]

  result = 0;
  spiptr = SPI;
  spiptr->SPI_CR = 1; // Enable
  (void) spiptr->SPI_RDR; // Dump any rx data
  while (count) {
  402038:	3a01      	subs	r2, #1
      }
    }
    if (result > 10000) {
      break;
    }
    *rx++ = spiptr->SPI_RDR;
  40203a:	f801 4b01 	strb.w	r4, [r1], #1

  result = 0;
  spiptr = SPI;
  spiptr->SPI_CR = 1; // Enable
  (void) spiptr->SPI_RDR; // Dump any rx data
  while (count) {
  40203e:	d1e5      	bne.n	40200c <_Z13spi_operationPhS_m+0x18>
    }
    *rx++ = spiptr->SPI_RDR;
    count -= 1;
  }
  if (result <= 10000) {
    result = 0;
  402040:	4610      	mov	r0, r2
  402042:	e001      	b.n	402048 <_Z13spi_operationPhS_m+0x54>
  while (count) {
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_TXEMPTY) == 0) {
      // wait
      if (++result > 10000) {
        result = 0xFFFF;
  402044:	f64f 70ff 	movw	r0, #65535	; 0xffff
    count -= 1;
  }
  if (result <= 10000) {
    result = 0;
  }
  spiptr->SPI_CR = 2; // Disable
  402048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40204c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  402050:	2202      	movs	r2, #2
  402052:	601a      	str	r2, [r3, #0]

// Power save
//  PMC->PMC_PCER0 &= ~0x00200000L ;            // Disable peripheral clock to SPI

  return result ;
}
  402054:	bcf0      	pop	{r4, r5, r6, r7}
  402056:	4770      	bx	lr
    spiptr->SPI_TDR = *tx++;
    result = 0;
    while ((spiptr->SPI_SR & SPI_SR_RDRF) == 0) {
      // wait for received
      if (++result > 10000) {
        result = 0x2FFFF;
  402058:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40205c:	f2c0 0002 	movt	r0, #2
  402060:	e7f2      	b.n	402048 <_Z13spi_operationPhS_m+0x54>
  402062:	bf00      	nop

00402064 <_Z8init_spiv>:
// MISO PA12 (peripheral A)
// MOSI PA13 (peripheral A)
// SCK  PA14 (peripheral A)
// Set clock to 3 MHz, AT25 device is rated to 70MHz, 18MHz would be better
void init_spi()
{
  402064:	b500      	push	{lr}
  register Spi *spiptr ;
  register uint32_t timer ;
  register uint8_t *p ;
  uint8_t spi_buf[4] ;

  PMC->PMC_PCER0 |= 0x00200000L ;               // Enable peripheral clock to SPI
  402066:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40206a:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40206e:	691a      	ldr	r2, [r3, #16]
// MISO PA12 (peripheral A)
// MOSI PA13 (peripheral A)
// SCK  PA14 (peripheral A)
// Set clock to 3 MHz, AT25 device is rated to 70MHz, 18MHz would be better
void init_spi()
{
  402070:	b083      	sub	sp, #12
  register Spi *spiptr ;
  register uint32_t timer ;
  register uint8_t *p ;
  uint8_t spi_buf[4] ;

  PMC->PMC_PCER0 |= 0x00200000L ;               // Enable peripheral clock to SPI
  402072:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  402076:	611a      	str	r2, [r3, #16]
  /* Configure PIO */
  configure_pins( 0x00007800, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;
  402078:	2102      	movs	r1, #2
  40207a:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
  40207e:	f7fe f955 	bl	40032c <_Z14configure_pinsmt>

  spiptr = SPI ;
  timer = ( Master_frequency / 3000000 ) << 8 ;           // Baud rate 3Mb/s
  402082:	f240 1308 	movw	r3, #264	; 0x108
  402086:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40208a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
  40208e:	f649 7381 	movw	r3, #40833	; 0x9f81
  402092:	f2c1 635e 	movt	r3, #5726	; 0x165e
  402096:	fba3 2000 	umull	r2, r0, r3, r0
  40209a:	0c80      	lsrs	r0, r0, #18
  40209c:	0200      	lsls	r0, r0, #8
  spiptr->SPI_MR = 0x14000011 ;                           // 0001 0100 0000 0000 0000 0000 0001 0001 Master
  40209e:	2111      	movs	r1, #17
  spiptr->SPI_CSR[0] = 0x01180009 | timer ;               // 0000 0001 0001 1000 xxxx xxxx 0000 1001
  4020a0:	f040 708c 	orr.w	r0, r0, #18350080	; 0x1180000
  /* Configure PIO */
  configure_pins( 0x00007800, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;

  spiptr = SPI ;
  timer = ( Master_frequency / 3000000 ) << 8 ;           // Baud rate 3Mb/s
  spiptr->SPI_MR = 0x14000011 ;                           // 0001 0100 0000 0000 0000 0000 0001 0001 Master
  4020a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
  4020ac:	f2c1 4100 	movt	r1, #5120	; 0x1400
  spiptr->SPI_CSR[0] = 0x01180009 | timer ;               // 0000 0001 0001 1000 xxxx xxxx 0000 1001
  4020b0:	f040 0009 	orr.w	r0, r0, #9
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  4020b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
  /* Configure PIO */
  configure_pins( 0x00007800, PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;

  spiptr = SPI ;
  timer = ( Master_frequency / 3000000 ) << 8 ;           // Baud rate 3Mb/s
  spiptr->SPI_MR = 0x14000011 ;                           // 0001 0100 0000 0000 0000 0000 0001 0001 Master
  4020b8:	6059      	str	r1, [r3, #4]
  4020ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
  spiptr->SPI_CSR[0] = 0x01180009 | timer ;               // 0000 0001 0001 1000 xxxx xxxx 0000 1001
  4020be:	6318      	str	r0, [r3, #48]	; 0x30
  4020c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4020c4:	6013      	str	r3, [r2, #0]
//      *(p+2) = 0 ;
//      *(p+3) = 0 ;            // 3 bytes address

//      spi_operation( p, spi_buf, 4 ) ;

  eeprom_write_enable() ;
  4020c6:	f7ff fe33 	bl	401d30 <_Z19eeprom_write_enablev>

  *p = 1 ;                // Write status register command
  4020ca:	2301      	movs	r3, #1
  *(p+1) = 0 ;
  spi_operation( p, spi_buf, 2 ) ;
  4020cc:	a801      	add	r0, sp, #4

//      spi_operation( p, spi_buf, 4 ) ;

  eeprom_write_enable() ;

  *p = 1 ;                // Write status register command
  4020ce:	f88d 3004 	strb.w	r3, [sp, #4]
  *(p+1) = 0 ;
  spi_operation( p, spi_buf, 2 ) ;
  4020d2:	4601      	mov	r1, r0
//      spi_operation( p, spi_buf, 4 ) ;

  eeprom_write_enable() ;

  *p = 1 ;                // Write status register command
  *(p+1) = 0 ;
  4020d4:	2300      	movs	r3, #0
  spi_operation( p, spi_buf, 2 ) ;
  4020d6:	2202      	movs	r2, #2
//      spi_operation( p, spi_buf, 4 ) ;

  eeprom_write_enable() ;

  *p = 1 ;                // Write status register command
  *(p+1) = 0 ;
  4020d8:	f88d 3005 	strb.w	r3, [sp, #5]
  spi_operation( p, spi_buf, 2 ) ;
  4020dc:	f7ff ff8a 	bl	401ff4 <_Z13spi_operationPhS_m>
}
  4020e0:	b003      	add	sp, #12
  4020e2:	bd00      	pop	{pc}

004020e4 <_Z7end_spiv>:
}
#endif

void end_spi()
{
  SPI->SPI_CR = 2 ;                                                               // Disable
  4020e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
  4020ec:	2102      	movs	r1, #2
  4020ee:	6019      	str	r1, [r3, #0]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4020f0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
  SPI->SPI_IDR = 0x07FF ;                                 // All interrupts off
  4020f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
  4020f8:	6199      	str	r1, [r3, #24]
  4020fa:	f2ce 0200 	movt	r2, #57344	; 0xe000
  4020fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  402102:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC_DisableIRQ(SPI_IRQn) ;
}
  402106:	4770      	bx	lr

00402108 <_Z12ee32_processv>:
      eeWaitFinished();
  }
}

void ee32_process()
{
  402108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  register uint8_t *p ;
  register uint8_t *q ;
  register uint32_t x ;
  register uint32_t eeAddress ;

  if ( Eeprom32_process_state == E32_BLANKCHECK ) {
  40210c:	4c77      	ldr	r4, [pc, #476]	; (4022ec <_Z12ee32_processv+0x1e4>)
      eeWaitFinished();
  }
}

void ee32_process()
{
  40210e:	b082      	sub	sp, #8
  register uint8_t *p ;
  register uint8_t *q ;
  register uint32_t x ;
  register uint32_t eeAddress ;

  if ( Eeprom32_process_state == E32_BLANKCHECK ) {
  402110:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
  402114:	2b08      	cmp	r3, #8
  402116:	d011      	beq.n	40213c <_Z12ee32_processv+0x34>
    read32_eeprom_data( eeAddress, p, x, 1 ) ;
#endif
    Eeprom32_process_state = E32_READSENDING ;
  }

  if ( Eeprom32_process_state == E32_READSENDING )
  402118:	2b06      	cmp	r3, #6
  40211a:	f000 80e0 	beq.w	4022de <_Z12ee32_processv+0x1d6>
#endif
      // }
   // }
  }

  if ( Eeprom32_process_state == E32_WRITESTART )
  40211e:	2b09      	cmp	r3, #9
  402120:	d04f      	beq.n	4021c2 <_Z12ee32_processv+0xba>
    Eeprom32_address = eeAddress;
    write32_eeprom_block(eeAddress, p, x, 1);
    Eeprom32_process_state = E32_WRITESENDING ;
  }

  if ( Eeprom32_process_state == E32_WRITESENDING )
  402122:	2b04      	cmp	r3, #4
  402124:	f000 80df 	beq.w	4022e6 <_Z12ee32_processv+0x1de>
    {
      Eeprom32_process_state = E32_WRITEWAITING ;
    }
  }

  if ( Eeprom32_process_state == E32_WRITEWAITING )
  402128:	2b05      	cmp	r3, #5
  40212a:	f000 809a 	beq.w	402262 <_Z12ee32_processv+0x15a>
        Eeprom32_process_state = E32_IDLE ;
      }
    }
  }

  if ( Eeprom32_process_state == E32_ERASESENDING )
  40212e:	2b02      	cmp	r3, #2
  402130:	d042      	beq.n	4021b8 <_Z12ee32_processv+0xb0>
    {
      Eeprom32_process_state = E32_ERASEWAITING ;
    }
  }
		
  if ( Eeprom32_process_state == E32_ERASEWAITING )
  402132:	2b03      	cmp	r3, #3
  402134:	d037      	beq.n	4021a6 <_Z12ee32_processv+0x9e>
    if ( ( x & 1 ) == 0 )
    { // Command finished
      Eeprom32_process_state = Eeprom32_state_after_erase ;
    }
  }
}
  402136:	b002      	add	sp, #8
  402138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  register uint8_t *q ;
  register uint32_t x ;
  register uint32_t eeAddress ;

  if ( Eeprom32_process_state == E32_BLANKCHECK ) {
    eeAddress = File_system[Eeprom32_file_index].block_no ^ 1 ;
  40213c:	f894 33fd 	ldrb.w	r3, [r4, #1021]	; 0x3fd
  402140:	4d6b      	ldr	r5, [pc, #428]	; (4022f0 <_Z12ee32_processv+0x1e8>)
  402142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402146:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  40214a:	f8d3 6aac 	ldr.w	r6, [r3, #2732]	; 0xaac
#if 0
    x = Eeprom32_data_size + sizeof( struct t_eeprom_header ) ;	// Size needing to be checked
    p = (uint8_t *) &Eeprom_buffer ;
    read32_eeprom_data( eeAddress, p, x, 1 ) ;
#endif
    Eeprom32_process_state = E32_READSENDING ;
  40214e:	2306      	movs	r3, #6
  register uint8_t *q ;
  register uint32_t x ;
  register uint32_t eeAddress ;

  if ( Eeprom32_process_state == E32_BLANKCHECK ) {
    eeAddress = File_system[Eeprom32_file_index].block_no ^ 1 ;
  402150:	f086 0601 	eor.w	r6, r6, #1
    eeAddress <<= 12 ;		                                // Block start address
  402154:	0336      	lsls	r6, r6, #12
    Eeprom32_address = eeAddress ;				// Where to put new data
  402156:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
#if 0
    x = Eeprom32_data_size + sizeof( struct t_eeprom_header ) ;	// Size needing to be checked
    p = (uint8_t *) &Eeprom_buffer ;
    read32_eeprom_data( eeAddress, p, x, 1 ) ;
#endif
    Eeprom32_process_state = E32_READSENDING ;
  40215a:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
#endif
#ifdef SIMU
        Eeprom32_process_state = E32_WRITESTART ;
#else
        eeAddress = Eeprom32_address ;
        eeprom_write_enable() ;
  40215e:	f7ff fde7 	bl	401d30 <_Z19eeprom_write_enablev>
        p = Spi_tx_buf ;
        *p = 0x20 ;		// Block Erase command
        *(p+1) = eeAddress >> 16 ;
        *(p+2) = eeAddress >> 8 ;
        *(p+3) = eeAddress ;		// 3 bytes address
        spi_PDC_action( p, 0, 0, 4, 0 ) ;
  402162:	2700      	movs	r7, #0
#else
        eeAddress = Eeprom32_address ;
        eeprom_write_enable() ;
        p = Spi_tx_buf ;
        *p = 0x20 ;		// Block Erase command
        *(p+1) = eeAddress >> 16 ;
  402164:	ea4f 4c16 	mov.w	ip, r6, lsr #16
        *(p+2) = eeAddress >> 8 ;
  402168:	ea4f 2e16 	mov.w	lr, r6, lsr #8
        Eeprom32_process_state = E32_WRITESTART ;
#else
        eeAddress = Eeprom32_address ;
        eeprom_write_enable() ;
        p = Spi_tx_buf ;
        *p = 0x20 ;		// Block Erase command
  40216c:	f04f 0820 	mov.w	r8, #32
        *(p+1) = eeAddress >> 16 ;
        *(p+2) = eeAddress >> 8 ;
        *(p+3) = eeAddress ;		// 3 bytes address
        spi_PDC_action( p, 0, 0, 4, 0 ) ;
  402170:	2304      	movs	r3, #4
        Eeprom32_process_state = E32_WRITESTART ;
#else
        eeAddress = Eeprom32_address ;
        eeprom_write_enable() ;
        p = Spi_tx_buf ;
        *p = 0x20 ;		// Block Erase command
  402172:	f885 8a94 	strb.w	r8, [r5, #2708]	; 0xa94
        *(p+1) = eeAddress >> 16 ;
  402176:	f885 ca95 	strb.w	ip, [r5, #2709]	; 0xa95
        *(p+2) = eeAddress >> 8 ;
  40217a:	f885 ea96 	strb.w	lr, [r5, #2710]	; 0xa96
        *(p+3) = eeAddress ;		// 3 bytes address
  40217e:	f885 6a97 	strb.w	r6, [r5, #2711]	; 0xa97
        spi_PDC_action( p, 0, 0, 4, 0 ) ;
  402182:	4639      	mov	r1, r7
  402184:	485b      	ldr	r0, [pc, #364]	; (4022f4 <_Z12ee32_processv+0x1ec>)
  402186:	463a      	mov	r2, r7
  402188:	9700      	str	r7, [sp, #0]
  40218a:	f7ff fd53 	bl	401c34 <_Z14spi_PDC_actionPhS_S_mm>
        Eeprom32_process_state = E32_ERASESENDING ;
  40218e:	2302      	movs	r3, #2
  402190:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
        Eeprom32_state_after_erase = E32_WRITESTART ;
  402194:	2309      	movs	r3, #9
  402196:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
    }
  }

  if ( Eeprom32_process_state == E32_ERASESENDING )
  {
    if ( Spi_complete )
  40219a:	6fab      	ldr	r3, [r5, #120]	; 0x78
  40219c:	2b00      	cmp	r3, #0
  40219e:	d0ca      	beq.n	402136 <_Z12ee32_processv+0x2e>
    {
      Eeprom32_process_state = E32_ERASEWAITING ;
  4021a0:	2303      	movs	r3, #3
  4021a2:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
    }
  }
		
  if ( Eeprom32_process_state == E32_ERASEWAITING )
  {
    x = eeprom_read_status() ;
  4021a6:	f7ff fdc7 	bl	401d38 <_Z18eeprom_read_statusv>
    if ( ( x & 1 ) == 0 )
  4021aa:	07c3      	lsls	r3, r0, #31
    { // Command finished
      Eeprom32_process_state = Eeprom32_state_after_erase ;
  4021ac:	bf5c      	itt	pl
  4021ae:	f894 3404 	ldrbpl.w	r3, [r4, #1028]	; 0x404
  4021b2:	f884 33fc 	strbpl.w	r3, [r4, #1020]	; 0x3fc
  4021b6:	e7be      	b.n	402136 <_Z12ee32_processv+0x2e>
  4021b8:	4d4d      	ldr	r5, [pc, #308]	; (4022f0 <_Z12ee32_processv+0x1e8>)
    }
  }

  if ( Eeprom32_process_state == E32_ERASESENDING )
  {
    if ( Spi_complete )
  4021ba:	6fab      	ldr	r3, [r5, #120]	; 0x78
  4021bc:	2b00      	cmp	r3, #0
  4021be:	d0ba      	beq.n	402136 <_Z12ee32_processv+0x2e>
  4021c0:	e7ee      	b.n	4021a0 <_Z12ee32_processv+0x98>
  if ( Eeprom32_process_state == E32_WRITESTART )
  {
    uint32_t total_size ;
    p = Eeprom32_source_address;
    q = (uint8_t *) &Eeprom_buffer.data;
    if (p != q) {
  4021c2:	4f4d      	ldr	r7, [pc, #308]	; (4022f8 <_Z12ee32_processv+0x1f0>)
  }

  if ( Eeprom32_process_state == E32_WRITESTART )
  {
    uint32_t total_size ;
    p = Eeprom32_source_address;
  4021c4:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
    q = (uint8_t *) &Eeprom_buffer.data;
    if (p != q) {
  4021c8:	f107 0308 	add.w	r3, r7, #8
  4021cc:	4299      	cmp	r1, r3
      // TODO why not memcpy
      for (x = 0; x < Eeprom32_data_size; x += 1) {
  4021ce:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
  if ( Eeprom32_process_state == E32_WRITESTART )
  {
    uint32_t total_size ;
    p = Eeprom32_source_address;
    q = (uint8_t *) &Eeprom_buffer.data;
    if (p != q) {
  4021d2:	d008      	beq.n	4021e6 <_Z12ee32_processv+0xde>
      // TODO why not memcpy
      for (x = 0; x < Eeprom32_data_size; x += 1) {
  4021d4:	b13a      	cbz	r2, 4021e6 <_Z12ee32_processv+0xde>
    if (immediately)
      eeWaitFinished();
  }
}

void ee32_process()
  4021d6:	18bd      	adds	r5, r7, r2
  4021d8:	3508      	adds	r5, #8
    p = Eeprom32_source_address;
    q = (uint8_t *) &Eeprom_buffer.data;
    if (p != q) {
      // TODO why not memcpy
      for (x = 0; x < Eeprom32_data_size; x += 1) {
        *q++ = *p++; // Copy the data to temp buffer
  4021da:	f811 0b01 	ldrb.w	r0, [r1], #1
  4021de:	f803 0b01 	strb.w	r0, [r3], #1
    uint32_t total_size ;
    p = Eeprom32_source_address;
    q = (uint8_t *) &Eeprom_buffer.data;
    if (p != q) {
      // TODO why not memcpy
      for (x = 0; x < Eeprom32_data_size; x += 1) {
  4021e2:	42ab      	cmp	r3, r5
  4021e4:	d1f9      	bne.n	4021da <_Z12ee32_processv+0xd2>
        *q++ = *p++; // Copy the data to temp buffer
      }
    }
    Eeprom_buffer.header.sequence_no = ++File_system[Eeprom32_file_index].sequence_no;
  4021e6:	f894 03fd 	ldrb.w	r0, [r4, #1021]	; 0x3fd
  4021ea:	4d41      	ldr	r5, [pc, #260]	; (4022f0 <_Z12ee32_processv+0x1e8>)
  4021ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4021f0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  4021f4:	f8d0 3ab0 	ldr.w	r3, [r0, #2736]	; 0xab0
    if (immediately)
      eeWaitFinished();
  }
}

void ee32_process()
  4021f8:	f505 6658 	add.w	r6, r5, #3456	; 0xd80
      // TODO why not memcpy
      for (x = 0; x < Eeprom32_data_size; x += 1) {
        *q++ = *p++; // Copy the data to temp buffer
      }
    }
    Eeprom_buffer.header.sequence_no = ++File_system[Eeprom32_file_index].sequence_no;
  4021fc:	f103 0c01 	add.w	ip, r3, #1
    File_system[Eeprom32_file_index].size = Eeprom_buffer.header.data_size = Eeprom32_data_size;
  402200:	fa1f fe82 	uxth.w	lr, r2
    Eeprom_buffer.header.flags = 0;
    Eeprom_buffer.header.hcsum = byte_checksum((uint8_t *) &Eeprom_buffer, 7);
  402204:	4633      	mov	r3, r6
        *q++ = *p++; // Copy the data to temp buffer
      }
    }
    Eeprom_buffer.header.sequence_no = ++File_system[Eeprom32_file_index].sequence_no;
    File_system[Eeprom32_file_index].size = Eeprom_buffer.header.data_size = Eeprom32_data_size;
    Eeprom_buffer.header.flags = 0;
  402206:	2100      	movs	r1, #0
      // TODO why not memcpy
      for (x = 0; x < Eeprom32_data_size; x += 1) {
        *q++ = *p++; // Copy the data to temp buffer
      }
    }
    Eeprom_buffer.header.sequence_no = ++File_system[Eeprom32_file_index].sequence_no;
  402208:	f8c0 cab0 	str.w	ip, [r0, #2736]	; 0xab0
  40220c:	f8c5 cd88 	str.w	ip, [r5, #3464]	; 0xd88
    File_system[Eeprom32_file_index].size = Eeprom_buffer.header.data_size = Eeprom32_data_size;
  402210:	f8a5 ed8c 	strh.w	lr, [r5, #3468]	; 0xd8c
  402214:	f8a0 eab4 	strh.w	lr, [r0, #2740]	; 0xab4
    Eeprom_buffer.header.flags = 0;
  402218:	f885 1d8e 	strb.w	r1, [r5, #3470]	; 0xd8e
    if (immediately)
      eeWaitFinished();
  }
}

void ee32_process()
  40221c:	360f      	adds	r6, #15
      }
    }
    Eeprom_buffer.header.sequence_no = ++File_system[Eeprom32_file_index].sequence_no;
    File_system[Eeprom32_file_index].size = Eeprom_buffer.header.data_size = Eeprom32_data_size;
    Eeprom_buffer.header.flags = 0;
    Eeprom_buffer.header.hcsum = byte_checksum((uint8_t *) &Eeprom_buffer, 7);
  40221e:	3308      	adds	r3, #8
	uint32_t csum ;

	csum = 0 ;
	while( size )
	{
		csum += *p++ ;
  402220:	f813 0b01 	ldrb.w	r0, [r3], #1
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  402224:	42b3      	cmp	r3, r6
	{
		csum += *p++ ;
  402226:	4401      	add	r1, r0
uint8_t byte_checksum( uint8_t *p, uint32_t size )
{
	uint32_t csum ;

	csum = 0 ;
	while( size )
  402228:	d1fa      	bne.n	402220 <_Z12ee32_processv+0x118>
    }
    Eeprom_buffer.header.sequence_no = ++File_system[Eeprom32_file_index].sequence_no;
    File_system[Eeprom32_file_index].size = Eeprom_buffer.header.data_size = Eeprom32_data_size;
    Eeprom_buffer.header.flags = 0;
    Eeprom_buffer.header.hcsum = byte_checksum((uint8_t *) &Eeprom_buffer, 7);
    total_size = Eeprom32_data_size + sizeof(struct t_eeprom_header);
  40222a:	3208      	adds	r2, #8
    eeAddress = Eeprom32_address; // Block start address
  40222c:	f8d4 6400 	ldr.w	r6, [r4, #1024]	; 0x400
    x = total_size / 256; // # sub blocks
    x <<= 8; // to offset address
  402230:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    eeAddress += x; // Add it in
    p = (uint8_t *) &Eeprom_buffer;
    p += x; // Add offset
    x = total_size % 256; // Size of last bit
  402234:	b2d2      	uxtb	r2, r2
	while( size )
	{
		csum += *p++ ;
		size -= 1 ;
	}
	return csum ;
  402236:	f885 1d8f 	strb.w	r1, [r5, #3471]	; 0xd8f
    Eeprom_buffer.header.hcsum = byte_checksum((uint8_t *) &Eeprom_buffer, 7);
    total_size = Eeprom32_data_size + sizeof(struct t_eeprom_header);
    eeAddress = Eeprom32_address; // Block start address
    x = total_size / 256; // # sub blocks
    x <<= 8; // to offset address
    eeAddress += x; // Add it in
  40223a:	199e      	adds	r6, r3, r6
    p = (uint8_t *) &Eeprom_buffer;
    p += x; // Add offset
  40223c:	18ff      	adds	r7, r7, r3
    x = total_size % 256; // Size of last bit
    if (x == 0) // Last bit empty
  40223e:	b392      	cbz	r2, 4022a6 <_Z12ee32_processv+0x19e>
      p -= x;
      eeAddress -= x;
    }
    Eeprom32_buffer_address = p;
    Eeprom32_address = eeAddress;
    write32_eeprom_block(eeAddress, p, x, 1);
  402240:	2301      	movs	r3, #1
  402242:	4630      	mov	r0, r6
  402244:	4639      	mov	r1, r7
        {
      x = 256;
      p -= x;
      eeAddress -= x;
    }
    Eeprom32_buffer_address = p;
  402246:	f8c4 7410 	str.w	r7, [r4, #1040]	; 0x410
    Eeprom32_address = eeAddress;
  40224a:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
    write32_eeprom_block(eeAddress, p, x, 1);
  40224e:	f7ff fd99 	bl	401d84 <_Z20write32_eeprom_blockmPhmm>
    Eeprom32_process_state = E32_WRITESENDING ;
  402252:	2304      	movs	r3, #4
  402254:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
  }

  if ( Eeprom32_process_state == E32_WRITESENDING )
  {
    if ( Spi_complete )
  402258:	6fab      	ldr	r3, [r5, #120]	; 0x78
  40225a:	b30b      	cbz	r3, 4022a0 <_Z12ee32_processv+0x198>
    {
      Eeprom32_process_state = E32_WRITEWAITING ;
  40225c:	2305      	movs	r3, #5
  40225e:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
    }
  }

  if ( Eeprom32_process_state == E32_WRITEWAITING )
  {
    x = eeprom_read_status() ;
  402262:	f7ff fd69 	bl	401d38 <_Z18eeprom_read_statusv>
    if ( ( x & 1 ) == 0 )
  402266:	07c2      	lsls	r2, r0, #31
  402268:	bf48      	it	mi
  40226a:	f894 33fc 	ldrbmi.w	r3, [r4, #1020]	; 0x3fc
  40226e:	f53f af5e 	bmi.w	40212e <_Z12ee32_processv+0x26>
    {
      if ( ( Eeprom32_address & 0x0FFF ) != 0 )		// More to write
  402272:	f8d4 6400 	ldr.w	r6, [r4, #1024]	; 0x400
  402276:	4c1d      	ldr	r4, [pc, #116]	; (4022ec <_Z12ee32_processv+0x1e4>)
  402278:	0533      	lsls	r3, r6, #20
  40227a:	0d1b      	lsrs	r3, r3, #20
  40227c:	b9d3      	cbnz	r3, 4022b4 <_Z12ee32_processv+0x1ac>
        write32_eeprom_block( Eeprom32_address, Eeprom32_buffer_address, 256, 1 ) ;
        Eeprom32_process_state = E32_WRITESENDING ;
      }
      else
      {
        File_system[Eeprom32_file_index].block_no ^= 1 ;        // This is now the current block
  40227e:	f894 33fd 	ldrb.w	r3, [r4, #1021]	; 0x3fd
  402282:	4a1b      	ldr	r2, [pc, #108]	; (4022f0 <_Z12ee32_processv+0x1e8>)
  402284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40228c:	f8d3 2aac 	ldr.w	r2, [r3, #2732]	; 0xaac
  402290:	f082 0201 	eor.w	r2, r2, #1
  402294:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
        *(p+3) = eeAddress ;		// 3 bytes address
        spi_PDC_action( p, 0, 0, 4, 0 ) ;
        Eeprom32_process_state = E32_ERASESENDING ;
        Eeprom32_state_after_erase = E32_IDLE ;
#endif
        Eeprom32_process_state = E32_IDLE ;
  402298:	2301      	movs	r3, #1
  40229a:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
  40229e:	e74a      	b.n	402136 <_Z12ee32_processv+0x2e>
    Eeprom32_process_state = E32_WRITESENDING ;
  }

  if ( Eeprom32_process_state == E32_WRITESENDING )
  {
    if ( Spi_complete )
  4022a0:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
  4022a4:	e740      	b.n	402128 <_Z12ee32_processv+0x20>
    p += x; // Add offset
    x = total_size % 256; // Size of last bit
    if (x == 0) // Last bit empty
        {
      x = 256;
      p -= x;
  4022a6:	f5a7 7780 	sub.w	r7, r7, #256	; 0x100
      eeAddress -= x;
  4022aa:	f5a6 7680 	sub.w	r6, r6, #256	; 0x100
    p = (uint8_t *) &Eeprom_buffer;
    p += x; // Add offset
    x = total_size % 256; // Size of last bit
    if (x == 0) // Last bit empty
        {
      x = 256;
  4022ae:	f44f 7280 	mov.w	r2, #256	; 0x100
  4022b2:	e7c5      	b.n	402240 <_Z12ee32_processv+0x138>
    if ( ( x & 1 ) == 0 )
    {
      if ( ( Eeprom32_address & 0x0FFF ) != 0 )		// More to write
      {
        Eeprom32_address -= 256 ;
        Eeprom32_buffer_address -= 256 ;
  4022b4:	f8d4 5410 	ldr.w	r5, [r4, #1040]	; 0x410
    x = eeprom_read_status() ;
    if ( ( x & 1 ) == 0 )
    {
      if ( ( Eeprom32_address & 0x0FFF ) != 0 )		// More to write
      {
        Eeprom32_address -= 256 ;
  4022b8:	f5a6 7680 	sub.w	r6, r6, #256	; 0x100
        Eeprom32_buffer_address -= 256 ;
  4022bc:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
        write32_eeprom_block( Eeprom32_address, Eeprom32_buffer_address, 256, 1 ) ;
  4022c0:	2301      	movs	r3, #1
  4022c2:	4630      	mov	r0, r6
  4022c4:	4629      	mov	r1, r5
  4022c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    x = eeprom_read_status() ;
    if ( ( x & 1 ) == 0 )
    {
      if ( ( Eeprom32_address & 0x0FFF ) != 0 )		// More to write
      {
        Eeprom32_address -= 256 ;
  4022ca:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
        Eeprom32_buffer_address -= 256 ;
  4022ce:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
        write32_eeprom_block( Eeprom32_address, Eeprom32_buffer_address, 256, 1 ) ;
  4022d2:	f7ff fd57 	bl	401d84 <_Z20write32_eeprom_blockmPhmm>
        Eeprom32_process_state = E32_WRITESENDING ;
  4022d6:	2304      	movs	r3, #4
  4022d8:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
  4022dc:	e72b      	b.n	402136 <_Z12ee32_processv+0x2e>
    read32_eeprom_data( eeAddress, p, x, 1 ) ;
#endif
    Eeprom32_process_state = E32_READSENDING ;
  }

  if ( Eeprom32_process_state == E32_READSENDING )
  4022de:	f8d4 6400 	ldr.w	r6, [r4, #1024]	; 0x400
  4022e2:	4d03      	ldr	r5, [pc, #12]	; (4022f0 <_Z12ee32_processv+0x1e8>)
  4022e4:	e73b      	b.n	40215e <_Z12ee32_processv+0x56>
  4022e6:	4d02      	ldr	r5, [pc, #8]	; (4022f0 <_Z12ee32_processv+0x1e8>)
  4022e8:	e7b6      	b.n	402258 <_Z12ee32_processv+0x150>
  4022ea:	bf00      	nop
  4022ec:	20001200 	.word	0x20001200
  4022f0:	20000108 	.word	0x20000108
  4022f4:	20000b9c 	.word	0x20000b9c
  4022f8:	20000e90 	.word	0x20000e90

004022fc <_Z14eeWaitFinishedv>:
  SPI->SPI_IDR = 0x07FF ;                                 // All interrupts off
  NVIC_DisableIRQ(SPI_IRQn) ;
}

void eeWaitFinished()
{
  4022fc:	b510      	push	{r4, lr}
  while (Eeprom32_process_state != E32_IDLE) {
  4022fe:	4c06      	ldr	r4, [pc, #24]	; (402318 <_Z14eeWaitFinishedv+0x1c>)
  402300:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
  402304:	2b01      	cmp	r3, #1
  402306:	d005      	beq.n	402314 <_Z14eeWaitFinishedv+0x18>
    ee32_process();
  402308:	f7ff fefe 	bl	402108 <_Z12ee32_processv>
  NVIC_DisableIRQ(SPI_IRQn) ;
}

void eeWaitFinished()
{
  while (Eeprom32_process_state != E32_IDLE) {
  40230c:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
  402310:	2b01      	cmp	r3, #1
  402312:	d1f9      	bne.n	402308 <_Z14eeWaitFinishedv+0xc>
  402314:	bd10      	pop	{r4, pc}
  402316:	bf00      	nop
  402318:	20001200 	.word	0x20001200

0040231c <_Z7eeCheckb>:
    // TODO perMain()?
  }
}

void eeCheck(bool immediately)
{
  40231c:	b538      	push	{r3, r4, r5, lr}
  40231e:	4605      	mov	r5, r0
  if (immediately) {
  402320:	2800      	cmp	r0, #0
  402322:	d135      	bne.n	402390 <_Z7eeCheckb+0x74>
    eeWaitFinished();
  }

  if (s_eeDirtyMsk & EE_GENERAL) {
  402324:	4c1c      	ldr	r4, [pc, #112]	; (402398 <_Z7eeCheckb+0x7c>)
  402326:	f894 39a8 	ldrb.w	r3, [r4, #2472]	; 0x9a8
  40232a:	07d8      	lsls	r0, r3, #31
  40232c:	d516      	bpl.n	40235c <_Z7eeCheckb+0x40>
    s_eeDirtyMsk -= EE_GENERAL;
    Eeprom32_source_address = (uint8_t *)&g_eeGeneral ;               // Get data from here
  40232e:	4a1b      	ldr	r2, [pc, #108]	; (40239c <_Z7eeCheckb+0x80>)
  if (immediately) {
    eeWaitFinished();
  }

  if (s_eeDirtyMsk & EE_GENERAL) {
    s_eeDirtyMsk -= EE_GENERAL;
  402330:	3b01      	subs	r3, #1
  402332:	f884 39a8 	strb.w	r3, [r4, #2472]	; 0x9a8
    Eeprom32_source_address = (uint8_t *)&g_eeGeneral ;               // Get data from here
    Eeprom32_data_size = sizeof(g_eeGeneral) ;                        // This much
  402336:	2352      	movs	r3, #82	; 0x52
  402338:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    Eeprom32_file_index = 0 ;                                         // This file system entry
  40233c:	2300      	movs	r3, #0
    eeWaitFinished();
  }

  if (s_eeDirtyMsk & EE_GENERAL) {
    s_eeDirtyMsk -= EE_GENERAL;
    Eeprom32_source_address = (uint8_t *)&g_eeGeneral ;               // Get data from here
  40233e:	f104 0124 	add.w	r1, r4, #36	; 0x24
    Eeprom32_data_size = sizeof(g_eeGeneral) ;                        // This much
    Eeprom32_file_index = 0 ;                                         // This file system entry
  402342:	f882 33fd 	strb.w	r3, [r2, #1021]	; 0x3fd
    Eeprom32_process_state = E32_BLANKCHECK ;
  402346:	2308      	movs	r3, #8
    eeWaitFinished();
  }

  if (s_eeDirtyMsk & EE_GENERAL) {
    s_eeDirtyMsk -= EE_GENERAL;
    Eeprom32_source_address = (uint8_t *)&g_eeGeneral ;               // Get data from here
  402348:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
    Eeprom32_data_size = sizeof(g_eeGeneral) ;                        // This much
    Eeprom32_file_index = 0 ;                                         // This file system entry
    Eeprom32_process_state = E32_BLANKCHECK ;
  40234c:	f882 33fc 	strb.w	r3, [r2, #1020]	; 0x3fc
    if (immediately)
  402350:	b905      	cbnz	r5, 402354 <_Z7eeCheckb+0x38>
  402352:	bd38      	pop	{r3, r4, r5, pc}
      eeWaitFinished();
  402354:	f7ff ffd2 	bl	4022fc <_Z14eeWaitFinishedv>
  402358:	f894 39a8 	ldrb.w	r3, [r4, #2472]	; 0x9a8
    else
      return;
  }

  if (s_eeDirtyMsk & EE_MODEL) {
  40235c:	0799      	lsls	r1, r3, #30
  40235e:	d5f8      	bpl.n	402352 <_Z7eeCheckb+0x36>
    s_eeDirtyMsk -= EE_MODEL;
  402360:	3b02      	subs	r3, #2
    Eeprom32_source_address = (uint8_t *)&g_model ;           // Get data from here
  402362:	4a0e      	ldr	r2, [pc, #56]	; (40239c <_Z7eeCheckb+0x80>)
    else
      return;
  }

  if (s_eeDirtyMsk & EE_MODEL) {
    s_eeDirtyMsk -= EE_MODEL;
  402364:	f884 39a8 	strb.w	r3, [r4, #2472]	; 0x9a8
    Eeprom32_source_address = (uint8_t *)&g_model ;           // Get data from here
  402368:	4b0d      	ldr	r3, [pc, #52]	; (4023a0 <_Z7eeCheckb+0x84>)
    Eeprom32_data_size = sizeof(g_model) ;                    // This much
    Eeprom32_file_index = g_eeGeneral.currModel + 1 ;         // This file system entry
  40236a:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
      return;
  }

  if (s_eeDirtyMsk & EE_MODEL) {
    s_eeDirtyMsk -= EE_MODEL;
    Eeprom32_source_address = (uint8_t *)&g_model ;           // Get data from here
  40236e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
    Eeprom32_data_size = sizeof(g_model) ;                    // This much
  402372:	f240 735a 	movw	r3, #1882	; 0x75a
    Eeprom32_file_index = g_eeGeneral.currModel + 1 ;         // This file system entry
  402376:	3101      	adds	r1, #1
  }

  if (s_eeDirtyMsk & EE_MODEL) {
    s_eeDirtyMsk -= EE_MODEL;
    Eeprom32_source_address = (uint8_t *)&g_model ;           // Get data from here
    Eeprom32_data_size = sizeof(g_model) ;                    // This much
  402378:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    Eeprom32_file_index = g_eeGeneral.currModel + 1 ;         // This file system entry
    Eeprom32_process_state = E32_BLANKCHECK ;
  40237c:	2308      	movs	r3, #8

  if (s_eeDirtyMsk & EE_MODEL) {
    s_eeDirtyMsk -= EE_MODEL;
    Eeprom32_source_address = (uint8_t *)&g_model ;           // Get data from here
    Eeprom32_data_size = sizeof(g_model) ;                    // This much
    Eeprom32_file_index = g_eeGeneral.currModel + 1 ;         // This file system entry
  40237e:	f882 13fd 	strb.w	r1, [r2, #1021]	; 0x3fd
    Eeprom32_process_state = E32_BLANKCHECK ;
  402382:	f882 33fc 	strb.w	r3, [r2, #1020]	; 0x3fc
    if (immediately)
  402386:	2d00      	cmp	r5, #0
  402388:	d0e3      	beq.n	402352 <_Z7eeCheckb+0x36>
      eeWaitFinished();
  }
}
  40238a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Eeprom32_source_address = (uint8_t *)&g_model ;           // Get data from here
    Eeprom32_data_size = sizeof(g_model) ;                    // This much
    Eeprom32_file_index = g_eeGeneral.currModel + 1 ;         // This file system entry
    Eeprom32_process_state = E32_BLANKCHECK ;
    if (immediately)
      eeWaitFinished();
  40238e:	e7b5      	b.n	4022fc <_Z14eeWaitFinishedv>
}

void eeCheck(bool immediately)
{
  if (immediately) {
    eeWaitFinished();
  402390:	f7ff ffb4 	bl	4022fc <_Z14eeWaitFinishedv>
  402394:	e7c6      	b.n	402324 <_Z7eeCheckb+0x8>
  402396:	bf00      	nop
  402398:	20000108 	.word	0x20000108
  40239c:	20001200 	.word	0x20001200
  4023a0:	20000244 	.word	0x20000244

004023a4 <_Z11eeCopyModelhh>:
  Eeprom32_process_state = E32_BLANKCHECK ;
  eeWaitFinished();
}

bool eeCopyModel(uint8_t dst, uint8_t src)
{
  4023a4:	b570      	push	{r4, r5, r6, lr}
  // eeCheck(true) should have been called before entering here

  uint16_t size = File_system[src+1].size ;
  4023a6:	3101      	adds	r1, #1
  4023a8:	4d21      	ldr	r5, [pc, #132]	; (402430 <_Z11eeCopyModelhh+0x8c>)
  4023aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4023ae:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  read32_eeprom_data( (File_system[src+1].block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&Eeprom_buffer.data.model_data, size, 0 ) ;
  4023b2:	f8d1 3aac 	ldr.w	r3, [r1, #2732]	; 0xaac

bool eeCopyModel(uint8_t dst, uint8_t src)
{
  // eeCheck(true) should have been called before entering here

  uint16_t size = File_system[src+1].size ;
  4023b6:	f8b1 6ab4 	ldrh.w	r6, [r1, #2740]	; 0xab4
  read32_eeprom_data( (File_system[src+1].block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&Eeprom_buffer.data.model_data, size, 0 ) ;
  4023ba:	031b      	lsls	r3, r3, #12
  4023bc:	3308      	adds	r3, #8
  4023be:	f505 6559 	add.w	r5, r5, #3472	; 0xd90
  Eeprom32_process_state = E32_BLANKCHECK ;
  eeWaitFinished();
}

bool eeCopyModel(uint8_t dst, uint8_t src)
{
  4023c2:	4604      	mov	r4, r0
  // eeCheck(true) should have been called before entering here

  uint16_t size = File_system[src+1].size ;
  read32_eeprom_data( (File_system[src+1].block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&Eeprom_buffer.data.model_data, size, 0 ) ;
  4023c4:	4629      	mov	r1, r5
  4023c6:	4618      	mov	r0, r3
  4023c8:	4632      	mov	r2, r6
  4023ca:	2300      	movs	r3, #0
  4023cc:	f7ff fcb8 	bl	401d40 <_Z18read32_eeprom_datamPhmm>

  if (size > sizeof(g_model.name))
  4023d0:	2e0a      	cmp	r6, #10
  4023d2:	d91b      	bls.n	40240c <_Z11eeCopyModelhh+0x68>
    memcpy(ModelNames[dst], Eeprom_buffer.data.model_data.name, sizeof(g_model.name));
  4023d4:	4e17      	ldr	r6, [pc, #92]	; (402434 <_Z11eeCopyModelhh+0x90>)
  4023d6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
  4023da:	eb06 0040 	add.w	r0, r6, r0, lsl #1
  4023de:	f500 6082 	add.w	r0, r0, #1040	; 0x410
  4023e2:	3004      	adds	r0, #4
  4023e4:	4629      	mov	r1, r5
  4023e6:	220a      	movs	r2, #10
  4023e8:	f00c ff8e 	bl	40f308 <memcpy>
  else
    memset(ModelNames[dst], 0, sizeof(g_model.name));

  Eeprom32_source_address = (uint8_t *)&Eeprom_buffer.data.model_data;    // Get data from here
  Eeprom32_data_size = sizeof(g_model) ;                                  // This much
  4023ec:	f240 735a 	movw	r3, #1882	; 0x75a
  4023f0:	f8c6 340c 	str.w	r3, [r6, #1036]	; 0x40c
  Eeprom32_file_index = dst + 1 ;                                         // This file system entry
  4023f4:	3401      	adds	r4, #1
  Eeprom32_process_state = E32_BLANKCHECK ;
  4023f6:	2308      	movs	r3, #8
  if (size > sizeof(g_model.name))
    memcpy(ModelNames[dst], Eeprom_buffer.data.model_data.name, sizeof(g_model.name));
  else
    memset(ModelNames[dst], 0, sizeof(g_model.name));

  Eeprom32_source_address = (uint8_t *)&Eeprom_buffer.data.model_data;    // Get data from here
  4023f8:	f8c6 5408 	str.w	r5, [r6, #1032]	; 0x408
  Eeprom32_data_size = sizeof(g_model) ;                                  // This much
  Eeprom32_file_index = dst + 1 ;                                         // This file system entry
  4023fc:	f886 43fd 	strb.w	r4, [r6, #1021]	; 0x3fd
  Eeprom32_process_state = E32_BLANKCHECK ;
  402400:	f886 33fc 	strb.w	r3, [r6, #1020]	; 0x3fc
  eeWaitFinished();
  402404:	f7ff ff7a 	bl	4022fc <_Z14eeWaitFinishedv>
  return true;
}
  402408:	2001      	movs	r0, #1
  40240a:	bd70      	pop	{r4, r5, r6, pc}
  read32_eeprom_data( (File_system[src+1].block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&Eeprom_buffer.data.model_data, size, 0 ) ;

  if (size > sizeof(g_model.name))
    memcpy(ModelNames[dst], Eeprom_buffer.data.model_data.name, sizeof(g_model.name));
  else
    memset(ModelNames[dst], 0, sizeof(g_model.name));
  40240c:	480a      	ldr	r0, [pc, #40]	; (402438 <_Z11eeCopyModelhh+0x94>)
  40240e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  402412:	0049      	lsls	r1, r1, #1
  402414:	1842      	adds	r2, r0, r1
  402416:	2600      	movs	r6, #0
  402418:	1d13      	adds	r3, r2, #4
  40241a:	5246      	strh	r6, [r0, r1]
  40241c:	8056      	strh	r6, [r2, #2]
  40241e:	f823 6b02 	strh.w	r6, [r3], #2
  402422:	f823 6b02 	strh.w	r6, [r3], #2
  402426:	2100      	movs	r1, #0
  402428:	4e02      	ldr	r6, [pc, #8]	; (402434 <_Z11eeCopyModelhh+0x90>)
  40242a:	8019      	strh	r1, [r3, #0]
  40242c:	e7de      	b.n	4023ec <_Z11eeCopyModelhh+0x48>
  40242e:	bf00      	nop
  402430:	20000108 	.word	0x20000108
  402434:	20001200 	.word	0x20001200
  402438:	20001614 	.word	0x20001614

0040243c <_Z12eeSwapModelshh>:
  eeWaitFinished();
  return true;
}

void eeSwapModels(uint8_t id1, uint8_t id2)
{
  40243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // eeCheck(true) should have been called before entering here

  uint16_t id2_size = File_system[id2+1].size;
  40243e:	1c4b      	adds	r3, r1, #1
  402440:	4f22      	ldr	r7, [pc, #136]	; (4024cc <_Z12eeSwapModelshh+0x90>)
  402442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402446:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40244a:	f8b3 6ab4 	ldrh.w	r6, [r3, #2740]	; 0xab4
  eeWaitFinished();
  return true;
}

void eeSwapModels(uint8_t id1, uint8_t id2)
{
  40244e:	4605      	mov	r5, r0
  // eeCheck(true) should have been called before entering here

  uint16_t id2_size = File_system[id2+1].size;
  uint32_t id2_block_no = File_system[id2+1].block_no;

  eeCopyModel(id2, id1);
  402450:	4608      	mov	r0, r1
  402452:	4629      	mov	r1, r5
void eeSwapModels(uint8_t id1, uint8_t id2)
{
  // eeCheck(true) should have been called before entering here

  uint16_t id2_size = File_system[id2+1].size;
  uint32_t id2_block_no = File_system[id2+1].block_no;
  402454:	f8d3 4aac 	ldr.w	r4, [r3, #2732]	; 0xaac

  eeCopyModel(id2, id1);
  402458:	f7ff ffa4 	bl	4023a4 <_Z11eeCopyModelhh>

  // block_no(id1) has been shifted now, but we have the size

  // TODO flash saving with function above ...
  if (id2_size > sizeof(g_model.name)) {
  40245c:	2e0a      	cmp	r6, #10
  40245e:	d81e      	bhi.n	40249e <_Z12eeSwapModelshh+0x62>
    read32_eeprom_data( (id2_block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&Eeprom_buffer.data.model_data, id2_size, 0 );
    memcpy(ModelNames[id1], Eeprom_buffer.data.model_data.name, sizeof(g_model.name));
  }
  else {
    memset(ModelNames[id1], 0, sizeof(g_model.name));
  402460:	481b      	ldr	r0, [pc, #108]	; (4024d0 <_Z12eeSwapModelshh+0x94>)
  402462:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  402466:	0049      	lsls	r1, r1, #1
  402468:	1842      	adds	r2, r0, r1
  40246a:	2400      	movs	r4, #0
  40246c:	1d13      	adds	r3, r2, #4
  40246e:	5244      	strh	r4, [r0, r1]
  402470:	8054      	strh	r4, [r2, #2]
  402472:	f823 4b02 	strh.w	r4, [r3], #2
  402476:	f823 4b02 	strh.w	r4, [r3], #2
  40247a:	2100      	movs	r1, #0
  40247c:	4c15      	ldr	r4, [pc, #84]	; (4024d4 <_Z12eeSwapModelshh+0x98>)
  40247e:	8019      	strh	r1, [r3, #0]
  402480:	f507 6759 	add.w	r7, r7, #3472	; 0xd90
  }

  Eeprom32_source_address = (uint8_t *)&Eeprom_buffer.data.model_data;    // Get data from here
  Eeprom32_data_size = id2_size ;                                         // This much
  Eeprom32_file_index = id1 + 1 ;                                         // This file system entry
  402484:	3501      	adds	r5, #1
  Eeprom32_process_state = E32_BLANKCHECK ;
  402486:	2308      	movs	r3, #8
  }
  else {
    memset(ModelNames[id1], 0, sizeof(g_model.name));
  }

  Eeprom32_source_address = (uint8_t *)&Eeprom_buffer.data.model_data;    // Get data from here
  402488:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  Eeprom32_data_size = id2_size ;                                         // This much
  40248c:	f8c4 640c 	str.w	r6, [r4, #1036]	; 0x40c
  Eeprom32_file_index = id1 + 1 ;                                         // This file system entry
  402490:	f884 53fd 	strb.w	r5, [r4, #1021]	; 0x3fd
  Eeprom32_process_state = E32_BLANKCHECK ;
  402494:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
  eeWaitFinished();
}
  402498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  Eeprom32_source_address = (uint8_t *)&Eeprom_buffer.data.model_data;    // Get data from here
  Eeprom32_data_size = id2_size ;                                         // This much
  Eeprom32_file_index = id1 + 1 ;                                         // This file system entry
  Eeprom32_process_state = E32_BLANKCHECK ;
  eeWaitFinished();
  40249c:	e72e      	b.n	4022fc <_Z14eeWaitFinishedv>

  // block_no(id1) has been shifted now, but we have the size

  // TODO flash saving with function above ...
  if (id2_size > sizeof(g_model.name)) {
    read32_eeprom_data( (id2_block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&Eeprom_buffer.data.model_data, id2_size, 0 );
  40249e:	0324      	lsls	r4, r4, #12
  4024a0:	f507 6759 	add.w	r7, r7, #3472	; 0xd90
  4024a4:	f104 0008 	add.w	r0, r4, #8
  4024a8:	4639      	mov	r1, r7
  4024aa:	4632      	mov	r2, r6
  4024ac:	2300      	movs	r3, #0
    memcpy(ModelNames[id1], Eeprom_buffer.data.model_data.name, sizeof(g_model.name));
  4024ae:	4c09      	ldr	r4, [pc, #36]	; (4024d4 <_Z12eeSwapModelshh+0x98>)

  // block_no(id1) has been shifted now, but we have the size

  // TODO flash saving with function above ...
  if (id2_size > sizeof(g_model.name)) {
    read32_eeprom_data( (id2_block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&Eeprom_buffer.data.model_data, id2_size, 0 );
  4024b0:	f7ff fc46 	bl	401d40 <_Z18read32_eeprom_datamPhmm>
    memcpy(ModelNames[id1], Eeprom_buffer.data.model_data.name, sizeof(g_model.name));
  4024b4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
  4024b8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
  4024bc:	f500 6082 	add.w	r0, r0, #1040	; 0x410
  4024c0:	3004      	adds	r0, #4
  4024c2:	4639      	mov	r1, r7
  4024c4:	220a      	movs	r2, #10
  4024c6:	f00c ff1f 	bl	40f308 <memcpy>
  4024ca:	e7db      	b.n	402484 <_Z12eeSwapModelshh+0x48>
  4024cc:	20000108 	.word	0x20000108
  4024d0:	20001614 	.word	0x20001614
  4024d4:	20001200 	.word	0x20001200

004024d8 <_Z13eeDeleteModelh>:
} Eeprom_buffer ;

#define EEPROM_BUFFER_SIZE ((sizeof(ModelData) + sizeof( struct t_eeprom_header ) + 3)/4)

void eeDeleteModel(uint8_t id)
{
  4024d8:	b570      	push	{r4, r5, r6, lr}
  4024da:	4604      	mov	r4, r0
  eeCheck(true);
  4024dc:	2001      	movs	r0, #1
  4024de:	f7ff ff1d 	bl	40231c <_Z7eeCheckb>

  memset(ModelNames[id], 0, sizeof(g_model.name));
  4024e2:	f241 2300 	movw	r3, #4608	; 0x1200
  4024e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4024ea:	f503 6082 	add.w	r0, r3, #1040	; 0x410
  4024ee:	eb04 0684 	add.w	r6, r4, r4, lsl #2
  4024f2:	3004      	adds	r0, #4
  4024f4:	0076      	lsls	r6, r6, #1
  4024f6:	1985      	adds	r5, r0, r6
  4024f8:	2200      	movs	r2, #0
  4024fa:	1d29      	adds	r1, r5, #4
  4024fc:	5382      	strh	r2, [r0, r6]
  4024fe:	806a      	strh	r2, [r5, #2]
  402500:	f821 2b02 	strh.w	r2, [r1], #2
  402504:	f821 2b02 	strh.w	r2, [r1], #2
  402508:	800a      	strh	r2, [r1, #0]

  Eeprom32_source_address = (uint8_t *)&g_model ;   // Get data from here
  40250a:	4907      	ldr	r1, [pc, #28]	; (402528 <_Z13eeDeleteModelh+0x50>)
  Eeprom32_data_size = 0 ;                          // This much
  Eeprom32_file_index = id + 1 ;                    // This file system entry
  40250c:	3401      	adds	r4, #1
  eeCheck(true);

  memset(ModelNames[id], 0, sizeof(g_model.name));

  Eeprom32_source_address = (uint8_t *)&g_model ;   // Get data from here
  Eeprom32_data_size = 0 ;                          // This much
  40250e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  Eeprom32_file_index = id + 1 ;                    // This file system entry
  Eeprom32_process_state = E32_BLANKCHECK ;
  402512:	2208      	movs	r2, #8
{
  eeCheck(true);

  memset(ModelNames[id], 0, sizeof(g_model.name));

  Eeprom32_source_address = (uint8_t *)&g_model ;   // Get data from here
  402514:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
  Eeprom32_data_size = 0 ;                          // This much
  Eeprom32_file_index = id + 1 ;                    // This file system entry
  402518:	f883 43fd 	strb.w	r4, [r3, #1021]	; 0x3fd
  Eeprom32_process_state = E32_BLANKCHECK ;
  40251c:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
  eeWaitFinished();
}
  402520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  Eeprom32_source_address = (uint8_t *)&g_model ;   // Get data from here
  Eeprom32_data_size = 0 ;                          // This much
  Eeprom32_file_index = id + 1 ;                    // This file system entry
  Eeprom32_process_state = E32_BLANKCHECK ;
  eeWaitFinished();
  402524:	e6ea      	b.n	4022fc <_Z14eeWaitFinishedv>
  402526:	bf00      	nop
  402528:	20000244 	.word	0x20000244

0040252c <_Z15fill_file_indexv>:
    }
  }
}

void fill_file_index()
{
  40252c:	b570      	push	{r4, r5, r6, lr}
  40252e:	2500      	movs	r5, #0
  402530:	4e08      	ldr	r6, [pc, #32]	; (402554 <_Z15fill_file_indexv+0x28>)
  for (uint32_t i = 0 ; i < MAX_MODELS + 1 ; i += 1 )
  402532:	462c      	mov	r4, r5
      Eeprom32_process_state = Eeprom32_state_after_erase ;
    }
  }
}

void fill_file_index()
  402534:	0060      	lsls	r0, r4, #1
{
  for (uint32_t i = 0 ; i < MAX_MODELS + 1 ; i += 1 )
  {
    File_system[i].block_no = get_current_block_number( i * 2, &File_system[i].size, &File_system[i].sequence_no ) ;
  402536:	1902      	adds	r2, r0, r4
  402538:	0092      	lsls	r2, r2, #2
  40253a:	f102 0108 	add.w	r1, r2, #8
  40253e:	18b2      	adds	r2, r6, r2
  402540:	3204      	adds	r2, #4
  402542:	1871      	adds	r1, r6, r1
  402544:	f7ff fc62 	bl	401e0c <_Z24get_current_block_numbermPtPm>
  }
}

void fill_file_index()
{
  for (uint32_t i = 0 ; i < MAX_MODELS + 1 ; i += 1 )
  402548:	3401      	adds	r4, #1
  {
    File_system[i].block_no = get_current_block_number( i * 2, &File_system[i].size, &File_system[i].sequence_no ) ;
  40254a:	5170      	str	r0, [r6, r5]
  }
}

void fill_file_index()
{
  for (uint32_t i = 0 ; i < MAX_MODELS + 1 ; i += 1 )
  40254c:	350c      	adds	r5, #12
  40254e:	2c3d      	cmp	r4, #61	; 0x3d
  402550:	d1f0      	bne.n	402534 <_Z15fill_file_indexv+0x8>
  {
    File_system[i].block_no = get_current_block_number( i * 2, &File_system[i].size, &File_system[i].sequence_no ) ;
  }
}
  402552:	bd70      	pop	{r4, r5, r6, pc}
  402554:	20000bb4 	.word	0x20000bb4

00402558 <_Z21ee32_read_model_namesv>:

void ee32_read_model_names()
{
  402558:	b538      	push	{r3, r4, r5, lr}
  40255a:	4d07      	ldr	r5, [pc, #28]	; (402578 <_Z21ee32_read_model_namesv+0x20>)
  for (uint32_t i=0; i<MAX_MODELS; i++)
  40255c:	2400      	movs	r4, #0
  {
    ee32LoadModelName(i, ModelNames[i], sizeof(g_model.name));
  40255e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  402562:	b2e0      	uxtb	r0, r4
  402564:	220a      	movs	r2, #10
  402566:	eb05 0141 	add.w	r1, r5, r1, lsl #1
  }
}

void ee32_read_model_names()
{
  for (uint32_t i=0; i<MAX_MODELS; i++)
  40256a:	3401      	adds	r4, #1
  {
    ee32LoadModelName(i, ModelNames[i], sizeof(g_model.name));
  40256c:	f7ff fd20 	bl	401fb0 <_Z17ee32LoadModelNamehPch>
  }
}

void ee32_read_model_names()
{
  for (uint32_t i=0; i<MAX_MODELS; i++)
  402570:	2c3c      	cmp	r4, #60	; 0x3c
  402572:	d1f4      	bne.n	40255e <_Z21ee32_read_model_namesv+0x6>
  {
    ee32LoadModelName(i, ModelNames[i], sizeof(g_model.name));
  }
}
  402574:	bd38      	pop	{r3, r4, r5, pc}
  402576:	bf00      	nop
  402578:	20001614 	.word	0x20001614

0040257c <_Z11eeprom_initv>:

void eeprom_init()
{
  40257c:	b508      	push	{r3, lr}
#ifndef SIMU
  init_spi() ;
  40257e:	f7ff fd71 	bl	402064 <_Z8init_spiv>
#endif
  fill_file_index() ;
  402582:	f7ff ffd3 	bl	40252c <_Z15fill_file_indexv>
  Eeprom32_process_state = E32_IDLE ;
  402586:	f241 2300 	movw	r3, #4608	; 0x1200
  40258a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40258e:	2201      	movs	r2, #1
  402590:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
}
  402594:	bd08      	pop	{r3, pc}
  402596:	bf00      	nop

00402598 <_Z16unprotect_eepromv>:

uint32_t unprotect_eeprom()
{
  402598:	b508      	push	{r3, lr}
  register uint8_t *p;

  eeprom_write_enable();
  40259a:	f7ff fbc9 	bl	401d30 <_Z19eeprom_write_enablev>

  p = Spi_tx_buf;
  *p = 0x39; // Unprotect sector command
  40259e:	f240 1308 	movw	r3, #264	; 0x108
  4025a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4025a6:	2139      	movs	r1, #57	; 0x39
  *(p + 1) = 0;
  4025a8:	2200      	movs	r2, #0
  *(p + 2) = 0;
  *(p + 3) = 0; // 3 bytes address

  return spi_operation( p, Spi_rx_buf, 4 ) ;
  4025aa:	f503 6028 	add.w	r0, r3, #2688	; 0xa80
  register uint8_t *p;

  eeprom_write_enable();

  p = Spi_tx_buf;
  *p = 0x39; // Unprotect sector command
  4025ae:	f883 1a94 	strb.w	r1, [r3, #2708]	; 0xa94
  *(p + 1) = 0;
  *(p + 2) = 0;
  *(p + 3) = 0; // 3 bytes address

  return spi_operation( p, Spi_rx_buf, 4 ) ;
  4025b2:	4906      	ldr	r1, [pc, #24]	; (4025cc <_Z16unprotect_eepromv+0x34>)

  eeprom_write_enable();

  p = Spi_tx_buf;
  *p = 0x39; // Unprotect sector command
  *(p + 1) = 0;
  4025b4:	f883 2a95 	strb.w	r2, [r3, #2709]	; 0xa95
  *(p + 2) = 0;
  4025b8:	f883 2a96 	strb.w	r2, [r3, #2710]	; 0xa96
  *(p + 3) = 0; // 3 bytes address
  4025bc:	f883 2a97 	strb.w	r2, [r3, #2711]	; 0xa97

  return spi_operation( p, Spi_rx_buf, 4 ) ;
  4025c0:	3014      	adds	r0, #20
  4025c2:	2204      	movs	r2, #4
}
  4025c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  *p = 0x39; // Unprotect sector command
  *(p + 1) = 0;
  *(p + 2) = 0;
  *(p + 3) = 0; // 3 bytes address

  return spi_operation( p, Spi_rx_buf, 4 ) ;
  4025c8:	e514      	b.n	401ff4 <_Z13spi_operationPhS_m>
  4025ca:	bf00      	nop
  4025cc:	2000186c 	.word	0x2000186c

004025d0 <_Z9lcd_clearv>:
uint8_t lcd_buf[DISPLAY_W*DISPLAY_H/8];
#endif

void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
  4025d0:	4802      	ldr	r0, [pc, #8]	; (4025dc <_Z9lcd_clearv+0xc>)
  4025d2:	2100      	movs	r1, #0
  4025d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4025d8:	f00c bf3c 	b.w	40f454 <memset>
  4025dc:	20001884 	.word	0x20001884

004025e0 <_Z7lcd_imghhPKhhh>:
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
{
  4025e0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  4025e4:	7855      	ldrb	r5, [r2, #1]
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
{
  4025e6:	f89d 4014 	ldrb.w	r4, [sp, #20]
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  4025ea:	3507      	adds	r5, #7
  4025ec:	08ed      	lsrs	r5, r5, #3
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  4025ee:	f014 0f02 	tst.w	r4, #2
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
{
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  4025f2:	7816      	ldrb	r6, [r2, #0]
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  4025f4:	d12e      	bne.n	402654 <_Z7lcd_imghhPKhhh+0x74>
  4025f6:	f014 0401 	ands.w	r4, r4, #1
  4025fa:	d12d      	bne.n	402658 <_Z7lcd_imghhPKhhh+0x78>
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
  4025fc:	b33d      	cbz	r5, 40264e <_Z7lcd_imghhPKhhh+0x6e>
{
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  4025fe:	fb06 f303 	mul.w	r3, r6, r3
void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
  402602:	1e6f      	subs	r7, r5, #1
{
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  402604:	3202      	adds	r2, #2
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  402606:	08c9      	lsrs	r1, r1, #3
void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
  402608:	b2ff      	uxtb	r7, r7
  40260a:	f106 38ff 	add.w	r8, r6, #4294967295
{
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  40260e:	fb05 2303 	mla	r3, r5, r3, r2
void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
  402612:	187f      	adds	r7, r7, r1
  402614:	f100 0280 	add.w	r2, r0, #128	; 0x80
  402618:	fa5f f888 	uxtb.w	r8, r8
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
  40261c:	f8df c048 	ldr.w	ip, [pc, #72]	; 402668 <_Z7lcd_imghhPKhhh+0x88>
void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
  402620:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
  402624:	eb02 17c7 	add.w	r7, r2, r7, lsl #7
  402628:	f108 0801 	add.w	r8, r8, #1
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
    for (uint8_t i=0; i<w; i++){
  40262c:	b166      	cbz	r6, 402648 <_Z7lcd_imghhPKhhh+0x68>
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
  40262e:	eb0c 0100 	add.w	r1, ip, r0
void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
  402632:	eb03 0508 	add.w	r5, r3, r8
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
    for (uint8_t i=0; i<w; i++){
      uint8_t b = pgm_read_byte(q++);
  402636:	f813 2b01 	ldrb.w	r2, [r3], #1
      *p++ = inv ? ~b : b;
  40263a:	b10c      	cbz	r4, 402640 <_Z7lcd_imghhPKhhh+0x60>
  40263c:	43d2      	mvns	r2, r2
  40263e:	b2d2      	uxtb	r2, r2
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
    for (uint8_t i=0; i<w; i++){
  402640:	42ab      	cmp	r3, r5
      uint8_t b = pgm_read_byte(q++);
      *p++ = inv ? ~b : b;
  402642:	f801 2b01 	strb.w	r2, [r1], #1
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
    for (uint8_t i=0; i<w; i++){
  402646:	d1f6      	bne.n	402636 <_Z7lcd_imghhPKhhh+0x56>
  402648:	3080      	adds	r0, #128	; 0x80
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
  40264a:	42b8      	cmp	r0, r7
  40264c:	d1ee      	bne.n	40262c <_Z7lcd_imghhPKhhh+0x4c>
    for (uint8_t i=0; i<w; i++){
      uint8_t b = pgm_read_byte(q++);
      *p++ = inv ? ~b : b;
    }
  }
}
  40264e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  402652:	4770      	bx	lr
void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
{
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  402654:	2401      	movs	r4, #1
  402656:	e7d1      	b.n	4025fc <_Z7lcd_imghhPKhhh+0x1c>
  402658:	4c02      	ldr	r4, [pc, #8]	; (402664 <_Z7lcd_imghhPKhhh+0x84>)
  40265a:	f894 4a84 	ldrb.w	r4, [r4, #2692]	; 0xa84
  40265e:	f3c4 1480 	ubfx	r4, r4, #6, #1
  402662:	e7cb      	b.n	4025fc <_Z7lcd_imghhPKhhh+0x1c>
  402664:	20001200 	.word	0x20001200
  402668:	20001884 	.word	0x20001884

0040266c <_Z11lcd_putcAtthhhh>:
}

uint8_t lcd_lastPos;

void lcd_putcAtt(uint8_t x, uint8_t y, const unsigned char c, uint8_t mode)
{
  40266c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  uint8_t *p = &displayBuf[ y / 8 * DISPLAY_W + x ];

  const pm_uchar *q = &font_5x8_x20_x7f[ (c-0x20)*5];

  bool inv = false;
  if (mode & BLINK) {
  402670:	07dc      	lsls	r4, r3, #31
  402672:	d548      	bpl.n	402706 <_Z11lcd_putcAtthhhh+0x9a>
    if (BLINK_ON_PHASE) {
  402674:	4c56      	ldr	r4, [pc, #344]	; (4027d0 <_Z11lcd_putcAtthhhh+0x164>)
  402676:	f894 5a84 	ldrb.w	r5, [r4, #2692]	; 0xa84
  40267a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
  40267e:	d003      	beq.n	402688 <_Z11lcd_putcAtthhhh+0x1c>
      if (mode & INVERS)
  402680:	f013 0f02 	tst.w	r3, #2
  402684:	d03c      	beq.n	402700 <_Z11lcd_putcAtthhhh+0x94>
        inv = true;
  402686:	2501      	movs	r5, #1

uint8_t lcd_lastPos;

void lcd_putcAtt(uint8_t x, uint8_t y, const unsigned char c, uint8_t mode)
{
  uint8_t *p = &displayBuf[ y / 8 * DISPLAY_W + x ];
  402688:	08cc      	lsrs	r4, r1, #3
  40268a:	4e52      	ldr	r6, [pc, #328]	; (4027d4 <_Z11lcd_putcAtthhhh+0x168>)
  40268c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  }
  else if (mode & INVERS) {
    inv = true;
  }

  if(mode & DBLSIZE)
  402690:	075f      	lsls	r7, r3, #29

uint8_t lcd_lastPos;

void lcd_putcAtt(uint8_t x, uint8_t y, const unsigned char c, uint8_t mode)
{
  uint8_t *p = &displayBuf[ y / 8 * DISPLAY_W + x ];
  402692:	eb06 0400 	add.w	r4, r6, r0
  }
  else if (mode & INVERS) {
    inv = true;
  }

  if(mode & DBLSIZE)
  402696:	d540      	bpl.n	40271a <_Z11lcd_putcAtthhhh+0xae>
  {
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[((uint16_t)c-0x20)*20];
  402698:	494f      	ldr	r1, [pc, #316]	; (4027d8 <_Z11lcd_putcAtthhhh+0x16c>)
  40269a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40269e:	eb01 0782 	add.w	r7, r1, r2, lsl #2
    for (int8_t i=11; i>=0; i--) {
  4026a2:	200b      	movs	r0, #11

  if(mode & DBLSIZE)
  {
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[((uint16_t)c-0x20)*20];
  4026a4:	f5a7 7720 	sub.w	r7, r7, #640	; 0x280
  4026a8:	4602      	mov	r2, r0
  4026aa:	f506 6980 	add.w	r9, r6, #1024	; 0x400
    for (int8_t i=11; i>=0; i--) {
      if (mode & CONDENSED && i<=1) break;
  4026ae:	f003 0308 	and.w	r3, r3, #8
  4026b2:	e008      	b.n	4026c6 <_Z11lcd_putcAtthhhh+0x5a>
  4026b4:	1c19      	adds	r1, r3, #0
  4026b6:	bf18      	it	ne
  4026b8:	2101      	movne	r1, #1
  4026ba:	2a01      	cmp	r2, #1
  4026bc:	bfcc      	ite	gt
  4026be:	2100      	movgt	r1, #0
  4026c0:	f001 0101 	andle.w	r1, r1, #1
  4026c4:	b9e1      	cbnz	r1, 402700 <_Z11lcd_putcAtthhhh+0x94>
      uint8_t b1=0, b2=0;
  4026c6:	2100      	movs	r1, #0
      if (i>1) {
  4026c8:	2a01      	cmp	r2, #1
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[((uint16_t)c-0x20)*20];
    for (int8_t i=11; i>=0; i--) {
      if (mode & CONDENSED && i<=1) break;
      uint8_t b1=0, b2=0;
  4026ca:	468c      	mov	ip, r1
      if (i>1) {
        b1 = pgm_read_byte(q++); /*top byte*/
  4026cc:	bfc2      	ittt	gt
  4026ce:	f897 c000 	ldrbgt.w	ip, [r7]
        b2 = pgm_read_byte(q++); /*top byte*/
  4026d2:	7879      	ldrbgt	r1, [r7, #1]
  4026d4:	3702      	addgt	r7, #2
  if(mode & DBLSIZE)
  {
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[((uint16_t)c-0x20)*20];
    for (int8_t i=11; i>=0; i--) {
  4026d6:	3801      	subs	r0, #1
  4026d8:	b2c0      	uxtb	r0, r0
      }
      if(inv) {
        b1=~b1;
        b2=~b2;
      }   
      if(&p[DISPLAY_W+1] < DISPLAY_END) {
  4026da:	f104 0881 	add.w	r8, r4, #129	; 0x81
  if(mode & DBLSIZE)
  {
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[((uint16_t)c-0x20)*20];
    for (int8_t i=11; i>=0; i--) {
  4026de:	b242      	sxtb	r2, r0
      if (i>1) {
        b1 = pgm_read_byte(q++); /*top byte*/
        b2 = pgm_read_byte(q++); /*top byte*/
      }
      if(inv) {
        b1=~b1;
  4026e0:	ea6f 0a0c 	mvn.w	sl, ip
        b2=~b2;
  4026e4:	43ce      	mvns	r6, r1
      uint8_t b1=0, b2=0;
      if (i>1) {
        b1 = pgm_read_byte(q++); /*top byte*/
        b2 = pgm_read_byte(q++); /*top byte*/
      }
      if(inv) {
  4026e6:	b115      	cbz	r5, 4026ee <_Z11lcd_putcAtthhhh+0x82>
        b1=~b1;
  4026e8:	fa5f fc8a 	uxtb.w	ip, sl
        b2=~b2;
  4026ec:	b2f1      	uxtb	r1, r6
      }   
      if(&p[DISPLAY_W+1] < DISPLAY_END) {
  4026ee:	45c8      	cmp	r8, r9
        p[0]=b1;
  4026f0:	bf3e      	ittt	cc
  4026f2:	f884 c000 	strbcc.w	ip, [r4]
        p[DISPLAY_W] = b2;
  4026f6:	f884 1080 	strbcc.w	r1, [r4, #128]	; 0x80
        p++;
  4026fa:	3401      	addcc	r4, #1
  if(mode & DBLSIZE)
  {
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[((uint16_t)c-0x20)*20];
    for (int8_t i=11; i>=0; i--) {
  4026fc:	1c51      	adds	r1, r2, #1
  4026fe:	d1d9      	bne.n	4026b4 <_Z11lcd_putcAtthhhh+0x48>
          if (ym8) { uint8_t *r = p + DISPLAY_W; if (r<DISPLAY_END) *r = (*r & (~(0xff >> (8-ym8)))) + (b >> (8-ym8)); }
          p++;
        }
    }
  }
}
  402700:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  402704:	4770      	bx	lr

uint8_t lcd_lastPos;

void lcd_putcAtt(uint8_t x, uint8_t y, const unsigned char c, uint8_t mode)
{
  uint8_t *p = &displayBuf[ y / 8 * DISPLAY_W + x ];
  402706:	08cc      	lsrs	r4, r1, #3
  402708:	4e32      	ldr	r6, [pc, #200]	; (4027d4 <_Z11lcd_putcAtthhhh+0x168>)
  40270a:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  }
  else if (mode & INVERS) {
    inv = true;
  }

  if(mode & DBLSIZE)
  40270e:	075f      	lsls	r7, r3, #29
  }
}

uint8_t lcd_lastPos;

void lcd_putcAtt(uint8_t x, uint8_t y, const unsigned char c, uint8_t mode)
  402710:	f3c3 0540 	ubfx	r5, r3, #1, #1
{
  uint8_t *p = &displayBuf[ y / 8 * DISPLAY_W + x ];
  402714:	eb06 0400 	add.w	r4, r6, r0
  }
  else if (mode & INVERS) {
    inv = true;
  }

  if(mode & DBLSIZE)
  402718:	d4be      	bmi.n	402698 <_Z11lcd_putcAtthhhh+0x2c>
    }   
  }
  else {
    uint8_t condense=0;

    if (mode & CONDENSED) {
  40271a:	f013 0608 	ands.w	r6, r3, #8
  40271e:	d009      	beq.n	402734 <_Z11lcd_putcAtthhhh+0xc8>
        *p++ = inv ? ~0 : 0;
  402720:	4e2b      	ldr	r6, [pc, #172]	; (4027d0 <_Z11lcd_putcAtthhhh+0x164>)
  402722:	2d00      	cmp	r5, #0
  402724:	bf0c      	ite	eq
  402726:	462b      	moveq	r3, r5
  402728:	23ff      	movne	r3, #255	; 0xff
  40272a:	1830      	adds	r0, r6, r0
  40272c:	f880 3684 	strb.w	r3, [r0, #1668]	; 0x684
  402730:	3401      	adds	r4, #1
  402732:	2601      	movs	r6, #1
        condense=1;
    }

    uint8_t ym8 = (y % 8);
  402734:	f001 0107 	and.w	r1, r1, #7
        if (condense && i==4) {
            /*condense the letter by skipping column 4 */
            continue;
        }
        if (p<DISPLAY_END) {
          *p = (*p & (~(0xff << ym8))) + (b << ym8);
  402738:	f04f 0bff 	mov.w	fp, #255	; 0xff
          if (ym8) { uint8_t *r = p + DISPLAY_W; if (r<DISPLAY_END) *r = (*r & (~(0xff >> (8-ym8)))) + (b >> (8-ym8)); }
  40273c:	f1c1 0a08 	rsb	sl, r1, #8
        if (condense && i==4) {
            /*condense the letter by skipping column 4 */
            continue;
        }
        if (p<DISPLAY_END) {
          *p = (*p & (~(0xff << ym8))) + (b << ym8);
  402740:	fa0b f901 	lsl.w	r9, fp, r1
          if (ym8) { uint8_t *r = p + DISPLAY_W; if (r<DISPLAY_END) *r = (*r & (~(0xff >> (8-ym8)))) + (b >> (8-ym8)); }
  402744:	fa4b fb0a 	asr.w	fp, fp, sl

void lcd_putcAtt(uint8_t x, uint8_t y, const unsigned char c, uint8_t mode)
{
  uint8_t *p = &displayBuf[ y / 8 * DISPLAY_W + x ];

  const pm_uchar *q = &font_5x8_x20_x7f[ (c-0x20)*5];
  402748:	4824      	ldr	r0, [pc, #144]	; (4027dc <_Z11lcd_putcAtthhhh+0x170>)
  40274a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (condense && i==4) {
            /*condense the letter by skipping column 4 */
            continue;
        }
        if (p<DISPLAY_END) {
          *p = (*p & (~(0xff << ym8))) + (b << ym8);
  40274e:	ea6f 0909 	mvn.w	r9, r9
          if (ym8) { uint8_t *r = p + DISPLAY_W; if (r<DISPLAY_END) *r = (*r & (~(0xff >> (8-ym8)))) + (b >> (8-ym8)); }
  402752:	ea6f 0b0b 	mvn.w	fp, fp
        *p++ = inv ? ~0 : 0;
        condense=1;
    }

    uint8_t ym8 = (y % 8);
    for (int8_t i=5; i>=0; i--) {
  402756:	2305      	movs	r3, #5
        
        if (condense && i==4) {
            /*condense the letter by skipping column 4 */
            continue;
        }
        if (p<DISPLAY_END) {
  402758:	4f21      	ldr	r7, [pc, #132]	; (4027e0 <_Z11lcd_putcAtthhhh+0x174>)

void lcd_putcAtt(uint8_t x, uint8_t y, const unsigned char c, uint8_t mode)
{
  uint8_t *p = &displayBuf[ y / 8 * DISPLAY_W + x ];

  const pm_uchar *q = &font_5x8_x20_x7f[ (c-0x20)*5];
  40275a:	1812      	adds	r2, r2, r0
        if (condense && i==4) {
            /*condense the letter by skipping column 4 */
            continue;
        }
        if (p<DISPLAY_END) {
          *p = (*p & (~(0xff << ym8))) + (b << ym8);
  40275c:	fa5f f989 	uxtb.w	r9, r9
          if (ym8) { uint8_t *r = p + DISPLAY_W; if (r<DISPLAY_END) *r = (*r & (~(0xff >> (8-ym8)))) + (b >> (8-ym8)); }
  402760:	fa5f fb8b 	uxtb.w	fp, fp
  402764:	469c      	mov	ip, r3
        condense=1;
    }

    uint8_t ym8 = (y % 8);
    for (int8_t i=5; i>=0; i--) {
        uint8_t b = (i>0 ? pgm_read_byte(q++) : 0);
  402766:	4618      	mov	r0, r3
  402768:	b10b      	cbz	r3, 40276e <_Z11lcd_putcAtthhhh+0x102>
  40276a:	f812 0b01 	ldrb.w	r0, [r2], #1
        if (inv) b = ~b;
  40276e:	b10d      	cbz	r5, 402774 <_Z11lcd_putcAtthhhh+0x108>
  402770:	43c0      	mvns	r0, r0
  402772:	b2c0      	uxtb	r0, r0
        
        if (condense && i==4) {
  402774:	f1bc 0f04 	cmp.w	ip, #4
  402778:	bf14      	ite	ne
  40277a:	f04f 0c00 	movne.w	ip, #0
  40277e:	f006 0c01 	andeq.w	ip, r6, #1
  402782:	f1bc 0f00 	cmp.w	ip, #0
  402786:	d11a      	bne.n	4027be <_Z11lcd_putcAtthhhh+0x152>
            /*condense the letter by skipping column 4 */
            continue;
        }
        if (p<DISPLAY_END) {
  402788:	42bc      	cmp	r4, r7
  40278a:	d218      	bcs.n	4027be <_Z11lcd_putcAtthhhh+0x152>
          *p = (*p & (~(0xff << ym8))) + (b << ym8);
  40278c:	fa00 f801 	lsl.w	r8, r0, r1
  402790:	f894 c000 	ldrb.w	ip, [r4]
  402794:	ea0c 0c09 	and.w	ip, ip, r9
  402798:	44c4      	add	ip, r8
  40279a:	f884 c000 	strb.w	ip, [r4]
          if (ym8) { uint8_t *r = p + DISPLAY_W; if (r<DISPLAY_END) *r = (*r & (~(0xff >> (8-ym8)))) + (b >> (8-ym8)); }
  40279e:	b169      	cbz	r1, 4027bc <_Z11lcd_putcAtthhhh+0x150>
  4027a0:	f104 0c80 	add.w	ip, r4, #128	; 0x80
  4027a4:	45bc      	cmp	ip, r7
  4027a6:	bf3f      	itttt	cc
  4027a8:	fa40 f00a 	asrcc.w	r0, r0, sl
  4027ac:	f894 c080 	ldrbcc.w	ip, [r4, #128]	; 0x80
  4027b0:	ea0c 0c0b 	andcc.w	ip, ip, fp
  4027b4:	4460      	addcc	r0, ip
  4027b6:	bf38      	it	cc
  4027b8:	f884 0080 	strbcc.w	r0, [r4, #128]	; 0x80
          p++;
  4027bc:	3401      	adds	r4, #1
        *p++ = inv ? ~0 : 0;
        condense=1;
    }

    uint8_t ym8 = (y % 8);
    for (int8_t i=5; i>=0; i--) {
  4027be:	3b01      	subs	r3, #1
  4027c0:	b2db      	uxtb	r3, r3
  4027c2:	fa4f fc83 	sxtb.w	ip, r3
  4027c6:	f1bc 3fff 	cmp.w	ip, #4294967295
  4027ca:	d1cc      	bne.n	402766 <_Z11lcd_putcAtthhhh+0xfa>
  4027cc:	e798      	b.n	402700 <_Z11lcd_putcAtthhhh+0x94>
  4027ce:	bf00      	nop
  4027d0:	20001200 	.word	0x20001200
  4027d4:	20001884 	.word	0x20001884
  4027d8:	0040f97c 	.word	0x0040f97c
  4027dc:	0041005c 	.word	0x0041005c
  4027e0:	20001c84 	.word	0x20001c84

004027e4 <_Z8lcd_putchhh>:
  }
}

void lcd_putc(uint8_t x, uint8_t y, const unsigned char c)
{
  lcd_putcAtt(x,y,c,0);
  4027e4:	2300      	movs	r3, #0
  4027e6:	e741      	b.n	40266c <_Z11lcd_putcAtthhhh>

004027e8 <_Z12lcd_putsnAtthhPKchh>:
  length = pgm_read_byte(s++) ;
  lcd_putsnAtt(x,y,s+length*idx,length,flags);
}

void lcd_putsnAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t len,uint8_t mode)
{
  4027e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027ec:	461d      	mov	r5, r3
  4027ee:	4604      	mov	r4, r0
  4027f0:	4689      	mov	r9, r1
  4027f2:	f89d 8020 	ldrb.w	r8, [sp, #32]
  while(len!=0) {
  4027f6:	b303      	cbz	r3, 40283a <_Z12lcd_putsnAtthhPKchh+0x52>
  4027f8:	f008 0730 	and.w	r7, r8, #48	; 0x30
  uint8_t length;
  length = pgm_read_byte(s++) ;
  lcd_putsnAtt(x,y,s+length*idx,length,flags);
}

void lcd_putsnAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t len,uint8_t mode)
  4027fc:	1c56      	adds	r6, r2, #1
    }
    if (!c || x>DISPLAY_W-6) break;
    if (c >= 0x20) {
      lcd_putcAtt(x,y,c,mode);
      x += FW;
      if (mode&DBLSIZE) x += FW-1;
  4027fe:	f008 0a04 	and.w	sl, r8, #4

void lcd_putsnAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t len,uint8_t mode)
{
  while(len!=0) {
    unsigned char c;
    switch (mode & (BSS+ZCHAR)) {
  402802:	2f10      	cmp	r7, #16
  402804:	d001      	beq.n	40280a <_Z12lcd_putsnAtthhPKchh+0x22>
  402806:	2f20      	cmp	r7, #32
  402808:	d01c      	beq.n	402844 <_Z12lcd_putsnAtthhPKchh+0x5c>
        break;
      case ZCHAR:
        c = idx2char(*s);
        break;
      default:
        c = pgm_read_byte(s);
  40280a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
        break;
    }
    if (!c || x>DISPLAY_W-6) break;
  40280e:	2c7a      	cmp	r4, #122	; 0x7a
  402810:	bf94      	ite	ls
  402812:	2300      	movls	r3, #0
  402814:	2301      	movhi	r3, #1
  402816:	2a00      	cmp	r2, #0
  402818:	bf08      	it	eq
  40281a:	f043 0301 	orreq.w	r3, r3, #1
  40281e:	b963      	cbnz	r3, 40283a <_Z12lcd_putsnAtthhPKchh+0x52>
    if (c >= 0x20) {
  402820:	2a1f      	cmp	r2, #31
      lcd_putcAtt(x,y,c,mode);
      x += FW;
      if (mode&DBLSIZE) x += FW-1;
    }
    else {
      x += (c*FW);
  402822:	bf9e      	ittt	ls
  402824:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
  402828:	eb04 0442 	addls.w	r4, r4, r2, lsl #1
  40282c:	b2e4      	uxtbls	r4, r4
      default:
        c = pgm_read_byte(s);
        break;
    }
    if (!c || x>DISPLAY_W-6) break;
    if (c >= 0x20) {
  40282e:	d80f      	bhi.n	402850 <_Z12lcd_putsnAtthhPKchh+0x68>
    }
    else {
      x += (c*FW);
    }
    s++;
    len--;
  402830:	3d01      	subs	r5, #1
  402832:	b2ed      	uxtb	r5, r5
  402834:	3601      	adds	r6, #1
  lcd_putsnAtt(x,y,s+length*idx,length,flags);
}

void lcd_putsnAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t len,uint8_t mode)
{
  while(len!=0) {
  402836:	2d00      	cmp	r5, #0
  402838:	d1e3      	bne.n	402802 <_Z12lcd_putsnAtthhPKchh+0x1a>
      x += (c*FW);
    }
    s++;
    len--;
  }
  lcd_lastPos = x;
  40283a:	4b0c      	ldr	r3, [pc, #48]	; (40286c <_Z12lcd_putsnAtthhPKchh+0x84>)
  40283c:	f883 4a85 	strb.w	r4, [r3, #2693]	; 0xa85
}
  402840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (mode & (BSS+ZCHAR)) {
      case BSS:
        c = *s;
        break;
      case ZCHAR:
        c = idx2char(*s);
  402844:	f916 0c01 	ldrsb.w	r0, [r6, #-1]
  402848:	f7fe f820 	bl	40088c <_Z8idx2chara>
  40284c:	4602      	mov	r2, r0
        break;
  40284e:	e7de      	b.n	40280e <_Z12lcd_putsnAtthhPKchh+0x26>
        c = pgm_read_byte(s);
        break;
    }
    if (!c || x>DISPLAY_W-6) break;
    if (c >= 0x20) {
      lcd_putcAtt(x,y,c,mode);
  402850:	4620      	mov	r0, r4
  402852:	4649      	mov	r1, r9
  402854:	4643      	mov	r3, r8
  402856:	f7ff ff09 	bl	40266c <_Z11lcd_putcAtthhhh>
      x += FW;
      if (mode&DBLSIZE) x += FW-1;
  40285a:	f1ba 0f00 	cmp.w	sl, #0
  40285e:	d102      	bne.n	402866 <_Z12lcd_putsnAtthhPKchh+0x7e>
        break;
    }
    if (!c || x>DISPLAY_W-6) break;
    if (c >= 0x20) {
      lcd_putcAtt(x,y,c,mode);
      x += FW;
  402860:	3406      	adds	r4, #6
  402862:	b2e4      	uxtb	r4, r4
  402864:	e7e4      	b.n	402830 <_Z12lcd_putsnAtthhPKchh+0x48>
      if (mode&DBLSIZE) x += FW-1;
  402866:	340b      	adds	r4, #11
  402868:	b2e4      	uxtb	r4, r4
  40286a:	e7e1      	b.n	402830 <_Z12lcd_putsnAtthhPKchh+0x48>
  40286c:	20001200 	.word	0x20001200

00402870 <_Z12lcd_putsiAtthhPKchh>:
{
  lcd_putcAtt(x,y,c,0);
}

void lcd_putsiAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t idx, uint8_t flags)
{
  402870:	b410      	push	{r4}
  uint8_t length;
  length = pgm_read_byte(s++) ;
  402872:	f812 4b01 	ldrb.w	r4, [r2], #1
  lcd_putsnAtt(x,y,s+length*idx,length,flags);
  402876:	fb03 2204 	mla	r2, r3, r4, r2
{
  lcd_putcAtt(x,y,c,0);
}

void lcd_putsiAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t idx, uint8_t flags)
{
  40287a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  uint8_t length;
  length = pgm_read_byte(s++) ;
  lcd_putsnAtt(x,y,s+length*idx,length,flags);
  40287e:	9301      	str	r3, [sp, #4]
  402880:	4623      	mov	r3, r4
}
  402882:	bc10      	pop	{r4}

void lcd_putsiAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t idx, uint8_t flags)
{
  uint8_t length;
  length = pgm_read_byte(s++) ;
  lcd_putsnAtt(x,y,s+length*idx,length,flags);
  402884:	e7b0      	b.n	4027e8 <_Z12lcd_putsnAtthhPKchh>
  402886:	bf00      	nop

00402888 <_Z14menu_lcd_onoffhhhh>:
uint8_t s_noScroll;

int16_t g_chans512[NUM_CHNOUT]; // TODO not here!

void menu_lcd_onoff( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
{
  402888:	b510      	push	{r4, lr}
  lcd_putsiAtt(x, y, STR_OFFON, value, mode ? INVERS:0) ;
  40288a:	2b00      	cmp	r3, #0
uint8_t s_noScroll;

int16_t g_chans512[NUM_CHNOUT]; // TODO not here!

void menu_lcd_onoff( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
{
  40288c:	4614      	mov	r4, r2
  lcd_putsiAtt(x, y, STR_OFFON, value, mode ? INVERS:0) ;
  40288e:	bf18      	it	ne
  402890:	2302      	movne	r3, #2
uint8_t s_noScroll;

int16_t g_chans512[NUM_CHNOUT]; // TODO not here!

void menu_lcd_onoff( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
{
  402892:	b082      	sub	sp, #8
  lcd_putsiAtt(x, y, STR_OFFON, value, mode ? INVERS:0) ;
  402894:	9300      	str	r3, [sp, #0]
  402896:	4a03      	ldr	r2, [pc, #12]	; (4028a4 <_Z14menu_lcd_onoffhhhh+0x1c>)
  402898:	4623      	mov	r3, r4
  40289a:	f7ff ffe9 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
}
  40289e:	b002      	add	sp, #8
  4028a0:	bd10      	pop	{r4, pc}
  4028a2:	bf00      	nop
  4028a4:	004102dc 	.word	0x004102dc

004028a8 <_Z9lcd_putsnhhPKch>:
  }
  lcd_lastPos = x;
}

void lcd_putsn(uint8_t x,uint8_t y,const pm_char * s,uint8_t len)
{
  4028a8:	b510      	push	{r4, lr}
  lcd_putsnAtt(x, y, s, len, 0);
  4028aa:	2400      	movs	r4, #0
  }
  lcd_lastPos = x;
}

void lcd_putsn(uint8_t x,uint8_t y,const pm_char * s,uint8_t len)
{
  4028ac:	b082      	sub	sp, #8
  lcd_putsnAtt(x, y, s, len, 0);
  4028ae:	9400      	str	r4, [sp, #0]
  4028b0:	f7ff ff9a 	bl	4027e8 <_Z12lcd_putsnAtthhPKchh>
}
  4028b4:	b002      	add	sp, #8
  4028b6:	bd10      	pop	{r4, pc}

004028b8 <_Z11lcd_putsAtthhPKch>:

void lcd_putsAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t mode)
{
  4028b8:	b500      	push	{lr}
  4028ba:	b083      	sub	sp, #12
  lcd_putsnAtt(x, y, s, 255, mode);
  4028bc:	9300      	str	r3, [sp, #0]
  4028be:	23ff      	movs	r3, #255	; 0xff
  4028c0:	f7ff ff92 	bl	4027e8 <_Z12lcd_putsnAtthhPKchh>
}
  4028c4:	b003      	add	sp, #12
  4028c6:	bd00      	pop	{pc}

004028c8 <_Z8lcd_putshhPKc>:

void lcd_puts(uint8_t x,uint8_t y,const pm_char * s)
{
  lcd_putsAtt( x, y, s, 0);
  4028c8:	2300      	movs	r3, #0
  4028ca:	e7f5      	b.n	4028b8 <_Z11lcd_putsAtthhPKch>

004028cc <_Z12lcd_putsLefthPKc>:
}

void lcd_putsLeft(uint8_t y, const pm_char * s)
{
  4028cc:	460a      	mov	r2, r1
  4028ce:	4601      	mov	r1, r0
  lcd_putsAtt(0, y, s, 0);
  4028d0:	2000      	movs	r0, #0
  4028d2:	4603      	mov	r3, r0
  4028d4:	e7f0      	b.n	4028b8 <_Z11lcd_putsAtthhPKch>
  4028d6:	bf00      	nop

004028d8 <_Z11lcd_outhex4hht>:
}

void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
  4028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  x+=FWNUM*4;
  4028da:	f100 0414 	add.w	r4, r0, #20
{
  lcd_putsAtt(0, y, s, 0);
}

void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
  4028de:	4606      	mov	r6, r0
  4028e0:	460f      	mov	r7, r1
  4028e2:	4615      	mov	r5, r2
  x+=FWNUM*4;
  4028e4:	b2e4      	uxtb	r4, r4
  for(int i=0; i<4; i++)
  {
    x-=FWNUM;
    char c = val & 0xf;
  4028e6:	f005 020f 	and.w	r2, r5, #15
void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
  x+=FWNUM*4;
  for(int i=0; i<4; i++)
  {
    x-=FWNUM;
  4028ea:	3c05      	subs	r4, #5
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
  4028ec:	2a09      	cmp	r2, #9
void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
  x+=FWNUM*4;
  for(int i=0; i<4; i++)
  {
    x-=FWNUM;
  4028ee:	b2e4      	uxtb	r4, r4
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
  4028f0:	d909      	bls.n	402906 <_Z11lcd_outhex4hht+0x2e>
  4028f2:	3237      	adds	r2, #55	; 0x37
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
  4028f4:	2308      	movs	r3, #8
  4028f6:	4620      	mov	r0, r4
  4028f8:	4639      	mov	r1, r7
  4028fa:	f7ff feb7 	bl	40266c <_Z11lcd_putcAtthhhh>
    val>>=4;
  4028fe:	092d      	lsrs	r5, r5, #4
}

void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
  x+=FWNUM*4;
  for(int i=0; i<4; i++)
  402900:	42b4      	cmp	r4, r6
  402902:	d1f0      	bne.n	4028e6 <_Z11lcd_outhex4hht+0xe>
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    val>>=4;
  }
}
  402904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  x+=FWNUM*4;
  for(int i=0; i<4; i++)
  {
    x-=FWNUM;
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
  402906:	3230      	adds	r2, #48	; 0x30
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
  402908:	2300      	movs	r3, #0
  40290a:	e7f4      	b.n	4028f6 <_Z11lcd_outhex4hht+0x1e>

0040290c <_Z8lcd_maskPhhh>:

void lcd_mask(uint8_t *p, uint8_t mask, uint8_t att)
{
  assert(p >= displayBuf && p < DISPLAY_END);

  if (att & BLACK)
  40290c:	f012 0f02 	tst.w	r2, #2
    *p |= mask;
  402910:	7803      	ldrb	r3, [r0, #0]

void lcd_mask(uint8_t *p, uint8_t mask, uint8_t att)
{
  assert(p >= displayBuf && p < DISPLAY_END);

  if (att & BLACK)
  402912:	d106      	bne.n	402922 <_Z8lcd_maskPhhh+0x16>
    *p |= mask;
  else if (att & WHITE)
  402914:	0752      	lsls	r2, r2, #29
    *p &= ~mask;
  402916:	bf4c      	ite	mi
  402918:	ea23 0101 	bicmi.w	r1, r3, r1
  else
    *p ^= mask;
  40291c:	4059      	eorpl	r1, r3
  40291e:	7001      	strb	r1, [r0, #0]
  402920:	4770      	bx	lr
void lcd_mask(uint8_t *p, uint8_t mask, uint8_t att)
{
  assert(p >= displayBuf && p < DISPLAY_END);

  if (att & BLACK)
    *p |= mask;
  402922:	4319      	orrs	r1, r3
  402924:	7001      	strb	r1, [r0, #0]
  402926:	4770      	bx	lr

00402928 <_Z8lcd_plothhh>:
    *p ^= mask;
}

void lcd_plot(uint8_t x,uint8_t y, uint8_t att)
{
  uint8_t *p   = &displayBuf[ y / 8 * DISPLAY_W + x ];
  402928:	4b09      	ldr	r3, [pc, #36]	; (402950 <_Z8lcd_plothhh+0x28>)
  else
    *p ^= mask;
}

void lcd_plot(uint8_t x,uint8_t y, uint8_t att)
{
  40292a:	b410      	push	{r4}
  uint8_t *p   = &displayBuf[ y / 8 * DISPLAY_W + x ];
  40292c:	08cc      	lsrs	r4, r1, #3
  40292e:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  402932:	1818      	adds	r0, r3, r0
  if (p<DISPLAY_END)
  402934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  402938:	4298      	cmp	r0, r3
  40293a:	d301      	bcc.n	402940 <_Z8lcd_plothhh+0x18>
    lcd_mask(p, BITMASK(y%8), att);
}
  40293c:	bc10      	pop	{r4}
  40293e:	4770      	bx	lr

void lcd_plot(uint8_t x,uint8_t y, uint8_t att)
{
  uint8_t *p   = &displayBuf[ y / 8 * DISPLAY_W + x ];
  if (p<DISPLAY_END)
    lcd_mask(p, BITMASK(y%8), att);
  402940:	2301      	movs	r3, #1
  402942:	f001 0107 	and.w	r1, r1, #7
  402946:	fa13 f101 	lsls.w	r1, r3, r1
  40294a:	b2c9      	uxtb	r1, r1
}
  40294c:	bc10      	pop	{r4}

void lcd_plot(uint8_t x,uint8_t y, uint8_t att)
{
  uint8_t *p   = &displayBuf[ y / 8 * DISPLAY_W + x ];
  if (p<DISPLAY_END)
    lcd_mask(p, BITMASK(y%8), att);
  40294e:	e7dd      	b.n	40290c <_Z8lcd_maskPhhh>
  402950:	20001884 	.word	0x20001884

00402954 <_Z13lcd_hlineStipahhhh>:
}

void lcd_hlineStip(int8_t x, uint8_t y, uint8_t w, uint8_t pat, uint8_t att)
{
  402954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (y >= DISPLAY_H) return;
  402958:	293f      	cmp	r1, #63	; 0x3f
  if (p<DISPLAY_END)
    lcd_mask(p, BITMASK(y%8), att);
}

void lcd_hlineStip(int8_t x, uint8_t y, uint8_t w, uint8_t pat, uint8_t att)
{
  40295a:	4614      	mov	r4, r2
  40295c:	461d      	mov	r5, r3
  40295e:	f89d 7018 	ldrb.w	r7, [sp, #24]
  if (y >= DISPLAY_H) return;
  402962:	d829      	bhi.n	4029b8 <_Z13lcd_hlineStipahhhh+0x64>
  if (x<0) { w+=x; x=0; }
  402964:	2800      	cmp	r0, #0
  402966:	bfa8      	it	ge
  402968:	4603      	movge	r3, r0
  40296a:	db30      	blt.n	4029ce <_Z13lcd_hlineStipahhhh+0x7a>
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }
  40296c:	18e2      	adds	r2, r4, r3
  40296e:	2a80      	cmp	r2, #128	; 0x80

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  402970:	f04f 0801 	mov.w	r8, #1
  402974:	f001 0207 	and.w	r2, r1, #7
  402978:	fa08 f802 	lsl.w	r8, r8, r2

void lcd_hlineStip(int8_t x, uint8_t y, uint8_t w, uint8_t pat, uint8_t att)
{
  if (y >= DISPLAY_H) return;
  if (x<0) { w+=x; x=0; }
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }
  40297c:	dc1e      	bgt.n	4029bc <_Z13lcd_hlineStipahhhh+0x68>

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  40297e:	fa5f f888 	uxtb.w	r8, r8
  while(w) {
  402982:	b1cc      	cbz	r4, 4029b8 <_Z13lcd_hlineStipahhhh+0x64>
{
  if (y >= DISPLAY_H) return;
  if (x<0) { w+=x; x=0; }
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  402984:	08c9      	lsrs	r1, r1, #3
  402986:	4e19      	ldr	r6, [pc, #100]	; (4029ec <_Z13lcd_hlineStipahhhh+0x98>)
  402988:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40298c:	18f6      	adds	r6, r6, r3
  40298e:	e004      	b.n	40299a <_Z13lcd_hlineStipahhhh+0x46>
      pat = (pat >> 1) | 0x80;
    }
    else {
      pat = pat >> 1;
    }
    w--;
  402990:	3c01      	subs	r4, #1
  402992:	b2e4      	uxtb	r4, r4
    if(pat&1) {
      lcd_mask(p, msk, att);
      pat = (pat >> 1) | 0x80;
    }
    else {
      pat = pat >> 1;
  402994:	086d      	lsrs	r5, r5, #1
    }
    w--;
    p++;
  402996:	3601      	adds	r6, #1
  if (x<0) { w+=x; x=0; }
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  while(w) {
  402998:	b174      	cbz	r4, 4029b8 <_Z13lcd_hlineStipahhhh+0x64>
    if(pat&1) {
  40299a:	07eb      	lsls	r3, r5, #31
  40299c:	d5f8      	bpl.n	402990 <_Z13lcd_hlineStipahhhh+0x3c>
      pat = (pat >> 1) | 0x80;
    }
    else {
      pat = pat >> 1;
    }
    w--;
  40299e:	3c01      	subs	r4, #1

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  while(w) {
    if(pat&1) {
      lcd_mask(p, msk, att);
  4029a0:	4630      	mov	r0, r6
  4029a2:	4641      	mov	r1, r8
  4029a4:	463a      	mov	r2, r7
      pat = (pat >> 1) | 0x80;
  4029a6:	106d      	asrs	r5, r5, #1
    }
    else {
      pat = pat >> 1;
    }
    w--;
  4029a8:	b2e4      	uxtb	r4, r4

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  while(w) {
    if(pat&1) {
      lcd_mask(p, msk, att);
  4029aa:	f7ff ffaf 	bl	40290c <_Z8lcd_maskPhhh>
      pat = (pat >> 1) | 0x80;
  4029ae:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    }
    else {
      pat = pat >> 1;
    }
    w--;
    p++;
  4029b2:	3601      	adds	r6, #1
  if (x<0) { w+=x; x=0; }
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  while(w) {
  4029b4:	2c00      	cmp	r4, #0
  4029b6:	d1f0      	bne.n	40299a <_Z13lcd_hlineStipahhhh+0x46>
  4029b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void lcd_hlineStip(int8_t x, uint8_t y, uint8_t w, uint8_t pat, uint8_t att)
{
  if (y >= DISPLAY_H) return;
  if (x<0) { w+=x; x=0; }
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }
  4029bc:	f64f 7480 	movw	r4, #65408	; 0xff80
  4029c0:	f6cf 74ff 	movt	r4, #65535	; 0xffff
  4029c4:	1a24      	subs	r4, r4, r0
  4029c6:	b2e4      	uxtb	r4, r4

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  4029c8:	fa5f f888 	uxtb.w	r8, r8
  4029cc:	e7da      	b.n	402984 <_Z13lcd_hlineStipahhhh+0x30>
}

void lcd_hlineStip(int8_t x, uint8_t y, uint8_t w, uint8_t pat, uint8_t att)
{
  if (y >= DISPLAY_H) return;
  if (x<0) { w+=x; x=0; }
  4029ce:	1814      	adds	r4, r2, r0
  4029d0:	2300      	movs	r3, #0
  4029d2:	b2e4      	uxtb	r4, r4
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }
  4029d4:	18e2      	adds	r2, r4, r3
  4029d6:	2a80      	cmp	r2, #128	; 0x80

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  4029d8:	f04f 0801 	mov.w	r8, #1
  4029dc:	f001 0207 	and.w	r2, r1, #7
}

void lcd_hlineStip(int8_t x, uint8_t y, uint8_t w, uint8_t pat, uint8_t att)
{
  if (y >= DISPLAY_H) return;
  if (x<0) { w+=x; x=0; }
  4029e0:	4618      	mov	r0, r3
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  4029e2:	fa08 f802 	lsl.w	r8, r8, r2

void lcd_hlineStip(int8_t x, uint8_t y, uint8_t w, uint8_t pat, uint8_t att)
{
  if (y >= DISPLAY_H) return;
  if (x<0) { w+=x; x=0; }
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }
  4029e6:	ddca      	ble.n	40297e <_Z13lcd_hlineStipahhhh+0x2a>
  4029e8:	e7e8      	b.n	4029bc <_Z13lcd_hlineStipahhhh+0x68>
  4029ea:	bf00      	nop
  4029ec:	20001884 	.word	0x20001884

004029f0 <_Z9lcd_hlinehhhh.constprop.52>:
    w--;
    p++;
  }
}

void lcd_hline(uint8_t x, uint8_t y, uint8_t w, uint8_t att)
  4029f0:	b500      	push	{lr}
{
  lcd_hlineStip(x, y, w, 0xff, att);
  4029f2:	2300      	movs	r3, #0
    w--;
    p++;
  }
}

void lcd_hline(uint8_t x, uint8_t y, uint8_t w, uint8_t att)
  4029f4:	b083      	sub	sp, #12
{
  lcd_hlineStip(x, y, w, 0xff, att);
  4029f6:	9300      	str	r3, [sp, #0]
  4029f8:	b240      	sxtb	r0, r0
  4029fa:	23ff      	movs	r3, #255	; 0xff
  4029fc:	f7ff ffaa 	bl	402954 <_Z13lcd_hlineStipahhhh>
}
  402a00:	b003      	add	sp, #12
  402a02:	bd00      	pop	{pc}

00402a04 <_Z9lcd_hlinehhhh>:
    p++;
  }
}

void lcd_hline(uint8_t x, uint8_t y, uint8_t w, uint8_t att)
{
  402a04:	b500      	push	{lr}
  402a06:	b083      	sub	sp, #12
  lcd_hlineStip(x, y, w, 0xff, att);
  402a08:	9300      	str	r3, [sp, #0]
  402a0a:	b240      	sxtb	r0, r0
  402a0c:	23ff      	movs	r3, #255	; 0xff
  402a0e:	f7ff ffa1 	bl	402954 <_Z13lcd_hlineStipahhhh>
}
  402a12:	b003      	add	sp, #12
  402a14:	bd00      	pop	{pc}
  402a16:	bf00      	nop

00402a18 <_Z13lcd_vlineStiphaah>:

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
{
  if (x >= DISPLAY_W) return;
  402a18:	f010 0f80 	tst.w	r0, #128	; 0x80
{
  lcd_hlineStip(x, y, w, 0xff, att);
}

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
{
  402a1c:	b4f0      	push	{r4, r5, r6, r7}
  if (x >= DISPLAY_W) return;
  402a1e:	d138      	bne.n	402a92 <_Z13lcd_vlineStiphaah+0x7a>
  if (h<0) { y+=h; h=-h; }
  402a20:	2a00      	cmp	r2, #0
  402a22:	db54      	blt.n	402ace <_Z13lcd_vlineStiphaah+0xb6>
  if (y<0) { h+=y; y=0; }
  402a24:	2900      	cmp	r1, #0
  402a26:	db4b      	blt.n	402ac0 <_Z13lcd_vlineStiphaah+0xa8>
  402a28:	10ce      	asrs	r6, r1, #3
  402a2a:	460c      	mov	r4, r1
  402a2c:	01f6      	lsls	r6, r6, #7
  402a2e:	f001 0507 	and.w	r5, r1, #7
  if (y+h > DISPLAY_H) { h = DISPLAY_H - y; }
  402a32:	1914      	adds	r4, r2, r4
  402a34:	2c40      	cmp	r4, #64	; 0x40
  402a36:	bfc4      	itt	gt
  402a38:	f1c1 0240 	rsbgt	r2, r1, #64	; 0x40
  402a3c:	b252      	sxtbgt	r2, r2

  if (pat==DOTTED && !(y%2))
  402a3e:	2b55      	cmp	r3, #85	; 0x55
  402a40:	d039      	beq.n	402ab6 <_Z13lcd_vlineStiphaah+0x9e>
    pat = ~pat;

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  402a42:	4926      	ldr	r1, [pc, #152]	; (402adc <_Z13lcd_vlineStiphaah+0xc4>)
  402a44:	1980      	adds	r0, r0, r6
  402a46:	f501 64d0 	add.w	r4, r1, #1664	; 0x680
  402a4a:	3404      	adds	r4, #4
  402a4c:	1824      	adds	r4, r4, r0
  y = y % 8;
  if (y) {
  402a4e:	bb15      	cbnz	r5, 402a96 <_Z13lcd_vlineStiphaah+0x7e>
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(y)-1) & pat;
    p += DISPLAY_W;
    h -= 8-y;
  }
  while (h>0) {
  402a50:	2a00      	cmp	r2, #0
  402a52:	dd0c      	ble.n	402a6e <_Z13lcd_vlineStiphaah+0x56>
void lcd_hline(uint8_t x, uint8_t y, uint8_t w, uint8_t att)
{
  lcd_hlineStip(x, y, w, 0xff, att);
}

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
  402a54:	f104 0080 	add.w	r0, r4, #128	; 0x80
    p += DISPLAY_W;
    h -= 8-y;
  }
  while (h>0) {
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= pat;
  402a58:	f810 4c80 	ldrb.w	r4, [r0, #-128]
void lcd_hline(uint8_t x, uint8_t y, uint8_t w, uint8_t att)
{
  lcd_hlineStip(x, y, w, 0xff, att);
}

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
  402a5c:	3a08      	subs	r2, #8
    p += DISPLAY_W;
    h -= 8-y;
  }
  while (h>0) {
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= pat;
  402a5e:	405c      	eors	r4, r3
void lcd_hline(uint8_t x, uint8_t y, uint8_t w, uint8_t att)
{
  lcd_hlineStip(x, y, w, 0xff, att);
}

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
  402a60:	b252      	sxtb	r2, r2
    p += DISPLAY_W;
    h -= 8-y;
  }
  while (h>0) {
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= pat;
  402a62:	f800 4c80 	strb.w	r4, [r0, #-128]
void lcd_hline(uint8_t x, uint8_t y, uint8_t w, uint8_t att)
{
  lcd_hlineStip(x, y, w, 0xff, att);
}

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
  402a66:	4604      	mov	r4, r0
  402a68:	3080      	adds	r0, #128	; 0x80
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(y)-1) & pat;
    p += DISPLAY_W;
    h -= 8-y;
  }
  while (h>0) {
  402a6a:	2a00      	cmp	r2, #0
  402a6c:	dcf4      	bgt.n	402a58 <_Z13lcd_vlineStiphaah+0x40>
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= pat;
    p += DISPLAY_W;
    h -= 8;
  }
  h = (h+8) % 8; // TODO optim
  402a6e:	3208      	adds	r2, #8
  402a70:	17d0      	asrs	r0, r2, #31
  402a72:	0f40      	lsrs	r0, r0, #29
  402a74:	1812      	adds	r2, r2, r0
  402a76:	f002 0207 	and.w	r2, r2, #7
  if (h) {
  402a7a:	1a10      	subs	r0, r2, r0
  402a7c:	d009      	beq.n	402a92 <_Z13lcd_vlineStiphaah+0x7a>
    p -= DISPLAY_W;
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(h)-1) & pat;
  402a7e:	f04f 32ff 	mov.w	r2, #4294967295
  402a82:	fa12 f000 	lsls.w	r0, r2, r0
  402a86:	f814 1c80 	ldrb.w	r1, [r4, #-128]
  402a8a:	4003      	ands	r3, r0
  402a8c:	404b      	eors	r3, r1
  402a8e:	f804 3c80 	strb.w	r3, [r4, #-128]
  }
}
  402a92:	bcf0      	pop	{r4, r5, r6, r7}
  402a94:	4770      	bx	lr

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  y = y % 8;
  if (y) {
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(y)-1) & pat;
  402a96:	f04f 37ff 	mov.w	r7, #4294967295
  402a9a:	40af      	lsls	r7, r5
  402a9c:	1808      	adds	r0, r1, r0
  402a9e:	f890 6684 	ldrb.w	r6, [r0, #1668]	; 0x684
  402aa2:	ea03 0107 	and.w	r1, r3, r7
    p += DISPLAY_W;
    h -= 8-y;
  402aa6:	3d08      	subs	r5, #8

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  y = y % 8;
  if (y) {
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(y)-1) & pat;
  402aa8:	4071      	eors	r1, r6
    p += DISPLAY_W;
    h -= 8-y;
  402aaa:	18aa      	adds	r2, r5, r2

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  y = y % 8;
  if (y) {
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(y)-1) & pat;
  402aac:	f880 1684 	strb.w	r1, [r0, #1668]	; 0x684
    p += DISPLAY_W;
  402ab0:	3480      	adds	r4, #128	; 0x80
    h -= 8-y;
  402ab2:	b252      	sxtb	r2, r2
  402ab4:	e7cc      	b.n	402a50 <_Z13lcd_vlineStiphaah+0x38>
  if (h<0) { y+=h; h=-h; }
  if (y<0) { h+=y; y=0; }
  if (y+h > DISPLAY_H) { h = DISPLAY_H - y; }

  if (pat==DOTTED && !(y%2))
    pat = ~pat;
  402ab6:	f011 0f01 	tst.w	r1, #1
  402aba:	bf08      	it	eq
  402abc:	23aa      	moveq	r3, #170	; 0xaa
  402abe:	e7c0      	b.n	402a42 <_Z13lcd_vlineStiphaah+0x2a>

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
{
  if (x >= DISPLAY_W) return;
  if (h<0) { y+=h; h=-h; }
  if (y<0) { h+=y; y=0; }
  402ac0:	2500      	movs	r5, #0
  402ac2:	188a      	adds	r2, r1, r2
  402ac4:	b252      	sxtb	r2, r2
  402ac6:	462e      	mov	r6, r5
  402ac8:	462c      	mov	r4, r5
  402aca:	4629      	mov	r1, r5
  402acc:	e7b1      	b.n	402a32 <_Z13lcd_vlineStiphaah+0x1a>
}

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
{
  if (x >= DISPLAY_W) return;
  if (h<0) { y+=h; h=-h; }
  402ace:	b2d2      	uxtb	r2, r2
  402ad0:	1851      	adds	r1, r2, r1
  402ad2:	4252      	negs	r2, r2
  402ad4:	b249      	sxtb	r1, r1
  402ad6:	b252      	sxtb	r2, r2
  402ad8:	e7a4      	b.n	402a24 <_Z13lcd_vlineStiphaah+0xc>
  402ada:	bf00      	nop
  402adc:	20001200 	.word	0x20001200

00402ae0 <_Z9DrawCurvePFssE>:
{
  return intpol(x, s_curveChan);
}

void DrawCurve(FnFuncP fn)
{
  402ae0:	b570      	push	{r4, r5, r6, lr}
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
  402ae2:	2100      	movs	r1, #0
{
  return intpol(x, s_curveChan);
}

void DrawCurve(FnFuncP fn)
{
  402ae4:	b082      	sub	sp, #8
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
  402ae6:	2240      	movs	r2, #64	; 0x40
  402ae8:	23ee      	movs	r3, #238	; 0xee
{
  return intpol(x, s_curveChan);
}

void DrawCurve(FnFuncP fn)
{
  402aea:	4604      	mov	r4, r0
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
  402aec:	205e      	movs	r0, #94	; 0x5e
  402aee:	f7ff ff93 	bl	402a18 <_Z13lcd_vlineStiphaah>
  lcd_hlineStip(X0-WCHART, Y0, WCHART*2, 0xee);
  402af2:	2500      	movs	r5, #0
  402af4:	203e      	movs	r0, #62	; 0x3e
  402af6:	2120      	movs	r1, #32
  402af8:	2240      	movs	r2, #64	; 0x40
  402afa:	23ee      	movs	r3, #238	; 0xee
  402afc:	9500      	str	r5, [sp, #0]
  402afe:	f7ff ff29 	bl	402954 <_Z13lcd_hlineStipahhhh>
  402b02:	263f      	movs	r6, #63	; 0x3f
  402b04:	f64f 4520 	movw	r5, #64544	; 0xfc20

  for (int8_t xv=-WCHART+1; xv<WCHART; xv++) {
    uint16_t yv = (RESX + fn(xv * (RESX/WCHART))) / 2;
  402b08:	b228      	sxth	r0, r5
  402b0a:	47a0      	blx	r4
  402b0c:	f500 6180 	add.w	r1, r0, #1024	; 0x400
  402b10:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
  402b14:	f3c1 014f 	ubfx	r1, r1, #1, #16
  402b18:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
  402b1c:	f501 737e 	add.w	r3, r1, #1016	; 0x3f8
  402b20:	3307      	adds	r3, #7
  402b22:	ea31 0121 	bics.w	r1, r1, r1, asr #32
  402b26:	bf28      	it	cs
  402b28:	4619      	movcs	r1, r3
  402b2a:	1289      	asrs	r1, r1, #10
    lcd_plot(X0+xv, yv, BLACK);
  402b2c:	3520      	adds	r5, #32
  402b2e:	f1c1 013f 	rsb	r1, r1, #63	; 0x3f
  402b32:	4630      	mov	r0, r6
  402b34:	2202      	movs	r2, #2
  402b36:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402b3a:	b2ad      	uxth	r5, r5
  402b3c:	3601      	adds	r6, #1
  402b3e:	f7ff fef3 	bl	402928 <_Z8lcd_plothhh>
void DrawCurve(FnFuncP fn)
{
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
  lcd_hlineStip(X0-WCHART, Y0, WCHART*2, 0xee);

  for (int8_t xv=-WCHART+1; xv<WCHART; xv++) {
  402b42:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    uint16_t yv = (RESX + fn(xv * (RESX/WCHART))) / 2;
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    lcd_plot(X0+xv, yv, BLACK);
  402b46:	b2f6      	uxtb	r6, r6
void DrawCurve(FnFuncP fn)
{
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
  lcd_hlineStip(X0-WCHART, Y0, WCHART*2, 0xee);

  for (int8_t xv=-WCHART+1; xv<WCHART; xv++) {
  402b48:	d1de      	bne.n	402b08 <_Z9DrawCurvePFssE+0x28>
    uint16_t yv = (RESX + fn(xv * (RESX/WCHART))) / 2;
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    lcd_plot(X0+xv, yv, BLACK);
  }
}
  402b4a:	b002      	add	sp, #8
  402b4c:	bd70      	pop	{r4, r5, r6, pc}
  402b4e:	bf00      	nop

00402b50 <_Z9lcd_vlinehaa>:
  }
}

void lcd_vline(uint8_t x, int8_t y, int8_t h)
{
  lcd_vlineStip(x, y, h, 0xff);
  402b50:	23ff      	movs	r3, #255	; 0xff
  402b52:	e761      	b.n	402a18 <_Z13lcd_vlineStiphaah>

00402b54 <_Z14lcd_outdezNAtthhshh>:

  LEADING0 means pad 0 to the left of sig. digits up to 'len' total characters
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  402b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b58:	469b      	mov	fp, r3
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
  402b5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  402b5e:	3b10      	subs	r3, #16

  LEADING0 means pad 0 to the left of sig. digits up to 'len' total characters
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  402b60:	b08b      	sub	sp, #44	; 0x2c
  402b62:	4617      	mov	r7, r2
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
  bool dblsize = flags & DBLSIZE;
  402b64:	f3cb 0480 	ubfx	r4, fp, #2, #1
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
  402b68:	f3c3 1207 	ubfx	r2, r3, #4, #8
  bool dblsize = flags & DBLSIZE;

  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  402b6c:	f01b 0308 	ands.w	r3, fp, #8

  LEADING0 means pad 0 to the left of sig. digits up to 'len' total characters
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  402b70:	9103      	str	r1, [sp, #12]
  402b72:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
  bool dblsize = flags & DBLSIZE;
  402b76:	9401      	str	r4, [sp, #4]

  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  402b78:	f000 80cb 	beq.w	402d12 <_Z14lcd_outdezNAtthhshh+0x1be>
  402b7c:	f1ab 0b08 	sub.w	fp, fp, #8
{
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
  bool dblsize = flags & DBLSIZE;

  bool neg = false;
  402b80:	2400      	movs	r4, #0
  if (flags & UNSIGN) { flags -= UNSIGN; }
  402b82:	fa5f fb8b 	uxtb.w	fp, fp
{
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
  bool dblsize = flags & DBLSIZE;

  bool neg = false;
  402b86:	9408      	str	r4, [sp, #32]
  else if (val < 0) { neg=true; val=-val; }

  uint8_t xn = 0;
  uint8_t ln = 2;

  if (mode != MODE(LEADING0)) {
  402b88:	b1ca      	cbz	r2, 402bbe <_Z14lcd_outdezNAtthhshh+0x6a>
    len = 1;
    uint16_t tmp = ((uint16_t)val) / 10;
  402b8a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
  402b8e:	b2bb      	uxth	r3, r7
  402b90:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
  402b94:	fba1 4303 	umull	r4, r3, r1, r3
    while (tmp) {
  402b98:	08db      	lsrs	r3, r3, #3
  402b9a:	f04f 0801 	mov.w	r8, #1
  402b9e:	d007      	beq.n	402bb0 <_Z14lcd_outdezNAtthhshh+0x5c>
      len++;
      tmp /= 10;
  402ba0:	fba1 4303 	umull	r4, r3, r1, r3

  if (mode != MODE(LEADING0)) {
    len = 1;
    uint16_t tmp = ((uint16_t)val) / 10;
    while (tmp) {
      len++;
  402ba4:	f108 0801 	add.w	r8, r8, #1
  uint8_t ln = 2;

  if (mode != MODE(LEADING0)) {
    len = 1;
    uint16_t tmp = ((uint16_t)val) / 10;
    while (tmp) {
  402ba8:	08db      	lsrs	r3, r3, #3
      len++;
  402baa:	fa5f f888 	uxtb.w	r8, r8
  uint8_t ln = 2;

  if (mode != MODE(LEADING0)) {
    len = 1;
    uint16_t tmp = ((uint16_t)val) / 10;
    while (tmp) {
  402bae:	d1f7      	bne.n	402ba0 <_Z14lcd_outdezNAtthhshh+0x4c>
      len++;
      tmp /= 10;
    }
    if (len <= mode)
  402bb0:	b251      	sxtb	r1, r2
  402bb2:	4541      	cmp	r1, r8
      len = mode + 1;
  402bb4:	bfa4      	itt	ge
  402bb6:	f102 0801 	addge.w	r8, r2, #1
  402bba:	fa5f f888 	uxtbge.w	r8, r8
  }

  if (dblsize) {
  402bbe:	9c01      	ldr	r4, [sp, #4]
  402bc0:	2c00      	cmp	r4, #0
  402bc2:	f040 80fc 	bne.w	402dbe <_Z14lcd_outdezNAtthhshh+0x26a>
    fw += FWNUM;
  }
  else {
    if (flags & LEFT) {
  402bc6:	f01b 0f80 	tst.w	fp, #128	; 0x80
  402bca:	f040 8124 	bne.w	402e16 <_Z14lcd_outdezNAtthhshh+0x2c2>
  LEADING0 means pad 0 to the left of sig. digits up to 'len' total characters
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  uint8_t fw = FWNUM;
  402bce:	2305      	movs	r3, #5

  if (dblsize) {
    fw += FWNUM;
  }
  else {
    if (flags & LEFT) {
  402bd0:	24fa      	movs	r4, #250	; 0xfa
  LEADING0 means pad 0 to the left of sig. digits up to 'len' total characters
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  uint8_t fw = FWNUM;
  402bd2:	9304      	str	r3, [sp, #16]
    x += len * fw;
    if (neg)
      x += (dblsize ? 7 : FWNUM);
  }

  lcd_lastPos = x;
  402bd4:	f241 2300 	movw	r3, #4608	; 0x1200
  x -= fw + 1;
  402bd8:	1824      	adds	r4, r4, r0
    x += len * fw;
    if (neg)
      x += (dblsize ? 7 : FWNUM);
  }

  lcd_lastPos = x;
  402bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402bde:	f883 0a85 	strb.w	r0, [r3, #2693]	; 0xa85
  x -= fw + 1;
  402be2:	b2e4      	uxtb	r4, r4

  for (uint8_t i=1; i<=len; i++) {
  402be4:	f1b8 0f00 	cmp.w	r8, #0
  402be8:	f000 80ca 	beq.w	402d80 <_Z14lcd_outdezNAtthhshh+0x22c>
          else { xn--; ln++; }
        }
      }
      else {
        x--;
        lcd_plot(x, y+6);
  402bec:	9903      	ldr	r1, [sp, #12]
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
  402bee:	b252      	sxtb	r2, r2
          else { xn--; ln++; }
        }
      }
      else {
        x--;
        lcd_plot(x, y+6);
  402bf0:	1d8b      	adds	r3, r1, #6

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
    char c = ((uint16_t)val % 10) + '0';
  402bf2:	f64c 49cd 	movw	r9, #52429	; 0xcccd
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
  402bf6:	9205      	str	r2, [sp, #20]

  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  else if (val < 0) { neg=true; val=-val; }

  uint8_t xn = 0;
  402bf8:	2100      	movs	r1, #0
  uint8_t ln = 2;
  402bfa:	2202      	movs	r2, #2
          else { xn--; ln++; }
        }
      }
      else {
        x--;
        lcd_plot(x, y+6);
  402bfc:	b2db      	uxtb	r3, r3
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
  402bfe:	2501      	movs	r5, #1
  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  else if (val < 0) { neg=true; val=-val; }

  uint8_t xn = 0;
  uint8_t ln = 2;
  402c00:	9207      	str	r2, [sp, #28]

  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  else if (val < 0) { neg=true; val=-val; }

  uint8_t xn = 0;
  402c02:	9106      	str	r1, [sp, #24]

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
    char c = ((uint16_t)val % 10) + '0';
  402c04:	f6cc 49cc 	movt	r9, #52428	; 0xcccc
          else { xn--; ln++; }
        }
      }
      else {
        x--;
        lcd_plot(x, y+6);
  402c08:	9309      	str	r3, [sp, #36]	; 0x24
  402c0a:	f8cd 8008 	str.w	r8, [sp, #8]
  402c0e:	e033      	b.n	402c78 <_Z14lcd_outdezNAtthhshh+0x124>

  for (uint8_t i=1; i<=len; i++) {
    char c = ((uint16_t)val % 10) + '0';
    uint8_t f = flags;
    if (dblsize) {
      if (c=='1' && i==len && xn>x+10) { x+=2; f|=CONDENSED; }
  402c10:	9902      	ldr	r1, [sp, #8]
  402c12:	1a68      	subs	r0, r5, r1
  402c14:	4243      	negs	r3, r0
  402c16:	eb43 0300 	adc.w	r3, r3, r0
  402c1a:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
  402c1e:	bf14      	ite	ne
  402c20:	2300      	movne	r3, #0
  402c22:	f003 0301 	andeq.w	r3, r3, #1
  402c26:	2b00      	cmp	r3, #0
  402c28:	d07d      	beq.n	402d26 <_Z14lcd_outdezNAtthhshh+0x1d2>
  402c2a:	9a06      	ldr	r2, [sp, #24]
  402c2c:	f104 030a 	add.w	r3, r4, #10
  402c30:	429a      	cmp	r2, r3
  402c32:	dd78      	ble.n	402d26 <_Z14lcd_outdezNAtthhshh+0x1d2>
  402c34:	3402      	adds	r4, #2
  402c36:	b2e4      	uxtb	r4, r4
  402c38:	f04b 0308 	orr.w	r3, fp, #8
      if (val >= 1000) { x+=FWNUM; f&=~DBLSIZE; }
  402c3c:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
  402c40:	db03      	blt.n	402c4a <_Z14lcd_outdezNAtthhshh+0xf6>
  402c42:	3405      	adds	r4, #5
  402c44:	b2e4      	uxtb	r4, r4
  402c46:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    }
    lcd_putcAtt(x, y, c, f);
  402c4a:	4620      	mov	r0, r4
  402c4c:	9903      	ldr	r1, [sp, #12]
  402c4e:	4642      	mov	r2, r8
  402c50:	f7ff fd0c 	bl	40266c <_Z11lcd_putcAtthhhh>
    if (mode==i) {
  402c54:	9b05      	ldr	r3, [sp, #20]
  402c56:	429d      	cmp	r5, r3
  402c58:	d029      	beq.n	402cae <_Z14lcd_outdezNAtthhshh+0x15a>
        if ((flags&INVERS) && ((~flags & BLINK) || BLINK_ON_PHASE))
          lcd_vline(x, y, 8);
        x--;
      }
    }
    if (dblsize && val >= 1000 && val < 10000) x-=2;
  402c5a:	9a01      	ldr	r2, [sp, #4]
  402c5c:	2a00      	cmp	r2, #0
  402c5e:	d164      	bne.n	402d2a <_Z14lcd_outdezNAtthhshh+0x1d6>
  402c60:	fba9 3606 	umull	r3, r6, r9, r6
  402c64:	08f6      	lsrs	r6, r6, #3
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
  402c66:	3501      	adds	r5, #1
        x--;
      }
    }
    if (dblsize && val >= 1000 && val < 10000) x-=2;
    val = ((uint16_t)val) / 10;
    x-=fw;
  402c68:	9a04      	ldr	r2, [sp, #16]
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
  402c6a:	9b02      	ldr	r3, [sp, #8]
  402c6c:	b2ed      	uxtb	r5, r5
        x--;
      }
    }
    if (dblsize && val >= 1000 && val < 10000) x-=2;
    val = ((uint16_t)val) / 10;
    x-=fw;
  402c6e:	1aa4      	subs	r4, r4, r2
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
  402c70:	42ab      	cmp	r3, r5
          lcd_vline(x, y, 8);
        x--;
      }
    }
    if (dblsize && val >= 1000 && val < 10000) x-=2;
    val = ((uint16_t)val) / 10;
  402c72:	b237      	sxth	r7, r6
    x-=fw;
  402c74:	b2e4      	uxtb	r4, r4
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
  402c76:	d36e      	bcc.n	402d56 <_Z14lcd_outdezNAtthhshh+0x202>
    char c = ((uint16_t)val % 10) + '0';
  402c78:	b2be      	uxth	r6, r7
  402c7a:	fba9 2a06 	umull	r2, sl, r9, r6
  402c7e:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  402c82:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
  402c86:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
  402c8a:	fa5f fa8a 	uxtb.w	sl, sl
    uint8_t f = flags;
    if (dblsize) {
  402c8e:	9b01      	ldr	r3, [sp, #4]

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
    char c = ((uint16_t)val % 10) + '0';
  402c90:	f10a 0830 	add.w	r8, sl, #48	; 0x30
  402c94:	fa5f f888 	uxtb.w	r8, r8
    uint8_t f = flags;
    if (dblsize) {
  402c98:	2b00      	cmp	r3, #0
  402c9a:	d1b9      	bne.n	402c10 <_Z14lcd_outdezNAtthhshh+0xbc>
  402c9c:	465b      	mov	r3, fp
      if (c=='1' && i==len && xn>x+10) { x+=2; f|=CONDENSED; }
      if (val >= 1000) { x+=FWNUM; f&=~DBLSIZE; }
    }
    lcd_putcAtt(x, y, c, f);
  402c9e:	4620      	mov	r0, r4
  402ca0:	9903      	ldr	r1, [sp, #12]
  402ca2:	4642      	mov	r2, r8
  402ca4:	f7ff fce2 	bl	40266c <_Z11lcd_putcAtthhhh>
    if (mode==i) {
  402ca8:	9b05      	ldr	r3, [sp, #20]
  402caa:	429d      	cmp	r5, r3
  402cac:	d1d5      	bne.n	402c5a <_Z14lcd_outdezNAtthhshh+0x106>
      flags &= ~PREC2; // TODO not needed but removes 64bytes, could be improved for sure, check asm
      if (dblsize) {
  402cae:	9901      	ldr	r1, [sp, #4]
      if (c=='1' && i==len && xn>x+10) { x+=2; f|=CONDENSED; }
      if (val >= 1000) { x+=FWNUM; f&=~DBLSIZE; }
    }
    lcd_putcAtt(x, y, c, f);
    if (mode==i) {
      flags &= ~PREC2; // TODO not needed but removes 64bytes, could be improved for sure, check asm
  402cb0:	f00b 0bcf 	and.w	fp, fp, #207	; 0xcf
      if (dblsize) {
  402cb4:	2900      	cmp	r1, #0
  402cb6:	d069      	beq.n	402d8c <_Z14lcd_outdezNAtthhshh+0x238>
        xn = x;
        if(c>='1' && c<='3') ln++;
  402cb8:	f10a 3aff 	add.w	sl, sl, #4294967295
  402cbc:	fa5f fa8a 	uxtb.w	sl, sl
  402cc0:	f1ba 0f02 	cmp.w	sl, #2
  402cc4:	d803      	bhi.n	402cce <_Z14lcd_outdezNAtthhshh+0x17a>
  402cc6:	9a07      	ldr	r2, [sp, #28]
  402cc8:	1c53      	adds	r3, r2, #1
  402cca:	b2db      	uxtb	r3, r3
  402ccc:	9307      	str	r3, [sp, #28]
        uint8_t tn = ((uint16_t)val/10) % 10;
  402cce:	fba9 3606 	umull	r3, r6, r9, r6
  402cd2:	08f6      	lsrs	r6, r6, #3
  402cd4:	fba9 1306 	umull	r1, r3, r9, r6
  402cd8:	08db      	lsrs	r3, r3, #3
  402cda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402cde:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
  402ce2:	b2db      	uxtb	r3, r3
        if (tn==2 || tn==4) {
  402ce4:	f1a3 0102 	sub.w	r1, r3, #2
  402ce8:	424a      	negs	r2, r1
  402cea:	eb42 0201 	adc.w	r2, r2, r1
  402cee:	2b04      	cmp	r3, #4
  402cf0:	bf14      	ite	ne
  402cf2:	4613      	movne	r3, r2
  402cf4:	f042 0301 	orreq.w	r3, r2, #1
  402cf8:	2b00      	cmp	r3, #0
  402cfa:	d02a      	beq.n	402d52 <_Z14lcd_outdezNAtthhshh+0x1fe>
          if (c=='4') { xn++; }
  402cfc:	f1b8 0f34 	cmp.w	r8, #52	; 0x34
  402d00:	d07c      	beq.n	402dfc <_Z14lcd_outdezNAtthhshh+0x2a8>
          else { xn--; ln++; }
  402d02:	9907      	ldr	r1, [sp, #28]
  402d04:	1e63      	subs	r3, r4, #1
  402d06:	1c4a      	adds	r2, r1, #1
  402d08:	b2db      	uxtb	r3, r3
  402d0a:	b2d2      	uxtb	r2, r2
  402d0c:	9306      	str	r3, [sp, #24]
  402d0e:	9207      	str	r2, [sp, #28]
  402d10:	e00e      	b.n	402d30 <_Z14lcd_outdezNAtthhshh+0x1dc>
  int8_t mode = MODE(flags);
  bool dblsize = flags & DBLSIZE;

  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  else if (val < 0) { neg=true; val=-val; }
  402d12:	2f00      	cmp	r7, #0
{
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
  bool dblsize = flags & DBLSIZE;

  bool neg = false;
  402d14:	bfa8      	it	ge
  402d16:	9308      	strge	r3, [sp, #32]
  if (flags & UNSIGN) { flags -= UNSIGN; }
  else if (val < 0) { neg=true; val=-val; }
  402d18:	f6bf af36 	bge.w	402b88 <_Z14lcd_outdezNAtthhshh+0x34>
  402d1c:	427f      	negs	r7, r7
  402d1e:	2401      	movs	r4, #1
  402d20:	b23f      	sxth	r7, r7
  402d22:	9408      	str	r4, [sp, #32]
  402d24:	e730      	b.n	402b88 <_Z14lcd_outdezNAtthhshh+0x34>

  for (uint8_t i=1; i<=len; i++) {
    char c = ((uint16_t)val % 10) + '0';
    uint8_t f = flags;
    if (dblsize) {
      if (c=='1' && i==len && xn>x+10) { x+=2; f|=CONDENSED; }
  402d26:	465b      	mov	r3, fp
  402d28:	e788      	b.n	402c3c <_Z14lcd_outdezNAtthhshh+0xe8>
        if ((flags&INVERS) && ((~flags & BLINK) || BLINK_ON_PHASE))
          lcd_vline(x, y, 8);
        x--;
      }
    }
    if (dblsize && val >= 1000 && val < 10000) x-=2;
  402d2a:	fba9 1606 	umull	r1, r6, r9, r6
  402d2e:	08f6      	lsrs	r6, r6, #3
  402d30:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
  402d34:	bfb4      	ite	lt
  402d36:	2300      	movlt	r3, #0
  402d38:	2301      	movge	r3, #1
  402d3a:	f242 720f 	movw	r2, #9999	; 0x270f
  402d3e:	4297      	cmp	r7, r2
  402d40:	bfcc      	ite	gt
  402d42:	2700      	movgt	r7, #0
  402d44:	f003 0701 	andle.w	r7, r3, #1
  402d48:	2f00      	cmp	r7, #0
  402d4a:	d08c      	beq.n	402c66 <_Z14lcd_outdezNAtthhshh+0x112>
  402d4c:	3c02      	subs	r4, #2
  402d4e:	b2e4      	uxtb	r4, r4
  402d50:	e789      	b.n	402c66 <_Z14lcd_outdezNAtthhshh+0x112>
    }
    lcd_putcAtt(x, y, c, f);
    if (mode==i) {
      flags &= ~PREC2; // TODO not needed but removes 64bytes, could be improved for sure, check asm
      if (dblsize) {
        xn = x;
  402d52:	9406      	str	r4, [sp, #24]
  402d54:	e7ec      	b.n	402d30 <_Z14lcd_outdezNAtthhshh+0x1dc>
    if (dblsize && val >= 1000 && val < 10000) x-=2;
    val = ((uint16_t)val) / 10;
    x-=fw;
  }

  if (xn) {
  402d56:	9906      	ldr	r1, [sp, #24]
  402d58:	b191      	cbz	r1, 402d80 <_Z14lcd_outdezNAtthhshh+0x22c>
    y &= ~0x07;
  402d5a:	9a03      	ldr	r2, [sp, #12]
    lcd_hline(xn, (y & ~0x07)+2*FH-3, ln);
  402d5c:	9806      	ldr	r0, [sp, #24]
    val = ((uint16_t)val) / 10;
    x-=fw;
  }

  if (xn) {
    y &= ~0x07;
  402d5e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    lcd_hline(xn, (y & ~0x07)+2*FH-3, ln);
  402d62:	f102 010d 	add.w	r1, r2, #13
    val = ((uint16_t)val) / 10;
    x-=fw;
  }

  if (xn) {
    y &= ~0x07;
  402d66:	9203      	str	r2, [sp, #12]
    lcd_hline(xn, (y & ~0x07)+2*FH-3, ln);
  402d68:	b2c9      	uxtb	r1, r1
  402d6a:	9a07      	ldr	r2, [sp, #28]
  402d6c:	f7ff fe40 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
    lcd_hline(xn, y+2*FH-2, ln);
  402d70:	9b03      	ldr	r3, [sp, #12]
  402d72:	9806      	ldr	r0, [sp, #24]
  402d74:	f103 010e 	add.w	r1, r3, #14
  402d78:	b2c9      	uxtb	r1, r1
  402d7a:	9a07      	ldr	r2, [sp, #28]
  402d7c:	f7ff fe38 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
  }

  if (neg) lcd_putcAtt(x, y, '-', flags);
  402d80:	9908      	ldr	r1, [sp, #32]
  402d82:	2900      	cmp	r1, #0
  402d84:	d132      	bne.n	402dec <_Z14lcd_outdezNAtthhshh+0x298>
    xn = lcd_lastPos - x + 2;
    if (!neg) { x+=FW; xn-=FW; }
    lcd_rect(x-1, y-1, xn, 9, BLINK_ON_PHASE ? DOTTED : ~DOTTED);
  }
#endif
}
  402d86:	b00b      	add	sp, #44	; 0x2c
  402d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (c=='4') { xn++; }
          else { xn--; ln++; }
        }
      }
      else {
        x--;
  402d8c:	3c01      	subs	r4, #1
  402d8e:	b2e4      	uxtb	r4, r4
        lcd_plot(x, y+6);
  402d90:	4620      	mov	r0, r4
  402d92:	9909      	ldr	r1, [sp, #36]	; 0x24
  402d94:	9a01      	ldr	r2, [sp, #4]
  402d96:	f7ff fdc7 	bl	402928 <_Z8lcd_plothhh>
        if ((flags&INVERS) && ((~flags & BLINK) || BLINK_ON_PHASE))
  402d9a:	f01b 0f02 	tst.w	fp, #2
  402d9e:	d008      	beq.n	402db2 <_Z14lcd_outdezNAtthhshh+0x25e>
  402da0:	f01b 0f01 	tst.w	fp, #1
  402da4:	d12e      	bne.n	402e04 <_Z14lcd_outdezNAtthhshh+0x2b0>
          lcd_vline(x, y, 8);
  402da6:	9b03      	ldr	r3, [sp, #12]
  402da8:	4620      	mov	r0, r4
  402daa:	b259      	sxtb	r1, r3
  402dac:	2208      	movs	r2, #8
  402dae:	f7ff fecf 	bl	402b50 <_Z9lcd_vlinehaa>
        x--;
  402db2:	fba9 1606 	umull	r1, r6, r9, r6
  402db6:	3c01      	subs	r4, #1
  402db8:	b2e4      	uxtb	r4, r4
  402dba:	08f6      	lsrs	r6, r6, #3
  402dbc:	e753      	b.n	402c66 <_Z14lcd_outdezNAtthhshh+0x112>
    if (len <= mode)
      len = mode + 1;
  }

  if (dblsize) {
    fw += FWNUM;
  402dbe:	210a      	movs	r1, #10
      if (mode > 0)
        x += 2;
    }
  }

  if (flags & LEFT) {
  402dc0:	24f5      	movs	r4, #245	; 0xf5
  402dc2:	f01b 0f80 	tst.w	fp, #128	; 0x80
    if (len <= mode)
      len = mode + 1;
  }

  if (dblsize) {
    fw += FWNUM;
  402dc6:	9104      	str	r1, [sp, #16]
      if (mode > 0)
        x += 2;
    }
  }

  if (flags & LEFT) {
  402dc8:	f43f af04 	beq.w	402bd4 <_Z14lcd_outdezNAtthhshh+0x80>
    x += len * fw;
  402dcc:	9b04      	ldr	r3, [sp, #16]
    if (neg)
  402dce:	9908      	ldr	r1, [sp, #32]
        x += 2;
    }
  }

  if (flags & LEFT) {
    x += len * fw;
  402dd0:	fb08 0003 	mla	r0, r8, r3, r0
  402dd4:	b2c0      	uxtb	r0, r0
    if (neg)
  402dd6:	2900      	cmp	r1, #0
  402dd8:	f43f aefc 	beq.w	402bd4 <_Z14lcd_outdezNAtthhshh+0x80>
      x += (dblsize ? 7 : FWNUM);
  402ddc:	9901      	ldr	r1, [sp, #4]
  402dde:	2900      	cmp	r1, #0
  402de0:	bf0c      	ite	eq
  402de2:	2305      	moveq	r3, #5
  402de4:	2307      	movne	r3, #7
  402de6:	1818      	adds	r0, r3, r0
  402de8:	b2c0      	uxtb	r0, r0
  402dea:	e6f3      	b.n	402bd4 <_Z14lcd_outdezNAtthhshh+0x80>
    y &= ~0x07;
    lcd_hline(xn, (y & ~0x07)+2*FH-3, ln);
    lcd_hline(xn, y+2*FH-2, ln);
  }

  if (neg) lcd_putcAtt(x, y, '-', flags);
  402dec:	9903      	ldr	r1, [sp, #12]
  402dee:	4620      	mov	r0, r4
  402df0:	222d      	movs	r2, #45	; 0x2d
  402df2:	465b      	mov	r3, fp
    xn = lcd_lastPos - x + 2;
    if (!neg) { x+=FW; xn-=FW; }
    lcd_rect(x-1, y-1, xn, 9, BLINK_ON_PHASE ? DOTTED : ~DOTTED);
  }
#endif
}
  402df4:	b00b      	add	sp, #44	; 0x2c
  402df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    y &= ~0x07;
    lcd_hline(xn, (y & ~0x07)+2*FH-3, ln);
    lcd_hline(xn, y+2*FH-2, ln);
  }

  if (neg) lcd_putcAtt(x, y, '-', flags);
  402dfa:	e437      	b.n	40266c <_Z11lcd_putcAtthhhh>
      if (dblsize) {
        xn = x;
        if(c>='1' && c<='3') ln++;
        uint8_t tn = ((uint16_t)val/10) % 10;
        if (tn==2 || tn==4) {
          if (c=='4') { xn++; }
  402dfc:	1c63      	adds	r3, r4, #1
  402dfe:	b2db      	uxtb	r3, r3
  402e00:	9306      	str	r3, [sp, #24]
  402e02:	e795      	b.n	402d30 <_Z14lcd_outdezNAtthhshh+0x1dc>
        }
      }
      else {
        x--;
        lcd_plot(x, y+6);
        if ((flags&INVERS) && ((~flags & BLINK) || BLINK_ON_PHASE))
  402e04:	f241 2200 	movw	r2, #4608	; 0x1200
  402e08:	f2c2 0200 	movt	r2, #8192	; 0x2000
  402e0c:	f892 3a84 	ldrb.w	r3, [r2, #2692]	; 0xa84
  402e10:	065b      	lsls	r3, r3, #25
  402e12:	d5ce      	bpl.n	402db2 <_Z14lcd_outdezNAtthhshh+0x25e>
  402e14:	e7c7      	b.n	402da6 <_Z14lcd_outdezNAtthhshh+0x252>
  if (dblsize) {
    fw += FWNUM;
  }
  else {
    if (flags & LEFT) {
      if (mode > 0)
  402e16:	b253      	sxtb	r3, r2
  402e18:	2b00      	cmp	r3, #0
  402e1a:	dd01      	ble.n	402e20 <_Z14lcd_outdezNAtthhshh+0x2cc>
        x += 2;
  402e1c:	3002      	adds	r0, #2
  402e1e:	b2c0      	uxtb	r0, r0
    if (len <= mode)
      len = mode + 1;
  }

  if (dblsize) {
    fw += FWNUM;
  402e20:	2305      	movs	r3, #5
  402e22:	9304      	str	r3, [sp, #16]
        x += 2;
    }
  }

  if (flags & LEFT) {
    x += len * fw;
  402e24:	9b04      	ldr	r3, [sp, #16]
    if (neg)
  402e26:	9908      	ldr	r1, [sp, #32]
        x += 2;
    }
  }

  if (flags & LEFT) {
    x += len * fw;
  402e28:	fb08 0003 	mla	r0, r8, r3, r0
    if (len <= mode)
      len = mode + 1;
  }

  if (dblsize) {
    fw += FWNUM;
  402e2c:	24fa      	movs	r4, #250	; 0xfa
        x += 2;
    }
  }

  if (flags & LEFT) {
    x += len * fw;
  402e2e:	b2c0      	uxtb	r0, r0
    if (neg)
  402e30:	2900      	cmp	r1, #0
  402e32:	f43f aecf 	beq.w	402bd4 <_Z14lcd_outdezNAtthhshh+0x80>
  402e36:	e7d1      	b.n	402ddc <_Z14lcd_outdezNAtthhshh+0x288>

00402e38 <_Z13lcd_outdezAtthhsh>:
{
  lcd_outdezAtt(x, y, val);
}

void lcd_outdezAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags)
{
  402e38:	b510      	push	{r4, lr}
  lcd_outdezNAtt(x, y, val, flags);
  402e3a:	2400      	movs	r4, #0
{
  lcd_outdezAtt(x, y, val);
}

void lcd_outdezAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags)
{
  402e3c:	b082      	sub	sp, #8
  lcd_outdezNAtt(x, y, val, flags);
  402e3e:	9400      	str	r4, [sp, #0]
  402e40:	f7ff fe88 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
}
  402e44:	b002      	add	sp, #8
  402e46:	bd10      	pop	{r4, pc}

00402e48 <_Z11lcd_outdez8hha>:
    val>>=4;
  }
}
void lcd_outdez8(uint8_t x, uint8_t y, int8_t val)
{
  lcd_outdezAtt(x, y, val);
  402e48:	2300      	movs	r3, #0
  402e4a:	e7f5      	b.n	402e38 <_Z13lcd_outdezAtthhsh>

00402e4c <_Z18DisplayScreenIndexhhh>:

void DisplayScreenIndex(uint8_t index, uint8_t count, uint8_t attr)
{
  402e4c:	b570      	push	{r4, r5, r6, lr}
  402e4e:	4614      	mov	r4, r2
  402e50:	460d      	mov	r5, r1
  lcd_outdezAtt(128,0,count,attr);
  402e52:	b20a      	sxth	r2, r1
{
  lcd_putsiAtt(x, y, STR_OFFON, value, mode ? INVERS:0) ;
}

void DisplayScreenIndex(uint8_t index, uint8_t count, uint8_t attr)
{
  402e54:	4606      	mov	r6, r0
  lcd_outdezAtt(128,0,count,attr);
  402e56:	2100      	movs	r1, #0
  402e58:	2080      	movs	r0, #128	; 0x80
  402e5a:	4623      	mov	r3, r4
  402e5c:	f7ff ffec 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  lcd_putcAtt(1+128-FW*(count>9 ? 3 : 2),0,'/',attr);
  402e60:	2d09      	cmp	r5, #9
  402e62:	d90c      	bls.n	402e7e <_Z18DisplayScreenIndexhhh+0x32>
  402e64:	206f      	movs	r0, #111	; 0x6f
  402e66:	2100      	movs	r1, #0
  402e68:	222f      	movs	r2, #47	; 0x2f
  402e6a:	4623      	mov	r3, r4
  402e6c:	f7ff fbfe 	bl	40266c <_Z11lcd_putcAtthhhh>
  lcd_outdezAtt(1+128-FW*(count>9 ? 3 : 2),0,index+1,attr);
  402e70:	206f      	movs	r0, #111	; 0x6f
  402e72:	1c72      	adds	r2, r6, #1
  402e74:	2100      	movs	r1, #0
  402e76:	4623      	mov	r3, r4
}
  402e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void DisplayScreenIndex(uint8_t index, uint8_t count, uint8_t attr)
{
  lcd_outdezAtt(128,0,count,attr);
  lcd_putcAtt(1+128-FW*(count>9 ? 3 : 2),0,'/',attr);
  lcd_outdezAtt(1+128-FW*(count>9 ? 3 : 2),0,index+1,attr);
  402e7c:	e7dc      	b.n	402e38 <_Z13lcd_outdezAtthhsh>
}

void DisplayScreenIndex(uint8_t index, uint8_t count, uint8_t attr)
{
  lcd_outdezAtt(128,0,count,attr);
  lcd_putcAtt(1+128-FW*(count>9 ? 3 : 2),0,'/',attr);
  402e7e:	2075      	movs	r0, #117	; 0x75
  402e80:	2100      	movs	r1, #0
  402e82:	222f      	movs	r2, #47	; 0x2f
  402e84:	4623      	mov	r3, r4
  402e86:	f7ff fbf1 	bl	40266c <_Z11lcd_putcAtthhhh>
  lcd_outdezAtt(1+128-FW*(count>9 ? 3 : 2),0,index+1,attr);
  402e8a:	2075      	movs	r0, #117	; 0x75
  402e8c:	e7f1      	b.n	402e72 <_Z18DisplayScreenIndexhhh+0x26>
  402e8e:	bf00      	nop

00402e90 <_Z18putsTelemetryValuehhshh>:

#endif

#if defined(FRSKY) || defined(PCBARM)
void putsTelemetryValue(uint8_t x, uint8_t y, int16_t val, uint8_t unit, uint8_t att)
{
  402e90:	b570      	push	{r4, r5, r6, lr}
  }
  if (unit == UNIT_FEET) {
    unit = UNIT_METERS;
  }
#else
  if (unit == UNIT_KTS) {
  402e92:	2b04      	cmp	r3, #4

#endif

#if defined(FRSKY) || defined(PCBARM)
void putsTelemetryValue(uint8_t x, uint8_t y, int16_t val, uint8_t unit, uint8_t att)
{
  402e94:	461d      	mov	r5, r3
  402e96:	460e      	mov	r6, r1
  402e98:	f89d 4010 	ldrb.w	r4, [sp, #16]
  }
  if (unit == UNIT_FEET) {
    unit = UNIT_METERS;
  }
#else
  if (unit == UNIT_KTS) {
  402e9c:	d020      	beq.n	402ee0 <_Z18putsTelemetryValuehhshh+0x50>
    // kts to km/h
    val = (val * 463) / 250;
  }
#endif
  lcd_outdezAtt(x, (att & DBLSIZE ? y - FH : y), val, att & (~NO_UNIT)); // TODO we could add this test inside lcd_outdezAtt!
  402e9e:	0763      	lsls	r3, r4, #29
  402ea0:	bf46      	itte	mi
  402ea2:	f1a6 0108 	submi.w	r1, r6, #8
  402ea6:	b2c9      	uxtbmi	r1, r1
  402ea8:	4631      	movpl	r1, r6
  402eaa:	f004 03bf 	and.w	r3, r4, #191	; 0xbf
  402eae:	f7ff ffc3 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  if (~att & NO_UNIT && unit != UNIT_RAW)
  402eb2:	f014 0f40 	tst.w	r4, #64	; 0x40
  402eb6:	bf14      	ite	ne
  402eb8:	2300      	movne	r3, #0
  402eba:	2301      	moveq	r3, #1
  402ebc:	2d03      	cmp	r5, #3
  402ebe:	bf0c      	ite	eq
  402ec0:	2300      	moveq	r3, #0
  402ec2:	f003 0301 	andne.w	r3, r3, #1
  402ec6:	b903      	cbnz	r3, 402eca <_Z18putsTelemetryValuehhshh+0x3a>
  402ec8:	bd70      	pop	{r4, r5, r6, pc}
    lcd_putsiAtt(lcd_lastPos/*+1*/, y, STR_VTELEMUNIT, unit, 0);
  402eca:	4b0d      	ldr	r3, [pc, #52]	; (402f00 <_Z18putsTelemetryValuehhshh+0x70>)
  402ecc:	4a0d      	ldr	r2, [pc, #52]	; (402f04 <_Z18putsTelemetryValuehhshh+0x74>)
  402ece:	f893 0a85 	ldrb.w	r0, [r3, #2693]	; 0xa85
  402ed2:	2300      	movs	r3, #0
  402ed4:	9304      	str	r3, [sp, #16]
  402ed6:	4631      	mov	r1, r6
  402ed8:	462b      	mov	r3, r5
}
  402eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    val = (val * 463) / 250;
  }
#endif
  lcd_outdezAtt(x, (att & DBLSIZE ? y - FH : y), val, att & (~NO_UNIT)); // TODO we could add this test inside lcd_outdezAtt!
  if (~att & NO_UNIT && unit != UNIT_RAW)
    lcd_putsiAtt(lcd_lastPos/*+1*/, y, STR_VTELEMUNIT, unit, 0);
  402ede:	e4c7      	b.n	402870 <_Z12lcd_putsiAtthhPKchh>
    unit = UNIT_METERS;
  }
#else
  if (unit == UNIT_KTS) {
    // kts to km/h
    val = (val * 463) / 250;
  402ee0:	f240 13cf 	movw	r3, #463	; 0x1cf
  402ee4:	fb03 f202 	mul.w	r2, r3, r2
  402ee8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  402eec:	f2c1 0362 	movt	r3, #4194	; 0x1062
  402ef0:	fb83 1302 	smull	r1, r3, r3, r2
  402ef4:	17d2      	asrs	r2, r2, #31
  402ef6:	ebc2 1223 	rsb	r2, r2, r3, asr #4
  402efa:	b212      	sxth	r2, r2
  402efc:	e7cf      	b.n	402e9e <_Z18putsTelemetryValuehhshh+0xe>
  402efe:	bf00      	nop
  402f00:	20001200 	.word	0x20001200
  402f04:	004105f1 	.word	0x004105f1

00402f08 <_Z8lcd_recthhhhhh>:
{
  lcd_vlineStip(x, y, h, 0xff);
}

void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  402f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f0c:	b083      	sub	sp, #12
  402f0e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
  402f12:	4606      	mov	r6, r0
  if (!((att & BLINK) && BLINK_ON_PHASE)) {
  402f14:	07f8      	lsls	r0, r7, #31
{
  lcd_vlineStip(x, y, h, 0xff);
}

void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  402f16:	4688      	mov	r8, r1
  402f18:	4614      	mov	r4, r2
  402f1a:	4699      	mov	r9, r3
  402f1c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  if (!((att & BLINK) && BLINK_ON_PHASE)) {
  402f20:	d42d      	bmi.n	402f7e <_Z8lcd_recthhhhhh+0x76>
    lcd_vlineStip(x, y, h, pat);
  402f22:	fa4f fa88 	sxtb.w	sl, r8
  402f26:	fa4f fb89 	sxtb.w	fp, r9
  402f2a:	4651      	mov	r1, sl
  402f2c:	465a      	mov	r2, fp
  402f2e:	462b      	mov	r3, r5
  402f30:	4630      	mov	r0, r6
  402f32:	f7ff fd71 	bl	402a18 <_Z13lcd_vlineStiphaah>
    lcd_vlineStip(x+w-1, y, h, pat);
  402f36:	1e70      	subs	r0, r6, #1
  402f38:	1820      	adds	r0, r4, r0
  402f3a:	465a      	mov	r2, fp
  402f3c:	b2c0      	uxtb	r0, r0
  402f3e:	4651      	mov	r1, sl
  402f40:	462b      	mov	r3, r5
  402f42:	f7ff fd69 	bl	402a18 <_Z13lcd_vlineStiphaah>
    if (~att & ROUND) { x+=1; w-=2; }
  402f46:	073a      	lsls	r2, r7, #28
  402f48:	d403      	bmi.n	402f52 <_Z8lcd_recthhhhhh+0x4a>
  402f4a:	3601      	adds	r6, #1
  402f4c:	3c02      	subs	r4, #2
  402f4e:	b2f6      	uxtb	r6, r6
  402f50:	b2e4      	uxtb	r4, r4
    lcd_hlineStip(x, y+h-1, w, pat);
  402f52:	f108 31ff 	add.w	r1, r8, #4294967295
  402f56:	b276      	sxtb	r6, r6
  402f58:	4489      	add	r9, r1
  402f5a:	fa5f f189 	uxtb.w	r1, r9
  402f5e:	2700      	movs	r7, #0
  402f60:	4622      	mov	r2, r4
  402f62:	462b      	mov	r3, r5
  402f64:	4630      	mov	r0, r6
  402f66:	9700      	str	r7, [sp, #0]
  402f68:	f7ff fcf4 	bl	402954 <_Z13lcd_hlineStipahhhh>
    lcd_hlineStip(x, y, w, pat);
  402f6c:	4630      	mov	r0, r6
  402f6e:	4641      	mov	r1, r8
  402f70:	4622      	mov	r2, r4
  402f72:	462b      	mov	r3, r5
  402f74:	970c      	str	r7, [sp, #48]	; 0x30
  }
}
  402f76:	b003      	add	sp, #12
  402f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!((att & BLINK) && BLINK_ON_PHASE)) {
    lcd_vlineStip(x, y, h, pat);
    lcd_vlineStip(x+w-1, y, h, pat);
    if (~att & ROUND) { x+=1; w-=2; }
    lcd_hlineStip(x, y+h-1, w, pat);
    lcd_hlineStip(x, y, w, pat);
  402f7c:	e4ea      	b.n	402954 <_Z13lcd_hlineStipahhhh>
  lcd_vlineStip(x, y, h, 0xff);
}

void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  if (!((att & BLINK) && BLINK_ON_PHASE)) {
  402f7e:	4b04      	ldr	r3, [pc, #16]	; (402f90 <_Z8lcd_recthhhhhh+0x88>)
  402f80:	f893 3a84 	ldrb.w	r3, [r3, #2692]	; 0xa84
  402f84:	0659      	lsls	r1, r3, #25
  402f86:	d5cc      	bpl.n	402f22 <_Z8lcd_recthhhhhh+0x1a>
    lcd_vlineStip(x+w-1, y, h, pat);
    if (~att & ROUND) { x+=1; w-=2; }
    lcd_hlineStip(x, y+h-1, w, pat);
    lcd_hlineStip(x, y, w, pat);
  }
}
  402f88:	b003      	add	sp, #12
  402f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f8e:	bf00      	nop
  402f90:	20001200 	.word	0x20001200

00402f94 <_Z19doMainScreenGrphicsv>:
#define LBOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)
#define RBOX_CENTERX  (3*SCREEN_WIDTH/4 - 10)
#define RBOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)

void doMainScreenGrphics()
{
  402f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
extern void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat);

extern void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t pat=SOLID, uint8_t att=0);
extern void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat=SOLID, uint8_t att=0);
#define lcd_status_line() lcd_filled_rect(0, 7*FH, DISPLAY_W, 8)
inline void lcd_square(uint8_t x, uint8_t y, uint8_t w, uint8_t att=0) { lcd_rect(x, y, w, w, SOLID, att); }
  402f98:	2217      	movs	r2, #23
  402f9a:	b082      	sub	sp, #8
  402f9c:	25ff      	movs	r5, #255	; 0xff
  402f9e:	2400      	movs	r4, #0
  402fa0:	201f      	movs	r0, #31
  402fa2:	2121      	movs	r1, #33	; 0x21
  402fa4:	4613      	mov	r3, r2
  402fa6:	9500      	str	r5, [sp, #0]
  402fa8:	9401      	str	r4, [sp, #4]
  402faa:	f7ff ffad 	bl	402f08 <_Z8lcd_recthhhhhh>
  402fae:	2317      	movs	r3, #23
  402fb0:	461a      	mov	r2, r3
  402fb2:	204b      	movs	r0, #75	; 0x4b
  402fb4:	2121      	movs	r1, #33	; 0x21
  402fb6:	9500      	str	r5, [sp, #0]
  402fb8:	9401      	str	r4, [sp, #4]
  402fba:	f7ff ffa5 	bl	402f08 <_Z8lcd_recthhhhhh>
  lcd_square(LBOX_CENTERX-BOX_WIDTH/2, LBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);
  lcd_square(RBOX_CENTERX-BOX_WIDTH/2, RBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);

  DO_CROSS(LBOX_CENTERX,LBOX_CENTERY,3)
  402fbe:	202a      	movs	r0, #42	; 0x2a
  402fc0:	212b      	movs	r1, #43	; 0x2b
  402fc2:	2203      	movs	r2, #3
  402fc4:	f7ff fdc4 	bl	402b50 <_Z9lcd_vlinehaa>
  402fc8:	2029      	movs	r0, #41	; 0x29
  402fca:	212c      	movs	r1, #44	; 0x2c
  402fcc:	2203      	movs	r2, #3
  402fce:	f7ff fd0f 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
  DO_CROSS(RBOX_CENTERX,RBOX_CENTERY,3)

  int16_t calibStickVert = calibratedStick[CONVERT_MODE(1+1)-1];
  402fd2:	4e5e      	ldr	r6, [pc, #376]	; (40314c <_Z19doMainScreenGrphicsv+0x1b8>)
{
  lcd_square(LBOX_CENTERX-BOX_WIDTH/2, LBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);
  lcd_square(RBOX_CENTERX-BOX_WIDTH/2, RBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);

  DO_CROSS(LBOX_CENTERX,LBOX_CENTERY,3)
  DO_CROSS(RBOX_CENTERX,RBOX_CENTERY,3)
  402fd4:	2056      	movs	r0, #86	; 0x56
  402fd6:	212b      	movs	r1, #43	; 0x2b
  402fd8:	2203      	movs	r2, #3
  402fda:	f7ff fdb9 	bl	402b50 <_Z9lcd_vlinehaa>
  402fde:	2055      	movs	r0, #85	; 0x55
  402fe0:	212c      	movs	r1, #44	; 0x2c
  402fe2:	2203      	movs	r2, #3
  402fe4:	f7ff fd04 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>

  int16_t calibStickVert = calibratedStick[CONVERT_MODE(1+1)-1];
  402fe8:	f896 3a86 	ldrb.w	r3, [r6, #2694]	; 0xa86
  402fec:	4d58      	ldr	r5, [pc, #352]	; (403150 <_Z19doMainScreenGrphicsv+0x1bc>)
  402fee:	009b      	lsls	r3, r3, #2
  402ff0:	4c58      	ldr	r4, [pc, #352]	; (403154 <_Z19doMainScreenGrphicsv+0x1c0>)
  402ff2:	18ea      	adds	r2, r5, r3
  402ff4:	f812 2c9b 	ldrb.w	r2, [r2, #-155]
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(1+1)-1 == THR_STICK)
  402ff8:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
  lcd_square(RBOX_CENTERX-BOX_WIDTH/2, RBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);

  DO_CROSS(LBOX_CENTERX,LBOX_CENTERY,3)
  DO_CROSS(RBOX_CENTERX,RBOX_CENTERY,3)

  int16_t calibStickVert = calibratedStick[CONVERT_MODE(1+1)-1];
  402ffc:	eb04 0142 	add.w	r1, r4, r2, lsl #1
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(1+1)-1 == THR_STICK)
  403000:	07c7      	lsls	r7, r0, #31
  lcd_square(RBOX_CENTERX-BOX_WIDTH/2, RBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);

  DO_CROSS(LBOX_CENTERX,LBOX_CENTERY,3)
  DO_CROSS(RBOX_CENTERX,RBOX_CENTERY,3)

  int16_t calibStickVert = calibratedStick[CONVERT_MODE(1+1)-1];
  403002:	f8b1 18b6 	ldrh.w	r1, [r1, #2230]	; 0x8b6
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(1+1)-1 == THR_STICK)
  403006:	d502      	bpl.n	40300e <_Z19doMainScreenGrphicsv+0x7a>
  403008:	2a03      	cmp	r2, #3
  40300a:	f000 809b 	beq.w	403144 <_Z19doMainScreenGrphicsv+0x1b0>
    calibStickVert = -calibStickVert;
  lcd_square(LBOX_CENTERX+(calibratedStick[CONVERT_MODE(0+1)-1]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, LBOX_CENTERY-(calibStickVert*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH, ROUND);
  40300e:	18eb      	adds	r3, r5, r3
  403010:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
  403014:	b209      	sxth	r1, r1
  403016:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  40301a:	f9b3 08b6 	ldrsh.w	r0, [r3, #2230]	; 0x8b6
  40301e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
  403022:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  403026:	0040      	lsls	r0, r0, #1
  403028:	0049      	lsls	r1, r1, #1
  40302a:	f500 62fe 	add.w	r2, r0, #2032	; 0x7f0
  40302e:	f501 63fe 	add.w	r3, r1, #2032	; 0x7f0
  403032:	320f      	adds	r2, #15
  403034:	330f      	adds	r3, #15
  403036:	ea30 0020 	bics.w	r0, r0, r0, asr #32
  40303a:	bf28      	it	cs
  40303c:	4610      	movcs	r0, r2
  40303e:	ea31 0121 	bics.w	r1, r1, r1, asr #32
  403042:	bf28      	it	cs
  403044:	4619      	movcs	r1, r3
  403046:	12c0      	asrs	r0, r0, #11
  403048:	12c9      	asrs	r1, r1, #11
  40304a:	2205      	movs	r2, #5
  40304c:	3028      	adds	r0, #40	; 0x28
  40304e:	f1c1 012a 	rsb	r1, r1, #42	; 0x2a
  403052:	4613      	mov	r3, r2
  403054:	b2c0      	uxtb	r0, r0
  403056:	b2c9      	uxtb	r1, r1
  403058:	27ff      	movs	r7, #255	; 0xff
  40305a:	f04f 0e08 	mov.w	lr, #8
  40305e:	e88d 4080 	stmia.w	sp, {r7, lr}
  403062:	f7ff ff51 	bl	402f08 <_Z8lcd_recthhhhhh>
  calibStickVert = calibratedStick[CONVERT_MODE(2+1)-1];
  403066:	f896 3a86 	ldrb.w	r3, [r6, #2694]	; 0xa86
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(2+1)-1 == THR_STICK)
  40306a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a

  int16_t calibStickVert = calibratedStick[CONVERT_MODE(1+1)-1];
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(1+1)-1 == THR_STICK)
    calibStickVert = -calibStickVert;
  lcd_square(LBOX_CENTERX+(calibratedStick[CONVERT_MODE(0+1)-1]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, LBOX_CENTERY-(calibStickVert*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH, ROUND);
  calibStickVert = calibratedStick[CONVERT_MODE(2+1)-1];
  40306e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
  403072:	f812 2c9a 	ldrb.w	r2, [r2, #-154]
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(2+1)-1 == THR_STICK)
  403076:	07c0      	lsls	r0, r0, #31

  int16_t calibStickVert = calibratedStick[CONVERT_MODE(1+1)-1];
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(1+1)-1 == THR_STICK)
    calibStickVert = -calibStickVert;
  lcd_square(LBOX_CENTERX+(calibratedStick[CONVERT_MODE(0+1)-1]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, LBOX_CENTERY-(calibStickVert*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH, ROUND);
  calibStickVert = calibratedStick[CONVERT_MODE(2+1)-1];
  403078:	eb04 0142 	add.w	r1, r4, r2, lsl #1
  40307c:	f8b1 18b6 	ldrh.w	r1, [r1, #2230]	; 0x8b6
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(2+1)-1 == THR_STICK)
  403080:	d501      	bpl.n	403086 <_Z19doMainScreenGrphicsv+0xf2>
  403082:	2a03      	cmp	r2, #3
  403084:	d05b      	beq.n	40313e <_Z19doMainScreenGrphicsv+0x1aa>
    calibStickVert = -calibStickVert;
  lcd_square(RBOX_CENTERX+(calibratedStick[CONVERT_MODE(3+1)-1]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, RBOX_CENTERY-(calibStickVert*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH, ROUND);
  403086:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40308a:	f815 3c99 	ldrb.w	r3, [r5, #-153]
  40308e:	b209      	sxth	r1, r1
  403090:	eb04 0443 	add.w	r4, r4, r3, lsl #1
  403094:	f9b4 08b6 	ldrsh.w	r0, [r4, #2230]	; 0x8b6
  403098:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
  40309c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  4030a0:	0040      	lsls	r0, r0, #1
  4030a2:	0049      	lsls	r1, r1, #1
  4030a4:	f500 62fe 	add.w	r2, r0, #2032	; 0x7f0
  4030a8:	f501 63fe 	add.w	r3, r1, #2032	; 0x7f0
  4030ac:	320f      	adds	r2, #15
  4030ae:	330f      	adds	r3, #15
  4030b0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
  4030b4:	bf28      	it	cs
  4030b6:	4610      	movcs	r0, r2
  4030b8:	ea31 0121 	bics.w	r1, r1, r1, asr #32
  4030bc:	bf28      	it	cs
  4030be:	4619      	movcs	r1, r3
  4030c0:	12c0      	asrs	r0, r0, #11
  4030c2:	12c9      	asrs	r1, r1, #11
  4030c4:	2205      	movs	r2, #5
  4030c6:	3054      	adds	r0, #84	; 0x54
  4030c8:	f1c1 012a 	rsb	r1, r1, #42	; 0x2a
  4030cc:	24ff      	movs	r4, #255	; 0xff
  4030ce:	b2c0      	uxtb	r0, r0
  4030d0:	b2c9      	uxtb	r1, r1
  4030d2:	4613      	mov	r3, r2
  4030d4:	2508      	movs	r5, #8
  4030d6:	e88d 0030 	stmia.w	sp, {r4, r5}
  4030da:	f7ff ff15 	bl	402f08 <_Z8lcd_recthhhhhh>
  4030de:	4f1e      	ldr	r7, [pc, #120]	; (403158 <_Z19doMainScreenGrphicsv+0x1c4>)
  4030e0:	243a      	movs	r4, #58	; 0x3a
  // Optimization by Mike Blandford
  {
    uint8_t x, y, len ;  // declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    {
      len = ((calibratedStick[y]+RESX)*BAR_HEIGHT/(RESX*2))+1l;  // calculate once per loop
  4030e2:	f04f 0816 	mov.w	r8, #22
  4030e6:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
  4030ea:	4620      	mov	r0, r4
  // Optimization by Mike Blandford
  {
    uint8_t x, y, len ;  // declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    {
      len = ((calibratedStick[y]+RESX)*BAR_HEIGHT/(RESX*2))+1l;  // calculate once per loop
  4030ec:	fb08 f505 	mul.w	r5, r8, r5
  4030f0:	f505 45b0 	add.w	r5, r5, #22528	; 0x5800
  4030f4:	f505 63fe 	add.w	r3, r5, #2032	; 0x7f0
  4030f8:	330f      	adds	r3, #15
  4030fa:	ea35 0525 	bics.w	r5, r5, r5, asr #32
  4030fe:	bf28      	it	cs
  403100:	461d      	movcs	r5, r3
  403102:	f3c5 25c7 	ubfx	r5, r5, #11, #8
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
  403106:	f1c5 0637 	rsb	r6, r5, #55	; 0x37
  // Optimization by Mike Blandford
  {
    uint8_t x, y, len ;  // declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    {
      len = ((calibratedStick[y]+RESX)*BAR_HEIGHT/(RESX*2))+1l;  // calculate once per loop
  40310a:	3501      	adds	r5, #1
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
  40310c:	b276      	sxtb	r6, r6
  40310e:	b26d      	sxtb	r5, r5
  403110:	4631      	mov	r1, r6
  403112:	462a      	mov	r2, r5
  403114:	f7ff fd1c 	bl	402b50 <_Z9lcd_vlinehaa>
  403118:	1c60      	adds	r0, r4, #1
  40311a:	b2c0      	uxtb	r0, r0
  40311c:	4631      	mov	r1, r6
  40311e:	462a      	mov	r2, r5
  403120:	f7ff fd16 	bl	402b50 <_Z9lcd_vlinehaa>
  403124:	1ca0      	adds	r0, r4, #2
  403126:	3405      	adds	r4, #5
  403128:	b2c0      	uxtb	r0, r0
  40312a:	4631      	mov	r1, r6
  40312c:	462a      	mov	r2, r5
  40312e:	b2e4      	uxtb	r4, r4
  403130:	f7ff fd0e 	bl	402b50 <_Z9lcd_vlinehaa>
  lcd_square(RBOX_CENTERX+(calibratedStick[CONVERT_MODE(3+1)-1]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, RBOX_CENTERY-(calibStickVert*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH, ROUND);

  // Optimization by Mike Blandford
  {
    uint8_t x, y, len ;  // declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
  403134:	2c49      	cmp	r4, #73	; 0x49
  403136:	d1d6      	bne.n	4030e6 <_Z19doMainScreenGrphicsv+0x152>
    {
      len = ((calibratedStick[y]+RESX)*BAR_HEIGHT/(RESX*2))+1l;  // calculate once per loop
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}
  403138:	b002      	add	sp, #8
  40313a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(1+1)-1 == THR_STICK)
    calibStickVert = -calibStickVert;
  lcd_square(LBOX_CENTERX+(calibratedStick[CONVERT_MODE(0+1)-1]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, LBOX_CENTERY-(calibStickVert*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH, ROUND);
  calibStickVert = calibratedStick[CONVERT_MODE(2+1)-1];
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(2+1)-1 == THR_STICK)
    calibStickVert = -calibStickVert;
  40313e:	4249      	negs	r1, r1
  403140:	b289      	uxth	r1, r1
  403142:	e7a0      	b.n	403086 <_Z19doMainScreenGrphicsv+0xf2>
  DO_CROSS(LBOX_CENTERX,LBOX_CENTERY,3)
  DO_CROSS(RBOX_CENTERX,RBOX_CENTERY,3)

  int16_t calibStickVert = calibratedStick[CONVERT_MODE(1+1)-1];
  if (g_eeGeneral.throttleReversed && CONVERT_MODE(1+1)-1 == THR_STICK)
    calibStickVert = -calibStickVert;
  403144:	4249      	negs	r1, r1
  403146:	b289      	uxth	r1, r1
  403148:	e761      	b.n	40300e <_Z19doMainScreenGrphicsv+0x7a>
  40314a:	bf00      	nop
  40314c:	20001200 	.word	0x20001200
  403150:	00410828 	.word	0x00410828
  403154:	20000108 	.word	0x20000108
  403158:	200009c6 	.word	0x200009c6

0040315c <_Z15lcd_filled_recthahhhh>:

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  40315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (int8_t i=y; i<y+h; i++) {
  403160:	18cf      	adds	r7, r1, r3
    lcd_hlineStip(x, y, w, pat);
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  403162:	b082      	sub	sp, #8
  for (int8_t i=y; i<y+h; i++) {
  403164:	42b9      	cmp	r1, r7
    lcd_hlineStip(x, y, w, pat);
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  403166:	4691      	mov	r9, r2
  403168:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
  40316c:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
  for (int8_t i=y; i<y+h; i++) {
  403170:	da19      	bge.n	4031a6 <_Z15lcd_filled_recthahhhh+0x4a>
    lcd_hlineStip(x, y+h-1, w, pat);
    lcd_hlineStip(x, y, w, pat);
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
  403172:	1c4d      	adds	r5, r1, #1
  403174:	3701      	adds	r7, #1
{
  for (int8_t i=y; i<y+h; i++) {
  403176:	460c      	mov	r4, r1
    if (i>=0 && i<64) lcd_hlineStip(x, i, w, pat, att);
  403178:	fa4f fa80 	sxtb.w	sl, r0
  40317c:	e007      	b.n	40318e <_Z15lcd_filled_recthahhhh+0x32>
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  for (int8_t i=y; i<y+h; i++) {
  40317e:	3401      	adds	r4, #1
    if (i>=0 && i<64) lcd_hlineStip(x, i, w, pat, att);
    if (pat != 0xff) pat = ~pat;
  403180:	2eff      	cmp	r6, #255	; 0xff
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  for (int8_t i=y; i<y+h; i++) {
  403182:	b2e4      	uxtb	r4, r4
    if (i>=0 && i<64) lcd_hlineStip(x, i, w, pat, att);
    if (pat != 0xff) pat = ~pat;
  403184:	d001      	beq.n	40318a <_Z15lcd_filled_recthahhhh+0x2e>
  403186:	43f6      	mvns	r6, r6
  403188:	b2f6      	uxtb	r6, r6
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  for (int8_t i=y; i<y+h; i++) {
  40318a:	42bd      	cmp	r5, r7
  40318c:	d00b      	beq.n	4031a6 <_Z15lcd_filled_recthahhhh+0x4a>
    if (i>=0 && i<64) lcd_hlineStip(x, i, w, pat, att);
  40318e:	b2e1      	uxtb	r1, r4
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
  for (int8_t i=y; i<y+h; i++) {
  403190:	3501      	adds	r5, #1
    if (i>=0 && i<64) lcd_hlineStip(x, i, w, pat, att);
  403192:	293f      	cmp	r1, #63	; 0x3f
  403194:	d8f3      	bhi.n	40317e <_Z15lcd_filled_recthahhhh+0x22>
  403196:	4650      	mov	r0, sl
  403198:	464a      	mov	r2, r9
  40319a:	4633      	mov	r3, r6
  40319c:	f8cd 8000 	str.w	r8, [sp]
  4031a0:	f7ff fbd8 	bl	402954 <_Z13lcd_hlineStipahhhh>
  4031a4:	e7eb      	b.n	40317e <_Z15lcd_filled_recthahhhh+0x22>
    if (pat != 0xff) pat = ~pat;
  }
}
  4031a6:	b002      	add	sp, #8
  4031a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004031ac <_Z10displayBoxv>:
uint8_t         s_warning_info_len;
// uint8_t s_warning_info_att not needed now
uint8_t         s_confirmation = 0;

void displayBox()
{
  4031ac:	b530      	push	{r4, r5, lr}
  lcd_filled_rect(10, 16, 108, 40, SOLID, WHITE);
  4031ae:	200a      	movs	r0, #10
uint8_t         s_warning_info_len;
// uint8_t s_warning_info_att not needed now
uint8_t         s_confirmation = 0;

void displayBox()
{
  4031b0:	b083      	sub	sp, #12
  lcd_filled_rect(10, 16, 108, 40, SOLID, WHITE);
  4031b2:	24ff      	movs	r4, #255	; 0xff
  4031b4:	2110      	movs	r1, #16
  4031b6:	226c      	movs	r2, #108	; 0x6c
  4031b8:	2328      	movs	r3, #40	; 0x28
  4031ba:	2504      	movs	r5, #4
  4031bc:	9400      	str	r4, [sp, #0]
  4031be:	9501      	str	r5, [sp, #4]
  4031c0:	f7ff ffcc 	bl	40315c <_Z15lcd_filled_recthahhhh>
  lcd_rect(10, 16, 108, 40);
  4031c4:	2110      	movs	r1, #16
  4031c6:	226c      	movs	r2, #108	; 0x6c
  4031c8:	2328      	movs	r3, #40	; 0x28
  4031ca:	200a      	movs	r0, #10
  4031cc:	9400      	str	r4, [sp, #0]
  4031ce:	2400      	movs	r4, #0
  4031d0:	9401      	str	r4, [sp, #4]
  4031d2:	f7ff fe99 	bl	402f08 <_Z8lcd_recthhhhhh>
  lcd_puts(16, 3*FH, s_warning);
  4031d6:	f240 1308 	movw	r3, #264	; 0x108
  4031da:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4031de:	f8d3 2a88 	ldr.w	r2, [r3, #2696]	; 0xa88
  4031e2:	2010      	movs	r0, #16
  4031e4:	2118      	movs	r1, #24
  // could be a place for a s_warning_info
}
  4031e6:	b003      	add	sp, #12
  4031e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

void displayBox()
{
  lcd_filled_rect(10, 16, 108, 40, SOLID, WHITE);
  lcd_rect(10, 16, 108, 40);
  lcd_puts(16, 3*FH, s_warning);
  4031ec:	f7ff bb6c 	b.w	4028c8 <_Z8lcd_putshhPKc>

004031f0 <_Z19displayConfirmationh>:
    }
  }
}

void displayConfirmation(uint8_t event)
{
  4031f0:	b530      	push	{r4, r5, lr}
  s_confirmation = false;
  4031f2:	4c19      	ldr	r4, [pc, #100]	; (403258 <_Z19displayConfirmationh+0x68>)
  4031f4:	2300      	movs	r3, #0
    }
  }
}

void displayConfirmation(uint8_t event)
{
  4031f6:	b083      	sub	sp, #12
  s_confirmation = false;
  4031f8:	f884 3a87 	strb.w	r3, [r4, #2695]	; 0xa87
    }
  }
}

void displayConfirmation(uint8_t event)
{
  4031fc:	4605      	mov	r5, r0
  s_confirmation = false;
  displayBox();
  4031fe:	f7ff ffd5 	bl	4031ac <_Z10displayBoxv>
  if (s_warning_info)
  403202:	f8d4 2a88 	ldr.w	r2, [r4, #2696]	; 0xa88
  403206:	b132      	cbz	r2, 403216 <_Z19displayConfirmationh+0x26>
    lcd_putsnAtt(16, 4*FH, s_warning_info, s_warning_info_len, ZCHAR);
  403208:	f894 3a8c 	ldrb.w	r3, [r4, #2700]	; 0xa8c
  40320c:	2120      	movs	r1, #32
  40320e:	2010      	movs	r0, #16
  403210:	9100      	str	r1, [sp, #0]
  403212:	f7ff fae9 	bl	4027e8 <_Z12lcd_putsnAtthhPKchh>
  lcd_puts(16, 5*FH, STR_POPUPS);
  403216:	2010      	movs	r0, #16
  403218:	2128      	movs	r1, #40	; 0x28
  40321a:	4a10      	ldr	r2, [pc, #64]	; (40325c <_Z19displayConfirmationh+0x6c>)
  40321c:	f7ff fb54 	bl	4028c8 <_Z8lcd_putshhPKc>

  switch(event) {
  403220:	2d60      	cmp	r5, #96	; 0x60
  403222:	d003      	beq.n	40322c <_Z19displayConfirmationh+0x3c>
  403224:	2d61      	cmp	r5, #97	; 0x61
  403226:	d015      	beq.n	403254 <_Z19displayConfirmationh+0x64>
    case EVT_KEY_FIRST(KEY_EXIT):
      killEvents(event);
      s_warning = 0;
      break;
  }
}
  403228:	b003      	add	sp, #12
  40322a:	bd30      	pop	{r4, r5, pc}
    lcd_putsnAtt(16, 4*FH, s_warning_info, s_warning_info_len, ZCHAR);
  lcd_puts(16, 5*FH, STR_POPUPS);

  switch(event) {
    case EVT_KEY_FIRST(KEY_MENU):
      s_confirmation = true;
  40322c:	2301      	movs	r3, #1
  40322e:	f884 3a87 	strb.w	r3, [r4, #2695]	; 0xa87
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  403232:	2300      	movs	r3, #0
  if(event < (int)DIM(keys))  keys[event].killEvents();
  403234:	490a      	ldr	r1, [pc, #40]	; (403260 <_Z19displayConfirmationh+0x70>)
  403236:	0058      	lsls	r0, r3, #1
  403238:	18c3      	adds	r3, r0, r3
  40323a:	f101 02a0 	add.w	r2, r1, #160	; 0xa0
  40323e:	18d0      	adds	r0, r2, r3
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  403240:	2463      	movs	r4, #99	; 0x63
  403242:	7084      	strb	r4, [r0, #2]
  403244:	5cd0      	ldrb	r0, [r2, r3]
  403246:	f36f 1005 	bfc	r0, #4, #2
  40324a:	54d0      	strb	r0, [r2, r3]
      // no break
    case EVT_KEY_FIRST(KEY_EXIT):
      killEvents(event);
      s_warning = 0;
  40324c:	2300      	movs	r3, #0
  40324e:	f8c1 3a88 	str.w	r3, [r1, #2696]	; 0xa88
  403252:	e7e9      	b.n	403228 <_Z19displayConfirmationh+0x38>
  displayBox();
  if (s_warning_info)
    lcd_putsnAtt(16, 4*FH, s_warning_info, s_warning_info_len, ZCHAR);
  lcd_puts(16, 5*FH, STR_POPUPS);

  switch(event) {
  403254:	2301      	movs	r3, #1
  403256:	e7ed      	b.n	403234 <_Z19displayConfirmationh+0x44>
  403258:	20001200 	.word	0x20001200
  40325c:	0041079c 	.word	0x0041079c
  403260:	20000108 	.word	0x20000108

00403264 <_Z14displayWarningh>:
  s_warning = 0;
  refreshDisplay();
}

void displayWarning(uint8_t event)
{
  403264:	b538      	push	{r3, r4, r5, lr}
  if (s_warning) {
  403266:	4c0d      	ldr	r4, [pc, #52]	; (40329c <_Z14displayWarningh+0x38>)
  s_warning = 0;
  refreshDisplay();
}

void displayWarning(uint8_t event)
{
  403268:	4605      	mov	r5, r0
  if (s_warning) {
  40326a:	f8d4 3a88 	ldr.w	r3, [r4, #2696]	; 0xa88
  40326e:	b1a3      	cbz	r3, 40329a <_Z14displayWarningh+0x36>
    displayBox();
  403270:	f7ff ff9c 	bl	4031ac <_Z10displayBoxv>
    lcd_puts(16, 5*FH, STR_EXIT);
  403274:	2010      	movs	r0, #16
  403276:	2128      	movs	r1, #40	; 0x28
  403278:	4a09      	ldr	r2, [pc, #36]	; (4032a0 <_Z14displayWarningh+0x3c>)
  40327a:	f7ff fb25 	bl	4028c8 <_Z8lcd_putshhPKc>
    switch(event) {
  40327e:	2d61      	cmp	r5, #97	; 0x61
  403280:	d10b      	bne.n	40329a <_Z14displayWarningh+0x36>
  403282:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
  403286:	2263      	movs	r2, #99	; 0x63
  403288:	f36f 1305 	bfc	r3, #4, #2
  40328c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
      case EVT_KEY_FIRST(KEY_EXIT):
        killEvents(event);
        s_warning = 0;
  403290:	2300      	movs	r3, #0
  403292:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
  403296:	f8c4 3a88 	str.w	r3, [r4, #2696]	; 0xa88
  40329a:	bd38      	pop	{r3, r4, r5, pc}
  40329c:	20000108 	.word	0x20000108
  4032a0:	004107a3 	.word	0x004107a3

004032a4 <_Z8putsTimehhshh>:

void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
  4032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032a8:	461d      	mov	r5, r3
  if (att & LEFT) x+=3*FW;
  4032aa:	062b      	lsls	r3, r5, #24
    if (pat != 0xff) pat = ~pat;
  }
}

void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
  4032ac:	4680      	mov	r8, r0
  if (att & LEFT) x+=3*FW;
  4032ae:	bf44      	itt	mi
  4032b0:	f100 0812 	addmi.w	r8, r0, #18
  4032b4:	fa5f f888 	uxtbmi.w	r8, r8

  if (tme<0) {
  4032b8:	2a00      	cmp	r2, #0
    if (pat != 0xff) pat = ~pat;
  }
}

void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
  4032ba:	b085      	sub	sp, #20
  4032bc:	4614      	mov	r4, r2
  if (att & LEFT) x+=3*FW;

  if (tme<0) {
  4032be:	bfa8      	it	ge
  4032c0:	f005 0204 	andge.w	r2, r5, #4
    if (pat != 0xff) pat = ~pat;
  }
}

void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
  4032c4:	460e      	mov	r6, r1
  4032c6:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
  if (att & LEFT) x+=3*FW;

  if (tme<0) {
  4032ca:	bfa8      	it	ge
  4032cc:	9203      	strge	r2, [sp, #12]
  4032ce:	db35      	blt.n	40333c <_Z8putsTimehhshh+0x98>
    lcd_putcAtt(x - ((att & DBLSIZE) ? FW+1 : FWNUM), y, '-', att);
    tme = -tme;
  }

  lcd_outdezNAtt(x, y, tme/60, att|LEADING0|LEFT, 2);
  4032d0:	f648 0789 	movw	r7, #34953	; 0x8889
  4032d4:	f6c8 0788 	movt	r7, #34952	; 0x8888
  4032d8:	fb87 2704 	smull	r2, r7, r7, r4
  4032dc:	17e3      	asrs	r3, r4, #31
  4032de:	193f      	adds	r7, r7, r4
  4032e0:	ebc3 1767 	rsb	r7, r3, r7, asr #5
  lcd_putcAtt(lcd_lastPos-((att & DBLSIZE) ? 1 : 0), y, ':', att&att2);
  4032e4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 40335c <_Z8putsTimehhshh+0xb8>
  if (tme<0) {
    lcd_putcAtt(x - ((att & DBLSIZE) ? FW+1 : FWNUM), y, '-', att);
    tme = -tme;
  }

  lcd_outdezNAtt(x, y, tme/60, att|LEADING0|LEFT, 2);
  4032e8:	b23a      	sxth	r2, r7
  4032ea:	f045 0390 	orr.w	r3, r5, #144	; 0x90
  4032ee:	f04f 0b02 	mov.w	fp, #2
  4032f2:	4640      	mov	r0, r8
  4032f4:	4631      	mov	r1, r6
  4032f6:	f8cd b000 	str.w	fp, [sp]
  4032fa:	f7ff fc2b 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  lcd_putcAtt(lcd_lastPos-((att & DBLSIZE) ? 1 : 0), y, ':', att&att2);
  4032fe:	9a03      	ldr	r2, [sp, #12]
  403300:	f899 0a85 	ldrb.w	r0, [r9, #2693]	; 0xa85
  403304:	ea0a 0305 	and.w	r3, sl, r5
  403308:	2a00      	cmp	r2, #0
  40330a:	bf18      	it	ne
  40330c:	3801      	subne	r0, #1
  40330e:	4631      	mov	r1, r6
  403310:	223a      	movs	r2, #58	; 0x3a
  403312:	b2c0      	uxtb	r0, r0
  403314:	f7ff f9aa 	bl	40266c <_Z11lcd_putcAtthhhh>
  lcd_outdezNAtt(lcd_lastPos+FW, y, tme%60, att2|LEADING0|LEFT, 2);
  403318:	f899 0a85 	ldrb.w	r0, [r9, #2693]	; 0xa85
  40331c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
  403320:	3006      	adds	r0, #6
  403322:	eba4 0487 	sub.w	r4, r4, r7, lsl #2
  403326:	b222      	sxth	r2, r4
  403328:	b2c0      	uxtb	r0, r0
  40332a:	f04a 0390 	orr.w	r3, sl, #144	; 0x90
  40332e:	4631      	mov	r1, r6
  403330:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
}
  403334:	b005      	add	sp, #20
  403336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tme = -tme;
  }

  lcd_outdezNAtt(x, y, tme/60, att|LEADING0|LEFT, 2);
  lcd_putcAtt(lcd_lastPos-((att & DBLSIZE) ? 1 : 0), y, ':', att&att2);
  lcd_outdezNAtt(lcd_lastPos+FW, y, tme%60, att2|LEADING0|LEFT, 2);
  40333a:	e40b      	b.n	402b54 <_Z14lcd_outdezNAtthhshh>
void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
  if (att & LEFT) x+=3*FW;

  if (tme<0) {
    lcd_putcAtt(x - ((att & DBLSIZE) ? FW+1 : FWNUM), y, '-', att);
  40333c:	f015 0304 	ands.w	r3, r5, #4
  403340:	bf0c      	ite	eq
  403342:	2005      	moveq	r0, #5
  403344:	2007      	movne	r0, #7
  403346:	ebc0 0008 	rsb	r0, r0, r8
  40334a:	9303      	str	r3, [sp, #12]
  40334c:	b2c0      	uxtb	r0, r0
  40334e:	222d      	movs	r2, #45	; 0x2d
  403350:	462b      	mov	r3, r5
    tme = -tme;
  403352:	4264      	negs	r4, r4
void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
  if (att & LEFT) x+=3*FW;

  if (tme<0) {
    lcd_putcAtt(x - ((att & DBLSIZE) ? FW+1 : FWNUM), y, '-', att);
  403354:	f7ff f98a 	bl	40266c <_Z11lcd_putcAtthhhh>
    tme = -tme;
  403358:	b224      	sxth	r4, r4
  40335a:	e7b9      	b.n	4032d0 <_Z8putsTimehhshh+0x2c>
  40335c:	20001200 	.word	0x20001200

00403360 <_Z9putsVoltshhth>:
  lcd_outdezNAtt(lcd_lastPos+FW, y, tme%60, att2|LEADING0|LEFT, 2);
}

// TODO to be optimized with putsTelemetryValue
void putsVolts(uint8_t x, uint8_t y, uint16_t volts, uint8_t att)
{
  403360:	b570      	push	{r4, r5, r6, lr}
  403362:	461c      	mov	r4, r3
  lcd_outdezAtt(x, y, (int16_t)volts, (~NO_UNIT) & (att | ((att&PREC2)==PREC2 ? 0 : PREC1)));
  403364:	f003 0330 	and.w	r3, r3, #48	; 0x30
  403368:	2b30      	cmp	r3, #48	; 0x30
  40336a:	bf14      	ite	ne
  40336c:	2320      	movne	r3, #32
  40336e:	2300      	moveq	r3, #0
  403370:	4323      	orrs	r3, r4
  403372:	b212      	sxth	r2, r2
  403374:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
  lcd_outdezNAtt(lcd_lastPos+FW, y, tme%60, att2|LEADING0|LEFT, 2);
}

// TODO to be optimized with putsTelemetryValue
void putsVolts(uint8_t x, uint8_t y, uint16_t volts, uint8_t att)
{
  403378:	460d      	mov	r5, r1
  lcd_outdezAtt(x, y, (int16_t)volts, (~NO_UNIT) & (att | ((att&PREC2)==PREC2 ? 0 : PREC1)));
  40337a:	f7ff fd5d 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  if (~att & NO_UNIT) lcd_putcAtt(lcd_lastPos, y, 'v', att&(~INVERS));
  40337e:	0662      	lsls	r2, r4, #25
  403380:	d500      	bpl.n	403384 <_Z9putsVoltshhth+0x24>
  403382:	bd70      	pop	{r4, r5, r6, pc}
  403384:	4a05      	ldr	r2, [pc, #20]	; (40339c <_Z9putsVoltshhth+0x3c>)
  403386:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
  40338a:	f892 0a85 	ldrb.w	r0, [r2, #2693]	; 0xa85
  40338e:	4629      	mov	r1, r5
  403390:	2276      	movs	r2, #118	; 0x76
}
  403392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

// TODO to be optimized with putsTelemetryValue
void putsVolts(uint8_t x, uint8_t y, uint16_t volts, uint8_t att)
{
  lcd_outdezAtt(x, y, (int16_t)volts, (~NO_UNIT) & (att | ((att&PREC2)==PREC2 ? 0 : PREC1)));
  if (~att & NO_UNIT) lcd_putcAtt(lcd_lastPos, y, 'v', att&(~INVERS));
  403396:	f7ff b969 	b.w	40266c <_Z11lcd_putcAtthhhh>
  40339a:	bf00      	nop
  40339c:	20001200 	.word	0x20001200

004033a0 <_Z8putsVBathhh>:
}

void putsVBat(uint8_t x, uint8_t y, uint8_t att)
{
  4033a0:	b410      	push	{r4}
  putsVolts(x, y, g_vbat100mV, att);
  4033a2:	f241 2300 	movw	r3, #4608	; 0x1200
  4033a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4033aa:	f8b3 4a8e 	ldrh.w	r4, [r3, #2702]	; 0xa8e
  lcd_outdezAtt(x, y, (int16_t)volts, (~NO_UNIT) & (att | ((att&PREC2)==PREC2 ? 0 : PREC1)));
  if (~att & NO_UNIT) lcd_putcAtt(lcd_lastPos, y, 'v', att&(~INVERS));
}

void putsVBat(uint8_t x, uint8_t y, uint8_t att)
{
  4033ae:	4613      	mov	r3, r2
  putsVolts(x, y, g_vbat100mV, att);
  4033b0:	4622      	mov	r2, r4
}
  4033b2:	bc10      	pop	{r4}
  if (~att & NO_UNIT) lcd_putcAtt(lcd_lastPos, y, 'v', att&(~INVERS));
}

void putsVBat(uint8_t x, uint8_t y, uint8_t att)
{
  putsVolts(x, y, g_vbat100mV, att);
  4033b4:	e7d4      	b.n	403360 <_Z9putsVoltshhth>
  4033b6:	bf00      	nop

004033b8 <_Z10putsStrIdxhhPKchh>:
}

void putsStrIdx(uint8_t x, uint8_t y, const pm_char *str, uint8_t idx, uint8_t att)
{
  4033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033ba:	b083      	sub	sp, #12
  4033bc:	f89d 4020 	ldrb.w	r4, [sp, #32]
  4033c0:	461f      	mov	r7, r3
  lcd_putsAtt(x, y, str, att & ~BSS); // TODO use something else than BSS for LEADING0
  4033c2:	f004 0eef 	and.w	lr, r4, #239	; 0xef
  4033c6:	4673      	mov	r3, lr
  lcd_outdezNAtt(lcd_lastPos, y, idx, att|LEFT, 2);
  4033c8:	4e0d      	ldr	r6, [pc, #52]	; (403400 <_Z10putsStrIdxhhPKchh+0x48>)
{
  putsVolts(x, y, g_vbat100mV, att);
}

void putsStrIdx(uint8_t x, uint8_t y, const pm_char *str, uint8_t idx, uint8_t att)
{
  4033ca:	460d      	mov	r5, r1
  lcd_putsAtt(x, y, str, att & ~BSS); // TODO use something else than BSS for LEADING0
  4033cc:	f7ff fa74 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  lcd_outdezNAtt(lcd_lastPos, y, idx, att|LEFT, 2);
  4033d0:	2102      	movs	r1, #2
  4033d2:	9100      	str	r1, [sp, #0]
  4033d4:	f896 0a85 	ldrb.w	r0, [r6, #2693]	; 0xa85
  4033d8:	4629      	mov	r1, r5
  4033da:	b23a      	sxth	r2, r7
  4033dc:	f044 0380 	orr.w	r3, r4, #128	; 0x80
  4033e0:	f7ff fbb8 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  if (att&TWO_DOTS) lcd_putc(lcd_lastPos, y, ':');
  4033e4:	0621      	lsls	r1, r4, #24
  4033e6:	d401      	bmi.n	4033ec <_Z10putsStrIdxhhPKchh+0x34>
}
  4033e8:	b003      	add	sp, #12
  4033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

void putsStrIdx(uint8_t x, uint8_t y, const pm_char *str, uint8_t idx, uint8_t att)
{
  lcd_putsAtt(x, y, str, att & ~BSS); // TODO use something else than BSS for LEADING0
  lcd_outdezNAtt(lcd_lastPos, y, idx, att|LEFT, 2);
  if (att&TWO_DOTS) lcd_putc(lcd_lastPos, y, ':');
  4033ec:	f896 0a85 	ldrb.w	r0, [r6, #2693]	; 0xa85
  4033f0:	4629      	mov	r1, r5
  4033f2:	223a      	movs	r2, #58	; 0x3a
}
  4033f4:	b003      	add	sp, #12
  4033f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

void putsStrIdx(uint8_t x, uint8_t y, const pm_char *str, uint8_t idx, uint8_t att)
{
  lcd_putsAtt(x, y, str, att & ~BSS); // TODO use something else than BSS for LEADING0
  lcd_outdezNAtt(lcd_lastPos, y, idx, att|LEFT, 2);
  if (att&TWO_DOTS) lcd_putc(lcd_lastPos, y, ':');
  4033fa:	f7ff b9f3 	b.w	4027e4 <_Z8lcd_putchhh>
  4033fe:	bf00      	nop
  403400:	20001200 	.word	0x20001200

00403404 <_Z10putsChnRawhhhh>:
}

void putsChnRaw(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  403404:	b510      	push	{r4, lr}
  403406:	4614      	mov	r4, r2
  403408:	b082      	sub	sp, #8
  if (idx==0)
  40340a:	b172      	cbz	r2, 40342a <_Z10putsChnRawhhhh+0x26>
    lcd_putsiAtt(x, y, STR_MMMINV, 0, att);
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3)
  40340c:	2a0c      	cmp	r2, #12
  40340e:	d922      	bls.n	403456 <_Z10putsChnRawhhhh+0x52>
    lcd_putsiAtt(x, y, STR_VSRCRAW, idx-1, att);
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM)
  403410:	2a14      	cmp	r2, #20
  403412:	d910      	bls.n	403436 <_Z10putsChnRawhhhh+0x32>
    putsStrIdx(x, y, STR_PPM, idx - (NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3), att);
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+NUM_CHNOUT)
  403414:	2a34      	cmp	r2, #52	; 0x34
  403416:	d916      	bls.n	403446 <_Z10putsChnRawhhhh+0x42>
    putsStrIdx(x, y, STR_CH, idx - (NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM), att);
  else
    lcd_putsiAtt(x, y, STR_VTELEMCHNS, idx-(NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+NUM_CHNOUT), att);
  403418:	3c34      	subs	r4, #52	; 0x34
  40341a:	b2e4      	uxtb	r4, r4
  40341c:	9300      	str	r3, [sp, #0]
  40341e:	4a12      	ldr	r2, [pc, #72]	; (403468 <_Z10putsChnRawhhhh+0x64>)
  403420:	4623      	mov	r3, r4
  403422:	f7ff fa25 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
}
  403426:	b002      	add	sp, #8
  403428:	bd10      	pop	{r4, pc}
}

void putsChnRaw(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  if (idx==0)
    lcd_putsiAtt(x, y, STR_MMMINV, 0, att);
  40342a:	9300      	str	r3, [sp, #0]
  40342c:	4a0f      	ldr	r2, [pc, #60]	; (40346c <_Z10putsChnRawhhhh+0x68>)
  40342e:	4623      	mov	r3, r4
  403430:	f7ff fa1e 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  403434:	e7f7      	b.n	403426 <_Z10putsChnRawhhhh+0x22>
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3)
    lcd_putsiAtt(x, y, STR_VSRCRAW, idx-1, att);
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM)
    putsStrIdx(x, y, STR_PPM, idx - (NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3), att);
  403436:	3c0c      	subs	r4, #12
  403438:	b2e4      	uxtb	r4, r4
  40343a:	9300      	str	r3, [sp, #0]
  40343c:	4a0c      	ldr	r2, [pc, #48]	; (403470 <_Z10putsChnRawhhhh+0x6c>)
  40343e:	4623      	mov	r3, r4
  403440:	f7ff ffba 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
  403444:	e7ef      	b.n	403426 <_Z10putsChnRawhhhh+0x22>
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+NUM_CHNOUT)
    putsStrIdx(x, y, STR_CH, idx - (NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM), att);
  403446:	3c14      	subs	r4, #20
  403448:	b2e4      	uxtb	r4, r4
  40344a:	9300      	str	r3, [sp, #0]
  40344c:	4a09      	ldr	r2, [pc, #36]	; (403474 <_Z10putsChnRawhhhh+0x70>)
  40344e:	4623      	mov	r3, r4
  403450:	f7ff ffb2 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
  403454:	e7e7      	b.n	403426 <_Z10putsChnRawhhhh+0x22>
void putsChnRaw(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  if (idx==0)
    lcd_putsiAtt(x, y, STR_MMMINV, 0, att);
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3)
    lcd_putsiAtt(x, y, STR_VSRCRAW, idx-1, att);
  403456:	1e54      	subs	r4, r2, #1
  403458:	b2e4      	uxtb	r4, r4
  40345a:	9300      	str	r3, [sp, #0]
  40345c:	4a06      	ldr	r2, [pc, #24]	; (403478 <_Z10putsChnRawhhhh+0x74>)
  40345e:	4623      	mov	r3, r4
  403460:	f7ff fa06 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  403464:	e7df      	b.n	403426 <_Z10putsChnRawhhhh+0x22>
  403466:	bf00      	nop
  403468:	00410570 	.word	0x00410570
  40346c:	004102e3 	.word	0x004102e3
  403470:	004107ac 	.word	0x004107ac
  403474:	004107b0 	.word	0x004107b0
  403478:	00410748 	.word	0x00410748

0040347c <_Z7putsChnhhhh>:
  else
    lcd_putsiAtt(x, y, STR_VTELEMCHNS, idx-(NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+NUM_CHNOUT), att);
}

void putsChn(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  40347c:	b410      	push	{r4}
  if (idx > 0 && idx <= NUM_CHNOUT)
  40347e:	1e54      	subs	r4, r2, #1
  403480:	b2e4      	uxtb	r4, r4
  403482:	2c1f      	cmp	r4, #31
  403484:	d901      	bls.n	40348a <_Z7putsChnhhhh+0xe>
    putsChnRaw(x, y, idx+(NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM), att);
}
  403486:	bc10      	pop	{r4}
  403488:	4770      	bx	lr
}

void putsChn(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  if (idx > 0 && idx <= NUM_CHNOUT)
    putsChnRaw(x, y, idx+(NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM), att);
  40348a:	3214      	adds	r2, #20
  40348c:	b2d2      	uxtb	r2, r2
}
  40348e:	bc10      	pop	{r4}
}

void putsChn(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  if (idx > 0 && idx <= NUM_CHNOUT)
    putsChnRaw(x, y, idx+(NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM), att);
  403490:	e7b8      	b.n	403404 <_Z10putsChnRawhhhh>
  403492:	bf00      	nop

00403494 <_Z13putsChnLetterhhhh>:
  else
    putsChnRaw(x, y, idx-MAX_SWITCH, att);
}

void putsChnLetter(uint8_t x, uint8_t y, uint8_t idx, uint8_t attr)
{
  403494:	b510      	push	{r4, lr}
  lcd_putsiAtt(x, y, STR_RETA123, idx-1, attr);
  403496:	3a01      	subs	r2, #1
  else
    putsChnRaw(x, y, idx-MAX_SWITCH, att);
}

void putsChnLetter(uint8_t x, uint8_t y, uint8_t idx, uint8_t attr)
{
  403498:	461c      	mov	r4, r3
  40349a:	b082      	sub	sp, #8
  lcd_putsiAtt(x, y, STR_RETA123, idx-1, attr);
  40349c:	b2d3      	uxtb	r3, r2
  40349e:	4a03      	ldr	r2, [pc, #12]	; (4034ac <_Z13putsChnLetterhhhh+0x18>)
  4034a0:	9400      	str	r4, [sp, #0]
  4034a2:	f7ff f9e5 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
}
  4034a6:	b002      	add	sp, #8
  4034a8:	bd10      	pop	{r4, pc}
  4034aa:	bf00      	nop
  4034ac:	00410386 	.word	0x00410386

004034b0 <_Z13putsModelNamehhPchh>:

void putsModelName(uint8_t x, uint8_t y, char *name, uint8_t id, uint8_t att)
{
  4034b0:	b4f0      	push	{r4, r5, r6, r7}
  4034b2:	f89d 4010 	ldrb.w	r4, [sp, #16]
void putsChnLetter(uint8_t x, uint8_t y, uint8_t idx, uint8_t attr)
{
  lcd_putsiAtt(x, y, STR_RETA123, idx-1, attr);
}

void putsModelName(uint8_t x, uint8_t y, char *name, uint8_t id, uint8_t att)
  4034b6:	f102 060a 	add.w	r6, r2, #10
{
  uint8_t len = sizeof(g_model.name);
  4034ba:	250a      	movs	r5, #10
  while (len>0 && !name[len-1]) --len;
  4034bc:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
  4034c0:	f105 3cff 	add.w	ip, r5, #4294967295
  4034c4:	b95f      	cbnz	r7, 4034de <_Z13putsModelNamehhPchh+0x2e>
  4034c6:	fa5f f58c 	uxtb.w	r5, ip
  4034ca:	2d00      	cmp	r5, #0
  4034cc:	d1f6      	bne.n	4034bc <_Z13putsModelNamehhPchh+0xc>
  if (len==0) {
    putsStrIdx(x, y, STR_MODEL, id+1, att|LEADING0);
  4034ce:	3301      	adds	r3, #1
  4034d0:	4a07      	ldr	r2, [pc, #28]	; (4034f0 <_Z13putsModelNamehhPchh+0x40>)
  4034d2:	f044 0410 	orr.w	r4, r4, #16
  4034d6:	b2db      	uxtb	r3, r3
  4034d8:	9404      	str	r4, [sp, #16]
  }
  else {
    lcd_putsnAtt(x, y, name, sizeof(g_model.name), ZCHAR|att);
  }
}
  4034da:	bcf0      	pop	{r4, r5, r6, r7}
void putsModelName(uint8_t x, uint8_t y, char *name, uint8_t id, uint8_t att)
{
  uint8_t len = sizeof(g_model.name);
  while (len>0 && !name[len-1]) --len;
  if (len==0) {
    putsStrIdx(x, y, STR_MODEL, id+1, att|LEADING0);
  4034dc:	e76c      	b.n	4033b8 <_Z10putsStrIdxhhPKchh>

void putsModelName(uint8_t x, uint8_t y, char *name, uint8_t id, uint8_t att)
{
  uint8_t len = sizeof(g_model.name);
  while (len>0 && !name[len-1]) --len;
  if (len==0) {
  4034de:	2d00      	cmp	r5, #0
  4034e0:	d0f5      	beq.n	4034ce <_Z13putsModelNamehhPchh+0x1e>
    putsStrIdx(x, y, STR_MODEL, id+1, att|LEADING0);
  }
  else {
    lcd_putsnAtt(x, y, name, sizeof(g_model.name), ZCHAR|att);
  4034e2:	f044 0420 	orr.w	r4, r4, #32
  4034e6:	230a      	movs	r3, #10
  4034e8:	9404      	str	r4, [sp, #16]
  }
}
  4034ea:	bcf0      	pop	{r4, r5, r6, r7}
  while (len>0 && !name[len-1]) --len;
  if (len==0) {
    putsStrIdx(x, y, STR_MODEL, id+1, att|LEADING0);
  }
  else {
    lcd_putsnAtt(x, y, name, sizeof(g_model.name), ZCHAR|att);
  4034ec:	f7ff b97c 	b.w	4027e8 <_Z12lcd_putsnAtthhPKchh>
  4034f0:	004107b4 	.word	0x004107b4

004034f4 <_Z12putsSwitcheshhah>:
  }
}

void putsSwitches(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  4034f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4034f8:	4614      	mov	r4, r2
  4034fa:	b082      	sub	sp, #8
  4034fc:	4607      	mov	r7, r0
  4034fe:	460e      	mov	r6, r1
  403500:	461d      	mov	r5, r3
  if (idx == 0)
  403502:	2a00      	cmp	r2, #0
  403504:	d02b      	beq.n	40355e <_Z12putsSwitcheshhah+0x6a>
    return lcd_putsiAtt(x, y, STR_MMMINV, 0, att);
  if (~att & SWONLY) {
  403506:	f013 0840 	ands.w	r8, r3, #64	; 0x40
  40350a:	d104      	bne.n	403516 <_Z12putsSwitcheshhah+0x22>
    if (idx == SWITCH_ON)
  40350c:	2a2a      	cmp	r2, #42	; 0x2a
  40350e:	d03c      	beq.n	40358a <_Z12putsSwitcheshhah+0x96>
      return lcd_putsiAtt(x, y, STR_OFFON, 1, att);
    if (idx == SWITCH_OFF)
  403510:	f112 0f2a 	cmn.w	r2, #42	; 0x2a
  403514:	d033      	beq.n	40357e <_Z12putsSwitcheshhah+0x8a>
      return lcd_putsiAtt(x, y, STR_OFFON, 0, att);
  }
  if (idx<0) {
  403516:	2c00      	cmp	r4, #0
  403518:	db27      	blt.n	40356a <_Z12putsSwitcheshhah+0x76>
    lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/);
    idx = -idx;
  }
  if (idx > MAX_SWITCH) {
  40351a:	2c29      	cmp	r4, #41	; 0x29
  40351c:	dc0a      	bgt.n	403534 <_Z12putsSwitcheshhah+0x40>
    idx -= ((att & SWONLY) ? MAX_SWITCH : MAX_SWITCH+1);
    if (~att & SWCONDENSED) lcd_putcAtt(x+3*FW, y, 'm', att);
  }
  lcd_putsiAtt(x, y, STR_VSWITCHES, idx-1, att);
  40351e:	3c01      	subs	r4, #1
  403520:	b2e3      	uxtb	r3, r4
  403522:	4638      	mov	r0, r7
  403524:	4631      	mov	r1, r6
  403526:	4a1c      	ldr	r2, [pc, #112]	; (403598 <_Z12putsSwitcheshhah+0xa4>)
  403528:	9500      	str	r5, [sp, #0]
  40352a:	f7ff f9a1 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
}
  40352e:	b002      	add	sp, #8
  403530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (idx<0) {
    lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/);
    idx = -idx;
  }
  if (idx > MAX_SWITCH) {
    idx -= ((att & SWONLY) ? MAX_SWITCH : MAX_SWITCH+1);
  403534:	f1b8 0f00 	cmp.w	r8, #0
  403538:	bf0c      	ite	eq
  40353a:	f04f 082a 	moveq.w	r8, #42	; 0x2a
  40353e:	f04f 0829 	movne.w	r8, #41	; 0x29
  403542:	ebc8 0404 	rsb	r4, r8, r4
    if (~att & SWCONDENSED) lcd_putcAtt(x+3*FW, y, 'm', att);
  403546:	0628      	lsls	r0, r5, #24
  if (idx<0) {
    lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/);
    idx = -idx;
  }
  if (idx > MAX_SWITCH) {
    idx -= ((att & SWONLY) ? MAX_SWITCH : MAX_SWITCH+1);
  403548:	b264      	sxtb	r4, r4
    if (~att & SWCONDENSED) lcd_putcAtt(x+3*FW, y, 'm', att);
  40354a:	d4e8      	bmi.n	40351e <_Z12putsSwitcheshhah+0x2a>
  40354c:	f107 0012 	add.w	r0, r7, #18
  403550:	b2c0      	uxtb	r0, r0
  403552:	4631      	mov	r1, r6
  403554:	226d      	movs	r2, #109	; 0x6d
  403556:	462b      	mov	r3, r5
  403558:	f7ff f888 	bl	40266c <_Z11lcd_putcAtthhhh>
  40355c:	e7df      	b.n	40351e <_Z12putsSwitcheshhah+0x2a>
}

void putsSwitches(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  if (idx == 0)
    return lcd_putsiAtt(x, y, STR_MMMINV, 0, att);
  40355e:	9300      	str	r3, [sp, #0]
  403560:	4a0e      	ldr	r2, [pc, #56]	; (40359c <_Z12putsSwitcheshhah+0xa8>)
  403562:	4623      	mov	r3, r4
  403564:	f7ff f984 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  403568:	e7e1      	b.n	40352e <_Z12putsSwitcheshhah+0x3a>
      return lcd_putsiAtt(x, y, STR_OFFON, 1, att);
    if (idx == SWITCH_OFF)
      return lcd_putsiAtt(x, y, STR_OFFON, 0, att);
  }
  if (idx<0) {
    lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/);
  40356a:	1eb8      	subs	r0, r7, #2
  40356c:	b2c0      	uxtb	r0, r0
  40356e:	b271      	sxtb	r1, r6
  403570:	2208      	movs	r2, #8
  403572:	235e      	movs	r3, #94	; 0x5e
    idx = -idx;
  403574:	4264      	negs	r4, r4
      return lcd_putsiAtt(x, y, STR_OFFON, 1, att);
    if (idx == SWITCH_OFF)
      return lcd_putsiAtt(x, y, STR_OFFON, 0, att);
  }
  if (idx<0) {
    lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/);
  403576:	f7ff fa4f 	bl	402a18 <_Z13lcd_vlineStiphaah>
    idx = -idx;
  40357a:	b264      	sxtb	r4, r4
  40357c:	e7cd      	b.n	40351a <_Z12putsSwitcheshhah+0x26>
    return lcd_putsiAtt(x, y, STR_MMMINV, 0, att);
  if (~att & SWONLY) {
    if (idx == SWITCH_ON)
      return lcd_putsiAtt(x, y, STR_OFFON, 1, att);
    if (idx == SWITCH_OFF)
      return lcd_putsiAtt(x, y, STR_OFFON, 0, att);
  40357e:	9300      	str	r3, [sp, #0]
  403580:	4a07      	ldr	r2, [pc, #28]	; (4035a0 <_Z12putsSwitcheshhah+0xac>)
  403582:	4643      	mov	r3, r8
  403584:	f7ff f974 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  403588:	e7d1      	b.n	40352e <_Z12putsSwitcheshhah+0x3a>
{
  if (idx == 0)
    return lcd_putsiAtt(x, y, STR_MMMINV, 0, att);
  if (~att & SWONLY) {
    if (idx == SWITCH_ON)
      return lcd_putsiAtt(x, y, STR_OFFON, 1, att);
  40358a:	9300      	str	r3, [sp, #0]
  40358c:	4a04      	ldr	r2, [pc, #16]	; (4035a0 <_Z12putsSwitcheshhah+0xac>)
  40358e:	2301      	movs	r3, #1
  403590:	f7ff f96e 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  403594:	e7cb      	b.n	40352e <_Z12putsSwitcheshhah+0x3a>
  403596:	bf00      	nop
  403598:	004106cc 	.word	0x004106cc
  40359c:	004102e3 	.word	0x004102e3
  4035a0:	004102dc 	.word	0x004102dc

004035a4 <_Z15putsMixerSourcehhhh>:
    putsChnRaw(x, y, idx+(NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM), att);
}

void putsMixerSource(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2)
  4035a4:	2a09      	cmp	r2, #9
  4035a6:	d903      	bls.n	4035b0 <_Z15putsMixerSourcehhhh+0xc>
    putsChnRaw(x, y, idx, att);
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+MAX_SWITCH)
  4035a8:	2a32      	cmp	r2, #50	; 0x32
  4035aa:	d902      	bls.n	4035b2 <_Z15putsMixerSourcehhhh+0xe>
    putsSwitches(x, y, idx-NUM_STICKS-NUM_POTS-NUM_ROTARY_ENCODERS-2, att);
  else
    putsChnRaw(x, y, idx-MAX_SWITCH, att);
  4035ac:	3a29      	subs	r2, #41	; 0x29
  4035ae:	b2d2      	uxtb	r2, r2
  4035b0:	e728      	b.n	403404 <_Z10putsChnRawhhhh>
void putsMixerSource(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2)
    putsChnRaw(x, y, idx, att);
  else if (idx<=NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+MAX_SWITCH)
    putsSwitches(x, y, idx-NUM_STICKS-NUM_POTS-NUM_ROTARY_ENCODERS-2, att);
  4035b2:	3a09      	subs	r2, #9
  4035b4:	b252      	sxtb	r2, r2
  4035b6:	e79d      	b.n	4034f4 <_Z12putsSwitcheshhah>

004035b8 <_Z15putsFlightPhasehhah>:
  lcd_putsiAtt(x, y, STR_VSWITCHES, idx-1, att);
}

#ifdef FLIGHT_PHASES
void putsFlightPhase(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  4035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (idx==0) { lcd_putsiAtt(x, y, STR_MMMINV, 0, att); return; }
  4035ba:	2a00      	cmp	r2, #0
  lcd_putsiAtt(x, y, STR_VSWITCHES, idx-1, att);
}

#ifdef FLIGHT_PHASES
void putsFlightPhase(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  4035bc:	b083      	sub	sp, #12
  4035be:	4614      	mov	r4, r2
  4035c0:	4607      	mov	r7, r0
  4035c2:	460e      	mov	r6, r1
  4035c4:	461d      	mov	r5, r3
  if (idx==0) { lcd_putsiAtt(x, y, STR_MMMINV, 0, att); return; }
  4035c6:	d018      	beq.n	4035fa <_Z15putsFlightPhasehhah+0x42>
  if (idx < 0) { lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/); idx = -idx; }
  4035c8:	db1d      	blt.n	403606 <_Z15putsFlightPhasehhah+0x4e>
  if (att & CONDENSED)
  4035ca:	072b      	lsls	r3, r5, #28
  4035cc:	d409      	bmi.n	4035e2 <_Z15putsFlightPhasehhah+0x2a>
    lcd_outdezNAtt(x+FW*1, y, idx-1, (att & ~CONDENSED), 1);
  else
    putsStrIdx(x, y, STR_FP, idx-1, att);
  4035ce:	3c01      	subs	r4, #1
  4035d0:	b2e3      	uxtb	r3, r4
  4035d2:	4638      	mov	r0, r7
  4035d4:	4631      	mov	r1, r6
  4035d6:	4a11      	ldr	r2, [pc, #68]	; (40361c <_Z15putsFlightPhasehhah+0x64>)
  4035d8:	9500      	str	r5, [sp, #0]
  4035da:	f7ff feed 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
}
  4035de:	b003      	add	sp, #12
  4035e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
void putsFlightPhase(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  if (idx==0) { lcd_putsiAtt(x, y, STR_MMMINV, 0, att); return; }
  if (idx < 0) { lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/); idx = -idx; }
  if (att & CONDENSED)
    lcd_outdezNAtt(x+FW*1, y, idx-1, (att & ~CONDENSED), 1);
  4035e2:	2101      	movs	r1, #1
  4035e4:	3706      	adds	r7, #6
  4035e6:	3c01      	subs	r4, #1
  4035e8:	9100      	str	r1, [sp, #0]
  4035ea:	b222      	sxth	r2, r4
  4035ec:	b2f8      	uxtb	r0, r7
  4035ee:	f005 03f7 	and.w	r3, r5, #247	; 0xf7
  4035f2:	4631      	mov	r1, r6
  4035f4:	f7ff faae 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  4035f8:	e7f1      	b.n	4035de <_Z15putsFlightPhasehhah+0x26>
}

#ifdef FLIGHT_PHASES
void putsFlightPhase(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  if (idx==0) { lcd_putsiAtt(x, y, STR_MMMINV, 0, att); return; }
  4035fa:	9300      	str	r3, [sp, #0]
  4035fc:	4a08      	ldr	r2, [pc, #32]	; (403620 <_Z15putsFlightPhasehhah+0x68>)
  4035fe:	4623      	mov	r3, r4
  403600:	f7ff f936 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  403604:	e7eb      	b.n	4035de <_Z15putsFlightPhasehhah+0x26>
  if (idx < 0) { lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/); idx = -idx; }
  403606:	3802      	subs	r0, #2
  403608:	b2c0      	uxtb	r0, r0
  40360a:	b249      	sxtb	r1, r1
  40360c:	2208      	movs	r2, #8
  40360e:	235e      	movs	r3, #94	; 0x5e
  403610:	4264      	negs	r4, r4
  403612:	f7ff fa01 	bl	402a18 <_Z13lcd_vlineStiphaah>
  403616:	b264      	sxtb	r4, r4
  403618:	e7d7      	b.n	4035ca <_Z15putsFlightPhasehhah+0x12>
  40361a:	bf00      	nop
  40361c:	004107bc 	.word	0x004107bc
  403620:	004102e3 	.word	0x004102e3

00403624 <_Z9putsCurvehhah>:
    putsStrIdx(x, y, STR_FP, idx-1, att);
}
#endif

void putsCurve(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  403624:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (idx < 0) {
  403626:	2a00      	cmp	r2, #0
    putsStrIdx(x, y, STR_FP, idx-1, att);
}
#endif

void putsCurve(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  403628:	b083      	sub	sp, #12
  40362a:	4614      	mov	r4, r2
  40362c:	4606      	mov	r6, r0
  40362e:	460d      	mov	r5, r1
  403630:	461f      	mov	r7, r3
  if (idx < 0) {
  403632:	db13      	blt.n	40365c <_Z9putsCurvehhah+0x38>
    lcd_putcAtt(x-1*FW, y, '!', att);
    idx = -idx + 6;
  }
  if (idx < CURVE_BASE)
  403634:	2c06      	cmp	r4, #6
  403636:	dd09      	ble.n	40364c <_Z9putsCurvehhah+0x28>
    lcd_putsiAtt(x, y, STR_VCURVEFUNC, idx, att);
  else
    putsStrIdx(x, y, PSTR("c"), idx-CURVE_BASE+1, att);
  403638:	3c06      	subs	r4, #6
  40363a:	b2e3      	uxtb	r3, r4
  40363c:	4630      	mov	r0, r6
  40363e:	4629      	mov	r1, r5
  403640:	4a0b      	ldr	r2, [pc, #44]	; (403670 <_Z9putsCurvehhah+0x4c>)
  403642:	9700      	str	r7, [sp, #0]
  403644:	f7ff feb8 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
}
  403648:	b003      	add	sp, #12
  40364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (idx < 0) {
    lcd_putcAtt(x-1*FW, y, '!', att);
    idx = -idx + 6;
  }
  if (idx < CURVE_BASE)
    lcd_putsiAtt(x, y, STR_VCURVEFUNC, idx, att);
  40364c:	b2e3      	uxtb	r3, r4
  40364e:	4630      	mov	r0, r6
  403650:	4629      	mov	r1, r5
  403652:	4a08      	ldr	r2, [pc, #32]	; (403674 <_Z9putsCurvehhah+0x50>)
  403654:	9700      	str	r7, [sp, #0]
  403656:	f7ff f90b 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  40365a:	e7f5      	b.n	403648 <_Z9putsCurvehhah+0x24>
#endif

void putsCurve(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  if (idx < 0) {
    lcd_putcAtt(x-1*FW, y, '!', att);
  40365c:	3806      	subs	r0, #6
  40365e:	b2c0      	uxtb	r0, r0
  403660:	2221      	movs	r2, #33	; 0x21
    idx = -idx + 6;
  403662:	f1c4 0406 	rsb	r4, r4, #6
#endif

void putsCurve(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
  if (idx < 0) {
    lcd_putcAtt(x-1*FW, y, '!', att);
  403666:	f7ff f801 	bl	40266c <_Z11lcd_putcAtthhhh>
    idx = -idx + 6;
  40366a:	b264      	sxtb	r4, r4
  40366c:	e7e2      	b.n	403634 <_Z9putsCurvehhah+0x10>
  40366e:	bf00      	nop
  403670:	00411410 	.word	0x00411410
  403674:	004103b4 	.word	0x004103b4

00403678 <_Z11putsTmrModehhah>:
  else
    putsStrIdx(x, y, PSTR("c"), idx-CURVE_BASE+1, att);
}

void putsTmrMode(uint8_t x, uint8_t y, int8_t mode, uint8_t att)
{
  403678:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (mode < 0) {
  40367a:	2a00      	cmp	r2, #0
  else
    putsStrIdx(x, y, PSTR("c"), idx-CURVE_BASE+1, att);
}

void putsTmrMode(uint8_t x, uint8_t y, int8_t mode, uint8_t att)
{
  40367c:	b083      	sub	sp, #12
  40367e:	4614      	mov	r4, r2
  403680:	4606      	mov	r6, r0
  403682:	460d      	mov	r5, r1
  403684:	461f      	mov	r7, r3
  if (mode < 0) {
  403686:	db12      	blt.n	4036ae <_Z11putsTmrModehhah+0x36>
    mode = TMR_VAROFS - mode - 1;
    lcd_putcAtt(x-1*FW, y, '!', att);
  }
  else if (mode < TMR_VAROFS) {
  403688:	2a04      	cmp	r2, #4
  40368a:	dd09      	ble.n	4036a0 <_Z11putsTmrModehhah+0x28>
    lcd_putsiAtt(x, y, STR_VTMRMODES, mode, att);
    return;
  }

  putsSwitches(x, y, mode-(TMR_VAROFS-1), att|SWONLY);
  40368c:	3c04      	subs	r4, #4
  40368e:	b262      	sxtb	r2, r4
  403690:	f047 0340 	orr.w	r3, r7, #64	; 0x40
  403694:	4630      	mov	r0, r6
  403696:	4629      	mov	r1, r5
}
  403698:	b003      	add	sp, #12
  40369a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  else if (mode < TMR_VAROFS) {
    lcd_putsiAtt(x, y, STR_VTMRMODES, mode, att);
    return;
  }

  putsSwitches(x, y, mode-(TMR_VAROFS-1), att|SWONLY);
  40369e:	e729      	b.n	4034f4 <_Z12putsSwitcheshhah>
  if (mode < 0) {
    mode = TMR_VAROFS - mode - 1;
    lcd_putcAtt(x-1*FW, y, '!', att);
  }
  else if (mode < TMR_VAROFS) {
    lcd_putsiAtt(x, y, STR_VTMRMODES, mode, att);
  4036a0:	b2d3      	uxtb	r3, r2
  4036a2:	4a07      	ldr	r2, [pc, #28]	; (4036c0 <_Z11putsTmrModehhah+0x48>)
  4036a4:	9700      	str	r7, [sp, #0]
  4036a6:	f7ff f8e3 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
    return;
  }

  putsSwitches(x, y, mode-(TMR_VAROFS-1), att|SWONLY);
}
  4036aa:	b003      	add	sp, #12
  4036ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

void putsTmrMode(uint8_t x, uint8_t y, int8_t mode, uint8_t att)
{
  if (mode < 0) {
    mode = TMR_VAROFS - mode - 1;
    lcd_putcAtt(x-1*FW, y, '!', att);
  4036ae:	3806      	subs	r0, #6
}

void putsTmrMode(uint8_t x, uint8_t y, int8_t mode, uint8_t att)
{
  if (mode < 0) {
    mode = TMR_VAROFS - mode - 1;
  4036b0:	f1c2 0404 	rsb	r4, r2, #4
    lcd_putcAtt(x-1*FW, y, '!', att);
  4036b4:	b2c0      	uxtb	r0, r0
  4036b6:	2221      	movs	r2, #33	; 0x21
}

void putsTmrMode(uint8_t x, uint8_t y, int8_t mode, uint8_t att)
{
  if (mode < 0) {
    mode = TMR_VAROFS - mode - 1;
  4036b8:	b264      	sxtb	r4, r4
    lcd_putcAtt(x-1*FW, y, '!', att);
  4036ba:	f7fe ffd7 	bl	40266c <_Z11lcd_putcAtthhhh>
  4036be:	e7e5      	b.n	40368c <_Z11putsTmrModehhah+0x14>
  4036c0:	00410779 	.word	0x00410779

004036c4 <_Z12putsTrimModehhhhh>:

  putsSwitches(x, y, mode-(TMR_VAROFS-1), att|SWONLY);
}

void putsTrimMode(uint8_t x, uint8_t y, uint8_t phase, uint8_t idx, uint8_t att)
{
  4036c4:	b4f0      	push	{r4, r5, r6, r7}
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  4036c6:	4c16      	ldr	r4, [pc, #88]	; (403720 <_Z12putsTrimModehhhhh+0x5c>)
  4036c8:	eb04 0583 	add.w	r5, r4, r3, lsl #2
  4036cc:	f8d5 6998 	ldr.w	r6, [r5, #2456]	; 0x998
  4036d0:	f89d 5010 	ldrb.w	r5, [sp, #16]
  4036d4:	b126      	cbz	r6, 4036e0 <_Z12putsTrimModehhhhh+0x1c>
    uint8_t p = v - TRIM_EXTENDED_MAX - 1;
    if (p >= phase) p++;
    lcd_putcAtt(x, y, '0'+p, att);
  }
  else {
    putsChnLetter(x, y, idx+1, att);
  4036d6:	3301      	adds	r3, #1
  4036d8:	b2da      	uxtb	r2, r3
  4036da:	462b      	mov	r3, r5
  }
}
  4036dc:	bcf0      	pop	{r4, r5, r6, r7}
    uint8_t p = v - TRIM_EXTENDED_MAX - 1;
    if (p >= phase) p++;
    lcd_putcAtt(x, y, '0'+p, att);
  }
  else {
    putsChnLetter(x, y, idx+1, att);
  4036de:	e6d9      	b.n	403494 <_Z13putsChnLetterhhhh>
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  4036e0:	0116      	lsls	r6, r2, #4
  4036e2:	f504 749e 	add.w	r4, r4, #316	; 0x13c
  4036e6:	f506 66d1 	add.w	r6, r6, #1672	; 0x688
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  4036ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
  4036ee:	19a7      	adds	r7, r4, r6
  4036f0:	5da4      	ldrb	r4, [r4, r6]
  4036f2:	787e      	ldrb	r6, [r7, #1]
  4036f4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

void putsTrimMode(uint8_t x, uint8_t y, uint8_t phase, uint8_t idx, uint8_t att)
{
  int16_t v = getRawTrimValue(phase, idx);

  if (v > TRIM_EXTENDED_MAX) {
  4036f8:	b226      	sxth	r6, r4
  4036fa:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
  4036fe:	ddea      	ble.n	4036d6 <_Z12putsTrimModehhhhh+0x12>
    uint8_t p = v - TRIM_EXTENDED_MAX - 1;
  403700:	b2e4      	uxtb	r4, r4
  403702:	f104 030b 	add.w	r3, r4, #11
  403706:	b2db      	uxtb	r3, r3
    if (p >= phase) p++;
  403708:	429a      	cmp	r2, r3
  40370a:	bf9c      	itt	ls
  40370c:	f104 030c 	addls.w	r3, r4, #12
  403710:	b2db      	uxtbls	r3, r3
    lcd_putcAtt(x, y, '0'+p, att);
  403712:	f103 0230 	add.w	r2, r3, #48	; 0x30
  403716:	b2d2      	uxtb	r2, r2
  403718:	462b      	mov	r3, r5
  }
  else {
    putsChnLetter(x, y, idx+1, att);
  }
}
  40371a:	bcf0      	pop	{r4, r5, r6, r7}
  int16_t v = getRawTrimValue(phase, idx);

  if (v > TRIM_EXTENDED_MAX) {
    uint8_t p = v - TRIM_EXTENDED_MAX - 1;
    if (p >= phase) p++;
    lcd_putcAtt(x, y, '0'+p, att);
  40371c:	f7fe bfa6 	b.w	40266c <_Z11lcd_putcAtthhhh>
  403720:	20000108 	.word	0x20000108

00403724 <_Z10lcdSendCtlh>:
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403724:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  PIOA->PIO_CODR = LCD_A0 ;
  403728:	f44f 6160 	mov.w	r1, #3584	; 0xe00
0x1E,0x1F,0x9E,0x9F,0x5E,0x5F,0xDE,0xDF,0x3E,0x3F,0xBE,0xBF,0x7E,0x7F,0xFE,0xFF
} ;
#endif

void lcdSendCtl(uint8_t val)
{
  40372c:	b430      	push	{r4, r5}
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  40372e:	f2c4 030e 	movt	r3, #16398	; 0x400e
  PIOA->PIO_CODR = LCD_A0 ;
  403732:	f2c4 010e 	movt	r1, #16398	; 0x400e
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403736:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
  PIOA->PIO_CODR = LCD_A0 ;
  40373a:	2580      	movs	r5, #128	; 0x80
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  40373c:	635c      	str	r4, [r3, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  40373e:	634d      	str	r5, [r1, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403744:	6359      	str	r1, [r3, #52]	; 0x34
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403746:	2200      	movs	r2, #0
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  PIOA->PIO_CODR = LCD_A0 ;
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = val ;
  40374c:	6398      	str	r0, [r3, #56]	; 0x38
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  40374e:	f2c4 0201 	movt	r2, #16385	; 0x4001
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403752:	6319      	str	r1, [r3, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403754:	2305      	movs	r3, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403756:	4614      	mov	r4, r2
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403758:	6013      	str	r3, [r2, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  40375a:	6923      	ldr	r3, [r4, #16]
  40375c:	2b02      	cmp	r3, #2
  40375e:	d9fc      	bls.n	40375a <_Z10lcdSendCtlh+0x36>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403760:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  403764:	f2c4 030e 	movt	r3, #16398	; 0x400e
  403768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  40376c:	f44f 6260 	mov.w	r2, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403770:	6359      	str	r1, [r3, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403772:	f2c4 020e 	movt	r2, #16398	; 0x400e
  403776:	2180      	movs	r1, #128	; 0x80
  403778:	6311      	str	r1, [r2, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  40377a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40377e:	631a      	str	r2, [r3, #48]	; 0x30
}
  403780:	bc30      	pop	{r4, r5}
  403782:	4770      	bx	lr

00403784 <_Z8lcd_initv>:

void lcd_init()
{
  403784:	b570      	push	{r4, r5, r6, lr}
  register Pio *pioptr ;
  // /home/thus/txt/datasheets/lcd/KS0713.pdf
  // ~/txt/flieger/ST7565RV17.pdf  from http://www.glyn.de/content.asp?wdid=132&sid=

#ifdef REVB
  configure_pins( LCD_A0, PIN_ENABLE | PIN_LOW | PIN_OUTPUT | PIN_PORTA | PIN_NO_PULLUP ) ;
  403786:	2080      	movs	r0, #128	; 0x80
  403788:	2101      	movs	r1, #1
  40378a:	f7fc fdcf 	bl	40032c <_Z14configure_pinsmt>
  pioptr = PIOC ;
  pioptr->PIO_PER = 0x0C0030FFL ;         // Enable bits 27,26,13,12,7-0
  40378e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  403792:	f243 00ff 	movw	r0, #12543	; 0x30ff
  403796:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40379a:	f6c0 4000 	movt	r0, #3072	; 0xc00
  pioptr->PIO_CODR = LCD_E | LCD_RnW ;
  40379e:	f44f 5440 	mov.w	r4, #12288	; 0x3000
  // ~/txt/flieger/ST7565RV17.pdf  from http://www.glyn.de/content.asp?wdid=132&sid=

#ifdef REVB
  configure_pins( LCD_A0, PIN_ENABLE | PIN_LOW | PIN_OUTPUT | PIN_PORTA | PIN_NO_PULLUP ) ;
  pioptr = PIOC ;
  pioptr->PIO_PER = 0x0C0030FFL ;         // Enable bits 27,26,13,12,7-0
  4037a2:	6018      	str	r0, [r3, #0]
  pioptr->PIO_CODR = LCD_E | LCD_RnW ;
  4037a4:	635c      	str	r4, [r3, #52]	; 0x34
  pioptr->PIO_SODR = LCD_RES | LCD_CS1 ;
  4037a6:	f04f 6440 	mov.w	r4, #201326592	; 0xc000000
  4037aa:	631c      	str	r4, [r3, #48]	; 0x30
  pioptr->PIO_OER = 0x0C0030FFL ;         // Set bits 27,26,13,12,7-0 output
  4037ac:	6118      	str	r0, [r3, #16]
  pioptr->PIO_OWER = 0x000000FFL ;                // Allow write to ls 8 bits in ODSR
  4037ae:	20ff      	movs	r0, #255	; 0xff
  4037b0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  pioptr->PIO_OER = 0x0C00B0FFL ;         // Set bits 27,26,15,13,12,7-0 output
  pioptr->PIO_OWER = 0x000000FFL ;                // Allow write to ls 8 bits in ODSR
#endif

  pioptr->PIO_CODR = LCD_RES ;            // Reset LCD
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4037b4:	2200      	movs	r2, #0
  pioptr->PIO_SODR = LCD_RES | LCD_CS1 ;
  pioptr->PIO_OER = 0x0C00B0FFL ;         // Set bits 27,26,15,13,12,7-0 output
  pioptr->PIO_OWER = 0x000000FFL ;                // Allow write to ls 8 bits in ODSR
#endif

  pioptr->PIO_CODR = LCD_RES ;            // Reset LCD
  4037b6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4037ba:	f2c4 0201 	movt	r2, #16385	; 0x4001
  pioptr->PIO_SODR = LCD_RES | LCD_CS1 ;
  pioptr->PIO_OER = 0x0C00B0FFL ;         // Set bits 27,26,15,13,12,7-0 output
  pioptr->PIO_OWER = 0x000000FFL ;                // Allow write to ls 8 bits in ODSR
#endif

  pioptr->PIO_CODR = LCD_RES ;            // Reset LCD
  4037be:	6358      	str	r0, [r3, #52]	; 0x34
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4037c0:	2305      	movs	r3, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 12 )         // 2 uS, Value depends on MCK/2 (used 6MHz)
  4037c2:	4611      	mov	r1, r2
  pioptr->PIO_OER = 0x0C00B0FFL ;         // Set bits 27,26,15,13,12,7-0 output
  pioptr->PIO_OWER = 0x000000FFL ;                // Allow write to ls 8 bits in ODSR
#endif

  pioptr->PIO_CODR = LCD_RES ;            // Reset LCD
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4037c4:	6013      	str	r3, [r2, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 12 )         // 2 uS, Value depends on MCK/2 (used 6MHz)
  4037c6:	690a      	ldr	r2, [r1, #16]
  4037c8:	2300      	movs	r3, #0
  4037ca:	2a0b      	cmp	r2, #11
  4037cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4037d0:	d9f9      	bls.n	4037c6 <_Z8lcd_initv+0x42>
  {
    // Wait
  }
  pioptr->PIO_SODR = LCD_RES ;            // Remove LCD reset
  4037d2:	f44f 5290 	mov.w	r2, #4608	; 0x1200
  4037d6:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4037da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4037de:	6311      	str	r1, [r2, #48]	; 0x30
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4037e0:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 9000 )               // 1500 uS, Value depends on MCK/2 (used 6MHz)
  4037e2:	4618      	mov	r0, r3
  while ( TC0->TC_CHANNEL[0].TC_CV < 12 )         // 2 uS, Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_SODR = LCD_RES ;            // Remove LCD reset
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4037e4:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 9000 )               // 1500 uS, Value depends on MCK/2 (used 6MHz)
  4037e6:	f242 3127 	movw	r1, #8999	; 0x2327
  4037ea:	6902      	ldr	r2, [r0, #16]
  4037ec:	2300      	movs	r3, #0
  4037ee:	428a      	cmp	r2, r1
  4037f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4037f4:	d9f9      	bls.n	4037ea <_Z8lcd_initv+0x66>
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  4037f6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
  PIOA->PIO_CODR = LCD_A0 ;
  4037fa:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  4037fe:	f2c4 020e 	movt	r2, #16398	; 0x400e
  PIOA->PIO_CODR = LCD_A0 ;
  403802:	f2c4 000e 	movt	r0, #16398	; 0x400e
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403806:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  PIOA->PIO_CODR = LCD_A0 ;
  40380a:	2480      	movs	r4, #128	; 0x80
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  40380c:	6351      	str	r1, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  40380e:	6344      	str	r4, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403810:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  403814:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403816:	20e2      	movs	r0, #226	; 0xe2
  403818:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  40381a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40381e:	6310      	str	r0, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403820:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403822:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403824:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403826:	690a      	ldr	r2, [r1, #16]
  403828:	2300      	movs	r3, #0
  40382a:	2a02      	cmp	r2, #2
  40382c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  403830:	d9f9      	bls.n	403826 <_Z8lcd_initv+0xa2>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403832:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403836:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40383a:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  40383e:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403842:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403846:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403848:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40384c:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  40384e:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403850:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403852:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403854:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403856:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  40385a:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  40385c:	20ae      	movs	r0, #174	; 0xae
  40385e:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403860:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403862:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403864:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403866:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403868:	690a      	ldr	r2, [r1, #16]
  40386a:	2300      	movs	r3, #0
  40386c:	2a02      	cmp	r2, #2
  40386e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  403872:	d9f9      	bls.n	403868 <_Z8lcd_initv+0xe4>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403874:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403878:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40387c:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403880:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403884:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403888:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  40388a:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40388e:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403890:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403892:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403894:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403896:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403898:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  40389c:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  40389e:	20a1      	movs	r0, #161	; 0xa1
  4038a0:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  4038a2:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4038a4:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4038a6:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4038a8:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4038aa:	690a      	ldr	r2, [r1, #16]
  4038ac:	2300      	movs	r3, #0
  4038ae:	2a02      	cmp	r2, #2
  4038b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4038b4:	d9f9      	bls.n	4038aa <_Z8lcd_initv+0x126>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4038b6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4038ba:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4038be:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4038c2:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4038c6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4038ca:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  4038cc:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4038d0:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4038d2:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  4038d4:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  4038d6:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  4038d8:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  4038da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  4038de:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  4038e0:	20a6      	movs	r0, #166	; 0xa6
  4038e2:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  4038e4:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4038e6:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4038e8:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4038ea:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4038ec:	690a      	ldr	r2, [r1, #16]
  4038ee:	2300      	movs	r3, #0
  4038f0:	2a02      	cmp	r2, #2
  4038f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4038f6:	d9f9      	bls.n	4038ec <_Z8lcd_initv+0x168>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4038f8:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4038fc:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403900:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403904:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403908:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  40390c:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  40390e:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403912:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403914:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403916:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403918:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  40391a:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  40391c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  403920:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403922:	20a4      	movs	r0, #164	; 0xa4
  403924:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403926:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403928:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  40392a:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  40392c:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  40392e:	690a      	ldr	r2, [r1, #16]
  403930:	2300      	movs	r3, #0
  403932:	2a02      	cmp	r2, #2
  403934:	f2c4 0301 	movt	r3, #16385	; 0x4001
  403938:	d9f9      	bls.n	40392e <_Z8lcd_initv+0x1aa>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40393a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  40393e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403942:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403946:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40394a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  40394e:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403950:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403954:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403956:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403958:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  40395a:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  40395c:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  40395e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  403962:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403964:	20a2      	movs	r0, #162	; 0xa2
  403966:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403968:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  40396a:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  40396c:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  40396e:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403970:	690a      	ldr	r2, [r1, #16]
  403972:	2300      	movs	r3, #0
  403974:	2a02      	cmp	r2, #2
  403976:	f2c4 0301 	movt	r3, #16385	; 0x4001
  40397a:	d9f9      	bls.n	403970 <_Z8lcd_initv+0x1ec>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40397c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403980:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403984:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403988:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  40398c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403990:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403992:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403996:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403998:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  40399a:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  40399c:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  40399e:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  4039a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  4039a4:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  4039a6:	20c0      	movs	r0, #192	; 0xc0
  4039a8:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  4039aa:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4039ac:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4039ae:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4039b0:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4039b2:	690a      	ldr	r2, [r1, #16]
  4039b4:	2300      	movs	r3, #0
  4039b6:	2a02      	cmp	r2, #2
  4039b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4039bc:	d9f9      	bls.n	4039b2 <_Z8lcd_initv+0x22e>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4039be:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4039c2:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4039c6:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4039ca:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4039ce:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4039d2:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  4039d4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  4039d8:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  4039da:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  4039dc:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  4039de:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  4039e0:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  4039e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  4039e6:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  4039e8:	202f      	movs	r0, #47	; 0x2f
  4039ea:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  4039ec:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4039ee:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4039f0:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  4039f2:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  4039f4:	690a      	ldr	r2, [r1, #16]
  4039f6:	2300      	movs	r3, #0
  4039f8:	2a02      	cmp	r2, #2
  4039fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4039fe:	d9f9      	bls.n	4039f4 <_Z8lcd_initv+0x270>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a00:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a04:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a08:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a0c:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a10:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a14:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403a16:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a1a:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a1c:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403a1e:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403a20:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403a22:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403a24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  403a28:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403a2a:	2025      	movs	r0, #37	; 0x25
  403a2c:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403a2e:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403a30:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403a32:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403a34:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403a36:	690a      	ldr	r2, [r1, #16]
  403a38:	2300      	movs	r3, #0
  403a3a:	2a02      	cmp	r2, #2
  403a3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  403a40:	d9f9      	bls.n	403a36 <_Z8lcd_initv+0x2b2>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a42:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a46:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a4a:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a4e:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a52:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a56:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403a58:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a5c:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a5e:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403a60:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403a62:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403a64:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403a66:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  403a6a:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403a6c:	2081      	movs	r0, #129	; 0x81
  403a6e:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403a70:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403a72:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403a74:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403a76:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403a78:	690a      	ldr	r2, [r1, #16]
  403a7a:	2300      	movs	r3, #0
  403a7c:	2a02      	cmp	r2, #2
  403a7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  403a82:	d9f9      	bls.n	403a78 <_Z8lcd_initv+0x2f4>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a84:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a88:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a8c:	f2c4 020e 	movt	r2, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a90:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a94:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403a98:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403a9a:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403a9e:	6354      	str	r4, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403aa0:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403aa2:	6316      	str	r6, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403aa4:	6356      	str	r6, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403aa6:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403aa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  403aac:	6350      	str	r0, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403aae:	2022      	movs	r0, #34	; 0x22
  403ab0:	6390      	str	r0, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403ab2:	6314      	str	r4, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403ab4:	2205      	movs	r2, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403ab6:	4619      	mov	r1, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403ab8:	601a      	str	r2, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403aba:	690a      	ldr	r2, [r1, #16]
  403abc:	2300      	movs	r3, #0
  403abe:	2a02      	cmp	r2, #2
  403ac0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  403ac4:	d9f9      	bls.n	403aba <_Z8lcd_initv+0x336>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403ac6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403aca:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403ace:	f2c4 010e 	movt	r1, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403ad2:	f2c4 000e 	movt	r0, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403ad6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403ada:	2580      	movs	r5, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403adc:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403ae0:	634c      	str	r4, [r1, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403ae2:	6305      	str	r5, [r0, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403ae4:	630e      	str	r6, [r1, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403ae6:	634e      	str	r6, [r1, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403ae8:	6345      	str	r5, [r0, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403aea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  403aee:	6348      	str	r0, [r1, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403af0:	20af      	movs	r0, #175	; 0xaf
  403af2:	6388      	str	r0, [r1, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403af4:	630c      	str	r4, [r1, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403af6:	2105      	movs	r1, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403af8:	461a      	mov	r2, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403afa:	6019      	str	r1, [r3, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403afc:	6913      	ldr	r3, [r2, #16]
  403afe:	2b02      	cmp	r3, #2
  403b00:	d9fc      	bls.n	403afc <_Z8lcd_initv+0x378>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403b02:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  403b06:	f2c4 030e 	movt	r3, #16398	; 0x400e
  403b0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403b0e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403b12:	6358      	str	r0, [r3, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403b14:	f2c4 010e 	movt	r1, #16398	; 0x400e
  403b18:	2080      	movs	r0, #128	; 0x80
  403b1a:	6308      	str	r0, [r1, #48]	; 0x30
  lcdSendCtl(0x22); // 24 SV5 SV4 SV3 SV2 SV1 SV0 = 0x18
  lcdSendCtl(0xAF); //DON = 1: display ON
 // g_eeGeneral.contrast = 0x22;

#ifdef REVB
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  403b1c:	223a      	movs	r2, #58	; 0x3a
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403b1e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403b22:	6319      	str	r1, [r3, #48]	; 0x30
  lcdSendCtl(0x22); // 24 SV5 SV4 SV3 SV2 SV1 SV0 = 0x18
  lcdSendCtl(0xAF); //DON = 1: display ON
 // g_eeGeneral.contrast = 0x22;

#ifdef REVB
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  403b24:	615a      	str	r2, [r3, #20]
  pioptr->PIO_PUER = 0x0000003AL ;                // Set bits 1, 3, 4, 5 with pullups
  403b26:	665a      	str	r2, [r3, #100]	; 0x64
  pioptr->PIO_ODSR = 0 ;                                                  // Drive D0 low
  403b28:	2200      	movs	r2, #0
  403b2a:	639a      	str	r2, [r3, #56]	; 0x38
#else
  pioptr->PIO_ODR = 0x0000003CL ;         // Set bits 2, 3, 4, 5 input
  pioptr->PIO_PUER = 0x0000003CL ;                // Set bits 2, 3, 4, 5 with pullups
  pioptr->PIO_ODSR = 0 ;                                                  // Drive D0 low
#endif
}
  403b2c:	bd70      	pop	{r4, r5, r6, pc}
  403b2e:	bf00      	nop

00403b30 <_Z13lcdSetRefVolth>:

void lcdSetRefVolt(uint8_t val)
{
  403b30:	b4f0      	push	{r4, r5, r6, r7}
#ifndef SIMU
  register Pio *pioptr ;
  pioptr = PIOC ;

  pioptr->PIO_OER = 0x0C00B0FFL ;         // Set bits 27,26,15,13,12,7-0 output
  403b32:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  403b36:	f24b 04ff 	movw	r4, #45311	; 0xb0ff
  403b3a:	f2c4 030e 	movt	r3, #16398	; 0x400e
  403b3e:	f6c0 4400 	movt	r4, #3072	; 0xc00
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  PIOA->PIO_CODR = LCD_A0 ;
  403b42:	f44f 6160 	mov.w	r1, #3584	; 0xe00
{
#ifndef SIMU
  register Pio *pioptr ;
  pioptr = PIOC ;

  pioptr->PIO_OER = 0x0C00B0FFL ;         // Set bits 27,26,15,13,12,7-0 output
  403b46:	611c      	str	r4, [r3, #16]
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  PIOA->PIO_CODR = LCD_A0 ;
  403b48:	f2c4 010e 	movt	r1, #16398	; 0x400e
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403b4c:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
  PIOA->PIO_CODR = LCD_A0 ;
  403b50:	2580      	movs	r5, #128	; 0x80
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403b52:	635c      	str	r4, [r3, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403b54:	634d      	str	r5, [r1, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403b5a:	6359      	str	r1, [r3, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403b5c:	2181      	movs	r1, #129	; 0x81
  403b5e:	6399      	str	r1, [r3, #56]	; 0x38
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403b60:	2200      	movs	r2, #0
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403b66:	f2c4 0201 	movt	r2, #16385	; 0x4001
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403b6a:	6319      	str	r1, [r3, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403b6c:	2305      	movs	r3, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403b6e:	4614      	mov	r4, r2
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403b70:	6013      	str	r3, [r2, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403b72:	6923      	ldr	r3, [r4, #16]
  403b74:	2b02      	cmp	r3, #2
  403b76:	d9fc      	bls.n	403b72 <_Z13lcdSetRefVolth+0x42>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403b78:	f44f 5390 	mov.w	r3, #4608	; 0x1200
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403b7c:	f44f 6460 	mov.w	r4, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403b80:	f2c4 030e 	movt	r3, #16398	; 0x400e
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403b84:	f2c4 040e 	movt	r4, #16398	; 0x400e
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403b88:	f44f 5580 	mov.w	r5, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403b8c:	2680      	movs	r6, #128	; 0x80
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403b8e:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403b92:	635d      	str	r5, [r3, #52]	; 0x34
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403b94:	2100      	movs	r1, #0
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403b96:	6326      	str	r6, [r4, #48]	; 0x30
  pioptr = PIOC ;

  pioptr->PIO_OER = 0x0C00B0FFL ;         // Set bits 27,26,15,13,12,7-0 output

  lcdSendCtl(0x81);
  if ( val == 0 )
  403b98:	2800      	cmp	r0, #0
  403b9a:	bf08      	it	eq
  403b9c:	2022      	moveq	r0, #34	; 0x22
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403b9e:	631f      	str	r7, [r3, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403ba0:	635f      	str	r7, [r3, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403ba2:	6366      	str	r6, [r4, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403ba4:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  403ba8:	635c      	str	r4, [r3, #52]	; 0x34
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403baa:	f2c4 0101 	movt	r1, #16385	; 0x4001
#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  PIOA->PIO_CODR = LCD_A0 ;
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = val ;
  403bae:	6398      	str	r0, [r3, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403bb0:	631d      	str	r5, [r3, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403bb2:	2305      	movs	r3, #5
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403bb4:	460a      	mov	r2, r1
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403bb6:	600b      	str	r3, [r1, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403bb8:	6913      	ldr	r3, [r2, #16]
  403bba:	2b02      	cmp	r3, #2
  403bbc:	d9fc      	bls.n	403bb8 <_Z13lcdSetRefVolth+0x88>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403bbe:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  403bc2:	f2c4 030e 	movt	r3, #16398	; 0x400e
  403bc6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403bca:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403bce:	6358      	str	r0, [r3, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403bd0:	f2c4 010e 	movt	r1, #16398	; 0x400e
  403bd4:	2080      	movs	r0, #128	; 0x80
  403bd6:	6308      	str	r0, [r1, #48]	; 0x30
    val = 0x22 ;
  }
  lcdSendCtl(val);

#ifdef REVB
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  403bd8:	223a      	movs	r2, #58	; 0x3a
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403bda:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403bde:	6319      	str	r1, [r3, #48]	; 0x30
    val = 0x22 ;
  }
  lcdSendCtl(val);

#ifdef REVB
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  403be0:	615a      	str	r2, [r3, #20]
  pioptr->PIO_PUER = 0x0000003AL ;                // Set bits 1, 3, 4, 5 with pullups
  403be2:	665a      	str	r2, [r3, #100]	; 0x64
  pioptr->PIO_ODSR = 0 ;                                                  // Drive D0 low
  403be4:	2200      	movs	r2, #0
  403be6:	639a      	str	r2, [r3, #56]	; 0x38
  pioptr->PIO_ODR = 0x0000003CL ;         // Set bits 2, 3, 4, 5 input
  pioptr->PIO_PUER = 0x0000003CL ;                // Set bits 2, 3, 4, 5 with pullups
  pioptr->PIO_ODSR = 0 ;                                                  // Drive D0 low
#endif
#endif
}
  403be8:	bcf0      	pop	{r4, r5, r6, r7}
  403bea:	4770      	bx	lr

00403bec <_Z14refreshDisplayv>:

#ifndef SIMU
void refreshDisplay()
{
  403bec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  pioptr->PIO_OER = 0x00000080;// Set bit 7 output
#endif

  pioptr = PIOC;
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
  403bf0:	f44f 5290 	mov.w	r2, #4608	; 0x1200
#endif
  ebit = LCD_E;

#ifdef REVB
  pioptr = PIOA;
  pioptr->PIO_PER = 0x00000080; // Enable bit 7 (LCD-A0)
  403bf4:	f44f 6860 	mov.w	r8, #3584	; 0xe00
  pioptr->PIO_OER = 0x00000080;// Set bit 7 output
#endif

  pioptr = PIOC;
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
  403bf8:	f243 01ff 	movw	r1, #12543	; 0x30ff
#endif
  ebit = LCD_E;

#ifdef REVB
  pioptr = PIOA;
  pioptr->PIO_PER = 0x00000080; // Enable bit 7 (LCD-A0)
  403bfc:	2380      	movs	r3, #128	; 0x80
  403bfe:	f2c4 080e 	movt	r8, #16398	; 0x400e
  pioptr->PIO_OER = 0x00000080;// Set bit 7 output
#endif

  pioptr = PIOC;
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
  403c02:	f6c0 4100 	movt	r1, #3072	; 0xc00
  403c06:	f2c4 020e 	movt	r2, #16398	; 0x400e
#endif
  ebit = LCD_E;

#ifdef REVB
  pioptr = PIOA;
  pioptr->PIO_PER = 0x00000080; // Enable bit 7 (LCD-A0)
  403c0a:	f8c8 3000 	str.w	r3, [r8]
  pioptr->PIO_OER = 0x00000080;// Set bit 7 output
  403c0e:	f8c8 3010 	str.w	r3, [r8, #16]
#endif

  pioptr = PIOC;
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
  403c12:	6111      	str	r1, [r2, #16]
  403c14:	493f      	ldr	r1, [pc, #252]	; (403d14 <_Z14refreshDisplayv+0x128>)
#endif
}

#ifndef SIMU
void refreshDisplay()
{
  403c16:	b082      	sub	sp, #8
  pioptr->PIO_OER = 0x00000080;// Set bit 7 output
#endif

  pioptr = PIOC;
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
  403c18:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c1c:	2600      	movs	r6, #0
  pioptr->PIO_OER = 0x00000080;// Set bit 7 output
#endif

  pioptr = PIOC;
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
  403c1e:	4019      	ands	r1, r3
  403c20:	b2c9      	uxtb	r1, r1
  403c22:	2900      	cmp	r1, #0
  403c24:	bf0c      	ite	eq
  403c26:	2104      	moveq	r1, #4
  403c28:	2100      	movne	r1, #0

#ifndef SIMU
void refreshDisplay()
{
  register Pio *pioptr;
  register uint8_t *p = displayBuf;
  403c2a:	4d3b      	ldr	r5, [pc, #236]	; (403d18 <_Z14refreshDisplayv+0x12c>)
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c2c:	f2c4 0601 	movt	r6, #16385	; 0x4001
  pioptr->PIO_OER = 0x00000080;// Set bit 7 output
#endif

  pioptr = PIOC;
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
  403c30:	9101      	str	r1, [sp, #4]
#else
  pioptr->PIO_OER = 0x0C00B0FFL; // Set bits 27,26,15,13,12,7-0 output
#endif
  for (y = 0; y < 8; y++) {
  403c32:	f04f 0a00 	mov.w	sl, #0
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403c36:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  PIOA->PIO_CODR = LCD_A0 ;
  403c3a:	469c      	mov	ip, r3
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403c3c:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403c40:	f44f 5980 	mov.w	r9, #4096	; 0x1000
#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  PIOA->PIO_CODR = LCD_A0 ;
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = val ;
  403c44:	9901      	ldr	r1, [sp, #4]
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c46:	2305      	movs	r3, #5
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403c48:	6357      	str	r7, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403c4a:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403c4e:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403c52:	6391      	str	r1, [r2, #56]	; 0x38
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403c54:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c58:	6033      	str	r3, [r6, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403c5a:	6933      	ldr	r3, [r6, #16]
  403c5c:	2b02      	cmp	r3, #2
  403c5e:	d9fc      	bls.n	403c5a <_Z14refreshDisplayv+0x6e>
#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  PIOA->PIO_CODR = LCD_A0 ;
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = val ;
  403c60:	2110      	movs	r1, #16
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403c62:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403c66:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403c6a:	6317      	str	r7, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403c6c:	6357      	str	r7, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403c6e:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403c72:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403c76:	6391      	str	r1, [r2, #56]	; 0x38
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c78:	2100      	movs	r1, #0
  403c7a:	2305      	movs	r3, #5
  403c7c:	f2c4 0101 	movt	r1, #16385	; 0x4001
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403c80:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c84:	600b      	str	r3, [r1, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403c86:	6933      	ldr	r3, [r6, #16]
  403c88:	2b02      	cmp	r3, #2
  403c8a:	d9fc      	bls.n	403c86 <_Z14refreshDisplayv+0x9a>
  pioptr->PIO_OER = 0x0C00B0FFL; // Set bits 27,26,15,13,12,7-0 output
#endif
  for (y = 0; y < 8; y++) {
    lcdSendCtl(g_eeGeneral.optrexDisplay ? 0 : 0x04);
    lcdSendCtl(0x10); //column addr 0
    lcdSendCtl(y | 0xB0); //page addr y
  403c8c:	f06a 034f 	orn	r3, sl, #79	; 0x4f
#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  PIOA->PIO_CODR = LCD_A0 ;
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = val ;
  403c90:	b2db      	uxtb	r3, r3
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c92:	2100      	movs	r1, #0
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403c94:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403c98:	f2c4 0101 	movt	r1, #16385	; 0x4001
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403c9c:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403ca0:	6317      	str	r7, [r2, #48]	; 0x30
  register Pio *pioptr ;
//      register uint32_t x ;

#ifdef REVB
  pioptr = PIOC ;
  pioptr->PIO_CODR = LCD_CS1 ;            // Select LCD
  403ca2:	6357      	str	r7, [r2, #52]	; 0x34
  PIOA->PIO_CODR = LCD_A0 ;
  403ca4:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  403ca8:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
  pioptr->PIO_ODSR = val ;
  403cac:	6393      	str	r3, [r2, #56]	; 0x38
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403cae:	2305      	movs	r3, #5
  pioptr->PIO_CODR = LCD_A0 ;                     // Control
  pioptr->PIO_CODR = LCD_RnW ;            // Write
  pioptr->PIO_ODSR = Lcd_lookup[val] ;
#endif

  pioptr->PIO_SODR = LCD_E ;                      // Start E pulse
  403cb0:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
  // Need a delay here (250nS)
  TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
  403cb4:	600b      	str	r3, [r1, #0]
  while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
  403cb6:	6933      	ldr	r3, [r6, #16]
  403cb8:	2b02      	cmp	r3, #2
  403cba:	d9fc      	bls.n	403cb6 <_Z14refreshDisplayv+0xca>
  {
    // Wait
  }
  pioptr->PIO_CODR = LCD_E ;                      // End E pulse
  403cbc:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
#ifdef REVB
  PIOA->PIO_SODR = LCD_A0 ;                               // Data
  403cc0:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
#else
  pioptr->PIO_SODR = LCD_A0 ;                     // Data
#endif
  pioptr->PIO_SODR = LCD_CS1 ;            // Deselect LCD
  403cc4:	6317      	str	r7, [r2, #48]	; 0x30
  for (y = 0; y < 8; y++) {
    lcdSendCtl(g_eeGeneral.optrexDisplay ? 0 : 0x04);
    lcdSendCtl(0x10); //column addr 0
    lcdSendCtl(y | 0xB0); //page addr y

    pioptr->PIO_CODR = LCD_CS1; // Select LCD
  403cc6:	6357      	str	r7, [r2, #52]	; 0x34
    PIOA->PIO_SODR = LCD_A0; // Data
  403cc8:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
    pioptr->PIO_CODR = LCD_RnW; // Write
  403ccc:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34

#ifdef REVB
    x = *p;
  403cd0:	782c      	ldrb	r4, [r5, #0]
#else
    x = lookup[*p];
#endif
    for (z = 0; z < 128; z += 1) {
  403cd2:	2300      	movs	r3, #0
//                              x |= 1 ;
//                      }
//                      pioptr->PIO_ODSR = x ;

      pioptr->PIO_ODSR = x;
      pioptr->PIO_SODR = ebit; // Start E pulse
  403cd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
//                      {
//                              x |= 1 ;
//                      }
//                      pioptr->PIO_ODSR = x ;

      pioptr->PIO_ODSR = x;
  403cd8:	6394      	str	r4, [r2, #56]	; 0x38
#endif
#endif
}

#ifndef SIMU
void refreshDisplay()
  403cda:	18ec      	adds	r4, r5, r3
#ifdef REVB
    x = *p;
#else
    x = lookup[*p];
#endif
    for (z = 0; z < 128; z += 1) {
  403cdc:	3301      	adds	r3, #1
//                              x |= 1 ;
//                      }
//                      pioptr->PIO_ODSR = x ;

      pioptr->PIO_ODSR = x;
      pioptr->PIO_SODR = ebit; // Start E pulse
  403cde:	6310      	str	r0, [r2, #48]	; 0x30
//                      {
//                              x |= 1 ;
//                      }
//                      pioptr->PIO_ODSR = x ;

      pioptr->PIO_ODSR = x;
  403ce0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
#ifdef REVB
    x = *p;
#else
    x = lookup[*p];
#endif
    for (z = 0; z < 128; z += 1) {
  403ce4:	2b80      	cmp	r3, #128	; 0x80
      pioptr->PIO_ODSR = x;
      pioptr->PIO_SODR = ebit; // Start E pulse
      // Need a delay here (250nS)
      p += 1;
#ifdef REVB
      x = *p;
  403ce6:	7864      	ldrb	r4, [r4, #1]
//                      {
//                              x |= 1 ;
//                      }
//                      pioptr->PIO_ODSR = x ;

      pioptr->PIO_ODSR = x;
  403ce8:	f2c4 010e 	movt	r1, #16398	; 0x400e
//                      TC0->TC_CHANNEL[0].TC_CCR = 5 ; // Enable clock and trigger it (may only need trigger)
//                      while ( TC0->TC_CHANNEL[0].TC_CV < 3 )          // Value depends on MCK/2 (used 6MHz)
//                      {
//                              // Wait
//                      }
      pioptr->PIO_CODR = ebit; // End E pulse
  403cec:	6350      	str	r0, [r2, #52]	; 0x34
#ifdef REVB
    x = *p;
#else
    x = lookup[*p];
#endif
    for (z = 0; z < 128; z += 1) {
  403cee:	d1f3      	bne.n	403cd8 <_Z14refreshDisplayv+0xec>
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
#else
  pioptr->PIO_OER = 0x0C00B0FFL; // Set bits 27,26,15,13,12,7-0 output
#endif
  for (y = 0; y < 8; y++) {
  403cf0:	f10a 0a01 	add.w	sl, sl, #1
#ifdef REVB
    x = *p;
#else
    x = lookup[*p];
#endif
    for (z = 0; z < 128; z += 1) {
  403cf4:	3580      	adds	r5, #128	; 0x80
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
#else
  pioptr->PIO_OER = 0x0C00B0FFL; // Set bits 27,26,15,13,12,7-0 output
#endif
  for (y = 0; y < 8; y++) {
  403cf6:	f1ba 0f08 	cmp.w	sl, #8
//                      {
//                              // Wait
//                      }
      pioptr->PIO_CODR = ebit; // End E pulse
    }
    pioptr->PIO_SODR = LCD_CS1; // Deselect LCD
  403cfa:	630f      	str	r7, [r1, #48]	; 0x30
#ifdef REVB
  pioptr->PIO_OER = 0x0C0030FFL; // Set bits 27,26,15,13,12,7-0 output
#else
  pioptr->PIO_OER = 0x0C00B0FFL; // Set bits 27,26,15,13,12,7-0 output
#endif
  for (y = 0; y < 8; y++) {
  403cfc:	d1a2      	bne.n	403c44 <_Z14refreshDisplayv+0x58>
    pioptr->PIO_SODR = LCD_CS1; // Deselect LCD
  }

  pioptr->PIO_ODSR = 0xFF ;                                       // Drive lines high
#ifdef REVB
  pioptr->PIO_PUER = 0x0000003AL ;        // Set bits 1, 3, 4, 5 with pullups
  403cfe:	233a      	movs	r3, #58	; 0x3a
      pioptr->PIO_CODR = ebit; // End E pulse
    }
    pioptr->PIO_SODR = LCD_CS1; // Deselect LCD
  }

  pioptr->PIO_ODSR = 0xFF ;                                       // Drive lines high
  403d00:	22ff      	movs	r2, #255	; 0xff
  403d02:	638a      	str	r2, [r1, #56]	; 0x38
#ifdef REVB
  pioptr->PIO_PUER = 0x0000003AL ;        // Set bits 1, 3, 4, 5 with pullups
  403d04:	664b      	str	r3, [r1, #100]	; 0x64
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  403d06:	614b      	str	r3, [r1, #20]
#else
  pioptr->PIO_PUER = 0x0000003CL ;        // Set bits 2, 3, 4, 5 with pullups
  pioptr->PIO_ODR = 0x0000003CL ;         // Set bits 2, 3, 4, 5 input
#endif
  pioptr->PIO_ODSR = 0xFE ;                                       // Drive D0 low
  403d08:	23fe      	movs	r3, #254	; 0xfe
  403d0a:	638b      	str	r3, [r1, #56]	; 0x38
}
  403d0c:	b002      	add	sp, #8
  403d0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403d12:	4770      	bx	lr
  403d14:	20000108 	.word	0x20000108
  403d18:	20001884 	.word	0x20001884

00403d1c <_Z12displayPopupPKc>:
  lcd_puts(16, 3*FH, s_warning);
  // could be a place for a s_warning_info
}

void displayPopup(const pm_char * pstr)
{
  403d1c:	b510      	push	{r4, lr}
  s_warning = pstr;
  403d1e:	f240 1408 	movw	r4, #264	; 0x108
  403d22:	f2c2 0400 	movt	r4, #8192	; 0x2000
  403d26:	f8c4 0a88 	str.w	r0, [r4, #2696]	; 0xa88
  displayBox();
  403d2a:	f7ff fa3f 	bl	4031ac <_Z10displayBoxv>
  s_warning = 0;
  403d2e:	2300      	movs	r3, #0
  403d30:	f8c4 3a88 	str.w	r3, [r4, #2696]	; 0xa88
  refreshDisplay();
}
  403d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void displayPopup(const pm_char * pstr)
{
  s_warning = pstr;
  displayBox();
  s_warning = 0;
  refreshDisplay();
  403d38:	e758      	b.n	403bec <_Z14refreshDisplayv>
  403d3a:	bf00      	nop

00403d3c <_Z8putEventh>:
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403d3c:	f240 1308 	movw	r3, #264	; 0x108
  403d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403d44:	f883 09ae 	strb.w	r0, [r3, #2478]	; 0x9ae
}
  403d48:	4770      	bx	lr
  403d4a:	bf00      	nop

00403d4c <_Z8getEventv>:
uint8_t getEvent()
{
  uint8_t evt = s_evt;
  403d4c:	f240 1308 	movw	r3, #264	; 0x108
  403d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
  s_evt=0;
  403d54:	2200      	movs	r2, #0
{
  s_evt = evt;
}
uint8_t getEvent()
{
  uint8_t evt = s_evt;
  403d56:	f893 09ae 	ldrb.w	r0, [r3, #2478]	; 0x9ae
  s_evt=0;
  403d5a:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
  return evt;
}
  403d5e:	4770      	bx	lr

00403d60 <_ZN3Key5inputEb8EnumKeys>:
#endif

Key keys[NUM_KEYS];
void Key::input(bool val, EnumKeys enuk)
{
  uint8_t t_vals = m_vals ;
  403d60:	7803      	ldrb	r3, [r0, #0]
#define KEY_LONG_DELAY 24
#endif

Key keys[NUM_KEYS];
void Key::input(bool val, EnumKeys enuk)
{
  403d62:	b430      	push	{r4, r5}
  uint8_t t_vals = m_vals ;
  403d64:	f003 040f 	and.w	r4, r3, #15
  t_vals <<= 1 ;
  403d68:	0064      	lsls	r4, r4, #1
  if(val) t_vals |= 1; //portbit einschieben
  403d6a:	b109      	cbz	r1, 403d70 <_ZN3Key5inputEb8EnumKeys+0x10>
  403d6c:	f044 0401 	orr.w	r4, r4, #1
  m_vals = t_vals ;

  m_cnt++;
  403d70:	7845      	ldrb	r5, [r0, #1]

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
  403d72:	7881      	ldrb	r1, [r0, #2]
  uint8_t t_vals = m_vals ;
  t_vals <<= 1 ;
  if(val) t_vals |= 1; //portbit einschieben
  m_vals = t_vals ;

  m_cnt++;
  403d74:	3501      	adds	r5, #1
void Key::input(bool val, EnumKeys enuk)
{
  uint8_t t_vals = m_vals ;
  t_vals <<= 1 ;
  if(val) t_vals |= 1; //portbit einschieben
  m_vals = t_vals ;
  403d76:	f364 0303 	bfi	r3, r4, #0, #4

  m_cnt++;
  403d7a:	b2ec      	uxtb	r4, r5
void Key::input(bool val, EnumKeys enuk)
{
  uint8_t t_vals = m_vals ;
  t_vals <<= 1 ;
  if(val) t_vals |= 1; //portbit einschieben
  m_vals = t_vals ;
  403d7c:	7003      	strb	r3, [r0, #0]

  m_cnt++;
  403d7e:	7044      	strb	r4, [r0, #1]

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
  403d80:	b1b1      	cbz	r1, 403db0 <_ZN3Key5inputEb8EnumKeys+0x50>
  403d82:	b2db      	uxtb	r3, r3
  403d84:	f013 030f 	ands.w	r3, r3, #15
  403d88:	d119      	bne.n	403dbe <_ZN3Key5inputEb8EnumKeys+0x5e>
    if(m_state!=KSTATE_KILLED) {
  403d8a:	2963      	cmp	r1, #99	; 0x63
  403d8c:	d00c      	beq.n	403da8 <_ZN3Key5inputEb8EnumKeys+0x48>
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403d8e:	4d39      	ldr	r5, [pc, #228]	; (403e74 <_ZN3Key5inputEb8EnumKeys+0x114>)

  m_cnt++;

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
    if(m_state!=KSTATE_KILLED) {
      putEvent(EVT_KEY_BREAK(enuk));
  403d90:	f042 0220 	orr.w	r2, r2, #32
      if(!( m_state == 16 && m_cnt<16)){
  403d94:	2910      	cmp	r1, #16
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403d96:	f885 29ae 	strb.w	r2, [r5, #2478]	; 0x9ae
  m_cnt++;

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
    if(m_state!=KSTATE_KILLED) {
      putEvent(EVT_KEY_BREAK(enuk));
      if(!( m_state == 16 && m_cnt<16)){
  403d9a:	d04b      	beq.n	403e34 <_ZN3Key5inputEb8EnumKeys+0xd4>
        m_dblcnt=0;
  403d9c:	7803      	ldrb	r3, [r0, #0]
  403d9e:	f36f 1305 	bfc	r3, #4, #2
  403da2:	7003      	strb	r3, [r0, #0]
  403da4:	f003 030f 	and.w	r3, r3, #15
      }
        //      }
    }
    m_cnt   = 0;
  403da8:	2200      	movs	r2, #0
  403daa:	7042      	strb	r2, [r0, #1]
    m_state = KSTATE_OFF;
  403dac:	7082      	strb	r2, [r0, #2]
  403dae:	e002      	b.n	403db6 <_ZN3Key5inputEb8EnumKeys+0x56>
      break;

    case KSTATE_KILLED: //killed
      break;
  }
}
  403db0:	7803      	ldrb	r3, [r0, #0]
  403db2:	f003 030f 	and.w	r3, r3, #15
    m_cnt   = 0;
    m_state = KSTATE_OFF;
  }
  switch(m_state){
    case KSTATE_OFF:
      if(m_vals==FFVAL){ //gerade eben sprung auf ff
  403db6:	2b0f      	cmp	r3, #15
  403db8:	d017      	beq.n	403dea <_ZN3Key5inputEb8EnumKeys+0x8a>
      break;

    case KSTATE_KILLED: //killed
      break;
  }
}
  403dba:	bc30      	pop	{r4, r5}
  403dbc:	4770      	bx	lr
        //      }
    }
    m_cnt   = 0;
    m_state = KSTATE_OFF;
  }
  switch(m_state){
  403dbe:	2908      	cmp	r1, #8
  403dc0:	d007      	beq.n	403dd2 <_ZN3Key5inputEb8EnumKeys+0x72>
  403dc2:	d822      	bhi.n	403e0a <_ZN3Key5inputEb8EnumKeys+0xaa>
  403dc4:	2901      	cmp	r1, #1
  403dc6:	d01c      	beq.n	403e02 <_ZN3Key5inputEb8EnumKeys+0xa2>
  403dc8:	d3f5      	bcc.n	403db6 <_ZN3Key5inputEb8EnumKeys+0x56>
  403dca:	2902      	cmp	r1, #2
  403dcc:	d001      	beq.n	403dd2 <_ZN3Key5inputEb8EnumKeys+0x72>
  403dce:	2904      	cmp	r1, #4
  403dd0:	d1f3      	bne.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>

    case 16:
    case 8:
    case 4:
    case 2:
      if(m_cnt >= 48)  { //3 6 12 24 48 pulses in every 480ms
  403dd2:	2c2f      	cmp	r4, #47	; 0x2f
  403dd4:	d915      	bls.n	403e02 <_ZN3Key5inputEb8EnumKeys+0xa2>
        m_state >>= 1;
  403dd6:	1049      	asrs	r1, r1, #1
        m_cnt     = 0;
  403dd8:	2300      	movs	r3, #0
    case 16:
    case 8:
    case 4:
    case 2:
      if(m_cnt >= 48)  { //3 6 12 24 48 pulses in every 480ms
        m_state >>= 1;
  403dda:	7081      	strb	r1, [r0, #2]
        m_cnt     = 0;
  403ddc:	7043      	strb	r3, [r0, #1]
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403dde:	4b25      	ldr	r3, [pc, #148]	; (403e74 <_ZN3Key5inputEb8EnumKeys+0x114>)
        m_state >>= 1;
        m_cnt     = 0;
      }
      //fallthrough
    case 1:
      if( (m_cnt & (m_state-1)) == 0)  putEvent(EVT_KEY_REPT(enuk));
  403de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403de4:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
  403de8:	e7e7      	b.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
  }
  switch(m_state){
    case KSTATE_OFF:
      if(m_vals==FFVAL){ //gerade eben sprung auf ff
        m_state = KSTATE_START;
        if(m_cnt>16) m_dblcnt=0; //pause zu lang fuer double
  403dea:	7843      	ldrb	r3, [r0, #1]
    m_state = KSTATE_OFF;
  }
  switch(m_state){
    case KSTATE_OFF:
      if(m_vals==FFVAL){ //gerade eben sprung auf ff
        m_state = KSTATE_START;
  403dec:	2261      	movs	r2, #97	; 0x61
        if(m_cnt>16) m_dblcnt=0; //pause zu lang fuer double
  403dee:	2b10      	cmp	r3, #16
    m_state = KSTATE_OFF;
  }
  switch(m_state){
    case KSTATE_OFF:
      if(m_vals==FFVAL){ //gerade eben sprung auf ff
        m_state = KSTATE_START;
  403df0:	7082      	strb	r2, [r0, #2]
        if(m_cnt>16) m_dblcnt=0; //pause zu lang fuer double
  403df2:	d903      	bls.n	403dfc <_ZN3Key5inputEb8EnumKeys+0x9c>
  403df4:	7803      	ldrb	r3, [r0, #0]
  403df6:	f36f 1305 	bfc	r3, #4, #2
  403dfa:	7003      	strb	r3, [r0, #0]

    case KSTATE_RPTDELAY: // gruvin: delay state before first key repeat
      if(m_cnt == KEY_LONG_DELAY) putEvent(EVT_KEY_LONG(enuk));
      if (m_cnt == 40) {
        m_state = 16;
        m_cnt = 0;
  403dfc:	2300      	movs	r3, #0
  403dfe:	7043      	strb	r3, [r0, #1]
  403e00:	e7db      	b.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
        m_state >>= 1;
        m_cnt     = 0;
      }
      //fallthrough
    case 1:
      if( (m_cnt & (m_state-1)) == 0)  putEvent(EVT_KEY_REPT(enuk));
  403e02:	3901      	subs	r1, #1
  403e04:	4221      	tst	r1, r4
  403e06:	d1d8      	bne.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
  403e08:	e7e9      	b.n	403dde <_ZN3Key5inputEb8EnumKeys+0x7e>
        //      }
    }
    m_cnt   = 0;
    m_state = KSTATE_OFF;
  }
  switch(m_state){
  403e0a:	295f      	cmp	r1, #95	; 0x5f
  403e0c:	d00b      	beq.n	403e26 <_ZN3Key5inputEb8EnumKeys+0xc6>
  403e0e:	d914      	bls.n	403e3a <_ZN3Key5inputEb8EnumKeys+0xda>
  403e10:	2961      	cmp	r1, #97	; 0x61
  403e12:	d015      	beq.n	403e40 <_ZN3Key5inputEb8EnumKeys+0xe0>
  403e14:	2962      	cmp	r1, #98	; 0x62
  403e16:	d1d0      	bne.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
    case 1:
      if( (m_cnt & (m_state-1)) == 0)  putEvent(EVT_KEY_REPT(enuk));
      break;

    case KSTATE_PAUSE: //pause
      if(m_cnt >= 64)      {
  403e18:	2c3f      	cmp	r4, #63	; 0x3f
  403e1a:	d9ce      	bls.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
        m_state = 8;
  403e1c:	2308      	movs	r3, #8
  403e1e:	7083      	strb	r3, [r0, #2]
        m_cnt   = 0;
  403e20:	2300      	movs	r3, #0
  403e22:	7043      	strb	r3, [r0, #1]
  403e24:	e7c9      	b.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
      m_state   = KSTATE_RPTDELAY;
      m_cnt     = 0;
      break;

    case KSTATE_RPTDELAY: // gruvin: delay state before first key repeat
      if(m_cnt == KEY_LONG_DELAY) putEvent(EVT_KEY_LONG(enuk));
  403e26:	2c20      	cmp	r4, #32
  403e28:	d01e      	beq.n	403e68 <_ZN3Key5inputEb8EnumKeys+0x108>
      if (m_cnt == 40) {
  403e2a:	2c28      	cmp	r4, #40	; 0x28
  403e2c:	d1c5      	bne.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
        m_state = 16;
  403e2e:	2310      	movs	r3, #16
  403e30:	7083      	strb	r3, [r0, #2]
  403e32:	e7e3      	b.n	403dfc <_ZN3Key5inputEb8EnumKeys+0x9c>
  m_cnt++;

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
    if(m_state!=KSTATE_KILLED) {
      putEvent(EVT_KEY_BREAK(enuk));
      if(!( m_state == 16 && m_cnt<16)){
  403e34:	2c0f      	cmp	r4, #15
  403e36:	d9b7      	bls.n	403da8 <_ZN3Key5inputEb8EnumKeys+0x48>
  403e38:	e7b0      	b.n	403d9c <_ZN3Key5inputEb8EnumKeys+0x3c>
        //      }
    }
    m_cnt   = 0;
    m_state = KSTATE_OFF;
  }
  switch(m_state){
  403e3a:	2910      	cmp	r1, #16
  403e3c:	d1bd      	bne.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
  403e3e:	e7c8      	b.n	403dd2 <_ZN3Key5inputEb8EnumKeys+0x72>
      }
      break;
      //fallthrough
    case KSTATE_START:
      putEvent(EVT_KEY_FIRST(enuk));
      inacCounter = 0;
  403e40:	490d      	ldr	r1, [pc, #52]	; (403e78 <_ZN3Key5inputEb8EnumKeys+0x118>)
  403e42:	2300      	movs	r3, #0
  403e44:	f8c1 3a90 	str.w	r3, [r1, #2704]	; 0xa90
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403e48:	490a      	ldr	r1, [pc, #40]	; (403e74 <_ZN3Key5inputEb8EnumKeys+0x114>)
        m_cnt   = 0;
      }
      break;
      //fallthrough
    case KSTATE_START:
      putEvent(EVT_KEY_FIRST(enuk));
  403e4a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403e4e:	f881 29ae 	strb.w	r2, [r1, #2478]	; 0x9ae
      break;
      //fallthrough
    case KSTATE_START:
      putEvent(EVT_KEY_FIRST(enuk));
      inacCounter = 0;
      m_dblcnt++;
  403e52:	7802      	ldrb	r2, [r0, #0]
      m_state   = KSTATE_RPTDELAY;
      m_cnt     = 0;
  403e54:	7043      	strb	r3, [r0, #1]
      break;
      //fallthrough
    case KSTATE_START:
      putEvent(EVT_KEY_FIRST(enuk));
      inacCounter = 0;
      m_dblcnt++;
  403e56:	f3c2 1101 	ubfx	r1, r2, #4, #2
  403e5a:	3101      	adds	r1, #1
  403e5c:	f361 1205 	bfi	r2, r1, #4, #2
  403e60:	7002      	strb	r2, [r0, #0]
      m_state   = KSTATE_RPTDELAY;
  403e62:	225f      	movs	r2, #95	; 0x5f
  403e64:	7082      	strb	r2, [r0, #2]
      m_cnt     = 0;
      break;
  403e66:	e7a8      	b.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403e68:	4b02      	ldr	r3, [pc, #8]	; (403e74 <_ZN3Key5inputEb8EnumKeys+0x114>)
      m_state   = KSTATE_RPTDELAY;
      m_cnt     = 0;
      break;

    case KSTATE_RPTDELAY: // gruvin: delay state before first key repeat
      if(m_cnt == KEY_LONG_DELAY) putEvent(EVT_KEY_LONG(enuk));
  403e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  403e6e:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
  403e72:	e7a2      	b.n	403dba <_ZN3Key5inputEb8EnumKeys+0x5a>
  403e74:	20000108 	.word	0x20000108
  403e78:	20001200 	.word	0x20001200

00403e7c <_Z16readKeysAndTrimsv>:
    maxTemperature = Temperature ;
  }
}

void readKeysAndTrims()
{
  403e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  register uint32_t i;

  uint8_t enuk = KEY_MENU;
  uint8_t in = ~read_keys();
  403e7e:	f7fc fb29 	bl	4004d4 <_Z9read_keysv>
  403e82:	4e12      	ldr	r6, [pc, #72]	; (403ecc <_Z16readKeysAndTrimsv+0x50>)
  403e84:	43c5      	mvns	r5, r0
  403e86:	b2ed      	uxtb	r5, r5
  403e88:	2400      	movs	r4, #0
  403e8a:	b2e2      	uxtb	r2, r4
  for (i = 1; i < 7; i++) {
    keys[enuk].input(in & (1 << i), (EnumKeys) enuk);
  403e8c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
  if ( Temperature > maxTemperature ) {
    maxTemperature = Temperature ;
  }
}

void readKeysAndTrims()
  403e90:	3401      	adds	r4, #1
  register uint32_t i;

  uint8_t enuk = KEY_MENU;
  uint8_t in = ~read_keys();
  for (i = 1; i < 7; i++) {
    keys[enuk].input(in & (1 << i), (EnumKeys) enuk);
  403e92:	fa55 f104 	asrs.w	r1, r5, r4
  403e96:	1830      	adds	r0, r6, r0
  403e98:	f001 0101 	and.w	r1, r1, #1
  403e9c:	f7ff ff60 	bl	403d60 <_ZN3Key5inputEb8EnumKeys>
{
  register uint32_t i;

  uint8_t enuk = KEY_MENU;
  uint8_t in = ~read_keys();
  for (i = 1; i < 7; i++) {
  403ea0:	2c06      	cmp	r4, #6
  403ea2:	d1f2      	bne.n	403e8a <_Z16readKeysAndTrimsv+0xe>
    keys[enuk].input(in & (1 << i), (EnumKeys) enuk);
    ++enuk;
  }

  in = read_trims();
  403ea4:	f7fc fb3e 	bl	400524 <_Z10read_trimsv>

  for (i = 1; i < 256; i <<= 1) {
  403ea8:	2501      	movs	r5, #1
  for (i = 1; i < 7; i++) {
    keys[enuk].input(in & (1 << i), (EnumKeys) enuk);
    ++enuk;
  }

  in = read_trims();
  403eaa:	b2c7      	uxtb	r7, r0

  for (i = 1; i < 256; i <<= 1) {
    keys[enuk].input(in & i, (EnumKeys) enuk);
  403eac:	423d      	tst	r5, r7
  403eae:	bf0c      	ite	eq
  403eb0:	2100      	moveq	r1, #0
  403eb2:	2101      	movne	r1, #1
  403eb4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
  403eb8:	4622      	mov	r2, r4
    ++enuk;
  403eba:	3401      	adds	r4, #1
  }

  in = read_trims();

  for (i = 1; i < 256; i <<= 1) {
    keys[enuk].input(in & i, (EnumKeys) enuk);
  403ebc:	1830      	adds	r0, r6, r0
    ++enuk;
  403ebe:	b2e4      	uxtb	r4, r4
  }

  in = read_trims();

  for (i = 1; i < 256; i <<= 1) {
    keys[enuk].input(in & i, (EnumKeys) enuk);
  403ec0:	f7ff ff4e 	bl	403d60 <_ZN3Key5inputEb8EnumKeys>
    ++enuk;
  }

  in = read_trims();

  for (i = 1; i < 256; i <<= 1) {
  403ec4:	006d      	lsls	r5, r5, #1
  403ec6:	2c0e      	cmp	r4, #14
  403ec8:	d1f0      	bne.n	403eac <_Z16readKeysAndTrimsv+0x30>
    keys[enuk].input(in & i, (EnumKeys) enuk);
    ++enuk;
  }
}
  403eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ecc:	200001a8 	.word	0x200001a8

00403ed0 <_Z11pauseEventsh>:
  }
}

void pauseEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  403ed0:	f000 000f 	and.w	r0, r0, #15
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
  403ed4:	280d      	cmp	r0, #13
  403ed6:	d807      	bhi.n	403ee8 <_Z11pauseEventsh+0x18>
  403ed8:	4b04      	ldr	r3, [pc, #16]	; (403eec <_Z11pauseEventsh+0x1c>)
  403eda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  403ede:	1818      	adds	r0, r3, r0
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  403ee0:	2362      	movs	r3, #98	; 0x62
  403ee2:	7083      	strb	r3, [r0, #2]
  403ee4:	2300      	movs	r3, #0
  403ee6:	7043      	strb	r3, [r0, #1]
  403ee8:	4770      	bx	lr
  403eea:	bf00      	nop
  403eec:	200001a8 	.word	0x200001a8

00403ef0 <_Z10killEventsh>:
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  403ef0:	f000 000f 	and.w	r0, r0, #15
  if(event < (int)DIM(keys))  keys[event].killEvents();
  403ef4:	280d      	cmp	r0, #13
  403ef6:	d809      	bhi.n	403f0c <_Z10killEventsh+0x1c>
  403ef8:	4b05      	ldr	r3, [pc, #20]	; (403f10 <_Z10killEventsh+0x20>)
  403efa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  403efe:	181a      	adds	r2, r3, r0
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  403f00:	2163      	movs	r1, #99	; 0x63
  403f02:	7091      	strb	r1, [r2, #2]
  403f04:	5c1a      	ldrb	r2, [r3, r0]
  403f06:	f36f 1205 	bfc	r2, #4, #2
  403f0a:	541a      	strb	r2, [r3, r0]
  403f0c:	4770      	bx	lr
  403f0e:	bf00      	nop
  403f10:	200001a8 	.word	0x200001a8

00403f14 <_Z14frskyPushValueRPhh>:
#endif

void frskyPushValue(uint8_t *&ptr, uint8_t value)
{
  // byte stuff the only byte than might need it
  if (value == START_STOP) {
  403f14:	297e      	cmp	r1, #126	; 0x7e
};
uint8_t barsThresholds[THLD_MAX];
#endif

void frskyPushValue(uint8_t *&ptr, uint8_t value)
{
  403f16:	b410      	push	{r4}
  // byte stuff the only byte than might need it
  if (value == START_STOP) {
    *ptr++ = 0x5e;
  403f18:	6803      	ldr	r3, [r0, #0]
#endif

void frskyPushValue(uint8_t *&ptr, uint8_t value)
{
  // byte stuff the only byte than might need it
  if (value == START_STOP) {
  403f1a:	d007      	beq.n	403f2c <_Z14frskyPushValueRPhh+0x18>
    *ptr++ = 0x5e;
    *ptr++ = BYTESTUFF;
  }
  else if (value == BYTESTUFF) {
  403f1c:	297d      	cmp	r1, #125	; 0x7d
    *ptr++ = 0x5d;
    *ptr++ = BYTESTUFF;
  }
  else {
    *ptr++ = value;
  403f1e:	bf1c      	itt	ne
  403f20:	f803 1b01 	strbne.w	r1, [r3], #1
  403f24:	6003      	strne	r3, [r0, #0]
  // byte stuff the only byte than might need it
  if (value == START_STOP) {
    *ptr++ = 0x5e;
    *ptr++ = BYTESTUFF;
  }
  else if (value == BYTESTUFF) {
  403f26:	d008      	beq.n	403f3a <_Z14frskyPushValueRPhh+0x26>
    *ptr++ = BYTESTUFF;
  }
  else {
    *ptr++ = value;
  }
}
  403f28:	bc10      	pop	{r4}
  403f2a:	4770      	bx	lr

void frskyPushValue(uint8_t *&ptr, uint8_t value)
{
  // byte stuff the only byte than might need it
  if (value == START_STOP) {
    *ptr++ = 0x5e;
  403f2c:	215e      	movs	r1, #94	; 0x5e
  403f2e:	7019      	strb	r1, [r3, #0]
    *ptr++ = BYTESTUFF;
  403f30:	1c9a      	adds	r2, r3, #2
  403f32:	217d      	movs	r1, #125	; 0x7d
  403f34:	7059      	strb	r1, [r3, #1]
  403f36:	6002      	str	r2, [r0, #0]
  403f38:	e7f6      	b.n	403f28 <_Z14frskyPushValueRPhh+0x14>
  }
  else if (value == BYTESTUFF) {
    *ptr++ = 0x5d;
    *ptr++ = BYTESTUFF;
  403f3a:	1c9a      	adds	r2, r3, #2
  if (value == START_STOP) {
    *ptr++ = 0x5e;
    *ptr++ = BYTESTUFF;
  }
  else if (value == BYTESTUFF) {
    *ptr++ = 0x5d;
  403f3c:	245d      	movs	r4, #93	; 0x5d
  403f3e:	701c      	strb	r4, [r3, #0]
    *ptr++ = BYTESTUFF;
  403f40:	7059      	strb	r1, [r3, #1]
  403f42:	6002      	str	r2, [r0, #0]
  403f44:	e7f0      	b.n	403f28 <_Z14frskyPushValueRPhh+0x14>
  403f46:	bf00      	nop

00403f48 <_Z17applyChannelRatiohs>:
  TS_DATA_HIGH, // waiting for data high byte
  TS_XOR = 0x80 // decode stuffed byte
} TS_STATE;

int16_t applyChannelRatio(uint8_t channel, int16_t val)
{
  403f48:	b410      	push	{r4}
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
  403f4a:	f240 1308 	movw	r3, #264	; 0x108
  403f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403f52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  403f56:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  403f5a:	f890 2859 	ldrb.w	r2, [r0, #2137]	; 0x859
  403f5e:	f500 6304 	add.w	r3, r0, #2112	; 0x840
  403f62:	f890 0854 	ldrb.w	r0, [r0, #2132]	; 0x854
  403f66:	0992      	lsrs	r2, r2, #6
  403f68:	fa10 f202 	lsls.w	r2, r0, r2
  403f6c:	7d9c      	ldrb	r4, [r3, #22]
  403f6e:	7d58      	ldrb	r0, [r3, #21]
  403f70:	f004 030f 	and.w	r3, r4, #15
  403f74:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
  403f78:	f343 030b 	sbfx	r3, r3, #0, #12
  403f7c:	18cb      	adds	r3, r1, r3
  403f7e:	fb02 f203 	mul.w	r2, r2, r3
  403f82:	f24a 00a1 	movw	r0, #41121	; 0xa0a1
  403f86:	0052      	lsls	r2, r2, #1
  403f88:	f2ca 00a0 	movt	r0, #41120	; 0xa0a0
  403f8c:	fb80 3002 	smull	r3, r0, r0, r2
  403f90:	17d3      	asrs	r3, r2, #31
  403f92:	1880      	adds	r0, r0, r2
  403f94:	ebc3 1050 	rsb	r0, r3, r0, lsr #5
  403f98:	b200      	sxth	r0, r0
}
  403f9a:	bc10      	pop	{r4}
  403f9c:	4770      	bx	lr
  403f9e:	bf00      	nop

00403fa0 <_Z19checkMinMaxAltitudev>:
  frskyHubData.varioSpeed += frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
}

void checkMinMaxAltitude()
{
  if (frskyHubData.baroAltitude_bp > frskyHubData.maxAltitude)
  403fa0:	4b08      	ldr	r3, [pc, #32]	; (403fc4 <_Z19checkMinMaxAltitudev+0x24>)
  403fa2:	f8b3 2938 	ldrh.w	r2, [r3, #2360]	; 0x938
  403fa6:	f9b3 097c 	ldrsh.w	r0, [r3, #2428]	; 0x97c
  403faa:	b211      	sxth	r1, r2
  403fac:	4288      	cmp	r0, r1
    frskyHubData.maxAltitude = frskyHubData.baroAltitude_bp;
  403fae:	bfb8      	it	lt
  403fb0:	f8a3 297c 	strhlt.w	r2, [r3, #2428]	; 0x97c
  if (frskyHubData.baroAltitude_bp < frskyHubData.minAltitude)
  403fb4:	f9b3 397a 	ldrsh.w	r3, [r3, #2426]	; 0x97a
  403fb8:	428b      	cmp	r3, r1
    frskyHubData.minAltitude = frskyHubData.baroAltitude_bp;
  403fba:	bfc4      	itt	gt
  403fbc:	4b01      	ldrgt	r3, [pc, #4]	; (403fc4 <_Z19checkMinMaxAltitudev+0x24>)
  403fbe:	f8a3 297a 	strhgt.w	r2, [r3, #2426]	; 0x97a
  403fc2:	4770      	bx	lr
  403fc4:	20000108 	.word	0x20000108

00403fc8 <_Z17parseTelemHubByteh>:
{
  static int8_t structPos;
  static uint8_t lowByte;
  static TS_STATE state = TS_IDLE;

  if (byte == 0x5e) {
  403fc8:	285e      	cmp	r0, #94	; 0x5e
  if (frskyHubData.baroAltitude_bp < frskyHubData.minAltitude)
    frskyHubData.minAltitude = frskyHubData.baroAltitude_bp;
}

void parseTelemHubByte(uint8_t byte)
{
  403fca:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  static int8_t structPos;
  static uint8_t lowByte;
  static TS_STATE state = TS_IDLE;

  if (byte == 0x5e) {
  403fce:	f000 80e4 	beq.w	40419a <_Z17parseTelemHubByteh+0x1d2>
    state = TS_DATA_ID;
    return;
  }
  if (state == TS_IDLE) {
  403fd2:	4aa2      	ldr	r2, [pc, #648]	; (40425c <_Z17parseTelemHubByteh+0x294>)
  403fd4:	f892 3a94 	ldrb.w	r3, [r2, #2708]	; 0xa94
  403fd8:	2b00      	cmp	r3, #0
  403fda:	f000 80c0 	beq.w	40415e <_Z17parseTelemHubByteh+0x196>
    return;
  }
  if (state & TS_XOR) {
  403fde:	0619      	lsls	r1, r3, #24
    byte = byte ^ 0x60;
  403fe0:	bf44      	itt	mi
  403fe2:	f080 0060 	eormi.w	r0, r0, #96	; 0x60
    state = (TS_STATE)(state - TS_XOR);
  403fe6:	f083 0380 	eormi.w	r3, r3, #128	; 0x80
  }
  if (byte == 0x5d) {
  403fea:	285d      	cmp	r0, #93	; 0x5d
    state = (TS_STATE)(state | TS_XOR);
  403fec:	bf04      	itt	eq
  403fee:	f063 037f 	orneq	r3, r3, #127	; 0x7f
  403ff2:	f882 3a94 	strbeq.w	r3, [r2, #2708]	; 0xa94
  }
  if (state & TS_XOR) {
    byte = byte ^ 0x60;
    state = (TS_STATE)(state - TS_XOR);
  }
  if (byte == 0x5d) {
  403ff6:	f000 80b2 	beq.w	40415e <_Z17parseTelemHubByteh+0x196>
    state = (TS_STATE)(state | TS_XOR);
    return;
  }
  if (state == TS_DATA_ID) {
  403ffa:	2b01      	cmp	r3, #1
  403ffc:	f000 80d2 	beq.w	4041a4 <_Z17parseTelemHubByteh+0x1dc>
      structPos = byte*2;
      state = TS_DATA_LOW;
    }
    return;
  }
  if (state == TS_DATA_LOW) {
  404000:	2b02      	cmp	r3, #2
  404002:	f000 80d5 	beq.w	4041b0 <_Z17parseTelemHubByteh+0x1e8>
    return;
  }

  state = TS_IDLE;

  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLatitude_bp)) {
  404006:	f892 4a95 	ldrb.w	r4, [r2, #2709]	; 0xa95
    lowByte = byte;
    state = TS_DATA_HIGH;
    return;
  }

  state = TS_IDLE;
  40400a:	2100      	movs	r1, #0

  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLatitude_bp)) {
  40400c:	b263      	sxtb	r3, r4
  40400e:	2b26      	cmp	r3, #38	; 0x26
    lowByte = byte;
    state = TS_DATA_HIGH;
    return;
  }

  state = TS_IDLE;
  404010:	f882 1a94 	strb.w	r1, [r2, #2708]	; 0xa94
  404014:	4991      	ldr	r1, [pc, #580]	; (40425c <_Z17parseTelemHubByteh+0x294>)

  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLatitude_bp)) {
  404016:	f000 80a5 	beq.w	404164 <_Z17parseTelemHubByteh+0x19c>
    if (lowByte || byte)
      frskyHubData.gpsFix = 1;
    else if (frskyHubData.gpsFix > 0 && frskyHubData.gpsLatitude_bp > 1)
      frskyHubData.gpsFix = 0;
  }
  else if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLongitude_bp)) {
  40401a:	2b24      	cmp	r3, #36	; 0x24
  40401c:	f000 824a 	beq.w	4044b4 <_Z17parseTelemHubByteh+0x4ec>
      frskyHubData.gpsFix = 1;
    else if (frskyHubData.gpsFix > 0 && frskyHubData.gpsLongitude_bp > 1)
      frskyHubData.gpsFix = 0;
  }
  
  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsAltitude_bp) ||
  404020:	2b02      	cmp	r3, #2
  404022:	bf08      	it	eq
  404024:	498e      	ldreq	r1, [pc, #568]	; (404260 <_Z17parseTelemHubByteh+0x298>)
  404026:	f000 80b1 	beq.w	40418c <_Z17parseTelemHubByteh+0x1c4>
  40402a:	f1b3 0520 	subs.w	r5, r3, #32
  40402e:	f1a4 0112 	sub.w	r1, r4, #18
  404032:	b2c9      	uxtb	r1, r1
  404034:	bf18      	it	ne
  404036:	2501      	movne	r5, #1
  404038:	2934      	cmp	r1, #52	; 0x34
  40403a:	bf8c      	ite	hi
  40403c:	2100      	movhi	r1, #0
  40403e:	f005 0101 	andls.w	r1, r5, #1
  404042:	2900      	cmp	r1, #0
  404044:	f040 8254 	bne.w	4044f0 <_Z17parseTelemHubByteh+0x528>
    // If we don't have a fix, we may discard the value
    if (frskyHubData.gpsFix <= 0)
      return;
  }
  
  ((uint8_t*)&frskyHubData)[structPos] = lowByte;
  404048:	4986      	ldr	r1, [pc, #536]	; (404264 <_Z17parseTelemHubByteh+0x29c>)
  40404a:	f892 6a96 	ldrb.w	r6, [r2, #2710]	; 0xa96
  40404e:	18cd      	adds	r5, r1, r3
  ((uint8_t*)&frskyHubData)[structPos+1] = byte;

  switch ((uint8_t)structPos) {
  404050:	3c04      	subs	r4, #4
    // If we don't have a fix, we may discard the value
    if (frskyHubData.gpsFix <= 0)
      return;
  }
  
  ((uint8_t*)&frskyHubData)[structPos] = lowByte;
  404052:	54ce      	strb	r6, [r1, r3]
  ((uint8_t*)&frskyHubData)[structPos+1] = byte;
  404054:	7068      	strb	r0, [r5, #1]

  switch ((uint8_t)structPos) {
  404056:	2c48      	cmp	r4, #72	; 0x48
  404058:	f200 8081 	bhi.w	40415e <_Z17parseTelemHubByteh+0x196>
  40405c:	e8df f014 	tbh	[pc, r4, lsl #1]
  404060:	007f01e9 	.word	0x007f01e9
  404064:	007f01d2 	.word	0x007f01d2
  404068:	007f007f 	.word	0x007f007f
  40406c:	007f021f 	.word	0x007f021f
  404070:	007f01f4 	.word	0x007f01f4
  404074:	007f007f 	.word	0x007f007f
  404078:	007f007f 	.word	0x007f007f
  40407c:	007f0104 	.word	0x007f0104
  404080:	007f007f 	.word	0x007f007f
  404084:	007f007f 	.word	0x007f007f
  404088:	007f007f 	.word	0x007f007f
  40408c:	007f007f 	.word	0x007f007f
  404090:	007f007f 	.word	0x007f007f
  404094:	007f007f 	.word	0x007f007f
  404098:	007f00eb 	.word	0x007f00eb
  40409c:	007f00e1 	.word	0x007f00e1
  4040a0:	007f007f 	.word	0x007f007f
  4040a4:	007f007f 	.word	0x007f007f
  4040a8:	007f007f 	.word	0x007f007f
  4040ac:	007f007f 	.word	0x007f007f
  4040b0:	007f007f 	.word	0x007f007f
  4040b4:	007f00c9 	.word	0x007f00c9
  4040b8:	007f007f 	.word	0x007f007f
  4040bc:	007f007f 	.word	0x007f007f
  4040c0:	007f007f 	.word	0x007f007f
  4040c4:	007f007f 	.word	0x007f007f
  4040c8:	007f007f 	.word	0x007f007f
  4040cc:	007f007f 	.word	0x007f007f
  4040d0:	007f007f 	.word	0x007f007f
  4040d4:	007f007f 	.word	0x007f007f
  4040d8:	007f007f 	.word	0x007f007f
  4040dc:	007f0049 	.word	0x007f0049
  4040e0:	007f007f 	.word	0x007f007f
  4040e4:	007f007f 	.word	0x007f007f
  4040e8:	007f00bd 	.word	0x007f00bd
  4040ec:	007f00bd 	.word	0x007f00bd
  4040f0:	00bd      	.short	0x00bd
  4040f2:	495b      	ldr	r1, [pc, #364]	; (404260 <_Z17parseTelemHubByteh+0x298>)
      frskyHubData.baroAltitude_bp += frskyHubData.baroAltitudeOffset;
      checkMinMaxAltitude();
      break;

    case offsetof(FrskyHubData, baroAltitude_ap):
      if (g_model.varioSource == VARIO_SOURCE_BARO) {
  4040f4:	f891 2894 	ldrb.w	r2, [r1, #2196]	; 0x894
  4040f8:	4b59      	ldr	r3, [pc, #356]	; (404260 <_Z17parseTelemHubByteh+0x298>)
  4040fa:	f002 020f 	and.w	r2, r2, #15
  4040fe:	2a01      	cmp	r2, #1
  404100:	d12d      	bne.n	40415e <_Z17parseTelemHubByteh+0x196>
        evalVario(frskyHubData.baroAltitude_bp-frskyHubData.baroAltitudeOffset, frskyHubData.baroAltitude_ap);
  404102:	f8b3 2918 	ldrh.w	r2, [r3, #2328]	; 0x918
  404106:	f8b3 0938 	ldrh.w	r0, [r3, #2360]	; 0x938
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
}

inline void evalVario(int16_t altitude_bp, uint16_t altitude_ap)
{
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  40410a:	2464      	movs	r4, #100	; 0x64
      checkMinMaxAltitude();
      break;

    case offsetof(FrskyHubData, baroAltitude_ap):
      if (g_model.varioSource == VARIO_SOURCE_BARO) {
        evalVario(frskyHubData.baroAltitude_bp-frskyHubData.baroAltitudeOffset, frskyHubData.baroAltitude_ap);
  40410c:	1a80      	subs	r0, r0, r2
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
}

inline void evalVario(int16_t altitude_bp, uint16_t altitude_ap)
{
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  40410e:	b200      	sxth	r0, r0
      checkMinMaxAltitude();
      break;

    case offsetof(FrskyHubData, baroAltitude_ap):
      if (g_model.varioSource == VARIO_SOURCE_BARO) {
        evalVario(frskyHubData.baroAltitude_bp-frskyHubData.baroAltitudeOffset, frskyHubData.baroAltitude_ap);
  404110:	f8b3 295a 	ldrh.w	r2, [r3, #2394]	; 0x95a
}

inline void evalVario(int16_t altitude_bp, uint16_t altitude_ap)
{
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  uint8_t varioAltitudeQueuePointer = frskyHubData.varioAltitudeQueuePointer + 1;
  404114:	f891 3995 	ldrb.w	r3, [r1, #2453]	; 0x995
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
}

inline void evalVario(int16_t altitude_bp, uint16_t altitude_ap)
{
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  404118:	2800      	cmp	r0, #0
  40411a:	fb04 f400 	mul.w	r4, r4, r0
  40411e:	bfd8      	it	le
  404120:	4252      	negle	r2, r2
  uint8_t varioAltitudeQueuePointer = frskyHubData.varioAltitudeQueuePointer + 1;
  404122:	3301      	adds	r3, #1
  404124:	b2db      	uxtb	r3, r3
  if (varioAltitudeQueuePointer == VARIO_QUEUE_LENGTH)
  404126:	2b05      	cmp	r3, #5
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
}

inline void evalVario(int16_t altitude_bp, uint16_t altitude_ap)
{
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  404128:	4422      	add	r2, r4
  uint8_t varioAltitudeQueuePointer = frskyHubData.varioAltitudeQueuePointer + 1;
  if (varioAltitudeQueuePointer == VARIO_QUEUE_LENGTH)
  40412a:	bf18      	it	ne
  40412c:	4618      	movne	r0, r3
  40412e:	d101      	bne.n	404134 <_Z17parseTelemHubByteh+0x16c>
  404130:	2000      	movs	r0, #0
    varioAltitudeQueuePointer = 0;
  404132:	4603      	mov	r3, r0
  frskyHubData.varioAltitudeQueuePointer = varioAltitudeQueuePointer;
  frskyHubData.varioSpeed -= frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
  frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] = varioAltitude_cm - frskyHubData.varioAltitude_cm;
  404134:	f8d1 4974 	ldr.w	r4, [r1, #2420]	; 0x974
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  uint8_t varioAltitudeQueuePointer = frskyHubData.varioAltitudeQueuePointer + 1;
  if (varioAltitudeQueuePointer == VARIO_QUEUE_LENGTH)
    varioAltitudeQueuePointer = 0;
  frskyHubData.varioAltitudeQueuePointer = varioAltitudeQueuePointer;
  frskyHubData.varioSpeed -= frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
  404138:	3028      	adds	r0, #40	; 0x28
  40413a:	f8b1 5978 	ldrh.w	r5, [r1, #2424]	; 0x978
  40413e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  uint8_t varioAltitudeQueuePointer = frskyHubData.varioAltitudeQueuePointer + 1;
  if (varioAltitudeQueuePointer == VARIO_QUEUE_LENGTH)
    varioAltitudeQueuePointer = 0;
  frskyHubData.varioAltitudeQueuePointer = varioAltitudeQueuePointer;
  404142:	f881 3995 	strb.w	r3, [r1, #2453]	; 0x995
  frskyHubData.varioSpeed -= frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
  frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] = varioAltitude_cm - frskyHubData.varioAltitude_cm;
  404146:	1b13      	subs	r3, r2, r4
  404148:	b29b      	uxth	r3, r3
  int32_t varioAltitude_cm = (int32_t)altitude_bp * 100 + (altitude_bp > 0 ? altitude_ap : -altitude_ap);
  uint8_t varioAltitudeQueuePointer = frskyHubData.varioAltitudeQueuePointer + 1;
  if (varioAltitudeQueuePointer == VARIO_QUEUE_LENGTH)
    varioAltitudeQueuePointer = 0;
  frskyHubData.varioAltitudeQueuePointer = varioAltitudeQueuePointer;
  frskyHubData.varioSpeed -= frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
  40414a:	f8b0 491a 	ldrh.w	r4, [r0, #2330]	; 0x91a
  40414e:	195d      	adds	r5, r3, r5
  frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] = varioAltitude_cm - frskyHubData.varioAltitude_cm;
  frskyHubData.varioAltitude_cm = varioAltitude_cm;
  frskyHubData.varioSpeed += frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
  404150:	1b2c      	subs	r4, r5, r4
  uint8_t varioAltitudeQueuePointer = frskyHubData.varioAltitudeQueuePointer + 1;
  if (varioAltitudeQueuePointer == VARIO_QUEUE_LENGTH)
    varioAltitudeQueuePointer = 0;
  frskyHubData.varioAltitudeQueuePointer = varioAltitudeQueuePointer;
  frskyHubData.varioSpeed -= frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
  frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] = varioAltitude_cm - frskyHubData.varioAltitude_cm;
  404152:	f8a0 391a 	strh.w	r3, [r0, #2330]	; 0x91a
  frskyHubData.varioAltitude_cm = varioAltitude_cm;
  404156:	f8c1 2974 	str.w	r2, [r1, #2420]	; 0x974
  frskyHubData.varioSpeed += frskyHubData.varioAltitudeQueue[varioAltitudeQueuePointer] ;
  40415a:	f8a1 4978 	strh.w	r4, [r1, #2424]	; 0x978
    case offsetof(FrskyHubData, accelZ):
      *(int16_t*)(&((uint8_t*)&frskyHubData)[structPos]) /= 10;
      break;

  }
}
  40415e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  404162:	4770      	bx	lr
  }

  state = TS_IDLE;

  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLatitude_bp)) {
    if (lowByte || byte)
  404164:	f891 1a96 	ldrb.w	r1, [r1, #2710]	; 0xa96
  404168:	ea50 0501 	orrs.w	r5, r0, r1
      frskyHubData.gpsFix = 1;
  40416c:	493c      	ldr	r1, [pc, #240]	; (404260 <_Z17parseTelemHubByteh+0x298>)
  }

  state = TS_IDLE;

  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLatitude_bp)) {
    if (lowByte || byte)
  40416e:	d12c      	bne.n	4041ca <_Z17parseTelemHubByteh+0x202>
      frskyHubData.gpsFix = 1;
    else if (frskyHubData.gpsFix > 0 && frskyHubData.gpsLatitude_bp > 1)
  404170:	f891 6966 	ldrb.w	r6, [r1, #2406]	; 0x966
  404174:	f006 0706 	and.w	r7, r6, #6
  404178:	2f02      	cmp	r7, #2
  40417a:	d107      	bne.n	40418c <_Z17parseTelemHubByteh+0x1c4>
  40417c:	f8b1 793e 	ldrh.w	r7, [r1, #2366]	; 0x93e
  404180:	2f01      	cmp	r7, #1
      frskyHubData.gpsFix = 0;
  404182:	bf84      	itt	hi
  404184:	f365 0642 	bfihi	r6, r5, #1, #2
  404188:	f881 6966 	strbhi.w	r6, [r1, #2406]	; 0x966
  }
  
  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsAltitude_bp) ||
      ((uint8_t)structPos >= offsetof(FrskyHubData, gpsAltitude_ap) && (uint8_t)structPos <= offsetof(FrskyHubData, gpsLatitudeNS) && (uint8_t)structPos != offsetof(FrskyHubData, baroAltitude_bp) && (uint8_t)structPos != offsetof(FrskyHubData, baroAltitude_ap))) {
    // If we don't have a fix, we may discard the value
    if (frskyHubData.gpsFix <= 0)
  40418c:	f891 1966 	ldrb.w	r1, [r1, #2406]	; 0x966
  404190:	f001 0106 	and.w	r1, r1, #6
  404194:	2902      	cmp	r1, #2
  404196:	d1e2      	bne.n	40415e <_Z17parseTelemHubByteh+0x196>
  404198:	e756      	b.n	404048 <_Z17parseTelemHubByteh+0x80>
  static int8_t structPos;
  static uint8_t lowByte;
  static TS_STATE state = TS_IDLE;

  if (byte == 0x5e) {
    state = TS_DATA_ID;
  40419a:	4b30      	ldr	r3, [pc, #192]	; (40425c <_Z17parseTelemHubByteh+0x294>)
  40419c:	2201      	movs	r2, #1
  40419e:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
    return;
  4041a2:	e7dc      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
  if (byte == 0x5d) {
    state = (TS_STATE)(state | TS_XOR);
    return;
  }
  if (state == TS_DATA_ID) {
    if (byte > 0x3b) {
  4041a4:	283b      	cmp	r0, #59	; 0x3b
  4041a6:	d909      	bls.n	4041bc <_Z17parseTelemHubByteh+0x1f4>
      state = TS_IDLE;
  4041a8:	2300      	movs	r3, #0
  4041aa:	f882 3a94 	strb.w	r3, [r2, #2708]	; 0xa94
  4041ae:	e7d6      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
    }
    return;
  }
  if (state == TS_DATA_LOW) {
    lowByte = byte;
    state = TS_DATA_HIGH;
  4041b0:	2303      	movs	r3, #3
      state = TS_DATA_LOW;
    }
    return;
  }
  if (state == TS_DATA_LOW) {
    lowByte = byte;
  4041b2:	f882 0a96 	strb.w	r0, [r2, #2710]	; 0xa96
    state = TS_DATA_HIGH;
  4041b6:	f882 3a94 	strb.w	r3, [r2, #2708]	; 0xa94
    return;
  4041ba:	e7d0      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
  if (state == TS_DATA_ID) {
    if (byte > 0x3b) {
      state = TS_IDLE;
    }
    else {
      structPos = byte*2;
  4041bc:	0040      	lsls	r0, r0, #1
      state = TS_DATA_LOW;
  4041be:	2302      	movs	r3, #2
  if (state == TS_DATA_ID) {
    if (byte > 0x3b) {
      state = TS_IDLE;
    }
    else {
      structPos = byte*2;
  4041c0:	f882 0a95 	strb.w	r0, [r2, #2709]	; 0xa95
      state = TS_DATA_LOW;
  4041c4:	f882 3a94 	strb.w	r3, [r2, #2708]	; 0xa94
  4041c8:	e7c9      	b.n	40415e <_Z17parseTelemHubByteh+0x196>

  state = TS_IDLE;

  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLatitude_bp)) {
    if (lowByte || byte)
      frskyHubData.gpsFix = 1;
  4041ca:	f891 5966 	ldrb.w	r5, [r1, #2406]	; 0x966
  4041ce:	2601      	movs	r6, #1
  4041d0:	f366 0542 	bfi	r5, r6, #1, #2
  4041d4:	f881 5966 	strb.w	r5, [r1, #2406]	; 0x966
  4041d8:	e7d8      	b.n	40418c <_Z17parseTelemHubByteh+0x1c4>
      break;

    case offsetof(FrskyHubData, accelX):
    case offsetof(FrskyHubData, accelY):
    case offsetof(FrskyHubData, accelZ):
      *(int16_t*)(&((uint8_t*)&frskyHubData)[structPos]) /= 10;
  4041da:	5eca      	ldrsh	r2, [r1, r3]
  4041dc:	f246 6067 	movw	r0, #26215	; 0x6667
  4041e0:	f2c6 6066 	movt	r0, #26214	; 0x6666
  4041e4:	fb80 a002 	smull	sl, r0, r0, r2
  4041e8:	17d2      	asrs	r2, r2, #31
  4041ea:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
  4041ee:	52ca      	strh	r2, [r1, r3]
      break;
  4041f0:	e7b5      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
      }
      break;
    }

    case offsetof(FrskyHubData, hour):
      frskyHubData.hour = ((uint8_t)(frskyHubData.hour + g_eeGeneral.timezone + 24)) % 24;
  4041f2:	4b1b      	ldr	r3, [pc, #108]	; (404260 <_Z17parseTelemHubByteh+0x298>)
  4041f4:	f64a 21ab 	movw	r1, #43691	; 0xaaab
  4041f8:	f893 0946 	ldrb.w	r0, [r3, #2374]	; 0x946
  4041fc:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
  404200:	3018      	adds	r0, #24
  404202:	f342 0284 	sbfx	r2, r2, #2, #5
  404206:	1882      	adds	r2, r0, r2
  404208:	b2d2      	uxtb	r2, r2
  40420a:	f6ca 21aa 	movt	r1, #43690	; 0xaaaa
  40420e:	fba1 8102 	umull	r8, r1, r1, r2
  404212:	0909      	lsrs	r1, r1, #4
  404214:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  404218:	eba2 02c1 	sub.w	r2, r2, r1, lsl #3
  40421c:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
      break;
  404220:	e79d      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
      }
      break;

    case offsetof(FrskyHubData, gpsSpeed_bp):
      // Speed => Max speed
      if (frskyHubData.gpsSpeed_bp < frskyHubData.maxGpsSpeed)
  404222:	4b0f      	ldr	r3, [pc, #60]	; (404260 <_Z17parseTelemHubByteh+0x298>)
  404224:	f8b3 293a 	ldrh.w	r2, [r3, #2362]	; 0x93a
  404228:	f8b3 1984 	ldrh.w	r1, [r3, #2436]	; 0x984
  40422c:	4291      	cmp	r1, r2
        frskyHubData.maxGpsSpeed = frskyHubData.gpsSpeed_bp;
  40422e:	bf88      	it	hi
  404230:	f8a3 2984 	strhhi.w	r2, [r3, #2436]	; 0x984
  404234:	e793      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
        frskyHubData.maxTemperature2 = frskyHubData.temperature2;
      break;

    case offsetof(FrskyHubData, baroAltitude_bp):
      // First received barometer altitude => Altitude offset
      if (!frskyHubData.baroAltitudeOffset)
  404236:	490a      	ldr	r1, [pc, #40]	; (404260 <_Z17parseTelemHubByteh+0x298>)
  404238:	f8b1 3918 	ldrh.w	r3, [r1, #2328]	; 0x918
  40423c:	b92b      	cbnz	r3, 40424a <_Z17parseTelemHubByteh+0x282>
        frskyHubData.baroAltitudeOffset = -frskyHubData.baroAltitude_bp;
  40423e:	f8b1 3938 	ldrh.w	r3, [r1, #2360]	; 0x938
  404242:	425b      	negs	r3, r3
  404244:	b29b      	uxth	r3, r3
  404246:	f8a1 3918 	strh.w	r3, [r1, #2328]	; 0x918
      frskyHubData.baroAltitude_bp += frskyHubData.baroAltitudeOffset;
  40424a:	f8b1 2938 	ldrh.w	r2, [r1, #2360]	; 0x938
  40424e:	189b      	adds	r3, r3, r2
  404250:	f8a1 3938 	strh.w	r3, [r1, #2360]	; 0x938
    case offsetof(FrskyHubData, accelZ):
      *(int16_t*)(&((uint8_t*)&frskyHubData)[structPos]) /= 10;
      break;

  }
}
  404254:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    case offsetof(FrskyHubData, baroAltitude_bp):
      // First received barometer altitude => Altitude offset
      if (!frskyHubData.baroAltitudeOffset)
        frskyHubData.baroAltitudeOffset = -frskyHubData.baroAltitude_bp;
      frskyHubData.baroAltitude_bp += frskyHubData.baroAltitudeOffset;
      checkMinMaxAltitude();
  404258:	e6a2      	b.n	403fa0 <_Z19checkMinMaxAltitudev>
  40425a:	bf00      	nop
  40425c:	20001200 	.word	0x20001200
  404260:	20000108 	.word	0x20000108
  404264:	20000a20 	.word	0x20000a20
        evalVario(frskyHubData.baroAltitude_bp-frskyHubData.baroAltitudeOffset, frskyHubData.baroAltitude_ap);
      }
      break;

    case offsetof(FrskyHubData, gpsAltitude_ap):
      if (!frskyHubData.gpsAltitudeOffset)
  404268:	49a8      	ldr	r1, [pc, #672]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  40426a:	f8b1 3992 	ldrh.w	r3, [r1, #2450]	; 0x992
  40426e:	b92b      	cbnz	r3, 40427c <_Z17parseTelemHubByteh+0x2b4>
        frskyHubData.gpsAltitudeOffset = -frskyHubData.gpsAltitude_bp;
  404270:	f8b1 391a 	ldrh.w	r3, [r1, #2330]	; 0x91a
  404274:	425b      	negs	r3, r3
  404276:	b29b      	uxth	r3, r3
  404278:	f8a1 3992 	strh.w	r3, [r1, #2450]	; 0x992
      frskyHubData.gpsAltitude_bp += frskyHubData.gpsAltitudeOffset;
  40427c:	f8b1 491a 	ldrh.w	r4, [r1, #2330]	; 0x91a
      if (!frskyHubData.baroAltitudeOffset) {
  404280:	f9b1 0918 	ldrsh.w	r0, [r1, #2328]	; 0x918
      break;

    case offsetof(FrskyHubData, gpsAltitude_ap):
      if (!frskyHubData.gpsAltitudeOffset)
        frskyHubData.gpsAltitudeOffset = -frskyHubData.gpsAltitude_bp;
      frskyHubData.gpsAltitude_bp += frskyHubData.gpsAltitudeOffset;
  404284:	191b      	adds	r3, r3, r4
  404286:	b29b      	uxth	r3, r3
  404288:	4ca0      	ldr	r4, [pc, #640]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  40428a:	f8a1 391a 	strh.w	r3, [r1, #2330]	; 0x91a
      if (!frskyHubData.baroAltitudeOffset) {
  40428e:	b968      	cbnz	r0, 4042ac <_Z17parseTelemHubByteh+0x2e4>
        if (frskyHubData.gpsAltitude_bp > frskyHubData.maxAltitude)
  404290:	f9b4 597c 	ldrsh.w	r5, [r4, #2428]	; 0x97c
  404294:	b218      	sxth	r0, r3
  404296:	4285      	cmp	r5, r0
          frskyHubData.maxAltitude = frskyHubData.gpsAltitude_bp;
  404298:	bfb8      	it	lt
  40429a:	f8a4 397c 	strhlt.w	r3, [r4, #2428]	; 0x97c
        if (frskyHubData.gpsAltitude_bp < frskyHubData.minAltitude)
  40429e:	f9b1 497a 	ldrsh.w	r4, [r1, #2426]	; 0x97a
  4042a2:	4284      	cmp	r4, r0
          frskyHubData.minAltitude = frskyHubData.gpsAltitude_bp;
  4042a4:	bfc4      	itt	gt
  4042a6:	4899      	ldrgt	r0, [pc, #612]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  4042a8:	f8a0 397a 	strhgt.w	r3, [r0, #2426]	; 0x97a
      }

      if (!frskyHubData.pilotLatitude && !frskyHubData.pilotLongitude) {
  4042ac:	f8b1 0952 	ldrh.w	r0, [r1, #2386]	; 0x952
  4042b0:	f8b1 4954 	ldrh.w	r4, [r1, #2388]	; 0x954
  4042b4:	4b95      	ldr	r3, [pc, #596]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  4042b6:	ea50 4004 	orrs.w	r0, r0, r4, lsl #16
  4042ba:	d107      	bne.n	4042cc <_Z17parseTelemHubByteh+0x304>
  4042bc:	f8b3 4956 	ldrh.w	r4, [r3, #2390]	; 0x956
  4042c0:	f8b3 5958 	ldrh.w	r5, [r3, #2392]	; 0x958
  4042c4:	ea54 4505 	orrs.w	r5, r4, r5, lsl #16
  4042c8:	f000 8124 	beq.w	404514 <_Z17parseTelemHubByteh+0x54c>
        // First received GPS position => Pilot GPS position
        getGpsPilotPosition();
      }
      else if (frskyHubData.gpsDistNeeded || g_menuStack[0] == menuProcFrsky) {
  4042cc:	f891 3966 	ldrb.w	r3, [r1, #2406]	; 0x966
  4042d0:	07db      	lsls	r3, r3, #31
  4042d2:	d405      	bmi.n	4042e0 <_Z17parseTelemHubByteh+0x318>
  4042d4:	f8d2 2a98 	ldr.w	r2, [r2, #2712]	; 0xa98
  4042d8:	4b8d      	ldr	r3, [pc, #564]	; (404510 <_Z17parseTelemHubByteh+0x548>)
  4042da:	429a      	cmp	r2, r3
  4042dc:	f47f af3f 	bne.w	40415e <_Z17parseTelemHubByteh+0x196>
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4042e0:	f8b1 693e 	ldrh.w	r6, [r1, #2366]	; 0x93e
  4042e4:	f248 531f 	movw	r3, #34079	; 0x851f
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4042e8:	f8b1 493c 	ldrh.w	r4, [r1, #2364]	; 0x93c
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4042ec:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
  4042f0:	fba3 2706 	umull	r2, r7, r3, r6
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4042f4:	fba3 5304 	umull	r5, r3, r3, r4
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4042f8:	097f      	lsrs	r7, r7, #5
  4042fa:	2264      	movs	r2, #100	; 0x64
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4042fc:	095d      	lsrs	r5, r3, #5
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4042fe:	fb02 6617 	mls	r6, r2, r7, r6
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  404302:	fb02 4215 	mls	r2, r2, r5, r4
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  404306:	f8b1 494e 	ldrh.w	r4, [r1, #2382]	; 0x94e
  40430a:	f242 7310 	movw	r3, #10000	; 0x2710
  40430e:	fa1f fc86 	uxth.w	ip, r6
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  404312:	f8b1 694c 	ldrh.w	r6, [r1, #2380]	; 0x94c
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  404316:	fb03 440c 	mla	r4, r3, ip, r4
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  40431a:	b292      	uxth	r2, r2
  40431c:	fb03 6602 	mla	r6, r3, r2, r6
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  404320:	f64a 22ab 	movw	r2, #43691	; 0xaaab
  404324:	f244 2340 	movw	r3, #16960	; 0x4240
  404328:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
  40432c:	f2c0 030f 	movt	r3, #15
  404330:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404334:	fba2 8404 	umull	r8, r4, r2, r4
  404338:	fb03 f707 	mul.w	r7, r3, r7
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  40433c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404340:	fba2 a206 	umull	sl, r2, r2, r6
  404344:	fb03 f305 	mul.w	r3, r3, r5
  // printf("frskyHubData.distFromEarthAxis=%d\n", frskyHubData.distFromEarthAxis); fflush(stdout);
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  404348:	eb07 0454 	add.w	r4, r7, r4, lsr #1
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;

  // printf("lat=%d (%d), long=%d (%d)\n", lat, abs(lat - frskyHubData.pilotLatitude), lng, abs(lng - frskyHubData.pilotLongitude));

  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  40434c:	42a0      	cmp	r0, r4
}

inline void getGpsDistance()
{
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  40434e:	eb03 0352 	add.w	r3, r3, r2, lsr #1

  // printf("lat=%d (%d), long=%d (%d)\n", lat, abs(lat - frskyHubData.pilotLatitude), lng, abs(lng - frskyHubData.pilotLongitude));

  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  uint32_t dist = EARTH_RADIUS * angle / 1000000;
  404352:	f24b 225a 	movw	r2, #45658	; 0xb25a
  uint32_t lat = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;

  // printf("lat=%d (%d), long=%d (%d)\n", lat, abs(lat - frskyHubData.pilotLatitude), lng, abs(lng - frskyHubData.pilotLongitude));

  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  404356:	bf34      	ite	cc
  404358:	ebc0 0004 	rsbcc	r0, r0, r4
  40435c:	ebc4 0000 	rsbcs	r0, r4, r0
  uint32_t dist = EARTH_RADIUS * angle / 1000000;
  404360:	f2c0 0201 	movt	r2, #1
  404364:	fb02 f000 	mul.w	r0, r2, r0
  404368:	f64d 6283 	movw	r2, #56963	; 0xde83
  40436c:	f2c4 321b 	movt	r2, #17179	; 0x431b
  404370:	fba2 c000 	umull	ip, r0, r2, r0
  uint32_t result = dist*dist;

  angle = (lng > frskyHubData.pilotLongitude) ? lng - frskyHubData.pilotLongitude : frskyHubData.pilotLongitude - lng;
  404374:	f8b1 4956 	ldrh.w	r4, [r1, #2390]	; 0x956
  404378:	f8b1 2958 	ldrh.w	r2, [r1, #2392]	; 0x958
  dist = frskyHubData.distFromEarthAxis * angle / 1000000;
  40437c:	f8b1 5928 	ldrh.w	r5, [r1, #2344]	; 0x928

  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  uint32_t dist = EARTH_RADIUS * angle / 1000000;
  uint32_t result = dist*dist;

  angle = (lng > frskyHubData.pilotLongitude) ? lng - frskyHubData.pilotLongitude : frskyHubData.pilotLongitude - lng;
  404380:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  dist = frskyHubData.distFromEarthAxis * angle / 1000000;
  404384:	f8b1 4926 	ldrh.w	r4, [r1, #2342]	; 0x926
  uint32_t lng = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;

  // printf("lat=%d (%d), long=%d (%d)\n", lat, abs(lat - frskyHubData.pilotLatitude), lng, abs(lng - frskyHubData.pilotLongitude));

  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  uint32_t dist = EARTH_RADIUS * angle / 1000000;
  404388:	0c80      	lsrs	r0, r0, #18
  uint32_t result = dist*dist;

  angle = (lng > frskyHubData.pilotLongitude) ? lng - frskyHubData.pilotLongitude : frskyHubData.pilotLongitude - lng;
  40438a:	4293      	cmp	r3, r2
  dist = frskyHubData.distFromEarthAxis * angle / 1000000;
  40438c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16

  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  uint32_t dist = EARTH_RADIUS * angle / 1000000;
  uint32_t result = dist*dist;

  angle = (lng > frskyHubData.pilotLongitude) ? lng - frskyHubData.pilotLongitude : frskyHubData.pilotLongitude - lng;
  404390:	bf8c      	ite	hi
  404392:	ebc2 0203 	rsbhi	r2, r2, r3
  404396:	ebc3 0202 	rsbls	r2, r3, r2
  dist = frskyHubData.distFromEarthAxis * angle / 1000000;
  40439a:	fb04 f202 	mul.w	r2, r4, r2
  40439e:	f64d 6383 	movw	r3, #56963	; 0xde83
  4043a2:	f2c4 331b 	movt	r3, #17179	; 0x431b
  4043a6:	fba3 4302 	umull	r4, r3, r3, r2

  // printf("lat=%d (%d), long=%d (%d)\n", lat, abs(lat - frskyHubData.pilotLatitude), lng, abs(lng - frskyHubData.pilotLongitude));

  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  uint32_t dist = EARTH_RADIUS * angle / 1000000;
  uint32_t result = dist*dist;
  4043aa:	fb00 f000 	mul.w	r0, r0, r0

  angle = (lng > frskyHubData.pilotLongitude) ? lng - frskyHubData.pilotLongitude : frskyHubData.pilotLongitude - lng;
  dist = frskyHubData.distFromEarthAxis * angle / 1000000;
  result += dist*dist;

  dist = abs(frskyHubData.baroAltitudeOffset ? frskyHubData.baroAltitude_bp : frskyHubData.gpsAltitude_bp);
  4043ae:	f9b1 4918 	ldrsh.w	r4, [r1, #2328]	; 0x918
  uint32_t angle = (lat > frskyHubData.pilotLatitude) ? lat - frskyHubData.pilotLatitude : frskyHubData.pilotLatitude - lat;
  uint32_t dist = EARTH_RADIUS * angle / 1000000;
  uint32_t result = dist*dist;

  angle = (lng > frskyHubData.pilotLongitude) ? lng - frskyHubData.pilotLongitude : frskyHubData.pilotLongitude - lng;
  dist = frskyHubData.distFromEarthAxis * angle / 1000000;
  4043b2:	0c9d      	lsrs	r5, r3, #18
  4043b4:	4a55      	ldr	r2, [pc, #340]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  result += dist*dist;
  4043b6:	fb05 0305 	mla	r3, r5, r5, r0

  dist = abs(frskyHubData.baroAltitudeOffset ? frskyHubData.baroAltitude_bp : frskyHubData.gpsAltitude_bp);
  4043ba:	2c00      	cmp	r4, #0
  4043bc:	f000 80a3 	beq.w	404506 <_Z17parseTelemHubByteh+0x53e>
  4043c0:	f8b2 5938 	ldrh.w	r5, [r2, #2360]	; 0x938
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  4043c4:	b22d      	sxth	r5, r5
  4043c6:	2d00      	cmp	r5, #0
  4043c8:	bfb8      	it	lt
  4043ca:	426d      	neglt	r5, r5
  4043cc:	b22d      	sxth	r5, r5
  result += dist*dist;
  4043ce:	fb05 3505 	mla	r5, r5, r5, r3

#if defined(HELI) || defined(FRSKY_HUB)
uint16_t isqrt32(uint32_t n)
{
    uint16_t c = 0x8000;
    uint16_t g = 0x8000;
  4043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4043d6:	2010      	movs	r0, #16
int8_t s_traceCnt;

#if defined(HELI) || defined(FRSKY_HUB)
uint16_t isqrt32(uint32_t n)
{
    uint16_t c = 0x8000;
  4043d8:	461a      	mov	r2, r3
  4043da:	e000      	b.n	4043de <_Z17parseTelemHubByteh+0x416>
        if((uint32_t)g*g > n)
            g ^= c;
        c >>= 1;
        if(c == 0)
            return g;
        g |= c;
  4043dc:	4313      	orrs	r3, r2
{
    uint16_t c = 0x8000;
    uint16_t g = 0x8000;

    for(;;) {
        if((uint32_t)g*g > n)
  4043de:	fb03 f403 	mul.w	r4, r3, r3
  4043e2:	42a5      	cmp	r5, r4
            g ^= c;
  4043e4:	bf38      	it	cc
  4043e6:	4053      	eorcc	r3, r2
        c >>= 1;
  4043e8:	0852      	lsrs	r2, r2, #1
        if(c == 0)
  4043ea:	3801      	subs	r0, #1
  4043ec:	d1f6      	bne.n	4043dc <_Z17parseTelemHubByteh+0x414>

  frskyHubData.gpsDistance = isqrt32(result);
  if (frskyHubData.gpsDistance > frskyHubData.maxGpsDistance)
  4043ee:	f8b1 2986 	ldrh.w	r2, [r1, #2438]	; 0x986
  result += dist*dist;

  dist = abs(frskyHubData.baroAltitudeOffset ? frskyHubData.baroAltitude_bp : frskyHubData.gpsAltitude_bp);
  result += dist*dist;

  frskyHubData.gpsDistance = isqrt32(result);
  4043f2:	f8a1 3990 	strh.w	r3, [r1, #2448]	; 0x990
  if (frskyHubData.gpsDistance > frskyHubData.maxGpsDistance)
  4043f6:	429a      	cmp	r2, r3
  4043f8:	f4bf aeb1 	bcs.w	40415e <_Z17parseTelemHubByteh+0x196>
    frskyHubData.maxGpsDistance = frskyHubData.gpsDistance;
  4043fc:	4a43      	ldr	r2, [pc, #268]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  4043fe:	f8a2 3986 	strh.w	r3, [r2, #2438]	; 0x986
  404402:	e6ac      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
  ((uint8_t*)&frskyHubData)[structPos+1] = byte;

  switch ((uint8_t)structPos) {

    case offsetof(FrskyHubData, rpm):
      frskyHubData.rpm *= (uint8_t)60/(g_model.frsky.blades+2);
  404404:	4b41      	ldr	r3, [pc, #260]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  404406:	203c      	movs	r0, #60	; 0x3c
  404408:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
  40440c:	f8b3 191e 	ldrh.w	r1, [r3, #2334]	; 0x91e
  404410:	f3c2 1201 	ubfx	r2, r2, #4, #2
  404414:	3202      	adds	r2, #2
  404416:	fb90 f2f2 	sdiv	r2, r0, r2
  40441a:	fb01 f202 	mul.w	r2, r1, r2
      if (frskyHubData.rpm > frskyHubData.maxRpm)
  40441e:	f8b3 197e 	ldrh.w	r1, [r3, #2430]	; 0x97e
  ((uint8_t*)&frskyHubData)[structPos+1] = byte;

  switch ((uint8_t)structPos) {

    case offsetof(FrskyHubData, rpm):
      frskyHubData.rpm *= (uint8_t)60/(g_model.frsky.blades+2);
  404422:	b292      	uxth	r2, r2
      if (frskyHubData.rpm > frskyHubData.maxRpm)
  404424:	4291      	cmp	r1, r2
  ((uint8_t*)&frskyHubData)[structPos+1] = byte;

  switch ((uint8_t)structPos) {

    case offsetof(FrskyHubData, rpm):
      frskyHubData.rpm *= (uint8_t)60/(g_model.frsky.blades+2);
  404426:	f8a3 291e 	strh.w	r2, [r3, #2334]	; 0x91e
      if (frskyHubData.rpm > frskyHubData.maxRpm)
        frskyHubData.maxRpm = frskyHubData.rpm;
  40442a:	bf38      	it	cc
  40442c:	f8a3 297e 	strhcc.w	r2, [r3, #2430]	; 0x97e
  404430:	e695      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
      break;

    case offsetof(FrskyHubData, temperature1):
      if (frskyHubData.temperature1 > frskyHubData.maxTemperature1)
  404432:	4b36      	ldr	r3, [pc, #216]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  404434:	f8b3 291c 	ldrh.w	r2, [r3, #2332]	; 0x91c
  404438:	f9b3 0980 	ldrsh.w	r0, [r3, #2432]	; 0x980
  40443c:	b211      	sxth	r1, r2
  40443e:	4288      	cmp	r0, r1
        frskyHubData.maxTemperature1 = frskyHubData.temperature1;
  404440:	bfb8      	it	lt
  404442:	f8a3 2980 	strhlt.w	r2, [r3, #2432]	; 0x980
  404446:	e68a      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
      break;

    case offsetof(FrskyHubData, volts):
      // Voltage => Cell number + Cell voltage
    {
      uint8_t battnumber = ((frskyHubData.volts & 0x00F0) >> 4);
  404448:	4930      	ldr	r1, [pc, #192]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  40444a:	f8b1 2924 	ldrh.w	r2, [r1, #2340]	; 0x924
  40444e:	f3c2 1303 	ubfx	r3, r2, #4, #4
      if (battnumber < 12) {
  404452:	2b0b      	cmp	r3, #11
  404454:	f63f ae83 	bhi.w	40415e <_Z17parseTelemHubByteh+0x196>
        if (frskyHubData.cellsCount < battnumber+1) {
  404458:	f891 0966 	ldrb.w	r0, [r1, #2406]	; 0x966
  40445c:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
  404460:	db04      	blt.n	40446c <_Z17parseTelemHubByteh+0x4a4>
          frskyHubData.cellsCount = battnumber+1;
  404462:	1c5c      	adds	r4, r3, #1
  404464:	f364 1007 	bfi	r0, r4, #4, #4
  404468:	f881 0966 	strb.w	r0, [r1, #2406]	; 0x966
        }
        uint8_t cellVolts = (uint8_t)(((((frskyHubData.volts & 0xFF00) >> 8) + ((frskyHubData.volts & 0x000F) << 8)))/10);
  40446c:	f002 040f 	and.w	r4, r2, #15
  404470:	0224      	lsls	r4, r4, #8
  404472:	f246 6067 	movw	r0, #26215	; 0x6667
  404476:	eb04 2212 	add.w	r2, r4, r2, lsr #8
  40447a:	f2c6 6066 	movt	r0, #26214	; 0x6666
  40447e:	fb80 5202 	smull	r5, r2, r0, r2
        frskyHubData.cellVolts[battnumber] = cellVolts;
        if (!frskyHubData.minCellVolts || cellVolts < frskyHubData.minCellVolts)
  404482:	f891 4967 	ldrb.w	r4, [r1, #2407]	; 0x967
      uint8_t battnumber = ((frskyHubData.volts & 0x00F0) >> 4);
      if (battnumber < 12) {
        if (frskyHubData.cellsCount < battnumber+1) {
          frskyHubData.cellsCount = battnumber+1;
        }
        uint8_t cellVolts = (uint8_t)(((((frskyHubData.volts & 0xFF00) >> 8) + ((frskyHubData.volts & 0x000F) << 8)))/10);
  404486:	f3c2 0287 	ubfx	r2, r2, #2, #8
        frskyHubData.cellVolts[battnumber] = cellVolts;
  40448a:	18cb      	adds	r3, r1, r3
  40448c:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
        if (!frskyHubData.minCellVolts || cellVolts < frskyHubData.minCellVolts)
  404490:	b114      	cbz	r4, 404498 <_Z17parseTelemHubByteh+0x4d0>
  404492:	42a2      	cmp	r2, r4
  404494:	f4bf ae63 	bcs.w	40415e <_Z17parseTelemHubByteh+0x196>
          frskyHubData.minCellVolts = cellVolts;
  404498:	f881 2967 	strb.w	r2, [r1, #2407]	; 0x967
  40449c:	e65f      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
      if (frskyHubData.temperature1 > frskyHubData.maxTemperature1)
        frskyHubData.maxTemperature1 = frskyHubData.temperature1;
      break;

    case offsetof(FrskyHubData, temperature2):
      if (frskyHubData.temperature2 > frskyHubData.maxTemperature2)
  40449e:	4b1b      	ldr	r3, [pc, #108]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  4044a0:	f8b3 2922 	ldrh.w	r2, [r3, #2338]	; 0x922
  4044a4:	f9b3 0982 	ldrsh.w	r0, [r3, #2434]	; 0x982
  4044a8:	b211      	sxth	r1, r2
  4044aa:	4288      	cmp	r0, r1
        frskyHubData.maxTemperature2 = frskyHubData.temperature2;
  4044ac:	bfb8      	it	lt
  4044ae:	f8a3 2982 	strhlt.w	r2, [r3, #2434]	; 0x982
  4044b2:	e654      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
      frskyHubData.gpsFix = 1;
    else if (frskyHubData.gpsFix > 0 && frskyHubData.gpsLatitude_bp > 1)
      frskyHubData.gpsFix = 0;
  }
  else if ((uint8_t)structPos == offsetof(FrskyHubData, gpsLongitude_bp)) {
    if (lowByte || byte)
  4044b4:	f891 1a96 	ldrb.w	r1, [r1, #2710]	; 0xa96
  4044b8:	4301      	orrs	r1, r0
  4044ba:	d008      	beq.n	4044ce <_Z17parseTelemHubByteh+0x506>
      frskyHubData.gpsFix = 1;
  4044bc:	4913      	ldr	r1, [pc, #76]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  4044be:	2601      	movs	r6, #1
  4044c0:	f891 5966 	ldrb.w	r5, [r1, #2406]	; 0x966
  4044c4:	f366 0542 	bfi	r5, r6, #1, #2
  4044c8:	f881 5966 	strb.w	r5, [r1, #2406]	; 0x966
  4044cc:	e5ad      	b.n	40402a <_Z17parseTelemHubByteh+0x62>
    else if (frskyHubData.gpsFix > 0 && frskyHubData.gpsLongitude_bp > 1)
  4044ce:	4d0f      	ldr	r5, [pc, #60]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  4044d0:	f895 6966 	ldrb.w	r6, [r5, #2406]	; 0x966
  4044d4:	f006 0706 	and.w	r7, r6, #6
  4044d8:	2f02      	cmp	r7, #2
  4044da:	f47f ada6 	bne.w	40402a <_Z17parseTelemHubByteh+0x62>
  4044de:	f8b5 793c 	ldrh.w	r7, [r5, #2364]	; 0x93c
  4044e2:	2f01      	cmp	r7, #1
      frskyHubData.gpsFix = 0;
  4044e4:	bf84      	itt	hi
  4044e6:	f361 0642 	bfihi	r6, r1, #1, #2
  4044ea:	f885 6966 	strbhi.w	r6, [r5, #2406]	; 0x966
  4044ee:	e59c      	b.n	40402a <_Z17parseTelemHubByteh+0x62>
  }
  
  if ((uint8_t)structPos == offsetof(FrskyHubData, gpsAltitude_bp) ||
  4044f0:	2b42      	cmp	r3, #66	; 0x42
  4044f2:	4906      	ldr	r1, [pc, #24]	; (40450c <_Z17parseTelemHubByteh+0x544>)
  4044f4:	f47f ae4a 	bne.w	40418c <_Z17parseTelemHubByteh+0x1c4>
    // If we don't have a fix, we may discard the value
    if (frskyHubData.gpsFix <= 0)
      return;
  }
  
  ((uint8_t*)&frskyHubData)[structPos] = lowByte;
  4044f8:	f892 3a96 	ldrb.w	r3, [r2, #2710]	; 0xa96
  ((uint8_t*)&frskyHubData)[structPos+1] = byte;
  4044fc:	f881 095b 	strb.w	r0, [r1, #2395]	; 0x95b
    // If we don't have a fix, we may discard the value
    if (frskyHubData.gpsFix <= 0)
      return;
  }
  
  ((uint8_t*)&frskyHubData)[structPos] = lowByte;
  404500:	f881 395a 	strb.w	r3, [r1, #2394]	; 0x95a
  404504:	e5f6      	b.n	4040f4 <_Z17parseTelemHubByteh+0x12c>

  angle = (lng > frskyHubData.pilotLongitude) ? lng - frskyHubData.pilotLongitude : frskyHubData.pilotLongitude - lng;
  dist = frskyHubData.distFromEarthAxis * angle / 1000000;
  result += dist*dist;

  dist = abs(frskyHubData.baroAltitudeOffset ? frskyHubData.baroAltitude_bp : frskyHubData.gpsAltitude_bp);
  404506:	f8b2 591a 	ldrh.w	r5, [r2, #2330]	; 0x91a
  40450a:	e75b      	b.n	4043c4 <_Z17parseTelemHubByteh+0x3fc>
  40450c:	20000108 	.word	0x20000108
  404510:	00406791 	.word	0x00406791
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  404514:	f8b3 293e 	ldrh.w	r2, [r3, #2366]	; 0x93e
  404518:	f248 511f 	movw	r1, #34079	; 0x851f
  40451c:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
  404520:	fba1 4702 	umull	r4, r7, r1, r2
  404524:	2464      	movs	r4, #100	; 0x64
  404526:	097f      	lsrs	r7, r7, #5
  404528:	fb04 2017 	mls	r0, r4, r7, r2
  40452c:	f64a 22ab 	movw	r2, #43691	; 0xaaab
  404530:	b280      	uxth	r0, r0
  404532:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
  404536:	b2bf      	uxth	r7, r7
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  404538:	eb00 0680 	add.w	r6, r0, r0, lsl #2
  40453c:	fba2 5606 	umull	r5, r6, r2, r6
  404540:	fb04 f507 	mul.w	r5, r4, r7
  404544:	eb05 0556 	add.w	r5, r5, r6, lsr #1
  uint32_t angle2 = (lat*lat) / 10000;
  404548:	fb05 f605 	mul.w	r6, r5, r5
  40454c:	f241 7559 	movw	r5, #5977	; 0x1759
  404550:	f2cd 15b7 	movt	r5, #53687	; 0xd1b7
  404554:	fba5 8506 	umull	r8, r5, r5, r6

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  404558:	f8b3 893c 	ldrh.w	r8, [r3, #2364]	; 0x93c
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  40455c:	0b6d      	lsrs	r5, r5, #13
  uint32_t angle4 = angle2 * angle2;
  40455e:	fb05 f905 	mul.w	r9, r5, r5
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  404562:	f24e 1cea 	movw	ip, #57834	; 0xe1ea

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  404566:	fba1 a608 	umull	sl, r6, r1, r8
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  40456a:	f2c0 0c01 	movt	ip, #1
  40456e:	fb0c f505 	mul.w	r5, ip, r5
  404572:	fba1 c909 	umull	ip, r9, r1, r9
  404576:	f248 7ce7 	movw	ip, #34791	; 0x87e7

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  40457a:	0976      	lsrs	r6, r6, #5
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  40457c:	f6cc 2c45 	movt	ip, #51781	; 0xca45
  404580:	fbac 1505 	umull	r1, r5, ip, r5

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  404584:	fb04 8416 	mls	r4, r4, r6, r8
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  404588:	f249 6180 	movw	r1, #38528	; 0x9680
  40458c:	ea4f 0cd9 	mov.w	ip, r9, lsr #3
  404590:	f2c0 0198 	movt	r1, #152	; 0x98
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  404594:	f8b3 a94e 	ldrh.w	sl, [r3, #2382]	; 0x94e
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  404598:	4461      	add	r1, ip

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  40459a:	f8b3 994c 	ldrh.w	r9, [r3, #2380]	; 0x94c
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  40459e:	f242 7c10 	movw	ip, #10000	; 0x2710
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  4045a2:	eba1 1195 	sub.w	r1, r1, r5, lsr #6

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4045a6:	b2a4      	uxth	r4, r4
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  4045a8:	f24b 5589 	movw	r5, #46473	; 0xb589
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4045ac:	fb0c a000 	mla	r0, ip, r0, sl
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4045b0:	fb0c 9404 	mla	r4, ip, r4, r9
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  4045b4:	0889      	lsrs	r1, r1, #2
  4045b6:	f2c1 45f8 	movt	r5, #5368	; 0x14f8
  4045ba:	fba5 8501 	umull	r8, r5, r5, r1
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4045be:	f244 2140 	movw	r1, #16960	; 0x4240
  4045c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4045c6:	f2c0 010f 	movt	r1, #15
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4045ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4045ce:	fba2 ac00 	umull	sl, ip, r2, r0
  4045d2:	fb01 f707 	mul.w	r7, r1, r7
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4045d6:	fba2 0204 	umull	r0, r2, r2, r4
  4045da:	fb01 f106 	mul.w	r1, r1, r6
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  4045de:	0a28      	lsrs	r0, r5, #8
  4045e0:	248b      	movs	r4, #139	; 0x8b
  4045e2:	fb04 f000 	mul.w	r0, r4, r0

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4045e6:	eb01 0252 	add.w	r2, r1, r2, lsr #1
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4045ea:	eb07 045c 	add.w	r4, r7, ip, lsr #1
  4045ee:	0c26      	lsrs	r6, r4, #16
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4045f0:	0c15      	lsrs	r5, r2, #16
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  4045f2:	0c01      	lsrs	r1, r0, #16
#endif

#ifdef FRSKY_HUB
inline void getGpsPilotPosition()
{
  frskyHubData.pilotLatitude = ((uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 10000 + frskyHubData.gpsLatitude_ap) * 5) / 3;
  4045f4:	f8a3 4952 	strh.w	r4, [r3, #2386]	; 0x952
  4045f8:	f8a3 6954 	strh.w	r6, [r3, #2388]	; 0x954
  frskyHubData.pilotLongitude = ((uint32_t)(frskyHubData.gpsLongitude_bp / 100) * 1000000) + (((uint32_t)(frskyHubData.gpsLongitude_bp % 100) * 10000 + frskyHubData.gpsLongitude_ap) * 5) / 3;
  4045fc:	f8a3 2956 	strh.w	r2, [r3, #2390]	; 0x956
  404600:	f8a3 5958 	strh.w	r5, [r3, #2392]	; 0x958
  uint32_t lat = (uint32_t)(frskyHubData.gpsLatitude_bp / 100) * 100 + ((uint32_t)(frskyHubData.gpsLatitude_bp % 100) * 5) / 3;
  uint32_t angle2 = (lat*lat) / 10000;
  uint32_t angle4 = angle2 * angle2;
  frskyHubData.distFromEarthAxis = 139*(((uint32_t)10000000-((angle2*(uint32_t)123370)/81)+(angle4/25))/12500);
  404604:	f8a3 0926 	strh.w	r0, [r3, #2342]	; 0x926
  404608:	f8a3 1928 	strh.w	r1, [r3, #2344]	; 0x928
  40460c:	e5a7      	b.n	40415e <_Z17parseTelemHubByteh+0x196>
  40460e:	bf00      	nop

00404610 <_Z23parseTelemWSHowHighByteh>:
}
#endif

#ifdef WS_HOW_HIGH
void parseTelemWSHowHighByte(uint8_t byte)
{
  404610:	b510      	push	{r4, lr}
  if (frskyUsrStreaming < (FRSKY_TIMEOUT10ms*3 - 10)) {
  404612:	4c0a      	ldr	r4, [pc, #40]	; (40463c <_Z23parseTelemWSHowHighByteh+0x2c>)
  404614:	f894 3aac 	ldrb.w	r3, [r4, #2732]	; 0xaac
  404618:	2b31      	cmp	r3, #49	; 0x31
    ((uint8_t*)&frskyHubData)[offsetof(FrskyHubData, baroAltitude_bp)] = byte;
  40461a:	4b09      	ldr	r3, [pc, #36]	; (404640 <_Z23parseTelemWSHowHighByteh+0x30>)
    checkMinMaxAltitude();
  }
  else {
    // At least 100mS passed since last data received
    ((uint8_t*)&frskyHubData)[offsetof(FrskyHubData, baroAltitude_bp)+1] = byte;
  40461c:	bf88      	it	hi
  40461e:	f883 0939 	strbhi.w	r0, [r3, #2361]	; 0x939
#endif

#ifdef WS_HOW_HIGH
void parseTelemWSHowHighByte(uint8_t byte)
{
  if (frskyUsrStreaming < (FRSKY_TIMEOUT10ms*3 - 10)) {
  404622:	d903      	bls.n	40462c <_Z23parseTelemWSHowHighByteh+0x1c>
  else {
    // At least 100mS passed since last data received
    ((uint8_t*)&frskyHubData)[offsetof(FrskyHubData, baroAltitude_bp)+1] = byte;
  }
  // baroAltitude_bp unit here is feet!
  frskyUsrStreaming = FRSKY_TIMEOUT10ms*3; // reset counter
  404624:	233c      	movs	r3, #60	; 0x3c
  404626:	f884 3aac 	strb.w	r3, [r4, #2732]	; 0xaac
}
  40462a:	bd10      	pop	{r4, pc}

#ifdef WS_HOW_HIGH
void parseTelemWSHowHighByte(uint8_t byte)
{
  if (frskyUsrStreaming < (FRSKY_TIMEOUT10ms*3 - 10)) {
    ((uint8_t*)&frskyHubData)[offsetof(FrskyHubData, baroAltitude_bp)] = byte;
  40462c:	f883 0938 	strb.w	r0, [r3, #2360]	; 0x938
    checkMinMaxAltitude();
  404630:	f7ff fcb6 	bl	403fa0 <_Z19checkMinMaxAltitudev>
  else {
    // At least 100mS passed since last data received
    ((uint8_t*)&frskyHubData)[offsetof(FrskyHubData, baroAltitude_bp)+1] = byte;
  }
  // baroAltitude_bp unit here is feet!
  frskyUsrStreaming = FRSKY_TIMEOUT10ms*3; // reset counter
  404634:	233c      	movs	r3, #60	; 0x3c
  404636:	f884 3aac 	strb.w	r3, [r4, #2732]	; 0xaac
}
  40463a:	bd10      	pop	{r4, pc}
  40463c:	20001200 	.word	0x20001200
  404640:	20000108 	.word	0x20000108

00404644 <_Z19frskyTransmitBufferm>:

uint32_t txPdcUsart( uint8_t *buffer, uint32_t size )
{
  register Usart *pUsart = SECOND_USART;

  if ( pUsart->US_TNCR == 0 )
  404644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  404648:	f2c4 0302 	movt	r3, #16386	; 0x4002
  40464c:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
  404650:	b942      	cbnz	r2, 404664 <_Z19frskyTransmitBufferm+0x20>
  {
#ifndef SIMU
    pUsart->US_TNPR = (uint32_t)buffer ;
  404652:	4a05      	ldr	r2, [pc, #20]	; (404668 <_Z19frskyTransmitBufferm+0x24>)
  404654:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#endif
    pUsart->US_TNCR = size ;
    pUsart->US_PTCR = US_PTCR_TXTEN ;
  404658:	f44f 7280 	mov.w	r2, #256	; 0x100
  if ( pUsart->US_TNCR == 0 )
  {
#ifndef SIMU
    pUsart->US_TNPR = (uint32_t)buffer ;
#endif
    pUsart->US_TNCR = size ;
  40465c:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
    pUsart->US_PTCR = US_PTCR_TXTEN ;
  404660:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  404664:	4770      	bx	lr
  404666:	bf00      	nop
  404668:	20001cb0 	.word	0x20001cb0

0040466c <_Z17FRSKY_alarmRaisedh>:
  }
#endif
}

bool FRSKY_alarmRaised(uint8_t idx)
{
  40466c:	b470      	push	{r4, r5, r6}
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
      if (ALARM_GREATER(idx, i)) {
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
          return true;
  40466e:	4a1a      	ldr	r2, [pc, #104]	; (4046d8 <_Z17FRSKY_alarmRaisedh+0x6c>)
  404670:	0046      	lsls	r6, r0, #1
  404672:	1835      	adds	r5, r6, r0
  404674:	eb02 0345 	add.w	r3, r2, r5, lsl #1
  404678:	f503 6304 	add.w	r3, r3, #2112	; 0x840
  40467c:	3314      	adds	r3, #20
  40467e:	795c      	ldrb	r4, [r3, #5]
  404680:	f004 010f 	and.w	r1, r4, #15
}

bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
  404684:	f011 0f03 	tst.w	r1, #3
  404688:	d008      	beq.n	40469c <_Z17FRSKY_alarmRaisedh+0x30>
      if (ALARM_GREATER(idx, i)) {
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
  40468a:	1955      	adds	r5, r2, r5

bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
      if (ALARM_GREATER(idx, i)) {
  40468c:	f014 0f10 	tst.w	r4, #16
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
  404690:	78db      	ldrb	r3, [r3, #3]
  404692:	f895 490c 	ldrb.w	r4, [r5, #2316]	; 0x90c

bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
      if (ALARM_GREATER(idx, i)) {
  404696:	d016      	beq.n	4046c6 <_Z17FRSKY_alarmRaisedh+0x5a>
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
  404698:	429c      	cmp	r4, r3
  40469a:	d816      	bhi.n	4046ca <_Z17FRSKY_alarmRaisedh+0x5e>
}

bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
  40469c:	0889      	lsrs	r1, r1, #2
  40469e:	d00f      	beq.n	4046c0 <_Z17FRSKY_alarmRaisedh+0x54>
      if (ALARM_GREATER(idx, i)) {
  4046a0:	1830      	adds	r0, r6, r0
  4046a2:	eb02 0240 	add.w	r2, r2, r0, lsl #1
  4046a6:	f502 6204 	add.w	r2, r2, #2112	; 0x840
  4046aa:	7e53      	ldrb	r3, [r2, #25]
  4046ac:	4e0a      	ldr	r6, [pc, #40]	; (4046d8 <_Z17FRSKY_alarmRaisedh+0x6c>)
  4046ae:	f013 0f20 	tst.w	r3, #32
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
  4046b2:	4430      	add	r0, r6
  4046b4:	f890 190c 	ldrb.w	r1, [r0, #2316]	; 0x90c
  4046b8:	7e13      	ldrb	r3, [r2, #24]

bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
      if (ALARM_GREATER(idx, i)) {
  4046ba:	d008      	beq.n	4046ce <_Z17FRSKY_alarmRaisedh+0x62>
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
  4046bc:	4299      	cmp	r1, r3
  4046be:	d804      	bhi.n	4046ca <_Z17FRSKY_alarmRaisedh+0x5e>
        if (frskyTelemetry[idx].value < g_model.frsky.channels[idx].alarms_value[i])
          return true;
      }
    }
  }
  return false;
  4046c0:	2000      	movs	r0, #0
}
  4046c2:	bc70      	pop	{r4, r5, r6}
  4046c4:	4770      	bx	lr
      if (ALARM_GREATER(idx, i)) {
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
          return true;
      }
      else {
        if (frskyTelemetry[idx].value < g_model.frsky.channels[idx].alarms_value[i])
  4046c6:	429c      	cmp	r4, r3
  4046c8:	d2e8      	bcs.n	40469c <_Z17FRSKY_alarmRaisedh+0x30>
          return true;
  4046ca:	2001      	movs	r0, #1
  4046cc:	e7f9      	b.n	4046c2 <_Z17FRSKY_alarmRaisedh+0x56>
      if (ALARM_GREATER(idx, i)) {
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
          return true;
      }
      else {
        if (frskyTelemetry[idx].value < g_model.frsky.channels[idx].alarms_value[i])
  4046ce:	4299      	cmp	r1, r3
  4046d0:	d2f6      	bcs.n	4046c0 <_Z17FRSKY_alarmRaisedh+0x54>
          return true;
  4046d2:	2001      	movs	r0, #1
  4046d4:	e7f5      	b.n	4046c2 <_Z17FRSKY_alarmRaisedh+0x56>
  4046d6:	bf00      	nop
  4046d8:	20000108 	.word	0x20000108

004046dc <_ZN9FrskyRSSI3setEh>:
}
#endif

void FrskyRSSI::set(uint8_t value)
{
   if (this->value == 0)
  4046dc:	7803      	ldrb	r3, [r0, #0]
  4046de:	b92b      	cbnz	r3, 4046ec <_ZN9FrskyRSSI3setEh+0x10>
     this->value = value;
  4046e0:	7001      	strb	r1, [r0, #0]
   else
     this->value = (((uint16_t)this->value * 7) + value + 4) / 8;
   if (value && (!min || value < min))
  4046e2:	b111      	cbz	r1, 4046ea <_ZN9FrskyRSSI3setEh+0xe>
  4046e4:	7843      	ldrb	r3, [r0, #1]
  4046e6:	b963      	cbnz	r3, 404702 <_ZN9FrskyRSSI3setEh+0x26>
     min = value;
  4046e8:	7041      	strb	r1, [r0, #1]
  4046ea:	4770      	bx	lr
void FrskyRSSI::set(uint8_t value)
{
   if (this->value == 0)
     this->value = value;
   else
     this->value = (((uint16_t)this->value * 7) + value + 4) / 8;
  4046ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  4046f0:	185b      	adds	r3, r3, r1
  4046f2:	f103 020b 	add.w	r2, r3, #11
  4046f6:	3304      	adds	r3, #4
  4046f8:	bf48      	it	mi
  4046fa:	4613      	movmi	r3, r2
  4046fc:	10db      	asrs	r3, r3, #3
  4046fe:	7003      	strb	r3, [r0, #0]
  404700:	e7ef      	b.n	4046e2 <_ZN9FrskyRSSI3setEh+0x6>
   if (value && (!min || value < min))
  404702:	4299      	cmp	r1, r3
  404704:	d2f1      	bcs.n	4046ea <_ZN9FrskyRSSI3setEh+0xe>
     min = value;
  404706:	7041      	strb	r1, [r0, #1]
  404708:	e7ef      	b.n	4046ea <_ZN9FrskyRSSI3setEh+0xe>
  40470a:	bf00      	nop

0040470c <_ZN9FrskyData3setEh>:
}

void FrskyData::set(uint8_t value)
{
  40470c:	b538      	push	{r3, r4, r5, lr}
  40470e:	4604      	mov	r4, r0
  404710:	460d      	mov	r5, r1
  FrskyRSSI::set(value);
  404712:	f7ff ffe3 	bl	4046dc <_ZN9FrskyRSSI3setEh>
  if (!max || value > max)
  404716:	78a3      	ldrb	r3, [r4, #2]
  404718:	b10b      	cbz	r3, 40471e <_ZN9FrskyData3setEh+0x12>
  40471a:	429d      	cmp	r5, r3
  40471c:	d900      	bls.n	404720 <_ZN9FrskyData3setEh+0x14>
    max = value;
  40471e:	70a5      	strb	r5, [r4, #2]
  404720:	bd38      	pop	{r3, r4, r5, pc}
  404722:	bf00      	nop

00404724 <_Z18processFrskyPacketPh>:
    - Alarm level/mode/threshold settings for Ch1A, Ch1B, Ch2A, Ch2B
    - User Data packets
*/

void processFrskyPacket(uint8_t *packet)
{
  404724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // What type of packet?
  switch (packet[0])
  404728:	7803      	ldrb	r3, [r0, #0]
    - Alarm level/mode/threshold settings for Ch1A, Ch1B, Ch2A, Ch2B
    - User Data packets
*/

void processFrskyPacket(uint8_t *packet)
{
  40472a:	4604      	mov	r4, r0
  // What type of packet?
  switch (packet[0])
  40472c:	3bf9      	subs	r3, #249	; 0xf9
  40472e:	2b05      	cmp	r3, #5
  404730:	d812      	bhi.n	404758 <_Z18processFrskyPacketPh+0x34>
  404732:	e8df f003 	tbb	[pc, r3]
  404736:	0303      	.short	0x0303
  404738:	176c0303 	.word	0x176c0303
    case A21PKT:
    case A12PKT:
    case A11PKT:
      {
        struct FrskyAlarm *alarmptr ;
        alarmptr = &frskyAlarms[(packet[0]-A22PKT)] ;
  40473c:	4a46      	ldr	r2, [pc, #280]	; (404858 <_Z18processFrskyPacketPh+0x134>)
        alarmptr->value = packet[1];
  40473e:	7840      	ldrb	r0, [r0, #1]
    case A21PKT:
    case A12PKT:
    case A11PKT:
      {
        struct FrskyAlarm *alarmptr ;
        alarmptr = &frskyAlarms[(packet[0]-A22PKT)] ;
  404740:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404744:	18d1      	adds	r1, r2, r3
        alarmptr->value = packet[1];
  404746:	7088      	strb	r0, [r1, #2]
        alarmptr->greater = packet[2] & 0x01;
  404748:	78a0      	ldrb	r0, [r4, #2]
  40474a:	f000 0001 	and.w	r0, r0, #1
  40474e:	7048      	strb	r0, [r1, #1]
        alarmptr->level = packet[3] & 0x03;
  404750:	78e1      	ldrb	r1, [r4, #3]
  404752:	f001 0103 	and.w	r1, r1, #3
  404756:	54d1      	strb	r1, [r2, r3]
      }
      break;
#endif
  }

  FrskyRxBufferReady = 0;
  404758:	4b40      	ldr	r3, [pc, #256]	; (40485c <_Z18processFrskyPacketPh+0x138>)
  40475a:	2200      	movs	r2, #0
  40475c:	f883 2ac8 	strb.w	r2, [r3, #2760]	; 0xac8
}
  404760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        alarmptr->greater = packet[2] & 0x01;
        alarmptr->level = packet[3] & 0x03;
      }
      break;
    case LINKPKT: // A1/A2/RSSI values
      frskyTelemetry[0].set(packet[1]);
  404764:	4d3e      	ldr	r5, [pc, #248]	; (404860 <_Z18processFrskyPacketPh+0x13c>)
  404766:	7841      	ldrb	r1, [r0, #1]
  404768:	f505 6010 	add.w	r0, r5, #2304	; 0x900
  40476c:	300c      	adds	r0, #12
  40476e:	f7ff ffcd 	bl	40470c <_ZN9FrskyData3setEh>
      frskyTelemetry[1].set(packet[2]);
  404772:	f505 6010 	add.w	r0, r5, #2304	; 0x900
  404776:	300f      	adds	r0, #15
  404778:	78a1      	ldrb	r1, [r4, #2]
  40477a:	f7ff ffc7 	bl	40470c <_ZN9FrskyData3setEh>
      frskyRSSI[0].set(packet[3]);
  40477e:	f505 6010 	add.w	r0, r5, #2304	; 0x900
  404782:	3014      	adds	r0, #20
  404784:	78e1      	ldrb	r1, [r4, #3]
  404786:	f7ff ffa9 	bl	4046dc <_ZN9FrskyRSSI3setEh>
      frskyRSSI[1].set(packet[4] / 2);
  40478a:	7921      	ldrb	r1, [r4, #4]
  40478c:	f505 6010 	add.w	r0, r5, #2304	; 0x900
  404790:	0849      	lsrs	r1, r1, #1
  404792:	3016      	adds	r0, #22
  404794:	f7ff ffa2 	bl	4046dc <_ZN9FrskyRSSI3setEh>
      frskyStreaming = FRSKY_TIMEOUT10ms; // reset counter only if valid frsky packets are being detected
      if (g_model.varioSource >= VARIO_SOURCE_A1) {
  404798:	f895 2894 	ldrb.w	r2, [r5, #2196]	; 0x894
    case LINKPKT: // A1/A2/RSSI values
      frskyTelemetry[0].set(packet[1]);
      frskyTelemetry[1].set(packet[2]);
      frskyRSSI[0].set(packet[3]);
      frskyRSSI[1].set(packet[4] / 2);
      frskyStreaming = FRSKY_TIMEOUT10ms; // reset counter only if valid frsky packets are being detected
  40479c:	4b31      	ldr	r3, [pc, #196]	; (404864 <_Z18processFrskyPacketPh+0x140>)
      if (g_model.varioSource >= VARIO_SOURCE_A1) {
  40479e:	f002 020f 	and.w	r2, r2, #15
    case LINKPKT: // A1/A2/RSSI values
      frskyTelemetry[0].set(packet[1]);
      frskyTelemetry[1].set(packet[2]);
      frskyRSSI[0].set(packet[3]);
      frskyRSSI[1].set(packet[4] / 2);
      frskyStreaming = FRSKY_TIMEOUT10ms; // reset counter only if valid frsky packets are being detected
  4047a2:	2114      	movs	r1, #20
      if (g_model.varioSource >= VARIO_SOURCE_A1) {
  4047a4:	2a01      	cmp	r2, #1
    case LINKPKT: // A1/A2/RSSI values
      frskyTelemetry[0].set(packet[1]);
      frskyTelemetry[1].set(packet[2]);
      frskyRSSI[0].set(packet[3]);
      frskyRSSI[1].set(packet[4] / 2);
      frskyStreaming = FRSKY_TIMEOUT10ms; // reset counter only if valid frsky packets are being detected
  4047a6:	f883 10fa 	strb.w	r1, [r3, #250]	; 0xfa
      if (g_model.varioSource >= VARIO_SOURCE_A1) {
  4047aa:	d9d5      	bls.n	404758 <_Z18processFrskyPacketPh+0x34>
        frskyHubData.varioSpeed = applyChannelRatio(frskyTelemetry[g_model.varioSource - VARIO_SOURCE_A1].value, g_model.varioSource - VARIO_SOURCE_A1);
  4047ac:	3a02      	subs	r2, #2
  4047ae:	eb02 0342 	add.w	r3, r2, r2, lsl #1
  4047b2:	18eb      	adds	r3, r5, r3
  TS_XOR = 0x80 // decode stuffed byte
} TS_STATE;

int16_t applyChannelRatio(uint8_t channel, int16_t val)
{
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
  4047b4:	f893 090c 	ldrb.w	r0, [r3, #2316]	; 0x90c
  4047b8:	f24a 01a1 	movw	r1, #41121	; 0xa0a1
  4047bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4047c0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
  4047c4:	f890 6859 	ldrb.w	r6, [r0, #2137]	; 0x859
  4047c8:	f890 4854 	ldrb.w	r4, [r0, #2132]	; 0x854
  4047cc:	f500 6304 	add.w	r3, r0, #2112	; 0x840
  4047d0:	09b0      	lsrs	r0, r6, #6
  4047d2:	fa14 f000 	lsls.w	r0, r4, r0
  4047d6:	7d9e      	ldrb	r6, [r3, #22]
  4047d8:	7d5c      	ldrb	r4, [r3, #21]
  4047da:	f006 030f 	and.w	r3, r6, #15
  4047de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
  4047e2:	f343 030b 	sbfx	r3, r3, #0, #12
  4047e6:	18d2      	adds	r2, r2, r3
  4047e8:	fb00 f302 	mul.w	r3, r0, r2
  4047ec:	f2ca 01a0 	movt	r1, #41120	; 0xa0a0
  4047f0:	005b      	lsls	r3, r3, #1
  4047f2:	fb81 2103 	smull	r2, r1, r1, r3
  4047f6:	17da      	asrs	r2, r3, #31
  4047f8:	18cb      	adds	r3, r1, r3
  4047fa:	ebc2 1363 	rsb	r3, r2, r3, asr #5
  4047fe:	f8a5 3978 	strh.w	r3, [r5, #2424]	; 0x978
      }
      break;
#endif
  }

  FrskyRxBufferReady = 0;
  404802:	4b16      	ldr	r3, [pc, #88]	; (40485c <_Z18processFrskyPacketPh+0x138>)
  404804:	2200      	movs	r2, #0
  404806:	f883 2ac8 	strb.w	r2, [r3, #2760]	; 0xac8
}
  40480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frskyHubData.varioSpeed = applyChannelRatio(frskyTelemetry[g_model.varioSource - VARIO_SOURCE_A1].value, g_model.varioSource - VARIO_SOURCE_A1);
      }
      break;
#if defined(FRSKY_HUB) || defined (WS_HOW_HIGH)
    case USRPKT: // User Data packet
      uint8_t numBytes = 3 + (packet[1] & 0x07); // sanitize in case of data corruption leading to buffer overflow
  40480e:	7843      	ldrb	r3, [r0, #1]
  404810:	f003 0307 	and.w	r3, r3, #7
      for (uint8_t i=3; i<numBytes; i++) {
  404814:	1cdf      	adds	r7, r3, #3
  404816:	2b00      	cmp	r3, #0
  404818:	d09e      	beq.n	404758 <_Z18processFrskyPacketPh+0x34>
  40481a:	4e11      	ldr	r6, [pc, #68]	; (404860 <_Z18processFrskyPacketPh+0x13c>)
  40481c:	2503      	movs	r5, #3
#if defined(FRSKY_HUB)
        if (g_model.frsky.usrProto == 1) // FrSky Hub
  40481e:	46b0      	mov	r8, r6
  404820:	e006      	b.n	404830 <_Z18processFrskyPacketPh+0x10c>
          parseTelemHubByte(packet[i]);
#endif
#if defined(WS_HOW_HIGH)
        if (g_model.frsky.usrProto == 2) // WS How High
  404822:	2b02      	cmp	r3, #2
  404824:	d013      	beq.n	40484e <_Z18processFrskyPacketPh+0x12a>
      }
      break;
#if defined(FRSKY_HUB) || defined (WS_HOW_HIGH)
    case USRPKT: // User Data packet
      uint8_t numBytes = 3 + (packet[1] & 0x07); // sanitize in case of data corruption leading to buffer overflow
      for (uint8_t i=3; i<numBytes; i++) {
  404826:	3501      	adds	r5, #1
  404828:	b2ed      	uxtb	r5, r5
  40482a:	3401      	adds	r4, #1
  40482c:	42af      	cmp	r7, r5
  40482e:	d993      	bls.n	404758 <_Z18processFrskyPacketPh+0x34>
#if defined(FRSKY_HUB)
        if (g_model.frsky.usrProto == 1) // FrSky Hub
  404830:	f896 3860 	ldrb.w	r3, [r6, #2144]	; 0x860
  404834:	f003 0307 	and.w	r3, r3, #7
  404838:	2b01      	cmp	r3, #1
  40483a:	d1f2      	bne.n	404822 <_Z18processFrskyPacketPh+0xfe>
          parseTelemHubByte(packet[i]);
  40483c:	78e0      	ldrb	r0, [r4, #3]
  40483e:	f7ff fbc3 	bl	403fc8 <_Z17parseTelemHubByteh>
  404842:	f898 3860 	ldrb.w	r3, [r8, #2144]	; 0x860
  404846:	f003 0307 	and.w	r3, r3, #7
#endif
#if defined(WS_HOW_HIGH)
        if (g_model.frsky.usrProto == 2) // WS How High
  40484a:	2b02      	cmp	r3, #2
  40484c:	d1eb      	bne.n	404826 <_Z18processFrskyPacketPh+0x102>
          parseTelemWSHowHighByte(packet[i]);
  40484e:	78e0      	ldrb	r0, [r4, #3]
  404850:	f7ff fede 	bl	404610 <_Z23parseTelemWSHowHighByteh>
  404854:	e7e7      	b.n	404826 <_Z18processFrskyPacketPh+0x102>
  404856:	bf00      	nop
  404858:	20001cbc 	.word	0x20001cbc
  40485c:	20001200 	.word	0x20001200
  404860:	20000108 	.word	0x20000108
  404864:	20000000 	.word	0x20000000

00404868 <_Z17processSerialDatah>:
#if defined(PCBARM)
void processSerialData(uint8_t data)
#else
NOINLINE void processSerialData(uint8_t stat, uint8_t data)
#endif
{
  404868:	b510      	push	{r4, lr}
    numPktBytes = 0;
  }
  else
#endif
  {
    if (FrskyRxBufferReady == 0) // can't get more data if the buffer hasn't been cleared
  40486a:	4c27      	ldr	r4, [pc, #156]	; (404908 <_Z17processSerialDatah+0xa0>)
  40486c:	f894 3ac8 	ldrb.w	r3, [r4, #2760]	; 0xac8
  404870:	b97b      	cbnz	r3, 404892 <_Z17processSerialDatah+0x2a>
    {
      switch (dataState)
  404872:	f894 3ac9 	ldrb.w	r3, [r4, #2761]	; 0xac9
  404876:	2b03      	cmp	r3, #3
  404878:	d80b      	bhi.n	404892 <_Z17processSerialDatah+0x2a>
  40487a:	e8df f003 	tbb	[pc, r3]
  40487e:	1c02      	.short	0x1c02
  404880:	0b2a      	.short	0x0b2a
            frskyRxBuffer[numPktBytes++] = data ^ STUFF_MASK;
          dataState = frskyDataInFrame;
          break;

        case frskyDataIdle:
          if (data == START_STOP)
  404882:	287e      	cmp	r0, #126	; 0x7e
  404884:	d105      	bne.n	404892 <_Z17processSerialDatah+0x2a>
          {
            numPktBytes = 0;
  404886:	2300      	movs	r3, #0
  404888:	f884 3aca 	strb.w	r3, [r4, #2762]	; 0xaca
            dataState = frskyDataStart;
  40488c:	2301      	movs	r3, #1
  40488e:	f884 3ac9 	strb.w	r3, [r4, #2761]	; 0xac9
  404892:	bd10      	pop	{r4, pc}
          if (numPktBytes < FRSKY_RX_PACKET_SIZE)
            frskyRxBuffer[numPktBytes++] = data;
          break;

        case frskyDataXOR:
          if (numPktBytes < FRSKY_RX_PACKET_SIZE)
  404894:	f894 3aca 	ldrb.w	r3, [r4, #2762]	; 0xaca
  404898:	4a1b      	ldr	r2, [pc, #108]	; (404908 <_Z17processSerialDatah+0xa0>)
  40489a:	2b12      	cmp	r3, #18
  40489c:	d807      	bhi.n	4048ae <_Z17processSerialDatah+0x46>
            frskyRxBuffer[numPktBytes++] = data ^ STUFF_MASK;
  40489e:	18d1      	adds	r1, r2, r3
  4048a0:	f080 0020 	eor.w	r0, r0, #32
  4048a4:	3301      	adds	r3, #1
  4048a6:	f881 0acc 	strb.w	r0, [r1, #2764]	; 0xacc
  4048aa:	f882 3aca 	strb.w	r3, [r2, #2762]	; 0xaca
          dataState = frskyDataInFrame;
  4048ae:	2302      	movs	r3, #2
  4048b0:	f884 3ac9 	strb.w	r3, [r4, #2761]	; 0xac9
  4048b4:	bd10      	pop	{r4, pc}
    if (FrskyRxBufferReady == 0) // can't get more data if the buffer hasn't been cleared
    {
      switch (dataState)
      {
        case frskyDataStart:
          if (data == START_STOP) break; // Remain in userDataStart if possible 0x7e,0x7e doublet found.
  4048b6:	287e      	cmp	r0, #126	; 0x7e
  4048b8:	d0eb      	beq.n	404892 <_Z17processSerialDatah+0x2a>

          if (numPktBytes < FRSKY_RX_PACKET_SIZE)
  4048ba:	f894 3aca 	ldrb.w	r3, [r4, #2762]	; 0xaca
  4048be:	4a12      	ldr	r2, [pc, #72]	; (404908 <_Z17processSerialDatah+0xa0>)
  4048c0:	2b12      	cmp	r3, #18
  4048c2:	d8f4      	bhi.n	4048ae <_Z17processSerialDatah+0x46>
            frskyRxBuffer[numPktBytes++] = data;
  4048c4:	18d1      	adds	r1, r2, r3
  4048c6:	3301      	adds	r3, #1
  4048c8:	f881 0acc 	strb.w	r0, [r1, #2764]	; 0xacc
  4048cc:	f882 3aca 	strb.w	r3, [r2, #2762]	; 0xaca
  4048d0:	e7ed      	b.n	4048ae <_Z17processSerialDatah+0x46>
          dataState = frskyDataInFrame;
          break;

        case frskyDataInFrame:
          if (data == BYTESTUFF)
  4048d2:	287d      	cmp	r0, #125	; 0x7d
  4048d4:	d00d      	beq.n	4048f2 <_Z17processSerialDatah+0x8a>
          {
              dataState = frskyDataXOR; // XOR next byte
              break;
          }
          if (data == START_STOP) // end of frame detected
  4048d6:	287e      	cmp	r0, #126	; 0x7e
  4048d8:	d00f      	beq.n	4048fa <_Z17processSerialDatah+0x92>
          {
            processFrskyPacket(frskyRxBuffer); // FrskyRxBufferReady = 1;
            dataState = frskyDataIdle;
            break;
          }
          if (numPktBytes < FRSKY_RX_PACKET_SIZE)
  4048da:	f894 3aca 	ldrb.w	r3, [r4, #2762]	; 0xaca
  4048de:	4a0a      	ldr	r2, [pc, #40]	; (404908 <_Z17processSerialDatah+0xa0>)
  4048e0:	2b12      	cmp	r3, #18
  4048e2:	d8d6      	bhi.n	404892 <_Z17processSerialDatah+0x2a>
            frskyRxBuffer[numPktBytes++] = data;
  4048e4:	18d1      	adds	r1, r2, r3
  4048e6:	3301      	adds	r3, #1
  4048e8:	f881 0acc 	strb.w	r0, [r1, #2764]	; 0xacc
  4048ec:	f882 3aca 	strb.w	r3, [r2, #2762]	; 0xaca
  4048f0:	bd10      	pop	{r4, pc}
          break;

        case frskyDataInFrame:
          if (data == BYTESTUFF)
          {
              dataState = frskyDataXOR; // XOR next byte
  4048f2:	2303      	movs	r3, #3
  4048f4:	f884 3ac9 	strb.w	r3, [r4, #2761]	; 0xac9
  4048f8:	bd10      	pop	{r4, pc}
              break;
          }
          if (data == START_STOP) // end of frame detected
          {
            processFrskyPacket(frskyRxBuffer); // FrskyRxBufferReady = 1;
  4048fa:	4804      	ldr	r0, [pc, #16]	; (40490c <_Z17processSerialDatah+0xa4>)
  4048fc:	f7ff ff12 	bl	404724 <_Z18processFrskyPacketPh>
            dataState = frskyDataIdle;
  404900:	2300      	movs	r3, #0
  404902:	f884 3ac9 	strb.w	r3, [r4, #2761]	; 0xac9
  404906:	bd10      	pop	{r4, pc}
  404908:	20001200 	.word	0x20001200
  40490c:	20001ccc 	.word	0x20001ccc

00404910 <_Z14resetTelemetryv>:
  if (!max || value > max)
    max = value;
}

void resetTelemetry()
{
  404910:	b570      	push	{r4, r5, r6, lr}
  memset(frskyTelemetry, 0, sizeof(frskyTelemetry));
  404912:	f240 1408 	movw	r4, #264	; 0x108
  404916:	f2c2 0400 	movt	r4, #8192	; 0x2000
  40491a:	2300      	movs	r3, #0
  40491c:	f504 6510 	add.w	r5, r4, #2304	; 0x900
  memset(frskyRSSI, 0, sizeof(frskyRSSI));
  memset(&frskyHubData, 0, sizeof(frskyHubData));
  404920:	4619      	mov	r1, r3
  404922:	f105 0018 	add.w	r0, r5, #24
  404926:	227e      	movs	r2, #126	; 0x7e
    max = value;
}

void resetTelemetry()
{
  memset(frskyTelemetry, 0, sizeof(frskyTelemetry));
  404928:	2600      	movs	r6, #0
  40492a:	f8c4 390c 	str.w	r3, [r4, #2316]	; 0x90c
  memset(frskyRSSI, 0, sizeof(frskyRSSI));
  40492e:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
    max = value;
}

void resetTelemetry()
{
  memset(frskyTelemetry, 0, sizeof(frskyTelemetry));
  404932:	f8a4 6910 	strh.w	r6, [r4, #2320]	; 0x910
  memset(frskyRSSI, 0, sizeof(frskyRSSI));
  memset(&frskyHubData, 0, sizeof(frskyHubData));
  404936:	f00a fd8d 	bl	40f454 <memset>

#if defined(FRSKY_HUB)
  frskyHubData.gpsLatitude_bp = 2;
  40493a:	2302      	movs	r3, #2
  40493c:	f8a4 393e 	strh.w	r3, [r4, #2366]	; 0x93e
  frskyHubData.gpsLongitude_bp = 2;
  404940:	f8a4 393c 	strh.w	r3, [r4, #2364]	; 0x93c
  frskyHubData.gpsFix = -1;
  404944:	2306      	movs	r3, #6
  404946:	f884 3966 	strb.w	r3, [r4, #2406]	; 0x966

  frskyHubData.accelY = 100;
  frskyHubData.temperature1 = -30;
  frskyHubData.maxTemperature1 = 100;
#endif
}
  40494a:	bd70      	pop	{r4, r5, r6, pc}

0040494c <_Z10FRSKY_Initv>:
  UCSR0B |= (1 << RXCIE0); // enable Interrupt
}
#endif

void FRSKY_Init(void)
{
  40494c:	b538      	push	{r3, r4, r5, lr}
  // clear frsky variables
  memset(frskyAlarms, 0, sizeof(frskyAlarms));
  40494e:	f241 2300 	movw	r3, #4608	; 0x1200
  404952:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404956:	2400      	movs	r4, #0
  404958:	f8c3 4abc 	str.w	r4, [r3, #2748]	; 0xabc
  40495c:	f8c3 4ac0 	str.w	r4, [r3, #2752]	; 0xac0
  404960:	f8c3 4ac4 	str.w	r4, [r3, #2756]	; 0xac4
  resetTelemetry();
  404964:	f7ff ffd4 	bl	404910 <_Z14resetTelemetryv>

void startPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  TelemetryInBuffer[0].outPtr = TelemetryInBuffer[0].fifo ;
  404968:	f240 1308 	movw	r3, #264	; 0x108
  40496c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  TelemetryInBuffer[1].outPtr = TelemetryInBuffer[1].fifo ;
#ifndef SIMU
  // TODO because of the 64bits cast ...
  pUsart->US_RPR = (uint32_t)TelemetryInBuffer[0].fifo ;
  404970:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  404974:	f2c4 0202 	movt	r2, #16386	; 0x4002
  pUsart->US_RNPR = (uint32_t)TelemetryInBuffer[1].fifo ;
#endif
  pUsart->US_RCR = RX_UART_BUFFER_SIZE ;
  404978:	2120      	movs	r1, #32

void startPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  TelemetryInBuffer[0].outPtr = TelemetryInBuffer[0].fifo ;
  40497a:	f103 05e4 	add.w	r5, r3, #228	; 0xe4
  TelemetryInBuffer[1].outPtr = TelemetryInBuffer[1].fifo ;
  40497e:	f503 7084 	add.w	r0, r3, #264	; 0x108

void startPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  TelemetryInBuffer[0].outPtr = TelemetryInBuffer[0].fifo ;
  404982:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
  TelemetryInBuffer[1].outPtr = TelemetryInBuffer[1].fifo ;
  404986:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
#ifndef SIMU
  // TODO because of the 64bits cast ...
  pUsart->US_RPR = (uint32_t)TelemetryInBuffer[0].fifo ;
  40498a:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
  pUsart->US_RNPR = (uint32_t)TelemetryInBuffer[1].fifo ;
  40498e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
#endif
  pUsart->US_RCR = RX_UART_BUFFER_SIZE ;
  404992:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
  pUsart->US_RNCR = RX_UART_BUFFER_SIZE ;
  404996:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
  pUsart->US_PTCR = US_PTCR_RXTEN ;
  40499a:	2101      	movs	r1, #1
  40499c:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
  TelemetryActiveBuffer = 0 ;
  4049a0:	f8c3 412c 	str.w	r4, [r3, #300]	; 0x12c

  // These should be running right from power up on a FrSky enabled '9X.
  FRSKY_EnableTXD(); // enable FrSky-Telemetry reception
  FRSKY_EnableRXD(); // enable FrSky-Telemetry reception
#endif
}
  4049a4:	bd38      	pop	{r3, r4, r5, pc}
  4049a6:	bf00      	nop

004049a8 <_Z8resetAllv>:

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  4049a8:	f240 1308 	movw	r3, #264	; 0x108
  4049ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
  s_timerVal[idx] = g_model.timers[idx].val;
  4049b0:	f893 1147 	ldrb.w	r1, [r3, #327]	; 0x147
  4049b4:	f893 0148 	ldrb.w	r0, [r3, #328]	; 0x148

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  4049b8:	2200      	movs	r2, #0
  s_timerVal[idx] = g_model.timers[idx].val;
  4049ba:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  4049be:	f8a3 1908 	strh.w	r1, [r3, #2312]	; 0x908
  4049c2:	f8b3 114a 	ldrh.w	r1, [r3, #330]	; 0x14a

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  4049c6:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
  s_timerVal[idx] = g_model.timers[idx].val;
  s_timerVal_10ms[idx] = 0 ;
  4049ca:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  4049ce:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
  s_timerVal[idx] = g_model.timers[idx].val;
  4049d2:	f8a3 190a 	strh.w	r1, [r3, #2314]	; 0x90a
  s_timerVal_10ms[idx] = 0 ;
  4049d6:	f883 29ed 	strb.w	r2, [r3, #2541]	; 0x9ed
{
  // TODO s_traceCnt to be reset?
  resetTimer(0);
  resetTimer(1);
#ifdef FRSKY
  resetTelemetry();
  4049da:	e799      	b.n	404910 <_Z14resetTelemetryv>

004049dc <_Z13maxTelemValueh>:
#endif
}

uint8_t maxTelemValue(uint8_t channel)
{
  switch (channel) {
  4049dc:	2809      	cmp	r0, #9
  4049de:	d808      	bhi.n	4049f2 <_Z13maxTelemValueh+0x16>
  4049e0:	2301      	movs	r3, #1
  4049e2:	b240      	sxtb	r0, r0
  4049e4:	fa13 f000 	lsls.w	r0, r3, r0
  4049e8:	f410 7f18 	tst.w	r0, #608	; 0x260
  4049ec:	d001      	beq.n	4049f2 <_Z13maxTelemValueh+0x16>
    case TELEM_FUEL:
    case TELEM_RSSI_TX:
    case TELEM_RSSI_RX:
      return 100;
  4049ee:	2064      	movs	r0, #100	; 0x64
  4049f0:	4770      	bx	lr
    default:
      return 255;
  4049f2:	20ff      	movs	r0, #255	; 0xff
  }
}
  4049f4:	4770      	bx	lr
  4049f6:	bf00      	nop

004049f8 <_Z17convertTelemValuehh>:

int16_t convertTelemValue(uint8_t channel, uint8_t value)
{
  int16_t result;
  switch (channel) {
  4049f8:	3801      	subs	r0, #1
  4049fa:	280e      	cmp	r0, #14
  4049fc:	d80b      	bhi.n	404a16 <_Z17convertTelemValuehh+0x1e>
  4049fe:	e8df f000 	tbb	[pc, r0]
  404a02:	0808      	.short	0x0808
  404a04:	0a0a0a0a 	.word	0x0a0a0a0a
  404a08:	190a120f 	.word	0x190a120f
  404a0c:	0f0c1d19 	.word	0x0f0c1d19
  404a10:	1d          	.byte	0x1d
  404a11:	00          	.byte	0x00
    case TELEM_TM1:
    case TELEM_TM2:
      result = value * 3;
  404a12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
      break;
    default:
      result = value;
      break;
  }
  return result;
  404a16:	b208      	sxth	r0, r1
}
  404a18:	4770      	bx	lr
    case TELEM_SPEED:
    case TELEM_CELL:
      result = value * 2;
      break;
    case TELEM_DIST:
      result = value * 8;
  404a1a:	00c9      	lsls	r1, r1, #3
      break;
    default:
      result = value;
      break;
  }
  return result;
  404a1c:	b208      	sxth	r0, r1
}
  404a1e:	4770      	bx	lr
    case TELEM_TM2:
      result = value * 3;
      break;
    case TELEM_ALT:
    case TELEM_GPSALT:
      result = value * 4;
  404a20:	0089      	lsls	r1, r1, #2
      break;
    default:
      result = value;
      break;
  }
  return result;
  404a22:	b208      	sxth	r0, r1
}
  404a24:	4770      	bx	lr
    case TELEM_ALT:
    case TELEM_GPSALT:
      result = value * 4;
      break;
    case TELEM_RPM:
      result = value * 50;
  404a26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404a2a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404a2e:	0049      	lsls	r1, r1, #1
      break;
    default:
      result = value;
      break;
  }
  return result;
  404a30:	b208      	sxth	r0, r1
}
  404a32:	4770      	bx	lr
    case TELEM_RPM:
      result = value * 50;
      break;
    case TELEM_T1:
    case TELEM_T2:
      result = (int16_t)value - 30;
  404a34:	391e      	subs	r1, #30
  404a36:	b289      	uxth	r1, r1
      break;
    default:
      result = value;
      break;
  }
  return result;
  404a38:	b208      	sxth	r0, r1
}
  404a3a:	4770      	bx	lr
    case TELEM_T2:
      result = (int16_t)value - 30;
      break;
    case TELEM_SPEED:
    case TELEM_CELL:
      result = value * 2;
  404a3c:	0049      	lsls	r1, r1, #1
      break;
    default:
      result = value;
      break;
  }
  return result;
  404a3e:	b208      	sxth	r0, r1
}
  404a40:	4770      	bx	lr
  404a42:	bf00      	nop

00404a44 <_Z11__getSwitcha>:

volatile uint16_t s_last_switch_used;
volatile uint16_t s_last_switch_value;
/* recursive function. stack as of today (16/03/2012) grows by 8bytes at each call, which is ok! */
bool __getSwitch(int8_t swtch)
{
  404a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a48:	4604      	mov	r4, r0
  bool result;

  if (swtch == 0)
  404a4a:	2800      	cmp	r0, #0
  404a4c:	d040      	beq.n	404ad0 <_Z11__getSwitcha+0x8c>
  404a4e:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
  404a52:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
    return s_last_switch_used & ((uint16_t)1<<15);

  uint8_t cs_idx = abs(swtch);
  404a56:	fa5f f888 	uxtb.w	r8, r8

  if (cs_idx == SWITCH_ON) {
  404a5a:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  404a5e:	d030      	beq.n	404ac2 <_Z11__getSwitcha+0x7e>
    result = true;
  }
  else if (cs_idx <= MAX_PSWITCH) {
  404a60:	f1b8 0f09 	cmp.w	r8, #9
  404a64:	d93b      	bls.n	404ade <_Z11__getSwitcha+0x9a>
    result = keyState((EnumKeys)(SW_BASE+cs_idx-1));
  }
  else {
    cs_idx -= MAX_PSWITCH+1;
  404a66:	f1a8 080a 	sub.w	r8, r8, #10
    volatile CustomSwData &cs = g_model.customSw[cs_idx];
  404a6a:	fa5f f888 	uxtb.w	r8, r8
  404a6e:	4b76      	ldr	r3, [pc, #472]	; (404c48 <_Z11__getSwitcha+0x204>)
  404a70:	eb08 0648 	add.w	r6, r8, r8, lsl #1
  404a74:	18f6      	adds	r6, r6, r3
  404a76:	1d75      	adds	r5, r6, #5
    if (cs.func == CS_OFF) return false;
  404a78:	78a8      	ldrb	r0, [r5, #2]
  404a7a:	b338      	cbz	r0, 404acc <_Z11__getSwitcha+0x88>

    uint8_t s = CS_STATE(cs.func);
  404a7c:	78ab      	ldrb	r3, [r5, #2]
  404a7e:	2b04      	cmp	r3, #4
  404a80:	d937      	bls.n	404af2 <_Z11__getSwitcha+0xae>
  404a82:	78ab      	ldrb	r3, [r5, #2]
  404a84:	2b07      	cmp	r3, #7
  404a86:	d859      	bhi.n	404b3c <_Z11__getSwitcha+0xf8>
    if (s == CS_VBOOL) {
      uint16_t mask = (1 << cs_idx);
  404a88:	2301      	movs	r3, #1
  404a8a:	fa03 f808 	lsl.w	r8, r3, r8
      if (s_last_switch_used & mask) {
  404a8e:	4f6f      	ldr	r7, [pc, #444]	; (404c4c <_Z11__getSwitcha+0x208>)
    volatile CustomSwData &cs = g_model.customSw[cs_idx];
    if (cs.func == CS_OFF) return false;

    uint8_t s = CS_STATE(cs.func);
    if (s == CS_VBOOL) {
      uint16_t mask = (1 << cs_idx);
  404a90:	fa1f f388 	uxth.w	r3, r8
      if (s_last_switch_used & mask) {
  404a94:	f8b7 2ae0 	ldrh.w	r2, [r7, #2784]	; 0xae0
  404a98:	4213      	tst	r3, r2
  404a9a:	f000 809f 	beq.w	404bdc <_Z11__getSwitcha+0x198>
        result = (s_last_switch_value & mask);
  404a9e:	f8b7 2ae2 	ldrh.w	r2, [r7, #2786]	; 0xae2
  404aa2:	4213      	tst	r3, r2
  404aa4:	bf0c      	ite	eq
  404aa6:	2000      	moveq	r0, #0
  404aa8:	2001      	movne	r0, #1
          default:
            result = (res1 ^ res2);
            break;
        }
      }
      if (result)
  404aaa:	2800      	cmp	r0, #0
  404aac:	f000 808d 	beq.w	404bca <_Z11__getSwitcha+0x186>
        s_last_switch_value |= (1<<cs_idx);
  404ab0:	f8b7 3ae2 	ldrh.w	r3, [r7, #2786]	; 0xae2
  404ab4:	ea48 0803 	orr.w	r8, r8, r3
  404ab8:	fa1f f888 	uxth.w	r8, r8
  404abc:	f8a7 8ae2 	strh.w	r8, [r7, #2786]	; 0xae2
  404ac0:	e000      	b.n	404ac4 <_Z11__getSwitcha+0x80>
    return s_last_switch_used & ((uint16_t)1<<15);

  uint8_t cs_idx = abs(swtch);

  if (cs_idx == SWITCH_ON) {
    result = true;
  404ac2:	2001      	movs	r0, #1
        }
      }
    }
  }

  return swtch > 0 ? result : !result;
  404ac4:	2c00      	cmp	r4, #0
  404ac6:	bfd8      	it	le
  404ac8:	f080 0001 	eorle.w	r0, r0, #1
}
  404acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
bool __getSwitch(int8_t swtch)
{
  bool result;

  if (swtch == 0)
    return s_last_switch_used & ((uint16_t)1<<15);
  404ad0:	4b5e      	ldr	r3, [pc, #376]	; (404c4c <_Z11__getSwitcha+0x208>)
  404ad2:	f8b3 0ae0 	ldrh.w	r0, [r3, #2784]	; 0xae0
  404ad6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
  404ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (cs_idx == SWITCH_ON) {
    result = true;
  }
  else if (cs_idx <= MAX_PSWITCH) {
    result = keyState((EnumKeys)(SW_BASE+cs_idx-1));
  404ade:	f108 080d 	add.w	r8, r8, #13
  404ae2:	fa5f f088 	uxtb.w	r0, r8
  404ae6:	f7fb fd57 	bl	400598 <_Z8keyState8EnumKeys>
  404aea:	3000      	adds	r0, #0
  404aec:	bf18      	it	ne
  404aee:	2001      	movne	r0, #1
  404af0:	e7e8      	b.n	404ac4 <_Z11__getSwitcha+0x80>
        s_last_switch_value |= (1<<cs_idx);
      else
        s_last_switch_value &= ~(1<<cs_idx);
    }
    else {
      int16_t x = getValue(cs.v1-1);
  404af2:	7970      	ldrb	r0, [r6, #5]
  404af4:	3801      	subs	r0, #1
  404af6:	b2c0      	uxtb	r0, r0
  404af8:	f7fc f8bc 	bl	400c74 <_Z8getValueh>
      int16_t y;
      if (s == CS_VOFS) {
#if defined(FRSKY)
        // Telemetry
        if (cs.v1 > CSW_CHOUT_BASE+NUM_CHNOUT) {
  404afc:	7973      	ldrb	r3, [r6, #5]
        s_last_switch_value |= (1<<cs_idx);
      else
        s_last_switch_value &= ~(1<<cs_idx);
    }
    else {
      int16_t x = getValue(cs.v1-1);
  404afe:	4607      	mov	r7, r0
      int16_t y;
      if (s == CS_VOFS) {
#if defined(FRSKY)
        // Telemetry
        if (cs.v1 > CSW_CHOUT_BASE+NUM_CHNOUT) {
  404b00:	b25b      	sxtb	r3, r3
  404b02:	2b34      	cmp	r3, #52	; 0x34
  404b04:	dc2e      	bgt.n	404b64 <_Z11__getSwitcha+0x120>
          }
        }
        else
#endif
        {
          y = calc100toRESX(cs.v2);
  404b06:	786b      	ldrb	r3, [r5, #1]
void resetProto();

#if defined(PCBARM)
inline int32_t calc100toRESX(register int8_t x)
{
  return ((uint32_t)x*655)>>6 ;
  404b08:	f240 208f 	movw	r0, #655	; 0x28f
  404b0c:	b25b      	sxtb	r3, r3
  404b0e:	fb00 f003 	mul.w	r0, r0, r3
  404b12:	f3c0 108f 	ubfx	r0, r0, #6, #16
        }

        switch (cs.func) {
  404b16:	78ab      	ldrb	r3, [r5, #2]
  404b18:	2b02      	cmp	r3, #2
  404b1a:	f000 808e 	beq.w	404c3a <_Z11__getSwitcha+0x1f6>
  404b1e:	2b03      	cmp	r3, #3
  404b20:	f000 8081 	beq.w	404c26 <_Z11__getSwitcha+0x1e2>
  404b24:	2b01      	cmp	r3, #1
  404b26:	d078      	beq.n	404c1a <_Z11__getSwitcha+0x1d6>
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  404b28:	2f00      	cmp	r7, #0
  404b2a:	bfb8      	it	lt
  404b2c:	427f      	neglt	r7, r7
          case CS_APOS:
            result = (abs(x)>y);
            break;
          // case CS_ANEG:
          default:
            result = (abs(x)<y);
  404b2e:	b200      	sxth	r0, r0
  404b30:	b23f      	sxth	r7, r7
  404b32:	42b8      	cmp	r0, r7
  404b34:	bfd4      	ite	le
  404b36:	2000      	movle	r0, #0
  404b38:	2001      	movgt	r0, #1
            break;
  404b3a:	e7c3      	b.n	404ac4 <_Z11__getSwitcha+0x80>
        s_last_switch_value |= (1<<cs_idx);
      else
        s_last_switch_value &= ~(1<<cs_idx);
    }
    else {
      int16_t x = getValue(cs.v1-1);
  404b3c:	7970      	ldrb	r0, [r6, #5]
  404b3e:	3801      	subs	r0, #1
  404b40:	b2c0      	uxtb	r0, r0
  404b42:	f7fc f897 	bl	400c74 <_Z8getValueh>
  404b46:	4606      	mov	r6, r0
            result = (abs(x)<y);
            break;
        }
      }
      else {
        y = getValue(cs.v2-1);
  404b48:	7868      	ldrb	r0, [r5, #1]
  404b4a:	3801      	subs	r0, #1
  404b4c:	b2c0      	uxtb	r0, r0
  404b4e:	f7fc f891 	bl	400c74 <_Z8getValueh>

        switch (cs.func) {
  404b52:	78ab      	ldrb	r3, [r5, #2]
  404b54:	3b08      	subs	r3, #8
  404b56:	2b04      	cmp	r3, #4
  404b58:	d81e      	bhi.n	404b98 <_Z11__getSwitcha+0x154>
  404b5a:	e8df f003 	tbb	[pc, r3]
  404b5e:	3118      	.short	0x3118
  404b60:	272c      	.short	0x272c
  404b62:	22          	.byte	0x22
  404b63:	00          	.byte	0x00
      int16_t y;
      if (s == CS_VOFS) {
#if defined(FRSKY)
        // Telemetry
        if (cs.v1 > CSW_CHOUT_BASE+NUM_CHNOUT) {
          y = convertTelemValue(cs.v1-(CSW_CHOUT_BASE+NUM_CHNOUT), 128+cs.v2);
  404b64:	7970      	ldrb	r0, [r6, #5]
  404b66:	7869      	ldrb	r1, [r5, #1]
  404b68:	3834      	subs	r0, #52	; 0x34
  404b6a:	b2c0      	uxtb	r0, r0
  404b6c:	f081 0180 	eor.w	r1, r1, #128	; 0x80
  404b70:	f7ff ff42 	bl	4049f8 <_Z17convertTelemValuehh>
          if (cs.v1 >= CSW_CHOUT_BASE+NUM_CHNOUT+TELEM_ALT) {
  404b74:	7973      	ldrb	r3, [r6, #5]
  404b76:	b25b      	sxtb	r3, r3
  404b78:	2b3a      	cmp	r3, #58	; 0x3a
  404b7a:	ddcc      	ble.n	404b16 <_Z11__getSwitcha+0xd2>
            // Fill the threshold array
            barsThresholds[cs.v1-CSW_CHOUT_BASE-NUM_CHNOUT-TELEM_ALT] = 128 + cs.v2;
  404b7c:	7973      	ldrb	r3, [r6, #5]
  404b7e:	4933      	ldr	r1, [pc, #204]	; (404c4c <_Z11__getSwitcha+0x208>)
  404b80:	786a      	ldrb	r2, [r5, #1]
  404b82:	b25b      	sxtb	r3, r3
  404b84:	18cb      	adds	r3, r1, r3
  404b86:	3a80      	subs	r2, #128	; 0x80
  404b88:	f883 2aa9 	strb.w	r2, [r3, #2729]	; 0xaa9
  404b8c:	e7c3      	b.n	404b16 <_Z11__getSwitcha+0xd2>
      else {
        y = getValue(cs.v2-1);

        switch (cs.func) {
          case CS_EQUAL:
            result = (x==y);
  404b8e:	1a33      	subs	r3, r6, r0
  404b90:	4258      	negs	r0, r3
  404b92:	eb40 0003 	adc.w	r0, r0, r3
            break;
  404b96:	e795      	b.n	404ac4 <_Z11__getSwitcha+0x80>
          case CS_EGREATER:
            result = (x>=y);
            break;
          // case CS_ELESS:
          default:
            result = (x<=y);
  404b98:	4286      	cmp	r6, r0
  404b9a:	bfcc      	ite	gt
  404b9c:	2000      	movgt	r0, #0
  404b9e:	2001      	movle	r0, #1
            break;
  404ba0:	e790      	b.n	404ac4 <_Z11__getSwitcha+0x80>
            break;
          case CS_LESS:
            result = (x<y);
            break;
          case CS_EGREATER:
            result = (x>=y);
  404ba2:	4286      	cmp	r6, r0
  404ba4:	bfb4      	ite	lt
  404ba6:	2000      	movlt	r0, #0
  404ba8:	2001      	movge	r0, #1
            break;
  404baa:	e78b      	b.n	404ac4 <_Z11__getSwitcha+0x80>
            break;
          case CS_GREATER:
            result = (x>y);
            break;
          case CS_LESS:
            result = (x<y);
  404bac:	4286      	cmp	r6, r0
  404bae:	bfac      	ite	ge
  404bb0:	2000      	movge	r0, #0
  404bb2:	2001      	movlt	r0, #1
            break;
  404bb4:	e786      	b.n	404ac4 <_Z11__getSwitcha+0x80>
            break;
          case CS_NEQUAL:
            result = (x!=y);
            break;
          case CS_GREATER:
            result = (x>y);
  404bb6:	4286      	cmp	r6, r0
  404bb8:	bfd4      	ite	le
  404bba:	2000      	movle	r0, #0
  404bbc:	2001      	movgt	r0, #1
            break;
  404bbe:	e781      	b.n	404ac4 <_Z11__getSwitcha+0x80>
        switch (cs.func) {
          case CS_EQUAL:
            result = (x==y);
            break;
          case CS_NEQUAL:
            result = (x!=y);
  404bc0:	1a30      	subs	r0, r6, r0
  404bc2:	bf18      	it	ne
  404bc4:	2001      	movne	r0, #1
            break;
  404bc6:	e77d      	b.n	404ac4 <_Z11__getSwitcha+0x80>
        s_last_switch_used |= mask;
        bool res1 = __getSwitch(cs.v1);
        bool res2 = __getSwitch(cs.v2);
        switch (cs.func) {
          case CS_AND:
            result = (res1 && res2);
  404bc8:	bb1e      	cbnz	r6, 404c12 <_Z11__getSwitcha+0x1ce>
        }
      }
      if (result)
        s_last_switch_value |= (1<<cs_idx);
      else
        s_last_switch_value &= ~(1<<cs_idx);
  404bca:	f8b7 3ae2 	ldrh.w	r3, [r7, #2786]	; 0xae2
  404bce:	2000      	movs	r0, #0
  404bd0:	b29b      	uxth	r3, r3
  404bd2:	ea23 0808 	bic.w	r8, r3, r8
  404bd6:	f8a7 8ae2 	strh.w	r8, [r7, #2786]	; 0xae2
  404bda:	e773      	b.n	404ac4 <_Z11__getSwitcha+0x80>
      uint16_t mask = (1 << cs_idx);
      if (s_last_switch_used & mask) {
        result = (s_last_switch_value & mask);
      }
      else {
        s_last_switch_used |= mask;
  404bdc:	f8b7 2ae0 	ldrh.w	r2, [r7, #2784]	; 0xae0
  404be0:	b292      	uxth	r2, r2
  404be2:	4313      	orrs	r3, r2
  404be4:	f8a7 3ae0 	strh.w	r3, [r7, #2784]	; 0xae0
        bool res1 = __getSwitch(cs.v1);
  404be8:	7970      	ldrb	r0, [r6, #5]
  404bea:	b240      	sxtb	r0, r0
  404bec:	f7ff ff2a 	bl	404a44 <_Z11__getSwitcha>
  404bf0:	4606      	mov	r6, r0
        bool res2 = __getSwitch(cs.v2);
  404bf2:	7868      	ldrb	r0, [r5, #1]
  404bf4:	b240      	sxtb	r0, r0
  404bf6:	f7ff ff25 	bl	404a44 <_Z11__getSwitcha>
        switch (cs.func) {
  404bfa:	78ab      	ldrb	r3, [r5, #2]
  404bfc:	2b05      	cmp	r3, #5
  404bfe:	d0e3      	beq.n	404bc8 <_Z11__getSwitcha+0x184>
  404c00:	2b06      	cmp	r3, #6
          case CS_OR:
            result = (res1 || res2);
            break;
          // case CS_XOR:
          default:
            result = (res1 ^ res2);
  404c02:	bf1c      	itt	ne
  404c04:	4070      	eorne	r0, r6
  404c06:	b2c0      	uxtbne	r0, r0
      }
      else {
        s_last_switch_used |= mask;
        bool res1 = __getSwitch(cs.v1);
        bool res2 = __getSwitch(cs.v2);
        switch (cs.func) {
  404c08:	f47f af4f 	bne.w	404aaa <_Z11__getSwitcha+0x66>
          case CS_AND:
            result = (res1 && res2);
            break;
          case CS_OR:
            result = (res1 || res2);
  404c0c:	b10e      	cbz	r6, 404c12 <_Z11__getSwitcha+0x1ce>
  404c0e:	2001      	movs	r0, #1
  404c10:	e74e      	b.n	404ab0 <_Z11__getSwitcha+0x6c>
  404c12:	2800      	cmp	r0, #0
  404c14:	d0d9      	beq.n	404bca <_Z11__getSwitcha+0x186>
  404c16:	2001      	movs	r0, #1
  404c18:	e74a      	b.n	404ab0 <_Z11__getSwitcha+0x6c>
          y = calc100toRESX(cs.v2);
        }

        switch (cs.func) {
          case CS_VPOS:
            result = (x>y);
  404c1a:	b200      	sxth	r0, r0
  404c1c:	4287      	cmp	r7, r0
  404c1e:	bfd4      	ite	le
  404c20:	2000      	movle	r0, #0
  404c22:	2001      	movgt	r0, #1
            break;
  404c24:	e74e      	b.n	404ac4 <_Z11__getSwitcha+0x80>
  404c26:	2f00      	cmp	r7, #0
  404c28:	bfb8      	it	lt
  404c2a:	427f      	neglt	r7, r7
          case CS_VNEG:
            result = (x<y);
            break;
          case CS_APOS:
            result = (abs(x)>y);
  404c2c:	b200      	sxth	r0, r0
  404c2e:	b23f      	sxth	r7, r7
  404c30:	42b8      	cmp	r0, r7
  404c32:	bfac      	ite	ge
  404c34:	2000      	movge	r0, #0
  404c36:	2001      	movlt	r0, #1
            break;
  404c38:	e744      	b.n	404ac4 <_Z11__getSwitcha+0x80>
        switch (cs.func) {
          case CS_VPOS:
            result = (x>y);
            break;
          case CS_VNEG:
            result = (x<y);
  404c3a:	b200      	sxth	r0, r0
  404c3c:	4287      	cmp	r7, r0
  404c3e:	bfac      	ite	ge
  404c40:	2000      	movge	r0, #0
  404c42:	2001      	movlt	r0, #1
            break;
  404c44:	e73e      	b.n	404ac4 <_Z11__getSwitcha+0x80>
  404c46:	bf00      	nop
  404c48:	20000804 	.word	0x20000804
  404c4c:	20001200 	.word	0x20001200

00404c50 <_Z9getSwitchab>:
  return swtch > 0 ? result : !result;
}

bool getSwitch(int8_t swtch, bool nc)
{
  s_last_switch_used = ((uint16_t)nc<<15);
  404c50:	03c9      	lsls	r1, r1, #15
  404c52:	f241 2300 	movw	r3, #4608	; 0x1200
  404c56:	b289      	uxth	r1, r1
  404c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404c5c:	f8a3 1ae0 	strh.w	r1, [r3, #2784]	; 0xae0
  return __getSwitch(swtch);
  404c60:	e6f0      	b.n	404a44 <_Z11__getSwitcha>
  404c62:	bf00      	nop

00404c64 <_Z14checkBacklightv>:
    sum += anaIn(i)/INAC_DEVISOR;
  return sum;
}

void checkBacklight()
{
  404c64:	b510      	push	{r4, lr}
  if (getSwitch(g_eeGeneral.lightSw, 0) || g_eeGeneral.lightAutoOff)
  404c66:	4c0d      	ldr	r4, [pc, #52]	; (404c9c <_Z14checkBacklightv+0x38>)
  404c68:	2100      	movs	r1, #0
  404c6a:	f994 0055 	ldrsb.w	r0, [r4, #85]	; 0x55
  404c6e:	f7ff ffef 	bl	404c50 <_Z9getSwitchab>
  404c72:	b138      	cbz	r0, 404c84 <_Z14checkBacklightv+0x20>
    BACKLIGHT_ON;
  404c74:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
  404c78:	2300      	movs	r3, #0
  404c7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  404c7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  404c82:	bd10      	pop	{r4, pc}
  return sum;
}

void checkBacklight()
{
  if (getSwitch(g_eeGeneral.lightSw, 0) || g_eeGeneral.lightAutoOff)
  404c84:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
  404c88:	2b00      	cmp	r3, #0
  404c8a:	d1f3      	bne.n	404c74 <_Z14checkBacklightv+0x10>
    BACKLIGHT_ON;
  else
    BACKLIGHT_OFF;
  404c8c:	2300      	movs	r3, #0
  404c8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  404c92:	2264      	movs	r2, #100	; 0x64
  404c94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  404c98:	bd10      	pop	{r4, pc}
  404c9a:	bf00      	nop
  404c9c:	20000108 	.word	0x20000108

00404ca0 <_Z8doSplashv>:
}

#ifdef SPLASH
void doSplash()
{
  404ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(!g_eeGeneral.disableSplashScreen)
  404ca4:	4c30      	ldr	r4, [pc, #192]	; (404d68 <_Z8doSplashv+0xc8>)
    BACKLIGHT_OFF;
}

#ifdef SPLASH
void doSplash()
{
  404ca6:	b083      	sub	sp, #12
    if(!g_eeGeneral.disableSplashScreen)
  404ca8:	f894 506a 	ldrb.w	r5, [r4, #106]	; 0x6a
  404cac:	f005 0510 	and.w	r5, r5, #16
  404cb0:	b2ed      	uxtb	r5, r5
  404cb2:	b115      	cbz	r5, 404cba <_Z8doSplashv+0x1a>
        if (check_soft_power() > e_power_trainer) return; // Usb on or power off

        checkBacklight();
      }
    }
}
  404cb4:	b003      	add	sp, #12
  404cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#ifdef SPLASH
void doSplash()
{
    if(!g_eeGeneral.disableSplashScreen)
    {
      checkBacklight() ;
  404cba:	f7ff ffd3 	bl	404c64 <_Z14checkBacklightv>
      lcd_clear();
  404cbe:	f7fd fc87 	bl	4025d0 <_Z9lcd_clearv>
      lcd_img(0, 0, s9xsplash,0,0);
  404cc2:	4b2a      	ldr	r3, [pc, #168]	; (404d6c <_Z8doSplashv+0xcc>)
  404cc4:	4628      	mov	r0, r5
  404cc6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  404cca:	4629      	mov	r1, r5
  404ccc:	462b      	mov	r3, r5
  404cce:	9500      	str	r5, [sp, #0]
  404cd0:	f7fd fc86 	bl	4025e0 <_Z7lcd_imghhPKhhh>
      refreshDisplay();
  404cd4:	f7fe ff8a 	bl	403bec <_Z14refreshDisplayv>
      lcdSetRefVolt(g_eeGeneral.contrast);
  404cd8:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
      clearKeyEvents();
  404cdc:	2520      	movs	r5, #32
    {
      checkBacklight() ;
      lcd_clear();
      lcd_img(0, 0, s9xsplash,0,0);
      refreshDisplay();
      lcdSetRefVolt(g_eeGeneral.contrast);
  404cde:	f7fe ff27 	bl	403b30 <_Z13lcdSetRefVolth>
      clearKeyEvents();
  404ce2:	f7fc f945 	bl	400f70 <_Z14clearKeyEventsv>

#ifndef SIMU
      for(uint8_t i=0; i<32; i++)
        getADC_filt(); // init ADC array
  404ce6:	3d01      	subs	r5, #1
  404ce8:	b2ed      	uxtb	r5, r5
  404cea:	f7fc f977 	bl	400fdc <_Z11getADC_filtv>
      refreshDisplay();
      lcdSetRefVolt(g_eeGeneral.contrast);
      clearKeyEvents();

#ifndef SIMU
      for(uint8_t i=0; i<32; i++)
  404cee:	2d00      	cmp	r5, #0
  404cf0:	d1f9      	bne.n	404ce6 <_Z8doSplashv+0x46>
  else
    BACKLIGHT_OFF;
}

#ifdef SPLASH
void doSplash()
  404cf2:	4f1f      	ldr	r7, [pc, #124]	; (404d70 <_Z8doSplashv+0xd0>)
  404cf4:	1f3b      	subs	r3, r7, #4
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  404cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
  return *p;
  404cfa:	491b      	ldr	r1, [pc, #108]	; (404d68 <_Z8doSplashv+0xc8>)
  404cfc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  404d00:	f8b2 29b0 	ldrh.w	r2, [r2, #2480]	; 0x9b0

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  for (uint8_t i=0; i<4; i++)
  404d04:	42bb      	cmp	r3, r7
    sum += anaIn(i)/INAC_DEVISOR;
  404d06:	eb05 2512 	add.w	r5, r5, r2, lsr #8
  404d0a:	b2ad      	uxth	r5, r5

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  for (uint8_t i=0; i<4; i++)
  404d0c:	d1f3      	bne.n	404cf6 <_Z8doSplashv+0x56>
        getADC_filt(); // init ADC array
#endif

      uint16_t inacSum = stickMoveValue();

      uint16_t tgtime = get_tmr10ms() + SPLASH_TIMEOUT;  //2sec splash screen
  404d0e:	f8b1 89aa 	ldrh.w	r8, [r1, #2474]	; 0x9aa
      while (tgtime != get_tmr10ms())
  404d12:	f8b1 39aa 	ldrh.w	r3, [r1, #2474]	; 0x9aa
        getADC_filt(); // init ADC array
#endif

      uint16_t inacSum = stickMoveValue();

      uint16_t tgtime = get_tmr10ms() + SPLASH_TIMEOUT;  //2sec splash screen
  404d16:	f508 78c8 	add.w	r8, r8, #400	; 0x190
  404d1a:	fa1f f888 	uxth.w	r8, r8
      while (tgtime != get_tmr10ms())
  404d1e:	b29b      	uxth	r3, r3
  404d20:	4598      	cmp	r8, r3
  404d22:	d0c7      	beq.n	404cb4 <_Z8doSplashv+0x14>
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  404d24:	4689      	mov	r9, r1
      {
#ifdef SIMU
        if (!main_thread_running) return;
        sleep(1/*ms*/);
#else
        getADC_filt();
  404d26:	f7fc f959 	bl	400fdc <_Z11getADC_filtv>
  404d2a:	4b12      	ldr	r3, [pc, #72]	; (404d74 <_Z8doSplashv+0xd4>)
}

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  404d2c:	2600      	movs	r6, #0
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  404d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
  return *p;
  404d32:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  404d36:	f8b2 29b0 	ldrh.w	r2, [r2, #2480]	; 0x9b0

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  for (uint8_t i=0; i<4; i++)
  404d3a:	42bb      	cmp	r3, r7
    sum += anaIn(i)/INAC_DEVISOR;
  404d3c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
  404d40:	b2b6      	uxth	r6, r6

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
uint16_t stickMoveValue()
{
  uint16_t sum = 0;
  for (uint8_t i=0; i<4; i++)
  404d42:	d1f4      	bne.n	404d2e <_Z8doSplashv+0x8e>
#else
        getADC_filt();
#endif
        uint16_t tsum = stickMoveValue();

        if(keyDown() || (tsum!=inacSum)) return;  //wait for key release
  404d44:	f7fb fc20 	bl	400588 <_Z7keyDownv>
  404d48:	2800      	cmp	r0, #0
  404d4a:	d1b3      	bne.n	404cb4 <_Z8doSplashv+0x14>
  404d4c:	42ae      	cmp	r6, r5
  404d4e:	d1b1      	bne.n	404cb4 <_Z8doSplashv+0x14>

        if (check_soft_power() > e_power_trainer) return; // Usb on or power off
  404d50:	f7fb fa98 	bl	400284 <_Z16check_soft_powerv>
  404d54:	2801      	cmp	r0, #1
  404d56:	d8ad      	bhi.n	404cb4 <_Z8doSplashv+0x14>

        checkBacklight();
  404d58:	f7ff ff84 	bl	404c64 <_Z14checkBacklightv>
#endif

      uint16_t inacSum = stickMoveValue();

      uint16_t tgtime = get_tmr10ms() + SPLASH_TIMEOUT;  //2sec splash screen
      while (tgtime != get_tmr10ms())
  404d5c:	f8b9 39aa 	ldrh.w	r3, [r9, #2474]	; 0x9aa
  404d60:	b29b      	uxth	r3, r3
  404d62:	4598      	cmp	r8, r3
  404d64:	d1df      	bne.n	404d26 <_Z8doSplashv+0x86>
  404d66:	e7a5      	b.n	404cb4 <_Z8doSplashv+0x14>
  404d68:	20000108 	.word	0x20000108
  404d6c:	20000000 	.word	0x20000000
  404d70:	0040f754 	.word	0x0040f754
  404d74:	0040f750 	.word	0x0040f750

00404d78 <_Z14getFlightPhasev>:
  return __getSwitch(swtch);
}

#ifdef FLIGHT_PHASES
uint8_t getFlightPhase()
{
  404d78:	b570      	push	{r4, r5, r6, lr}
  404d7a:	4e0b      	ldr	r6, [pc, #44]	; (404da8 <_Z14getFlightPhasev+0x30>)
  404d7c:	2401      	movs	r4, #1
  for (uint8_t i=1; i<MAX_PHASES; i++) {
    PhaseData *phase = &g_model.phaseData[i];
  404d7e:	eb06 1304 	add.w	r3, r6, r4, lsl #4
    if (phase->swtch && getSwitch(phase->swtch, 0)) {
  404d82:	f893 0690 	ldrb.w	r0, [r3, #1680]	; 0x690
      return i;
    }
  }
  return 0;
  404d86:	b2e5      	uxtb	r5, r4
#ifdef FLIGHT_PHASES
uint8_t getFlightPhase()
{
  for (uint8_t i=1; i<MAX_PHASES; i++) {
    PhaseData *phase = &g_model.phaseData[i];
    if (phase->swtch && getSwitch(phase->swtch, 0)) {
  404d88:	3401      	adds	r4, #1
  404d8a:	b920      	cbnz	r0, 404d96 <_Z14getFlightPhasev+0x1e>
}

#ifdef FLIGHT_PHASES
uint8_t getFlightPhase()
{
  for (uint8_t i=1; i<MAX_PHASES; i++) {
  404d8c:	2c09      	cmp	r4, #9
  404d8e:	d1f6      	bne.n	404d7e <_Z14getFlightPhasev+0x6>
    PhaseData *phase = &g_model.phaseData[i];
    if (phase->swtch && getSwitch(phase->swtch, 0)) {
      return i;
    }
  }
  return 0;
  404d90:	2500      	movs	r5, #0
}
  404d92:	4628      	mov	r0, r5
  404d94:	bd70      	pop	{r4, r5, r6, pc}
#ifdef FLIGHT_PHASES
uint8_t getFlightPhase()
{
  for (uint8_t i=1; i<MAX_PHASES; i++) {
    PhaseData *phase = &g_model.phaseData[i];
    if (phase->swtch && getSwitch(phase->swtch, 0)) {
  404d96:	b240      	sxtb	r0, r0
  404d98:	2100      	movs	r1, #0
  404d9a:	f7ff ff59 	bl	404c50 <_Z9getSwitchab>
  404d9e:	2800      	cmp	r0, #0
  404da0:	d0f4      	beq.n	404d8c <_Z14getFlightPhasev+0x14>
      return i;
    }
  }
  return 0;
}
  404da2:	4628      	mov	r0, r5
  404da4:	bd70      	pop	{r4, r5, r6, pc}
  404da6:	bf00      	nop
  404da8:	20000244 	.word	0x20000244

00404dac <_Z10applyExposPsh>:
}
#endif


void applyExpos(int16_t *anas, uint8_t phase)
{
  404dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404db0:	b083      	sub	sp, #12
  404db2:	9001      	str	r0, [sp, #4]
  404db4:	4689      	mov	r9, r1
  static int16_t anas2[NUM_STICKS]; // values before expo, to ensure same expo base when multiple expo lines are used
  memcpy(anas2, anas, sizeof(anas2));
  404db6:	2208      	movs	r2, #8
  404db8:	4837      	ldr	r0, [pc, #220]	; (404e98 <_Z10applyExposPsh+0xec>)
  404dba:	9901      	ldr	r1, [sp, #4]
  404dbc:	f00a faa4 	bl	40f308 <memcpy>

  if (phase == 255)
  404dc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  404dc4:	d063      	beq.n	404e8e <_Z10applyExposPsh+0xe2>
    phase = getFlightPhase();
  phase++;
  404dc6:	f109 0901 	add.w	r9, r9, #1
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        v = expo(v, k);
        uint8_t ed_curve = ed.curve;
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
        v = ((int32_t)v * ed.weight) / 100;
  404dca:	f248 5a1f 	movw	sl, #34079	; 0x851f
  404dce:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 404e9c <_Z10applyExposPsh+0xf0>
        if (phase != ed_phase)
          continue;
      }
    }
    if (getSwitch(ed.swtch, 1)) {
      int16_t v = anas2[ed.chn];
  404dd2:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 404ea0 <_Z10applyExposPsh+0xf4>
  static int16_t anas2[NUM_STICKS]; // values before expo, to ensure same expo base when multiple expo lines are used
  memcpy(anas2, anas, sizeof(anas2));

  if (phase == 255)
    phase = getFlightPhase();
  phase++;
  404dd6:	fa5f f989 	uxtb.w	r9, r9
  404dda:	2400      	movs	r4, #0

  int8_t cur_chn = -1;
  404ddc:	27ff      	movs	r7, #255	; 0xff
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        v = expo(v, k);
        uint8_t ed_curve = ed.curve;
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
        v = ((int32_t)v * ed.weight) / 100;
  404dde:	f2c5 1aeb 	movt	sl, #20971	; 0x51eb
  404de2:	e007      	b.n	404df4 <_Z10applyExposPsh+0x48>
    if (ed.mode==0) break; // end of list
    if (ed.chn == cur_chn)
      continue;
    if (ed_phase != 0) {
#if defined(PCBARM)
      if (ed_phase < 0) {
  404de4:	b25b      	sxtb	r3, r3
  404de6:	2b00      	cmp	r3, #0
  404de8:	db47      	blt.n	404e7a <_Z10applyExposPsh+0xce>
        if (phase == ed_phase)
          continue;
      }
#endif
      else {
        if (phase != ed_phase)
  404dea:	4599      	cmp	r9, r3
  404dec:	d012      	beq.n	404e14 <_Z10applyExposPsh+0x68>
        int16_t k = ed.expo;
        v = expo(v, k);
        uint8_t ed_curve = ed.curve;
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
        v = ((int32_t)v * ed.weight) / 100;
        anas[cur_chn] = v;
  404dee:	3401      	adds	r4, #1
    phase = getFlightPhase();
  phase++;

  int8_t cur_chn = -1;

  for (uint8_t i=0; i<MAX_EXPOS; i++) {
  404df0:	2c20      	cmp	r4, #32
  404df2:	d03f      	beq.n	404e74 <_Z10applyExposPsh+0xc8>
    ExpoData &ed = g_model.expoData[i];
  404df4:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
  404df8:	f506 668e 	add.w	r6, r6, #1136	; 0x470
  404dfc:	4446      	add	r6, r8
#if defined(PCBARM)
    int8_t ed_phase = ed.phase;
#else
    uint8_t ed_phase = ed.phase;
#endif
    if (ed.mode==0) break; // end of list
  404dfe:	7972      	ldrb	r2, [r6, #5]
  phase++;

  int8_t cur_chn = -1;

  for (uint8_t i=0; i<MAX_EXPOS; i++) {
    ExpoData &ed = g_model.expoData[i];
  404e00:	1d75      	adds	r5, r6, #5
#if defined(PCBARM)
    int8_t ed_phase = ed.phase;
  404e02:	792b      	ldrb	r3, [r5, #4]
#else
    uint8_t ed_phase = ed.phase;
#endif
    if (ed.mode==0) break; // end of list
  404e04:	2a00      	cmp	r2, #0
  404e06:	d035      	beq.n	404e74 <_Z10applyExposPsh+0xc8>
    if (ed.chn == cur_chn)
  404e08:	7869      	ldrb	r1, [r5, #1]
  404e0a:	b27a      	sxtb	r2, r7
  404e0c:	4291      	cmp	r1, r2
  404e0e:	d0ee      	beq.n	404dee <_Z10applyExposPsh+0x42>
      continue;
    if (ed_phase != 0) {
  404e10:	2b00      	cmp	r3, #0
  404e12:	d1e7      	bne.n	404de4 <_Z10applyExposPsh+0x38>
      else {
        if (phase != ed_phase)
          continue;
      }
    }
    if (getSwitch(ed.swtch, 1)) {
  404e14:	f995 0003 	ldrsb.w	r0, [r5, #3]
  404e18:	2101      	movs	r1, #1
  404e1a:	f7ff ff19 	bl	404c50 <_Z9getSwitchab>
  404e1e:	2800      	cmp	r0, #0
  404e20:	d0e5      	beq.n	404dee <_Z10applyExposPsh+0x42>
      int16_t v = anas2[ed.chn];
  404e22:	786b      	ldrb	r3, [r5, #1]
  404e24:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
      if((v<0 && ed.mode&1) || (v>=0 && ed.mode&2)) {
  404e28:	f9b2 0af0 	ldrsh.w	r0, [r2, #2800]	; 0xaf0
  404e2c:	7972      	ldrb	r2, [r6, #5]
  404e2e:	2800      	cmp	r0, #0
  404e30:	db27      	blt.n	404e82 <_Z10applyExposPsh+0xd6>
  404e32:	0792      	lsls	r2, r2, #30
  404e34:	d5db      	bpl.n	404dee <_Z10applyExposPsh+0x42>
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        v = expo(v, k);
  404e36:	f995 1006 	ldrsb.w	r1, [r5, #6]
      }
    }
    if (getSwitch(ed.swtch, 1)) {
      int16_t v = anas2[ed.chn];
      if((v<0 && ed.mode&1) || (v>=0 && ed.mode&2)) {
        cur_chn = ed.chn;
  404e3a:	b2df      	uxtb	r7, r3
        int16_t k = ed.expo;
        v = expo(v, k);
  404e3c:	f7fb fe6e 	bl	400b1c <_Z4exposs>
        uint8_t ed_curve = ed.curve;
  404e40:	78a9      	ldrb	r1, [r5, #2]
    if (getSwitch(ed.swtch, 1)) {
      int16_t v = anas2[ed.chn];
      if((v<0 && ed.mode&1) || (v>=0 && ed.mode&2)) {
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        v = expo(v, k);
  404e42:	4606      	mov	r6, r0
        uint8_t ed_curve = ed.curve;
  404e44:	b2ca      	uxtb	r2, r1
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
  404e46:	b12a      	cbz	r2, 404e54 <_Z10applyExposPsh+0xa8>
  404e48:	2a0a      	cmp	r2, #10
  404e4a:	d81d      	bhi.n	404e88 <_Z10applyExposPsh+0xdc>
  404e4c:	b249      	sxtb	r1, r1
  404e4e:	f7fb fe17 	bl	400a80 <_Z10applyCurvesa>
  404e52:	4606      	mov	r6, r0
        v = ((int32_t)v * ed.weight) / 100;
  404e54:	796b      	ldrb	r3, [r5, #5]
  404e56:	b236      	sxth	r6, r6
  404e58:	fb03 f306 	mul.w	r3, r3, r6
  404e5c:	fb8a 1203 	smull	r1, r2, sl, r3
        anas[cur_chn] = v;
  404e60:	3401      	adds	r4, #1
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        v = expo(v, k);
        uint8_t ed_curve = ed.curve;
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
        v = ((int32_t)v * ed.weight) / 100;
  404e62:	17db      	asrs	r3, r3, #31
  404e64:	9901      	ldr	r1, [sp, #4]
  404e66:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    phase = getFlightPhase();
  phase++;

  int8_t cur_chn = -1;

  for (uint8_t i=0; i<MAX_EXPOS; i++) {
  404e6a:	2c20      	cmp	r4, #32
        int16_t k = ed.expo;
        v = expo(v, k);
        uint8_t ed_curve = ed.curve;
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
        v = ((int32_t)v * ed.weight) / 100;
        anas[cur_chn] = v;
  404e6c:	b27a      	sxtb	r2, r7
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        v = expo(v, k);
        uint8_t ed_curve = ed.curve;
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
        v = ((int32_t)v * ed.weight) / 100;
  404e6e:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    phase = getFlightPhase();
  phase++;

  int8_t cur_chn = -1;

  for (uint8_t i=0; i<MAX_EXPOS; i++) {
  404e72:	d1bf      	bne.n	404df4 <_Z10applyExposPsh+0x48>
        v = ((int32_t)v * ed.weight) / 100;
        anas[cur_chn] = v;
      }
    }
  }
}
  404e74:	b003      	add	sp, #12
  404e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ed.chn == cur_chn)
      continue;
    if (ed_phase != 0) {
#if defined(PCBARM)
      if (ed_phase < 0) {
        if (phase == -ed_phase)
  404e7a:	eb19 0f03 	cmn.w	r9, r3
  404e7e:	d1c9      	bne.n	404e14 <_Z10applyExposPsh+0x68>
  404e80:	e7b5      	b.n	404dee <_Z10applyExposPsh+0x42>
          continue;
      }
    }
    if (getSwitch(ed.swtch, 1)) {
      int16_t v = anas2[ed.chn];
      if((v<0 && ed.mode&1) || (v>=0 && ed.mode&2)) {
  404e82:	07d1      	lsls	r1, r2, #31
  404e84:	d4d7      	bmi.n	404e36 <_Z10applyExposPsh+0x8a>
  404e86:	e7b2      	b.n	404dee <_Z10applyExposPsh+0x42>
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        v = expo(v, k);
        uint8_t ed_curve = ed.curve;
        if (ed_curve) v = applyCurve(v, ed_curve > 10 ? ed_curve + 4 : ed_curve);
  404e88:	3204      	adds	r2, #4
  404e8a:	b2d1      	uxtb	r1, r2
  404e8c:	e7de      	b.n	404e4c <_Z10applyExposPsh+0xa0>
{
  static int16_t anas2[NUM_STICKS]; // values before expo, to ensure same expo base when multiple expo lines are used
  memcpy(anas2, anas, sizeof(anas2));

  if (phase == 255)
    phase = getFlightPhase();
  404e8e:	f7ff ff73 	bl	404d78 <_Z14getFlightPhasev>
  404e92:	4681      	mov	r9, r0
  404e94:	e797      	b.n	404dc6 <_Z10applyExposPsh+0x1a>
  404e96:	bf00      	nop
  404e98:	20001cf0 	.word	0x20001cf0
  404e9c:	20000244 	.word	0x20000244
  404ea0:	20001200 	.word	0x20001200

00404ea4 <_Z6expoFns>:
static uint8_t s_curveChan;

typedef int16_t (*FnFuncP) (int16_t x);

int16_t expoFn(int16_t x)
{
  404ea4:	b530      	push	{r4, r5, lr}
  return &g_model.phaseData[idx];
}

ExpoData *expoaddress(uint8_t idx )
{
  return &g_model.expoData[idx];
  404ea6:	f241 2300 	movw	r3, #4608	; 0x1200
  404eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404eae:	f893 4af8 	ldrb.w	r4, [r3, #2808]	; 0xaf8
  ExpoData *ed = expoaddress(s_currIdx);
  404eb2:	4b0d      	ldr	r3, [pc, #52]	; (404ee8 <_Z6expoFns+0x44>)
  404eb4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  404eb8:	18e4      	adds	r4, r4, r3
static uint8_t s_curveChan;

typedef int16_t (*FnFuncP) (int16_t x);

int16_t expoFn(int16_t x)
{
  404eba:	b083      	sub	sp, #12
  ExpoData *ed = expoaddress(s_currIdx);
  int16_t anas[NUM_STICKS] = {0};
  anas[ed->chn] = x;
  404ebc:	7862      	ldrb	r2, [r4, #1]
  404ebe:	a902      	add	r1, sp, #8
typedef int16_t (*FnFuncP) (int16_t x);

int16_t expoFn(int16_t x)
{
  ExpoData *ed = expoaddress(s_currIdx);
  int16_t anas[NUM_STICKS] = {0};
  404ec0:	2300      	movs	r3, #0
  anas[ed->chn] = x;
  404ec2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
static uint8_t s_curveChan;

typedef int16_t (*FnFuncP) (int16_t x);

int16_t expoFn(int16_t x)
{
  404ec6:	4605      	mov	r5, r0
  ExpoData *ed = expoaddress(s_currIdx);
  int16_t anas[NUM_STICKS] = {0};
  404ec8:	9300      	str	r3, [sp, #0]
  404eca:	9301      	str	r3, [sp, #4]
  anas[ed->chn] = x;
  applyExpos(anas);
  404ecc:	4668      	mov	r0, sp

int16_t expoFn(int16_t x)
{
  ExpoData *ed = expoaddress(s_currIdx);
  int16_t anas[NUM_STICKS] = {0};
  anas[ed->chn] = x;
  404ece:	f822 5c08 	strh.w	r5, [r2, #-8]
  applyExpos(anas);
  404ed2:	21ff      	movs	r1, #255	; 0xff
  404ed4:	f7ff ff6a 	bl	404dac <_Z10applyExposPsh>
  return anas[ed->chn];
  404ed8:	7863      	ldrb	r3, [r4, #1]
  404eda:	aa02      	add	r2, sp, #8
  404edc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  404ee0:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
}
  404ee4:	b003      	add	sp, #12
  404ee6:	bd30      	pop	{r4, r5, pc}
  404ee8:	200006b9 	.word	0x200006b9

00404eec <_Z10evalSticksh>:
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
{
  404eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif

  for (uint8_t i=0; i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS; i++) {

    // normalization [0..2048] -> [-1024..1024]
    uint8_t ch = (i < NUM_STICKS ? CONVERT_MODE(i+1) - 1 : i);
  404ef0:	4da9      	ldr	r5, [pc, #676]	; (405198 <_Z10evalSticksh+0x2ac>)
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
{
  404ef2:	b087      	sub	sp, #28

    if (i < NUM_STICKS+NUM_POTS)
      calibratedStick[ch] = v; //for show in expo

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));
  404ef4:	f8b5 2afa 	ldrh.w	r2, [r5, #2810]	; 0xafa
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      int16_t v = anas[i];
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
  404ef8:	4ca8      	ldr	r4, [pc, #672]	; (40519c <_Z10evalSticksh+0x2b0>)
#endif

  for (uint8_t i=0; i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS; i++) {

    // normalization [0..2048] -> [-1024..1024]
    uint8_t ch = (i < NUM_STICKS ? CONVERT_MODE(i+1) - 1 : i);
  404efa:	f895 ea86 	ldrb.w	lr, [r5, #2694]	; 0xa86

    if (i < NUM_STICKS+NUM_POTS)
      calibratedStick[ch] = v; //for show in expo

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));
  404efe:	9205      	str	r2, [sp, #20]
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
{
  404f00:	4606      	mov	r6, r0
extern void moveTrimsToOffsets();

extern uint16_t active_functions;
inline bool isFunctionActive(uint8_t func)
{
  return active_functions & (1 << (func-FUNC_TRAINER));
  404f02:	f8b5 2afe 	ldrh.w	r2, [r5, #2814]	; 0xafe
  e_instant_trim
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
  404f06:	48a6      	ldr	r0, [pc, #664]	; (4051a0 <_Z10evalSticksh+0x2b4>)
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      int16_t v = anas[i];
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
  404f08:	f894 a06a 	ldrb.w	sl, [r4, #106]	; 0x6a
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
          vStud *= td->studWeight;
          vStud /= 50;
  404f0c:	f248 511f 	movw	r1, #34079	; 0x851f

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));

    if (ch < NUM_STICKS) { //only do this for sticks
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
  404f10:	f895 9afc 	ldrb.w	r9, [r5, #2812]	; 0xafc
  e_instant_trim
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
  404f14:	2300      	movs	r3, #0
  404f16:	9203      	str	r2, [sp, #12]
  404f18:	eb00 008e 	add.w	r0, r0, lr, lsl #2
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
          vStud *= td->studWeight;
          vStud /= 50;
  404f1c:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
  404f20:	4aa0      	ldr	r2, [pc, #640]	; (4051a4 <_Z10evalSticksh+0x2b8>)

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));

    if (ch < NUM_STICKS) { //only do this for sticks
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
  404f22:	f8cd 9004 	str.w	r9, [sp, #4]
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      int16_t v = anas[i];
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
  404f26:	f00a 0a01 	and.w	sl, sl, #1

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
{
  BeepANACenter anaCenter = 0;
  404f2a:	461f      	mov	r7, r3
  e_instant_trim
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
  404f2c:	9002      	str	r0, [sp, #8]
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  404f2e:	46a3      	mov	fp, r4
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
          vStud *= td->studWeight;
          vStud /= 50;
  404f30:	9100      	str	r1, [sp, #0]
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  404f32:	18d0      	adds	r0, r2, r3
  e_instant_trim
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
  404f34:	fa5f fc83 	uxtb.w	ip, r3
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  404f38:	f890 8020 	ldrb.w	r8, [r0, #32]
#endif

  for (uint8_t i=0; i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS; i++) {

    // normalization [0..2048] -> [-1024..1024]
    uint8_t ch = (i < NUM_STICKS ? CONVERT_MODE(i+1) - 1 : i);
  404f3c:	f1bc 0f03 	cmp.w	ip, #3
    int16_t v = anaIn(i);
#endif

#ifndef SIMU
    if(i < NUM_STICKS+NUM_POTS){
      v -= g_eeGeneral.calibMid[i];
  404f40:	eb04 0043 	add.w	r0, r4, r3, lsl #1
#endif

  for (uint8_t i=0; i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS; i++) {

    // normalization [0..2048] -> [-1024..1024]
    uint8_t ch = (i < NUM_STICKS ? CONVERT_MODE(i+1) - 1 : i);
  404f44:	bf98      	it	ls
  404f46:	f8dd 9008 	ldrls.w	r9, [sp, #8]
    int16_t v = anaIn(i);
#endif

#ifndef SIMU
    if(i < NUM_STICKS+NUM_POTS){
      v -= g_eeGeneral.calibMid[i];
  404f4a:	f890 e025 	ldrb.w	lr, [r0, #37]	; 0x25
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  404f4e:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    int16_t v = anaIn(i);
#endif

#ifndef SIMU
    if(i < NUM_STICKS+NUM_POTS){
      v -= g_eeGeneral.calibMid[i];
  404f52:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  404f56:	f8b8 89b0 	ldrh.w	r8, [r8, #2480]	; 0x9b0
    int16_t v = anaIn(i);
#endif

#ifndef SIMU
    if(i < NUM_STICKS+NUM_POTS){
      v -= g_eeGeneral.calibMid[i];
  404f5a:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
#endif

  for (uint8_t i=0; i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS; i++) {

    // normalization [0..2048] -> [-1024..1024]
    uint8_t ch = (i < NUM_STICKS ? CONVERT_MODE(i+1) - 1 : i);
  404f5e:	bf98      	it	ls
  404f60:	f819 c003 	ldrbls.w	ip, [r9, r3]
    int16_t v = anaIn(i);
#endif

#ifndef SIMU
    if(i < NUM_STICKS+NUM_POTS){
      v -= g_eeGeneral.calibMid[i];
  404f64:	ebce 0808 	rsb	r8, lr, r8
      v  =  v * (int32_t)RESX /  (max((int16_t)100,(v>0 ?
                                       g_eeGeneral.calibSpanPos[i] :
                                       g_eeGeneral.calibSpanNeg[i])));
  404f68:	fa0f f888 	sxth.w	r8, r8
#endif

  for (uint8_t i=0; i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS; i++) {

    // normalization [0..2048] -> [-1024..1024]
    uint8_t ch = (i < NUM_STICKS ? CONVERT_MODE(i+1) - 1 : i);
  404f6c:	bf9c      	itt	ls
  404f6e:	f10c 3cff 	addls.w	ip, ip, #4294967295
  404f72:	fa5f fc8c 	uxtbls.w	ip, ip
#ifndef SIMU
    if(i < NUM_STICKS+NUM_POTS){
      v -= g_eeGeneral.calibMid[i];
      v  =  v * (int32_t)RESX /  (max((int16_t)100,(v>0 ?
                                       g_eeGeneral.calibSpanPos[i] :
                                       g_eeGeneral.calibSpanNeg[i])));
  404f76:	f1b8 0f00 	cmp.w	r8, #0
  404f7a:	bfc8      	it	gt
  404f7c:	f103 000c 	addgt.w	r0, r3, #12
  404f80:	ea4f 2988 	mov.w	r9, r8, lsl #10
  404f84:	bfd5      	itete	le
  404f86:	f103 0804 	addle.w	r8, r3, #4
  404f8a:	eb0b 0040 	addgt.w	r0, fp, r0, lsl #1
  404f8e:	eb0b 0848 	addle.w	r8, fp, r8, lsl #1
  404f92:	f890 e029 	ldrbgt.w	lr, [r0, #41]	; 0x29
  404f96:	bfd5      	itete	le
  404f98:	f898 002b 	ldrble.w	r0, [r8, #43]	; 0x2b
  404f9c:	f890 002a 	ldrbgt.w	r0, [r0, #42]	; 0x2a
  404fa0:	f898 e02c 	ldrble.w	lr, [r8, #44]	; 0x2c
  404fa4:	ea4e 2000 	orrgt.w	r0, lr, r0, lsl #8
  404fa8:	bfd8      	it	le
  404faa:	ea40 200e 	orrle.w	r0, r0, lr, lsl #8
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  404fae:	b200      	sxth	r0, r0
  404fb0:	2864      	cmp	r0, #100	; 0x64
  404fb2:	bfb8      	it	lt
  404fb4:	2064      	movlt	r0, #100	; 0x64
  404fb6:	fb99 f0f0 	sdiv	r0, r9, r0
  404fba:	b280      	uxth	r0, r0
    }
#endif

    if(v < -RESX) v = -RESX;
  404fbc:	fa0f fe80 	sxth.w	lr, r0
  404fc0:	f51e 6f80 	cmn.w	lr, #1024	; 0x400
  404fc4:	bfb8      	it	lt
  404fc6:	f44f 407c 	movlt.w	r0, #64512	; 0xfc00
  404fca:	db04      	blt.n	404fd6 <_Z10evalSticksh+0xea>
    if(v >  RESX) v =  RESX;
  404fcc:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
  404fd0:	bfc8      	it	gt
  404fd2:	f44f 6080 	movgt.w	r0, #1024	; 0x400

    if (g_eeGeneral.throttleReversed && ch==THR_STICK)
  404fd6:	f1bc 0f02 	cmp.w	ip, #2
  404fda:	bf14      	ite	ne
  404fdc:	f04f 0e00 	movne.w	lr, #0
  404fe0:	f00a 0e01 	andeq.w	lr, sl, #1
  404fe4:	f1be 0f00 	cmp.w	lr, #0
  404fe8:	d001      	beq.n	404fee <_Z10evalSticksh+0x102>
      v = -v;
  404fea:	4240      	negs	r0, r0
  404fec:	b280      	uxth	r0, r0
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  404fee:	fa0f f880 	sxth.w	r8, r0
  404ff2:	f1b8 0f00 	cmp.w	r8, #0
  404ff6:	bfb8      	it	lt
  404ff8:	f1c8 0800 	rsblt	r8, r8, #0

    if (i < NUM_STICKS+NUM_POTS)
      calibratedStick[ch] = v; //for show in expo
  404ffc:	ea4f 0e4c 	mov.w	lr, ip, lsl #1

    uint8_t tmp = (uint16_t)abs(v) / 16;
  405000:	f3c8 1807 	ubfx	r8, r8, #4, #8

    if (g_eeGeneral.throttleReversed && ch==THR_STICK)
      v = -v;

    if (i < NUM_STICKS+NUM_POTS)
      calibratedStick[ch] = v; //for show in expo
  405004:	eb04 090e 	add.w	r9, r4, lr

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));
  405008:	f1b8 0f01 	cmp.w	r8, #1

    if (g_eeGeneral.throttleReversed && ch==THR_STICK)
      v = -v;

    if (i < NUM_STICKS+NUM_POTS)
      calibratedStick[ch] = v; //for show in expo
  40500c:	f8a9 08b8 	strh.w	r0, [r9, #2232]	; 0x8b8

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));
  405010:	f240 809e 	bls.w	405150 <_Z10evalSticksh+0x264>

    if (ch < NUM_STICKS) { //only do this for sticks
  405014:	f1bc 0f03 	cmp.w	ip, #3
  405018:	d844      	bhi.n	4050a4 <_Z10evalSticksh+0x1b8>
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
  40501a:	9901      	ldr	r1, [sp, #4]
  40501c:	2900      	cmp	r1, #0
  40501e:	d13e      	bne.n	40509e <_Z10evalSticksh+0x1b2>
  405020:	f10c 0811 	add.w	r8, ip, #17
extern void moveTrimsToOffsets();

extern uint16_t active_functions;
inline bool isFunctionActive(uint8_t func)
{
  return active_functions & (1 << (func-FUNC_TRAINER));
  405024:	f8dd 900c 	ldr.w	r9, [sp, #12]
  405028:	fa5f f888 	uxtb.w	r8, r8
  40502c:	f1a8 0810 	sub.w	r8, r8, #16
  405030:	fa49 f808 	asr.w	r8, r9, r8
  e_instant_trim
};

uint8_t s_perout_mode = e_perout_mode_normal;

BeepANACenter evalSticks(uint8_t phase)
  405034:	ea48 0809 	orr.w	r8, r8, r9

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));

    if (ch < NUM_STICKS) { //only do this for sticks
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
  405038:	f018 0f01 	tst.w	r8, #1
  40503c:	d02f      	beq.n	40509e <_Z10evalSticksh+0x1b2>
        // trainer mode
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
  40503e:	495a      	ldr	r1, [pc, #360]	; (4051a8 <_Z10evalSticksh+0x2bc>)
  405040:	f10c 0c1c 	add.w	ip, ip, #28
  405044:	eb01 084c 	add.w	r8, r1, ip, lsl #1
        if (td->mode) {
  405048:	f898 c002 	ldrb.w	ip, [r8, #2]
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));

    if (ch < NUM_STICKS) { //only do this for sticks
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
        // trainer mode
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
  40504c:	f108 0802 	add.w	r8, r8, #2
        if (td->mode) {
  405050:	f01c 0fc0 	tst.w	ip, #192	; 0xc0
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));

    if (ch < NUM_STICKS) { //only do this for sticks
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
        // trainer mode
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
  405054:	f8cd 8010 	str.w	r8, [sp, #16]
        if (td->mode) {
  405058:	d021      	beq.n	40509e <_Z10evalSticksh+0x1b2>
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
  40505a:	f00c 083f 	and.w	r8, ip, #63	; 0x3f
  40505e:	eb0b 0948 	add.w	r9, fp, r8, lsl #1
  405062:	46c8      	mov	r8, r9
          vStud *= td->studWeight;
  405064:	9904      	ldr	r1, [sp, #16]
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
        // trainer mode
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
  405066:	f9b9 9014 	ldrsh.w	r9, [r9, #20]
  40506a:	f9b8 8056 	ldrsh.w	r8, [r8, #86]	; 0x56
          vStud *= td->studWeight;
  40506e:	f991 1001 	ldrsb.w	r1, [r1, #1]
      if (s_perout_mode==e_perout_mode_normal && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+ch))) {
        // trainer mode
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
  405072:	ebc8 0809 	rsb	r8, r8, r9
          vStud *= td->studWeight;
  405076:	fb08 f801 	mul.w	r8, r8, r1
          vStud /= 50;
  40507a:	9900      	ldr	r1, [sp, #0]
          switch (td->mode) {
  40507c:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
          vStud *= td->studWeight;
          vStud /= 50;
  405080:	fb81 1908 	smull	r1, r9, r1, r8
  405084:	ea4f 78e8 	mov.w	r8, r8, asr #31
          switch (td->mode) {
  405088:	f1bc 0f01 	cmp.w	ip, #1
        TrainerMix* td = &g_eeGeneral.trainer.mix[ch];
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
          vStud *= td->studWeight;
          vStud /= 50;
  40508c:	ebc8 1829 	rsb	r8, r8, r9, asr #4
          switch (td->mode) {
            case 1: v += vStud;   break; // add-mode
  405090:	bf04      	itt	eq
  405092:	4440      	addeq	r0, r8
  405094:	b280      	uxtheq	r0, r0
        if (td->mode) {
          uint8_t chStud = td->srcChn;
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
          vStud *= td->studWeight;
          vStud /= 50;
          switch (td->mode) {
  405096:	d002      	beq.n	40509e <_Z10evalSticksh+0x1b2>
  405098:	f1bc 0f02 	cmp.w	ip, #2
  40509c:	d072      	beq.n	405184 <_Z10evalSticksh+0x298>
#ifdef HELI
      if(d && (ch==ELE_STICK || ch==AIL_STICK))
        v = int32_t(v)*g_model.swashR.value*RESX/(int32_t(d)*100);
#endif

      anas[ch] = v; //set values for mixer
  40509e:	44ae      	add	lr, r5
  4050a0:	f8ae 0b00 	strh.w	r0, [lr, #2816]	; 0xb00
  4050a4:	3301      	adds	r3, #1
    if (v>q)
      d = isqrt32(v);
  }
#endif

  for (uint8_t i=0; i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS; i++) {
  4050a6:	2b07      	cmp	r3, #7
  4050a8:	f47f af43 	bne.w	404f32 <_Z10evalSticksh+0x46>
      anas[ch] = v; //set values for mixer
    }
  }

  /* EXPOs */
  applyExpos(anas, phase);
  4050ac:	483f      	ldr	r0, [pc, #252]	; (4051ac <_Z10evalSticksh+0x2c0>)
  4050ae:	4631      	mov	r1, r6
  4050b0:	f7ff fe7c 	bl	404dac <_Z10applyExposPsh>
    int32_t vv = 2*RESX;
    int16_t trim = getTrimValue(phase, i);
    if (i==THR_STICK && g_model.thrTrim) {
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      int16_t v = anas[i];
  4050b4:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 405198 <_Z10evalSticksh+0x2ac>
      anas[ch] = v; //set values for mixer
    }
  }

  /* EXPOs */
  applyExpos(anas, phase);
  4050b8:	f04f 0a01 	mov.w	sl, #1
  4050bc:	f04f 0900 	mov.w	r9, #0
  4050c0:	fa5f f889 	uxtb.w	r8, r9
{
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    // do trim -> throttle trim if applicable
    // TODO avoid int32_t vv
    int32_t vv = 2*RESX;
    int16_t trim = getTrimValue(phase, i);
  4050c4:	4630      	mov	r0, r6
  4050c6:	4641      	mov	r1, r8
  4050c8:	f7fb ff32 	bl	400f30 <_Z12getTrimValuehh>
    if (i==THR_STICK && g_model.thrTrim) {
  4050cc:	f1b8 0f02 	cmp.w	r8, #2
{
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    // do trim -> throttle trim if applicable
    // TODO avoid int32_t vv
    int32_t vv = 2*RESX;
    int16_t trim = getTrimValue(phase, i);
  4050d0:	4602      	mov	r2, r0
    if (i==THR_STICK && g_model.thrTrim) {
  4050d2:	d00f      	beq.n	4050f4 <_Z10evalSticksh+0x208>
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      int16_t v = anas[i];
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
  4050d4:	f895 3b08 	ldrb.w	r3, [r5, #2824]	; 0xb08
  4050d8:	2b00      	cmp	r3, #0
  4050da:	d044      	beq.n	405166 <_Z10evalSticksh+0x27a>
  4050dc:	2300      	movs	r3, #0
      trim = 0;
    }

    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
  4050de:	eb05 0848 	add.w	r8, r5, r8, lsl #1
uint8_t  swOn  [MAX_MIXERS] = {0};
uint8_t mixWarning;

FORCEINLINE void evalTrims(uint8_t phase)
{
  for (uint8_t i=0; i<NUM_STICKS; i++) {
  4050e2:	f1ba 0f04 	cmp.w	sl, #4
    }
    else if (trimsCheckTimer > 0) {
      trim = 0;
    }

    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
  4050e6:	f8a8 3b0c 	strh.w	r3, [r8, #2828]	; 0xb0c
uint8_t  swOn  [MAX_MIXERS] = {0};
uint8_t mixWarning;

FORCEINLINE void evalTrims(uint8_t phase)
{
  for (uint8_t i=0; i<NUM_STICKS; i++) {
  4050ea:	d12a      	bne.n	405142 <_Z10evalSticksh+0x256>

  /* TRIMs */
  evalTrims(phase);

  return anaCenter;
}
  4050ec:	4638      	mov	r0, r7
  4050ee:	b007      	add	sp, #28
  4050f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    // do trim -> throttle trim if applicable
    // TODO avoid int32_t vv
    int32_t vv = 2*RESX;
    int16_t trim = getTrimValue(phase, i);
    if (i==THR_STICK && g_model.thrTrim) {
  4050f4:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
  4050f8:	f003 0308 	and.w	r3, r3, #8
  4050fc:	b2db      	uxtb	r3, r3
  4050fe:	2b00      	cmp	r3, #0
  405100:	d0e8      	beq.n	4050d4 <_Z10evalSticksh+0x1e8>
      if (g_eeGeneral.throttleReversed)
  405102:	f240 1208 	movw	r2, #264	; 0x108
  405106:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40510a:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
  40510e:	07db      	lsls	r3, r3, #31
  405110:	d501      	bpl.n	405116 <_Z10evalSticksh+0x22a>
        trim = -trim;
  405112:	4240      	negs	r0, r0
  405114:	b280      	uxth	r0, r0
      int16_t v = anas[i];
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
  405116:	f9b5 3b04 	ldrsh.w	r3, [r5, #2820]	; 0xb04
  40511a:	b202      	sxth	r2, r0
  40511c:	327d      	adds	r2, #125	; 0x7d
  40511e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
  405122:	fb03 f302 	mul.w	r3, r3, r2
  405126:	f503 62fe 	add.w	r2, r3, #2032	; 0x7f0
  40512a:	320f      	adds	r2, #15
  40512c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
  405130:	bf28      	it	cs
  405132:	4613      	movcs	r3, r2
  405134:	12db      	asrs	r3, r3, #11
    }
    else if (trimsCheckTimer > 0) {
      trim = 0;
    }

    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
  405136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  40513a:	d026      	beq.n	40518a <_Z10evalSticksh+0x29e>
  40513c:	005b      	lsls	r3, r3, #1
  40513e:	f8ab 3b10 	strh.w	r3, [fp, #2832]	; 0xb10
      anas[ch] = v; //set values for mixer
    }
  }

  /* EXPOs */
  applyExpos(anas, phase);
  405142:	f10a 0a01 	add.w	sl, sl, #1
  405146:	f109 0901 	add.w	r9, r9, #1
  40514a:	fa5f fa8a 	uxtb.w	sl, sl
  40514e:	e7b7      	b.n	4050c0 <_Z10evalSticksh+0x1d4>

    if (i < NUM_STICKS+NUM_POTS)
      calibratedStick[ch] = v; //for show in expo

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));
  405150:	f1b8 0f00 	cmp.w	r8, #0
  405154:	d10c      	bne.n	405170 <_Z10evalSticksh+0x284>
  405156:	2101      	movs	r1, #1
  405158:	fa01 f80c 	lsl.w	r8, r1, ip
  40515c:	fa1f f888 	uxth.w	r8, r8
  405160:	ea48 0707 	orr.w	r7, r8, r7
  405164:	e756      	b.n	405014 <_Z10evalSticksh+0x128>
  applyExpos(anas, phase);

  /* TRIMs */
  evalTrims(phase);

  return anaCenter;
  405166:	0052      	lsls	r2, r2, #1
  405168:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  40516c:	4013      	ands	r3, r2
  40516e:	e7b6      	b.n	4050de <_Z10evalSticksh+0x1f2>

    if (i < NUM_STICKS+NUM_POTS)
      calibratedStick[ch] = v; //for show in expo

    uint8_t tmp = (uint16_t)abs(v) / 16;
    if (tmp <= 1) anaCenter |= (tmp==0 ? (BeepANACenter)1<<ch : bpanaCenter & ((BeepANACenter)1<<ch));
  405170:	f04f 0901 	mov.w	r9, #1
  405174:	fa09 f80c 	lsl.w	r8, r9, ip
  405178:	9905      	ldr	r1, [sp, #20]
  40517a:	ea08 0801 	and.w	r8, r8, r1
  40517e:	ea48 0707 	orr.w	r7, r8, r7
  405182:	e747      	b.n	405014 <_Z10evalSticksh+0x128>
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
          vStud *= td->studWeight;
          vStud /= 50;
          switch (td->mode) {
            case 1: v += vStud;   break; // add-mode
            case 2: v  = vStud;   break; // subst-mode
  405184:	fa1f f088 	uxth.w	r0, r8
  405188:	e789      	b.n	40509e <_Z10evalSticksh+0x1b2>
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      int16_t v = anas[i];
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
  40518a:	b283      	uxth	r3, r0
  40518c:	005b      	lsls	r3, r3, #1
  40518e:	b29b      	uxth	r3, r3
      trim = 0;
    }

    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
  405190:	f04f 0802 	mov.w	r8, #2
  405194:	e7a3      	b.n	4050de <_Z10evalSticksh+0x1f2>
  405196:	bf00      	nop
  405198:	20001200 	.word	0x20001200
  40519c:	20000108 	.word	0x20000108
  4051a0:	0041078c 	.word	0x0041078c
  4051a4:	0040f730 	.word	0x0040f730
  4051a8:	2000012c 	.word	0x2000012c
  4051ac:	20001d00 	.word	0x20001d00

004051b0 <_Z20putsTelemetryChannelhhhsh>:
  UNIT_METERS,  // Dist
  UNIT_METERS,  // GPS Alt
};

void putsTelemetryChannel(uint8_t x, uint8_t y, uint8_t channel, int16_t val, uint8_t att)
{
  4051b0:	b4f0      	push	{r4, r5, r6, r7}
  4051b2:	f89d 4010 	ldrb.w	r4, [sp, #16]
  switch (channel) {
  4051b6:	2a15      	cmp	r2, #21
  4051b8:	d86c      	bhi.n	405294 <_Z20putsTelemetryChannelhhhsh+0xe4>
  4051ba:	e8df f002 	tbb	[pc, r2]
  4051be:	7575      	.short	0x7575
  4051c0:	0d0d1515 	.word	0x0d0d1515
  4051c4:	6b6b6b6b 	.word	0x6b6b6b6b
  4051c8:	6b6b6b6b 	.word	0x6b6b6b6b
  4051cc:	0b0b0b63 	.word	0x0b0b0b63
  4051d0:	13130b6b 	.word	0x13130b6b

    case TELEM_ACCx-1:
    case TELEM_ACCy-1:
    case TELEM_ACCz-1:
    case TELEM_VSPD-1:
      putsTelemetryValue(x, y, val, UNIT_RAW, att|PREC2);
  4051d4:	f044 0430 	orr.w	r4, r4, #48	; 0x30
      break;

    case TELEM_RSSI_TX-1:
    case TELEM_RSSI_RX-1:
      putsTelemetryValue(x, y, val, UNIT_RAW, att);
  4051d8:	461a      	mov	r2, r3
  4051da:	2303      	movs	r3, #3
  4051dc:	9404      	str	r4, [sp, #16]

    default:
      putsTelemetryValue(x, y, val, pgm_read_byte(bchunit_ar+channel-6), att);
      break;
  }
}
  4051de:	bcf0      	pop	{r4, r5, r6, r7}
      putsTelemetryValue(x, y, val, UNIT_RAW, att|PREC2);
      break;

    case TELEM_RSSI_TX-1:
    case TELEM_RSSI_RX-1:
      putsTelemetryValue(x, y, val, UNIT_RAW, att);
  4051e0:	f7fd be56 	b.w	402e90 <_Z18putsTelemetryValuehhshh>
    case TELEM_TM2-1:
      putsTime(x-3*FW, y, val, att, att);
      break;
    case TELEM_MIN_A1-1:
    case TELEM_MIN_A2-1:
      channel -= TELEM_MIN_A1-1-MAX_TIMERS;
  4051e4:	3a12      	subs	r2, #18
  4051e6:	b2d2      	uxtb	r2, r2
      // no break
    case TELEM_A1-1:
    case TELEM_A2-1:
      channel -= MAX_TIMERS;
  4051e8:	3a02      	subs	r2, #2
  TS_XOR = 0x80 // decode stuffed byte
} TS_STATE;

int16_t applyChannelRatio(uint8_t channel, int16_t val)
{
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
  4051ea:	4d33      	ldr	r5, [pc, #204]	; (4052b8 <_Z20putsTelemetryChannelhhhsh+0x108>)
  4051ec:	b2d2      	uxtb	r2, r2
  4051ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4051f2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
  4051f6:	f892 7859 	ldrb.w	r7, [r2, #2137]	; 0x859
  4051fa:	f892 6854 	ldrb.w	r6, [r2, #2132]	; 0x854
  4051fe:	f502 6504 	add.w	r5, r2, #2112	; 0x840
  405202:	09ba      	lsrs	r2, r7, #6
  405204:	fa16 f202 	lsls.w	r2, r6, r2
  405208:	7dae      	ldrb	r6, [r5, #22]
  40520a:	3514      	adds	r5, #20
  40520c:	786d      	ldrb	r5, [r5, #1]
  40520e:	f006 070f 	and.w	r7, r6, #15
  405212:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  405216:	f345 050b 	sbfx	r5, r5, #0, #12
  40521a:	195b      	adds	r3, r3, r5
  40521c:	fb02 f503 	mul.w	r5, r2, r3
  405220:	f24a 02a1 	movw	r2, #41121	; 0xa0a1
  405224:	006d      	lsls	r5, r5, #1
  405226:	f2ca 02a0 	movt	r2, #41120	; 0xa0a0
  40522a:	fb82 3205 	smull	r3, r2, r2, r5
  40522e:	17ef      	asrs	r7, r5, #31
  405230:	1952      	adds	r2, r2, r5
    case TELEM_A2-1:
      channel -= MAX_TIMERS;
      // A1 and A2
    {
      int16_t converted_value = applyChannelRatio(channel, val);
      if (g_model.frsky.channels[channel].type >= UNIT_RAW) {
  405232:	0933      	lsrs	r3, r6, #4
  TS_XOR = 0x80 // decode stuffed byte
} TS_STATE;

int16_t applyChannelRatio(uint8_t channel, int16_t val)
{
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
  405234:	ebc7 1262 	rsb	r2, r7, r2, asr #5
    case TELEM_A2-1:
      channel -= MAX_TIMERS;
      // A1 and A2
    {
      int16_t converted_value = applyChannelRatio(channel, val);
      if (g_model.frsky.channels[channel].type >= UNIT_RAW) {
  405238:	2b02      	cmp	r3, #2
  TS_XOR = 0x80 // decode stuffed byte
} TS_STATE;

int16_t applyChannelRatio(uint8_t channel, int16_t val)
{
  return ((int32_t)val+g_model.frsky.channels[channel].offset) * (g_model.frsky.channels[channel].ratio << g_model.frsky.channels[channel].multiplier) * 2 / 51;
  40523a:	b292      	uxth	r2, r2
    case TELEM_A2-1:
      channel -= MAX_TIMERS;
      // A1 and A2
    {
      int16_t converted_value = applyChannelRatio(channel, val);
      if (g_model.frsky.channels[channel].type >= UNIT_RAW) {
  40523c:	d816      	bhi.n	40526c <_Z20putsTelemetryChannelhhhsh+0xbc>
        converted_value /= 10;
      }
      else {
        if (converted_value < 1000) {
  40523e:	b212      	sxth	r2, r2
  405240:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
          att |= PREC2;
  405244:	bfb8      	it	lt
  405246:	f044 0430 	orrlt.w	r4, r4, #48	; 0x30
      int16_t converted_value = applyChannelRatio(channel, val);
      if (g_model.frsky.channels[channel].type >= UNIT_RAW) {
        converted_value /= 10;
      }
      else {
        if (converted_value < 1000) {
  40524a:	db0b      	blt.n	405264 <_Z20putsTelemetryChannelhhhsh+0xb4>
          att |= PREC2;
        }
        else {
          converted_value /= 10;
  40524c:	f246 6567 	movw	r5, #26215	; 0x6667
  405250:	f2c6 6566 	movt	r5, #26214	; 0x6666
  405254:	fb85 6502 	smull	r6, r5, r5, r2
  405258:	17d2      	asrs	r2, r2, #31
  40525a:	ebc2 02a5 	rsb	r2, r2, r5, asr #2
          att |= PREC1;
  40525e:	f044 0420 	orr.w	r4, r4, #32
  405262:	b212      	sxth	r2, r2
        }
      }
      putsTelemetryValue(x, y, converted_value, g_model.frsky.channels[channel].type, att);
  405264:	9404      	str	r4, [sp, #16]

    default:
      putsTelemetryValue(x, y, val, pgm_read_byte(bchunit_ar+channel-6), att);
      break;
  }
}
  405266:	bcf0      	pop	{r4, r5, r6, r7}
        else {
          converted_value /= 10;
          att |= PREC1;
        }
      }
      putsTelemetryValue(x, y, converted_value, g_model.frsky.channels[channel].type, att);
  405268:	f7fd be12 	b.w	402e90 <_Z18putsTelemetryValuehhshh>
      channel -= MAX_TIMERS;
      // A1 and A2
    {
      int16_t converted_value = applyChannelRatio(channel, val);
      if (g_model.frsky.channels[channel].type >= UNIT_RAW) {
        converted_value /= 10;
  40526c:	f246 6567 	movw	r5, #26215	; 0x6667
  405270:	b212      	sxth	r2, r2
  405272:	f2c6 6566 	movt	r5, #26214	; 0x6666
  405276:	fb85 6502 	smull	r6, r5, r5, r2
  40527a:	17d2      	asrs	r2, r2, #31
  40527c:	ebc2 02a5 	rsb	r2, r2, r5, asr #2
  405280:	b212      	sxth	r2, r2
  405282:	e7ef      	b.n	405264 <_Z20putsTelemetryChannelhhhsh+0xb4>
      putsTelemetryValue(x, y, converted_value, g_model.frsky.channels[channel].type, att);
      break;
    }

    case TELEM_CELL-1:
      putsTelemetryValue(x, y, val, UNIT_VOLTS, att|PREC2);
  405284:	f044 0430 	orr.w	r4, r4, #48	; 0x30
  405288:	461a      	mov	r2, r3
  40528a:	2300      	movs	r3, #0
  40528c:	9404      	str	r4, [sp, #16]

    default:
      putsTelemetryValue(x, y, val, pgm_read_byte(bchunit_ar+channel-6), att);
      break;
  }
}
  40528e:	bcf0      	pop	{r4, r5, r6, r7}
      putsTelemetryValue(x, y, converted_value, g_model.frsky.channels[channel].type, att);
      break;
    }

    case TELEM_CELL-1:
      putsTelemetryValue(x, y, val, UNIT_VOLTS, att|PREC2);
  405290:	f7fd bdfe 	b.w	402e90 <_Z18putsTelemetryValuehhshh>
      }
      // no break
#endif

    default:
      putsTelemetryValue(x, y, val, pgm_read_byte(bchunit_ar+channel-6), att);
  405294:	9404      	str	r4, [sp, #16]
  405296:	4c09      	ldr	r4, [pc, #36]	; (4052bc <_Z20putsTelemetryChannelhhhsh+0x10c>)
  405298:	18a2      	adds	r2, r4, r2
  40529a:	f812 4c6e 	ldrb.w	r4, [r2, #-110]
  40529e:	461a      	mov	r2, r3
  4052a0:	4623      	mov	r3, r4
      break;
  }
}
  4052a2:	bcf0      	pop	{r4, r5, r6, r7}
      }
      // no break
#endif

    default:
      putsTelemetryValue(x, y, val, pgm_read_byte(bchunit_ar+channel-6), att);
  4052a4:	f7fd bdf4 	b.w	402e90 <_Z18putsTelemetryValuehhshh>
void putsTelemetryChannel(uint8_t x, uint8_t y, uint8_t channel, int16_t val, uint8_t att)
{
  switch (channel) {
    case TELEM_TM1-1:
    case TELEM_TM2-1:
      putsTime(x-3*FW, y, val, att, att);
  4052a8:	3812      	subs	r0, #18
  4052aa:	461a      	mov	r2, r3
  4052ac:	b2c0      	uxtb	r0, r0
  4052ae:	4623      	mov	r3, r4
  4052b0:	9404      	str	r4, [sp, #16]

    default:
      putsTelemetryValue(x, y, val, pgm_read_byte(bchunit_ar+channel-6), att);
      break;
  }
}
  4052b2:	bcf0      	pop	{r4, r5, r6, r7}
void putsTelemetryChannel(uint8_t x, uint8_t y, uint8_t channel, int16_t val, uint8_t att)
{
  switch (channel) {
    case TELEM_TM1-1:
    case TELEM_TM2-1:
      putsTime(x-3*FW, y, val, att, att);
  4052b4:	f7fd bff6 	b.w	4032a4 <_Z8putsTimehhshh>
  4052b8:	20000108 	.word	0x20000108
  4052bc:	00410828 	.word	0x00410828

004052c0 <_Z14displayGpsTimev>:
  }
}

#if defined(FRSKY_HUB)
void displayGpsTime()
{
  4052c0:	b570      	push	{r4, r5, r6, lr}
#define TIME_LINE (7*FH+1)
  uint8_t att = (frskyStreaming > 0 ? LEFT|LEADING0 : LEFT|LEADING0|BLINK);
  4052c2:	4b1c      	ldr	r3, [pc, #112]	; (405334 <_Z14displayGpsTimev+0x74>)
  lcd_outdezNAtt(6*FW+5, TIME_LINE, frskyHubData.hour, att, 2);
  4052c4:	4e1c      	ldr	r6, [pc, #112]	; (405338 <_Z14displayGpsTimev+0x78>)

#if defined(FRSKY_HUB)
void displayGpsTime()
{
#define TIME_LINE (7*FH+1)
  uint8_t att = (frskyStreaming > 0 ? LEFT|LEADING0 : LEFT|LEADING0|BLINK);
  4052c6:	f993 40fa 	ldrsb.w	r4, [r3, #250]	; 0xfa
  }
}

#if defined(FRSKY_HUB)
void displayGpsTime()
{
  4052ca:	b082      	sub	sp, #8
#define TIME_LINE (7*FH+1)
  uint8_t att = (frskyStreaming > 0 ? LEFT|LEADING0 : LEFT|LEADING0|BLINK);
  4052cc:	2c00      	cmp	r4, #0
  4052ce:	bfd4      	ite	le
  4052d0:	2491      	movle	r4, #145	; 0x91
  4052d2:	2490      	movgt	r4, #144	; 0x90
  lcd_outdezNAtt(6*FW+5, TIME_LINE, frskyHubData.hour, att, 2);
  4052d4:	2502      	movs	r5, #2
  4052d6:	f896 2946 	ldrb.w	r2, [r6, #2374]	; 0x946
  4052da:	2029      	movs	r0, #41	; 0x29
  4052dc:	2139      	movs	r1, #57	; 0x39
  4052de:	4623      	mov	r3, r4
  4052e0:	9500      	str	r5, [sp, #0]
  4052e2:	f7fd fc37 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  lcd_putcAtt(8*FW+2, TIME_LINE, ':', att);
  4052e6:	2032      	movs	r0, #50	; 0x32
  4052e8:	2139      	movs	r1, #57	; 0x39
  4052ea:	223a      	movs	r2, #58	; 0x3a
  4052ec:	4623      	mov	r3, r4
  4052ee:	f7fd f9bd 	bl	40266c <_Z11lcd_putcAtthhhh>
  lcd_outdezNAtt(9*FW+2, TIME_LINE, frskyHubData.min, att, 2);
  4052f2:	f896 2947 	ldrb.w	r2, [r6, #2375]	; 0x947
  4052f6:	2038      	movs	r0, #56	; 0x38
  4052f8:	2139      	movs	r1, #57	; 0x39
  4052fa:	4623      	mov	r3, r4
  4052fc:	9500      	str	r5, [sp, #0]
  4052fe:	f7fd fc29 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  lcd_putcAtt(11*FW-1, TIME_LINE, ':', att);
  405302:	2041      	movs	r0, #65	; 0x41
  405304:	2139      	movs	r1, #57	; 0x39
  405306:	223a      	movs	r2, #58	; 0x3a
  405308:	4623      	mov	r3, r4
  40530a:	f7fd f9af 	bl	40266c <_Z11lcd_putcAtthhhh>
  lcd_outdezNAtt(12*FW-1, TIME_LINE, frskyHubData.sec, att, 2);
  40530e:	f9b6 2948 	ldrsh.w	r2, [r6, #2376]	; 0x948
  405312:	2139      	movs	r1, #57	; 0x39
  405314:	4623      	mov	r3, r4
  405316:	2047      	movs	r0, #71	; 0x47
  405318:	9500      	str	r5, [sp, #0]
  40531a:	f7fd fc1b 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  lcd_status_line();
  40531e:	23ff      	movs	r3, #255	; 0xff
  405320:	2000      	movs	r0, #0
  405322:	9300      	str	r3, [sp, #0]
  405324:	2138      	movs	r1, #56	; 0x38
  405326:	2280      	movs	r2, #128	; 0x80
  405328:	2308      	movs	r3, #8
  40532a:	9001      	str	r0, [sp, #4]
  40532c:	f7fd ff16 	bl	40315c <_Z15lcd_filled_recthahhhh>
}
  405330:	b002      	add	sp, #8
  405332:	bd70      	pop	{r4, r5, r6, pc}
  405334:	20000000 	.word	0x20000000
  405338:	20000108 	.word	0x20000108

0040533c <_Z15displayGpsCoordhcss>:

void displayGpsCoord(uint8_t y, char direction, int16_t bp, int16_t ap)
{
  40533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (frskyHubData.gpsFix >= 0) {
  405340:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4054c0 <_Z15displayGpsCoordhcss+0x184>
  lcd_outdezNAtt(12*FW-1, TIME_LINE, frskyHubData.sec, att, 2);
  lcd_status_line();
}

void displayGpsCoord(uint8_t y, char direction, int16_t bp, int16_t ap)
{
  405344:	4604      	mov	r4, r0
  if (frskyHubData.gpsFix >= 0) {
  405346:	f898 0966 	ldrb.w	r0, [r8, #2406]	; 0x966
  lcd_outdezNAtt(12*FW-1, TIME_LINE, frskyHubData.sec, att, 2);
  lcd_status_line();
}

void displayGpsCoord(uint8_t y, char direction, int16_t bp, int16_t ap)
{
  40534a:	4617      	mov	r7, r2
  if (frskyHubData.gpsFix >= 0) {
  40534c:	0742      	lsls	r2, r0, #29
  lcd_outdezNAtt(12*FW-1, TIME_LINE, frskyHubData.sec, att, 2);
  lcd_status_line();
}

void displayGpsCoord(uint8_t y, char direction, int16_t bp, int16_t ap)
{
  40534e:	b082      	sub	sp, #8
  405350:	460e      	mov	r6, r1
  405352:	469a      	mov	sl, r3
  if (frskyHubData.gpsFix >= 0) {
  405354:	f100 80a7 	bmi.w	4054a6 <_Z15displayGpsCoordhcss+0x16a>
    if (!direction) direction = '-';

    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
  405358:	f248 591f 	movw	r9, #34079	; 0x851f
  40535c:	f2c5 19eb 	movt	r9, #20971	; 0x51eb
  405360:	fb89 3907 	smull	r3, r9, r9, r7
  405364:	17fb      	asrs	r3, r7, #31
  405366:	ebc3 1969 	rsb	r9, r3, r9, asr #5
    lcd_putc(lcd_lastPos, y, '@');
  40536a:	4d53      	ldr	r5, [pc, #332]	; (4054b8 <_Z15displayGpsCoordhcss+0x17c>)
void displayGpsCoord(uint8_t y, char direction, int16_t bp, int16_t ap)
{
  if (frskyHubData.gpsFix >= 0) {
    if (!direction) direction = '-';

    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
  40536c:	fa0f f289 	sxth.w	r2, r9
  405370:	2380      	movs	r3, #128	; 0x80
  405372:	203c      	movs	r0, #60	; 0x3c
  405374:	4621      	mov	r1, r4
  405376:	f7fd fd5f 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    lcd_putc(lcd_lastPos, y, '@');
  40537a:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  40537e:	4621      	mov	r1, r4
  405380:	2240      	movs	r2, #64	; 0x40
  405382:	f7fd fa2f 	bl	4027e4 <_Z8lcd_putchhh>
    uint8_t mn = bp % 100;
  405386:	2364      	movs	r3, #100	; 0x64
  405388:	fb03 7919 	mls	r9, r3, r9, r7
    if (g_eeGeneral.gpsFormat == 0) {
  40538c:	f898 7071 	ldrb.w	r7, [r8, #113]	; 0x71
}

void displayGpsCoord(uint8_t y, char direction, int16_t bp, int16_t ap)
{
  if (frskyHubData.gpsFix >= 0) {
    if (!direction) direction = '-';
  405390:	2e00      	cmp	r6, #0
  405392:	bf08      	it	eq
  405394:	262d      	moveq	r6, #45	; 0x2d

    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
    if (g_eeGeneral.gpsFormat == 0) {
  405396:	f007 0740 	and.w	r7, r7, #64	; 0x40
  40539a:	b2ff      	uxtb	r7, r7
  if (frskyHubData.gpsFix >= 0) {
    if (!direction) direction = '-';

    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
  40539c:	fa5f f989 	uxtb.w	r9, r9
    if (g_eeGeneral.gpsFormat == 0) {
      lcd_putc(lcd_lastPos+FWNUM, y, direction);
  4053a0:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
    if (!direction) direction = '-';

    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
    if (g_eeGeneral.gpsFormat == 0) {
  4053a4:	2f00      	cmp	r7, #0
  4053a6:	d157      	bne.n	405458 <_Z15displayGpsCoordhcss+0x11c>
      lcd_putc(lcd_lastPos+FWNUM, y, direction);
  4053a8:	3005      	adds	r0, #5
  4053aa:	4621      	mov	r1, r4
  4053ac:	4632      	mov	r2, r6
  4053ae:	b2c0      	uxtb	r0, r0
  4053b0:	f7fd fa18 	bl	4027e4 <_Z8lcd_putchhh>
      lcd_outdezNAtt(lcd_lastPos+FW+FW+1, y, mn, LEFT|LEADING0, 2); // mm before '.'
  4053b4:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
      lcd_vline(lcd_lastPos, y, 2);
      uint16_t ss = ap * 6;
  4053b8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
    if (g_eeGeneral.gpsFormat == 0) {
      lcd_putc(lcd_lastPos+FWNUM, y, direction);
      lcd_outdezNAtt(lcd_lastPos+FW+FW+1, y, mn, LEFT|LEADING0, 2); // mm before '.'
  4053bc:	fa0f f289 	sxth.w	r2, r9
  4053c0:	300d      	adds	r0, #13
      lcd_vline(lcd_lastPos, y, 2);
      uint16_t ss = ap * 6;
  4053c2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
      lcd_outdezAtt(lcd_lastPos+3, y, ss / 1000, LEFT); // ''
  4053c6:	f644 59d3 	movw	r9, #19923	; 0x4dd3
    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
    if (g_eeGeneral.gpsFormat == 0) {
      lcd_putc(lcd_lastPos+FWNUM, y, direction);
      lcd_outdezNAtt(lcd_lastPos+FW+FW+1, y, mn, LEFT|LEADING0, 2); // mm before '.'
  4053ca:	2602      	movs	r6, #2
  4053cc:	2390      	movs	r3, #144	; 0x90
  4053ce:	4621      	mov	r1, r4
  4053d0:	b2c0      	uxtb	r0, r0
      lcd_vline(lcd_lastPos, y, 2);
      uint16_t ss = ap * 6;
  4053d2:	fa1f fa8a 	uxth.w	sl, sl
      lcd_outdezAtt(lcd_lastPos+3, y, ss / 1000, LEFT); // ''
  4053d6:	f2c1 0962 	movt	r9, #4194	; 0x1062
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
    if (g_eeGeneral.gpsFormat == 0) {
      lcd_putc(lcd_lastPos+FWNUM, y, direction);
      lcd_outdezNAtt(lcd_lastPos+FW+FW+1, y, mn, LEFT|LEADING0, 2); // mm before '.'
      lcd_vline(lcd_lastPos, y, 2);
  4053da:	fa4f f884 	sxtb.w	r8, r4
    lcd_outdezAtt(10*FW, y, bp / 100, LEFT); // ddd before '.'
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
    if (g_eeGeneral.gpsFormat == 0) {
      lcd_putc(lcd_lastPos+FWNUM, y, direction);
      lcd_outdezNAtt(lcd_lastPos+FW+FW+1, y, mn, LEFT|LEADING0, 2); // mm before '.'
  4053de:	9600      	str	r6, [sp, #0]
  4053e0:	f7fd fbb8 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
      lcd_vline(lcd_lastPos, y, 2);
      uint16_t ss = ap * 6;
      lcd_outdezAtt(lcd_lastPos+3, y, ss / 1000, LEFT); // ''
  4053e4:	fba9 390a 	umull	r3, r9, r9, sl
    lcd_putc(lcd_lastPos, y, '@');
    uint8_t mn = bp % 100;
    if (g_eeGeneral.gpsFormat == 0) {
      lcd_putc(lcd_lastPos+FWNUM, y, direction);
      lcd_outdezNAtt(lcd_lastPos+FW+FW+1, y, mn, LEFT|LEADING0, 2); // mm before '.'
      lcd_vline(lcd_lastPos, y, 2);
  4053e8:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  4053ec:	4641      	mov	r1, r8
  4053ee:	4632      	mov	r2, r6
  4053f0:	f7fd fbae 	bl	402b50 <_Z9lcd_vlinehaa>
      uint16_t ss = ap * 6;
      lcd_outdezAtt(lcd_lastPos+3, y, ss / 1000, LEFT); // ''
  4053f4:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  4053f8:	ea4f 1999 	mov.w	r9, r9, lsr #6
  4053fc:	3003      	adds	r0, #3
  4053fe:	2380      	movs	r3, #128	; 0x80
  405400:	fa0f f289 	sxth.w	r2, r9
  405404:	4621      	mov	r1, r4
  405406:	b2c0      	uxtb	r0, r0
  405408:	f7fd fd16 	bl	402e38 <_Z13lcd_outdezAtthhsh>
      lcd_plot(lcd_lastPos, y+FH-2, 0); // small decimal point
  40540c:	1da1      	adds	r1, r4, #6
  40540e:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  405412:	463a      	mov	r2, r7
  405414:	b2c9      	uxtb	r1, r1
  405416:	f7fd fa87 	bl	402928 <_Z8lcd_plothhh>
      lcd_outdezAtt(lcd_lastPos+2, y, ss % 1000, LEFT); // ''
  40541a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40541e:	fb02 aa19 	mls	sl, r2, r9, sl
  405422:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  405426:	fa0f f28a 	sxth.w	r2, sl
  40542a:	1980      	adds	r0, r0, r6
  40542c:	2380      	movs	r3, #128	; 0x80
  40542e:	4621      	mov	r1, r4
  405430:	b2c0      	uxtb	r0, r0
  405432:	f7fd fd01 	bl	402e38 <_Z13lcd_outdezAtthhsh>
      lcd_vline(lcd_lastPos, y, 2);
  405436:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  40543a:	4641      	mov	r1, r8
  40543c:	4632      	mov	r2, r6
  40543e:	f7fd fb87 	bl	402b50 <_Z9lcd_vlinehaa>
      lcd_vline(lcd_lastPos+2, y, 2);
  405442:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  405446:	4641      	mov	r1, r8
  405448:	1980      	adds	r0, r0, r6
  40544a:	b2c0      	uxtb	r0, r0
  40544c:	4632      	mov	r2, r6
  }
  else {
    // no fix
    lcd_puts(10*FW, y, STR_VCSWFUNC+1/*----*/);
  }
}
  40544e:	b002      	add	sp, #8
  405450:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      uint16_t ss = ap * 6;
      lcd_outdezAtt(lcd_lastPos+3, y, ss / 1000, LEFT); // ''
      lcd_plot(lcd_lastPos, y+FH-2, 0); // small decimal point
      lcd_outdezAtt(lcd_lastPos+2, y, ss % 1000, LEFT); // ''
      lcd_vline(lcd_lastPos, y, 2);
      lcd_vline(lcd_lastPos+2, y, 2);
  405454:	f7fd bb7c 	b.w	402b50 <_Z9lcd_vlinehaa>
    }
    else {
      lcd_outdezNAtt(lcd_lastPos+FW, y, mn, LEFT|LEADING0, 2); // mm before '.'
  405458:	3006      	adds	r0, #6
  40545a:	2390      	movs	r3, #144	; 0x90
  40545c:	2702      	movs	r7, #2
  40545e:	fa0f f289 	sxth.w	r2, r9
  405462:	4621      	mov	r1, r4
  405464:	b2c0      	uxtb	r0, r0
  405466:	9700      	str	r7, [sp, #0]
  405468:	f7fd fb74 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
      lcd_plot(lcd_lastPos, y+FH-2, 0); // small decimal point
  40546c:	1da1      	adds	r1, r4, #6
  40546e:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  405472:	2200      	movs	r2, #0
  405474:	b2c9      	uxtb	r1, r1
  405476:	f7fd fa57 	bl	402928 <_Z8lcd_plothhh>
      lcd_outdezNAtt(lcd_lastPos+2, y, ap, LEFT|UNSIGN|LEADING0, 4); // after '.'
  40547a:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  40547e:	4621      	mov	r1, r4
  405480:	19c0      	adds	r0, r0, r7
  405482:	4652      	mov	r2, sl
  405484:	b2c0      	uxtb	r0, r0
  405486:	2398      	movs	r3, #152	; 0x98
  405488:	2704      	movs	r7, #4
  40548a:	9700      	str	r7, [sp, #0]
  40548c:	f7fd fb62 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
      lcd_putc(lcd_lastPos+1, y, direction);
  405490:	f895 0a85 	ldrb.w	r0, [r5, #2693]	; 0xa85
  405494:	4621      	mov	r1, r4
  405496:	3001      	adds	r0, #1
  405498:	b2c0      	uxtb	r0, r0
  40549a:	4632      	mov	r2, r6
  }
  else {
    // no fix
    lcd_puts(10*FW, y, STR_VCSWFUNC+1/*----*/);
  }
}
  40549c:	b002      	add	sp, #8
  40549e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    }
    else {
      lcd_outdezNAtt(lcd_lastPos+FW, y, mn, LEFT|LEADING0, 2); // mm before '.'
      lcd_plot(lcd_lastPos, y+FH-2, 0); // small decimal point
      lcd_outdezNAtt(lcd_lastPos+2, y, ap, LEFT|UNSIGN|LEADING0, 4); // after '.'
      lcd_putc(lcd_lastPos+1, y, direction);
  4054a2:	f7fd b99f 	b.w	4027e4 <_Z8lcd_putchhh>
    }
  }
  else {
    // no fix
    lcd_puts(10*FW, y, STR_VCSWFUNC+1/*----*/);
  4054a6:	4a05      	ldr	r2, [pc, #20]	; (4054bc <_Z15displayGpsCoordhcss+0x180>)
  4054a8:	203c      	movs	r0, #60	; 0x3c
  4054aa:	4621      	mov	r1, r4
  }
}
  4054ac:	b002      	add	sp, #8
  4054ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      lcd_putc(lcd_lastPos+1, y, direction);
    }
  }
  else {
    // no fix
    lcd_puts(10*FW, y, STR_VCSWFUNC+1/*----*/);
  4054b2:	f7fd ba09 	b.w	4028c8 <_Z8lcd_putshhPKc>
  4054b6:	bf00      	nop
  4054b8:	20001200 	.word	0x20001200
  4054bc:	00410438 	.word	0x00410438
  4054c0:	20000108 	.word	0x20000108

004054c4 <_Z19getTelemCustomFieldhh>:
}
#endif

uint8_t getTelemCustomField(uint8_t line, uint8_t col)
{
  uint8_t result = (col==0 ? (g_model.frskyLines[line] & 0x0f) : ((g_model.frskyLines[line] & 0xf0) / 16));
  4054c4:	4b0f      	ldr	r3, [pc, #60]	; (405504 <_Z19getTelemCustomFieldhh+0x40>)
  4054c6:	181a      	adds	r2, r3, r0
  4054c8:	f892 286e 	ldrb.w	r2, [r2, #2158]	; 0x86e
  4054cc:	b161      	cbz	r1, 4054e8 <_Z19getTelemCustomFieldhh+0x24>
  result += (((g_model.frskyLinesXtra >> (4*line+2*col)) & 0x03) * 16);
  4054ce:	f8b3 3872 	ldrh.w	r3, [r3, #2162]	; 0x872
  4054d2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
  4054d6:	0040      	lsls	r0, r0, #1
  4054d8:	fa53 f000 	asrs.w	r0, r3, r0
}
#endif

uint8_t getTelemCustomField(uint8_t line, uint8_t col)
{
  uint8_t result = (col==0 ? (g_model.frskyLines[line] & 0x0f) : ((g_model.frskyLines[line] & 0xf0) / 16));
  4054dc:	0912      	lsrs	r2, r2, #4
  result += (((g_model.frskyLinesXtra >> (4*line+2*col)) & 0x03) * 16);
  4054de:	f000 0003 	and.w	r0, r0, #3
  return result;
  4054e2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
}
  4054e6:	4770      	bx	lr
#endif

uint8_t getTelemCustomField(uint8_t line, uint8_t col)
{
  uint8_t result = (col==0 ? (g_model.frskyLines[line] & 0x0f) : ((g_model.frskyLines[line] & 0xf0) / 16));
  result += (((g_model.frskyLinesXtra >> (4*line+2*col)) & 0x03) * 16);
  4054e8:	f8b3 3872 	ldrh.w	r3, [r3, #2162]	; 0x872
  4054ec:	eb01 0040 	add.w	r0, r1, r0, lsl #1
  4054f0:	0040      	lsls	r0, r0, #1
  4054f2:	fa53 f000 	asrs.w	r0, r3, r0
}
#endif

uint8_t getTelemCustomField(uint8_t line, uint8_t col)
{
  uint8_t result = (col==0 ? (g_model.frskyLines[line] & 0x0f) : ((g_model.frskyLines[line] & 0xf0) / 16));
  4054f6:	f002 020f 	and.w	r2, r2, #15
  result += (((g_model.frskyLinesXtra >> (4*line+2*col)) & 0x03) * 16);
  4054fa:	f000 0003 	and.w	r0, r0, #3
  return result;
  4054fe:	eb02 1000 	add.w	r0, r2, r0, lsl #4
}
  405502:	4770      	bx	lr
  405504:	20000108 	.word	0x20000108

00405508 <_Z17getRssiAlarmValueh>:

NOINLINE uint8_t getRssiAlarmValue(uint8_t alarm)
{
  return (50 + g_model.frsky.rssiAlarms[alarm].value);
  405508:	f240 1308 	movw	r3, #264	; 0x108
  40550c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405510:	181b      	adds	r3, r3, r0
  405512:	f893 0869 	ldrb.w	r0, [r3, #2153]	; 0x869
  405516:	f340 0085 	sbfx	r0, r0, #2, #6
  40551a:	3032      	adds	r0, #50	; 0x32
  40551c:	b2c0      	uxtb	r0, r0
}
  40551e:	4770      	bx	lr

00405520 <_Z15displayRssiLinev>:
};

static uint8_t s_frsky_view = e_frsky_custom;

void displayRssiLine()
{
  405520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (frskyStreaming > 0) {
  405524:	4b42      	ldr	r3, [pc, #264]	; (405630 <_Z15displayRssiLinev+0x110>)
};

static uint8_t s_frsky_view = e_frsky_custom;

void displayRssiLine()
{
  405526:	b082      	sub	sp, #8
  if (frskyStreaming > 0) {
  405528:	f993 30fa 	ldrsb.w	r3, [r3, #250]	; 0xfa
  40552c:	2b00      	cmp	r3, #0
  40552e:	dd6e      	ble.n	40560e <_Z15displayRssiLinev+0xee>
    lcd_hline(0, 55, 128, 0); // separator
    lcd_putsLeft(7*FH+1, STR_TX); lcd_outdezNAtt(4*FW, 7*FH+1, frskyRSSI[1].value, LEADING0, 2);
  405530:	4d40      	ldr	r5, [pc, #256]	; (405634 <_Z15displayRssiLinev+0x114>)
static uint8_t s_frsky_view = e_frsky_custom;

void displayRssiLine()
{
  if (frskyStreaming > 0) {
    lcd_hline(0, 55, 128, 0); // separator
  405532:	2280      	movs	r2, #128	; 0x80
  405534:	2000      	movs	r0, #0
  405536:	2137      	movs	r1, #55	; 0x37
  405538:	f7fd fa5a 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
    lcd_putsLeft(7*FH+1, STR_TX); lcd_outdezNAtt(4*FW, 7*FH+1, frskyRSSI[1].value, LEADING0, 2);
  40553c:	2039      	movs	r0, #57	; 0x39
  40553e:	493e      	ldr	r1, [pc, #248]	; (405638 <_Z15displayRssiLinev+0x118>)
  405540:	f7fd f9c4 	bl	4028cc <_Z12lcd_putsLefthPKc>
  405544:	2702      	movs	r7, #2
  405546:	f895 2916 	ldrb.w	r2, [r5, #2326]	; 0x916
  40554a:	2018      	movs	r0, #24
  40554c:	2139      	movs	r1, #57	; 0x39
  40554e:	2310      	movs	r3, #16
    lcd_rect(25, 57, 38, 7);
  405550:	2400      	movs	r4, #0
  405552:	f04f 08ff 	mov.w	r8, #255	; 0xff

void displayRssiLine()
{
  if (frskyStreaming > 0) {
    lcd_hline(0, 55, 128, 0); // separator
    lcd_putsLeft(7*FH+1, STR_TX); lcd_outdezNAtt(4*FW, 7*FH+1, frskyRSSI[1].value, LEADING0, 2);
  405556:	9700      	str	r7, [sp, #0]
  405558:	f7fd fafc 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
    lcd_rect(25, 57, 38, 7);
  40555c:	2226      	movs	r2, #38	; 0x26
  40555e:	2139      	movs	r1, #57	; 0x39
  405560:	2307      	movs	r3, #7
  405562:	2019      	movs	r0, #25
  405564:	f8cd 8000 	str.w	r8, [sp]
  405568:	9401      	str	r4, [sp, #4]
  40556a:	f7fd fccd 	bl	402f08 <_Z8lcd_recthhhhhh>
    lcd_filled_rect(26, 58, 9*frskyRSSI[1].value/25, 5, (frskyRSSI[1].value < getRssiAlarmValue(0)) ? DOTTED : SOLID);
  40556e:	4620      	mov	r0, r4
  405570:	f7ff ffca 	bl	405508 <_Z17getRssiAlarmValueh>
  405574:	f895 9916 	ldrb.w	r9, [r5, #2326]	; 0x916
  405578:	f248 561f 	movw	r6, #34079	; 0x851f
  40557c:	f2c5 16eb 	movt	r6, #20971	; 0x51eb
  405580:	eb09 0ac9 	add.w	sl, r9, r9, lsl #3
  405584:	fb86 2a0a 	smull	r2, sl, r6, sl
  405588:	f3ca 0ac7 	ubfx	sl, sl, #3, #8
  40558c:	4581      	cmp	r9, r0
  40558e:	bf2c      	ite	cs
  405590:	46c6      	movcs	lr, r8
  405592:	f04f 0e55 	movcc.w	lr, #85	; 0x55
  405596:	2305      	movs	r3, #5
  405598:	201a      	movs	r0, #26
  40559a:	213a      	movs	r1, #58	; 0x3a
  40559c:	4652      	mov	r2, sl
  40559e:	f8cd e000 	str.w	lr, [sp]
  4055a2:	9401      	str	r4, [sp, #4]
  4055a4:	f7fd fdda 	bl	40315c <_Z15lcd_filled_recthahhhh>
    lcd_puts(105, 7*FH+1, STR_RX); lcd_outdezNAtt(105+4*FW-1, 7*FH+1, frskyRSSI[0].value, LEADING0, 2);
  4055a8:	2069      	movs	r0, #105	; 0x69
  4055aa:	2139      	movs	r1, #57	; 0x39
  4055ac:	4a23      	ldr	r2, [pc, #140]	; (40563c <_Z15displayRssiLinev+0x11c>)
  4055ae:	f7fd f98b 	bl	4028c8 <_Z8lcd_putshhPKc>
  4055b2:	f895 2914 	ldrb.w	r2, [r5, #2324]	; 0x914
  4055b6:	2139      	movs	r1, #57	; 0x39
  4055b8:	2310      	movs	r3, #16
  4055ba:	2080      	movs	r0, #128	; 0x80
  4055bc:	9700      	str	r7, [sp, #0]
  4055be:	f7fd fac9 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
    lcd_rect(65, 57, 38, 7);
  4055c2:	2226      	movs	r2, #38	; 0x26
  4055c4:	2139      	movs	r1, #57	; 0x39
  4055c6:	2307      	movs	r3, #7
  4055c8:	2041      	movs	r0, #65	; 0x41
  4055ca:	f8cd 8000 	str.w	r8, [sp]
  4055ce:	9401      	str	r4, [sp, #4]
  4055d0:	f7fd fc9a 	bl	402f08 <_Z8lcd_recthhhhhh>
    uint8_t v = 9*frskyRSSI[0].value/25;
  4055d4:	f895 5914 	ldrb.w	r5, [r5, #2324]	; 0x914
    lcd_filled_rect(66+36-v, 58, v, 5, (frskyRSSI[0].value < getRssiAlarmValue(0)) ? DOTTED : SOLID);
  4055d8:	4620      	mov	r0, r4
    lcd_putsLeft(7*FH+1, STR_TX); lcd_outdezNAtt(4*FW, 7*FH+1, frskyRSSI[1].value, LEADING0, 2);
    lcd_rect(25, 57, 38, 7);
    lcd_filled_rect(26, 58, 9*frskyRSSI[1].value/25, 5, (frskyRSSI[1].value < getRssiAlarmValue(0)) ? DOTTED : SOLID);
    lcd_puts(105, 7*FH+1, STR_RX); lcd_outdezNAtt(105+4*FW-1, 7*FH+1, frskyRSSI[0].value, LEADING0, 2);
    lcd_rect(65, 57, 38, 7);
    uint8_t v = 9*frskyRSSI[0].value/25;
  4055da:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
  4055de:	fb86 2603 	smull	r2, r6, r6, r3
    lcd_filled_rect(66+36-v, 58, v, 5, (frskyRSSI[0].value < getRssiAlarmValue(0)) ? DOTTED : SOLID);
  4055e2:	f7ff ff91 	bl	405508 <_Z17getRssiAlarmValueh>
    lcd_putsLeft(7*FH+1, STR_TX); lcd_outdezNAtt(4*FW, 7*FH+1, frskyRSSI[1].value, LEADING0, 2);
    lcd_rect(25, 57, 38, 7);
    lcd_filled_rect(26, 58, 9*frskyRSSI[1].value/25, 5, (frskyRSSI[1].value < getRssiAlarmValue(0)) ? DOTTED : SOLID);
    lcd_puts(105, 7*FH+1, STR_RX); lcd_outdezNAtt(105+4*FW-1, 7*FH+1, frskyRSSI[0].value, LEADING0, 2);
    lcd_rect(65, 57, 38, 7);
    uint8_t v = 9*frskyRSSI[0].value/25;
  4055e6:	f3c6 06c7 	ubfx	r6, r6, #3, #8
    lcd_filled_rect(66+36-v, 58, v, 5, (frskyRSSI[0].value < getRssiAlarmValue(0)) ? DOTTED : SOLID);
  4055ea:	f1c6 0766 	rsb	r7, r6, #102	; 0x66
  4055ee:	b2ff      	uxtb	r7, r7
  4055f0:	4285      	cmp	r5, r0
  4055f2:	bf2c      	ite	cs
  4055f4:	4645      	movcs	r5, r8
  4055f6:	2555      	movcc	r5, #85	; 0x55
  4055f8:	213a      	movs	r1, #58	; 0x3a
  4055fa:	4638      	mov	r0, r7
  4055fc:	4632      	mov	r2, r6
  4055fe:	2305      	movs	r3, #5
  405600:	9500      	str	r5, [sp, #0]
  405602:	9401      	str	r4, [sp, #4]
  405604:	f7fd fdaa 	bl	40315c <_Z15lcd_filled_recthahhhh>
  }
  else {
    lcd_putsAtt(7*FW, 7*FH+1, STR_NODATA, BLINK);
    lcd_status_line();
  }
}
  405608:	b002      	add	sp, #8
  40560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lcd_rect(65, 57, 38, 7);
    uint8_t v = 9*frskyRSSI[0].value/25;
    lcd_filled_rect(66+36-v, 58, v, 5, (frskyRSSI[0].value < getRssiAlarmValue(0)) ? DOTTED : SOLID);
  }
  else {
    lcd_putsAtt(7*FW, 7*FH+1, STR_NODATA, BLINK);
  40560e:	2139      	movs	r1, #57	; 0x39
  405610:	2301      	movs	r3, #1
  405612:	202a      	movs	r0, #42	; 0x2a
  405614:	4a0a      	ldr	r2, [pc, #40]	; (405640 <_Z15displayRssiLinev+0x120>)
  405616:	f7fd f94f 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
    lcd_status_line();
  40561a:	23ff      	movs	r3, #255	; 0xff
  40561c:	2000      	movs	r0, #0
  40561e:	9300      	str	r3, [sp, #0]
  405620:	2138      	movs	r1, #56	; 0x38
  405622:	2280      	movs	r2, #128	; 0x80
  405624:	2308      	movs	r3, #8
  405626:	9001      	str	r0, [sp, #4]
  405628:	f7fd fd98 	bl	40315c <_Z15lcd_filled_recthahhhh>
  40562c:	e7ec      	b.n	405608 <_Z15displayRssiLinev+0xe8>
  40562e:	bf00      	nop
  405630:	20000000 	.word	0x20000000
  405634:	20000108 	.word	0x20000108
  405638:	004107c8 	.word	0x004107c8
  40563c:	004107cc 	.word	0x004107cc
  405640:	004107d0 	.word	0x004107d0

00405644 <_Z9buzzer_onv>:
}

#ifdef REVB
void buzzer_on()
{
	PIOA->PIO_SODR = 0x02000000L ;	// Set bit A25 ON
  405644:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  405648:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40564c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405650:	631a      	str	r2, [r3, #48]	; 0x30
}
  405652:	4770      	bx	lr

00405654 <_Z10buzzer_offv>:

void buzzer_off()
{
	PIOA->PIO_CODR = 0x02000000L ;	// Set bit A25 ON
  405654:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  405658:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40565c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405660:	635a      	str	r2, [r3, #52]	; 0x34
}
  405662:	4770      	bx	lr

00405664 <_Z12buzzer_soundh>:
}

#ifdef REVB
void buzzer_on()
{
	PIOA->PIO_SODR = 0x02000000L ;	// Set bit A25 ON
  405664:	f44f 6260 	mov.w	r2, #3584	; 0xe00
#endif

void buzzer_sound( uint8_t time )
{
	buzzer_on() ;
	Buzzer_count = time ;
  405668:	f241 2300 	movw	r3, #4608	; 0x1200
}

#ifdef REVB
void buzzer_on()
{
	PIOA->PIO_SODR = 0x02000000L ;	// Set bit A25 ON
  40566c:	f2c4 020e 	movt	r2, #16398	; 0x400e
#endif

void buzzer_sound( uint8_t time )
{
	buzzer_on() ;
	Buzzer_count = time ;
  405670:	f2c2 0300 	movt	r3, #8192	; 0x2000
}

#ifdef REVB
void buzzer_on()
{
	PIOA->PIO_SODR = 0x02000000L ;	// Set bit A25 ON
  405674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405678:	6311      	str	r1, [r2, #48]	; 0x30
#endif

void buzzer_sound( uint8_t time )
{
	buzzer_on() ;
	Buzzer_count = time ;
  40567a:	f883 0b14 	strb.w	r0, [r3, #2836]	; 0xb14
}
  40567e:	4770      	bx	lr

00405680 <_Z13set_frequencym>:
void set_frequency( uint32_t frequency )
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
  405680:	f44f 7348 	mov.w	r3, #800	; 0x320
  405684:	fb03 f000 	mul.w	r0, r3, r0
  405688:	4b0d      	ldr	r3, [pc, #52]	; (4056c0 <_Z13set_frequencym+0x40>)
  40568a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	if ( timer > 65535 )
  40568e:	f64f 73ff 	movw	r3, #65535	; 0xffff
void set_frequency( uint32_t frequency )
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
  405692:	fbb2 f0f0 	udiv	r0, r2, r0
	if ( timer > 65535 )
  405696:	4298      	cmp	r0, r3
  405698:	bf84      	itt	hi
  40569a:	f647 71ff 	movwhi	r1, #32767	; 0x7fff
	{
		timer = 65535 ;		
  40569e:	4618      	movhi	r0, r3
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
	if ( timer > 65535 )
  4056a0:	d804      	bhi.n	4056ac <_Z13set_frequencym+0x2c>
	{
		timer = 65535 ;		
	}
	if ( timer < 2 )
  4056a2:	0841      	lsrs	r1, r0, #1
  4056a4:	2801      	cmp	r0, #1
  4056a6:	d801      	bhi.n	4056ac <_Z13set_frequencym+0x2c>
  4056a8:	2101      	movs	r1, #1
	{
		timer = 2 ;		
  4056aa:	2002      	movs	r0, #2
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
  4056ac:	2300      	movs	r3, #0
  4056ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4056b2:	2202      	movs	r2, #2
  4056b4:	641a      	str	r2, [r3, #64]	; 0x40
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
	ptc->TC_CHANNEL[1].TC_CCR = 5 ;		// Enable clock and trigger it (may only need trigger)
  4056b6:	2205      	movs	r2, #5
	{
		timer = 2 ;		
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
  4056b8:	65d8      	str	r0, [r3, #92]	; 0x5c
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  4056ba:	6559      	str	r1, [r3, #84]	; 0x54
	ptc->TC_CHANNEL[1].TC_CCR = 5 ;		// Enable clock and trigger it (may only need trigger)
  4056bc:	641a      	str	r2, [r3, #64]	; 0x40
}
  4056be:	4770      	bx	lr
  4056c0:	20000108 	.word	0x20000108

004056c4 <_Z12start_timer1v>:


// Start TIMER1 at 100000Hz, used for DACC trigger
void start_timer1()
{
  4056c4:	b430      	push	{r4, r5}
  register Tc *ptc ;
	register uint32_t timer ;

	// Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x01000000L ;		// Enable peripheral clock to TC1
  4056c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4056ca:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4056ce:	6919      	ldr	r1, [r3, #16]
  
	timer = Master_frequency / 800000 ;		// MCK/8 and 100 000 Hz
  4056d0:	f240 1208 	movw	r2, #264	; 0x108
{
  register Tc *ptc ;
	register uint32_t timer ;

	// Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x01000000L ;		// Enable peripheral clock to TC1
  4056d4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4056d8:	6119      	str	r1, [r3, #16]
  
	timer = Master_frequency / 800000 ;		// MCK/8 and 100 000 Hz
  4056da:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4056de:	f8d2 409c 	ldr.w	r4, [r2, #156]	; 0x9c
  4056e2:	f648 3359 	movw	r3, #35673	; 0x8b59
  4056e6:	f2c0 134f 	movt	r3, #335	; 0x14f
  4056ea:	0a24      	lsrs	r4, r4, #8
  4056ec:	fba3 1404 	umull	r1, r4, r3, r4
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_BCR = 0 ;			// No sync
  4056f0:	2300      	movs	r3, #0
  4056f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4056f6:	2000      	movs	r0, #0
	ptc->TC_BMR = 0 ;
	ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;	// Waveform mode
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
	ptc->TC_CHANNEL[1].TC_CMR = 0x0009C001 ;	// 0000 0000 0000 1001 1100 0000 0000 0001
  4056f8:	f24c 0101 	movw	r1, #49153	; 0xc001
	// Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x01000000L ;		// Enable peripheral clock to TC1
  
	timer = Master_frequency / 800000 ;		// MCK/8 and 100 000 Hz
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_BCR = 0 ;			// No sync
  4056fc:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	register uint32_t timer ;

	// Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x01000000L ;		// Enable peripheral clock to TC1
  
	timer = Master_frequency / 800000 ;		// MCK/8 and 100 000 Hz
  405700:	0925      	lsrs	r5, r4, #4
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_BCR = 0 ;			// No sync
	ptc->TC_BMR = 0 ;
  405702:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
	ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;	// Waveform mode
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
	ptc->TC_CHANNEL[1].TC_CMR = 0x0009C001 ;	// 0000 0000 0000 1001 1100 0000 0000 0001
  405706:	f2c0 0109 	movt	r1, #9
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_BCR = 0 ;			// No sync
	ptc->TC_BMR = 0 ;
	ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;	// Waveform mode
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  40570a:	0964      	lsrs	r4, r4, #5
  
	timer = Master_frequency / 800000 ;		// MCK/8 and 100 000 Hz
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_BCR = 0 ;			// No sync
	ptc->TC_BMR = 0 ;
	ptc->TC_CHANNEL[1].TC_CMR = 0x00008000 ;	// Waveform mode
  40570c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  405710:	6458      	str	r0, [r3, #68]	; 0x44
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
  405712:	65dd      	str	r5, [r3, #92]	; 0x5c
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  405714:	655c      	str	r4, [r3, #84]	; 0x54
	ptc->TC_CHANNEL[1].TC_CMR = 0x0009C001 ;	// 0000 0000 0000 1001 1100 0000 0000 0001
  405716:	6459      	str	r1, [r3, #68]	; 0x44
																						// MCK/8, set @ RA, Clear @ RC waveform
	ptc->TC_CHANNEL[1].TC_CCR = 5 ;		// Enable clock and trigger it (may only need trigger)
  405718:	2105      	movs	r1, #5
  40571a:	6419      	str	r1, [r3, #64]	; 0x40
	Sound_g.Frequency = 1000 ;
  40571c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  405720:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
  405724:	bc30      	pop	{r4, r5}
  405726:	4770      	bx	lr

00405728 <_Z8init_dacv>:

// Configure DAC1 (or DAC0 for REVB)
// Not sure why PB14 has not be allocated to the DAC, although it is an EXTRA function
// So maybe it is automatically done
void init_dac()
{
  405728:	b470      	push	{r4, r5, r6}
	register Dacc *dacptr ;

  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  40572a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40572e:	f2c4 010e 	movt	r1, #16398	; 0x400e
  405732:	690e      	ldr	r6, [r1, #16]
	dacptr = DACC ;
#ifdef REVB
	dacptr->DACC_MR = 0x0B000215L ;			// 0000 1011 0000 0001 0000 0010 0001 0101
  405734:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  405738:	f240 2515 	movw	r5, #533	; 0x215
// So maybe it is automatically done
void init_dac()
{
	register Dacc *dacptr ;

  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  40573c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  405740:	610e      	str	r6, [r1, #16]
	dacptr = DACC ;
#ifdef REVB
	dacptr->DACC_MR = 0x0B000215L ;			// 0000 1011 0000 0001 0000 0010 0001 0101
  405742:	f2c4 0303 	movt	r3, #16387	; 0x4003
#else
	dacptr->DACC_MR = 0x0B010215L ;			// 0000 1011 0000 0001 0000 0010 0001 0101
#endif
#ifdef REVB
	dacptr->DACC_CHER	= 1 ;							// Enable channel 0
  405746:	2101      	movs	r1, #1
	dacptr->DACC_CHER	= 2 ;							// Enable channel 1
#endif
	dacptr->DACC_CDR = 2048 ;						// Half amplitude
// Data for PDC must NOT be in flash, PDC needs a RAM source.
#ifndef SIMU
	dacptr->DACC_TPR = (uint32_t) Sine_values ;
  405748:	f240 0200 	movw	r2, #0
	register Dacc *dacptr ;

  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
	dacptr = DACC ;
#ifdef REVB
	dacptr->DACC_MR = 0x0B000215L ;			// 0000 1011 0000 0001 0000 0010 0001 0101
  40574c:	f6c0 3500 	movt	r5, #2816	; 0xb00
  405750:	605d      	str	r5, [r3, #4]
	dacptr->DACC_CHER	= 2 ;							// Enable channel 1
#endif
	dacptr->DACC_CDR = 2048 ;						// Half amplitude
// Data for PDC must NOT be in flash, PDC needs a RAM source.
#ifndef SIMU
	dacptr->DACC_TPR = (uint32_t) Sine_values ;
  405752:	f2c2 0200 	movt	r2, #8192	; 0x2000
	dacptr->DACC_MR = 0x0B000215L ;			// 0000 1011 0000 0001 0000 0010 0001 0101
#else
	dacptr->DACC_MR = 0x0B010215L ;			// 0000 1011 0000 0001 0000 0010 0001 0101
#endif
#ifdef REVB
	dacptr->DACC_CHER	= 1 ;							// Enable channel 0
  405756:	6119      	str	r1, [r3, #16]
#else
	dacptr->DACC_CHER	= 2 ;							// Enable channel 1
#endif
	dacptr->DACC_CDR = 2048 ;						// Half amplitude
  405758:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40575c:	6219      	str	r1, [r3, #32]
// Data for PDC must NOT be in flash, PDC needs a RAM source.
#ifndef SIMU
	dacptr->DACC_TPR = (uint32_t) Sine_values ;
	dacptr->DACC_TNPR = (uint32_t) Sine_values ;
#endif
	dacptr->DACC_TCR = 50 ;		// words, 100 16 bit values
  40575e:	2432      	movs	r4, #50	; 0x32
	dacptr->DACC_CHER	= 2 ;							// Enable channel 1
#endif
	dacptr->DACC_CDR = 2048 ;						// Half amplitude
// Data for PDC must NOT be in flash, PDC needs a RAM source.
#ifndef SIMU
	dacptr->DACC_TPR = (uint32_t) Sine_values ;
  405760:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  405764:	f44f 4061 	mov.w	r0, #57600	; 0xe100
	dacptr->DACC_TNPR = (uint32_t) Sine_values ;
  405768:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#endif
	dacptr->DACC_TCR = 50 ;		// words, 100 16 bit values
	dacptr->DACC_TNCR = 50 ;	// words, 100 16 bit values
	dacptr->DACC_PTCR = DACC_PTCR_TXTEN ;
  40576c:	f44f 7280 	mov.w	r2, #256	; 0x100
// Data for PDC must NOT be in flash, PDC needs a RAM source.
#ifndef SIMU
	dacptr->DACC_TPR = (uint32_t) Sine_values ;
	dacptr->DACC_TNPR = (uint32_t) Sine_values ;
#endif
	dacptr->DACC_TCR = 50 ;		// words, 100 16 bit values
  405770:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
  405774:	f2ce 0000 	movt	r0, #57344	; 0xe000
	dacptr->DACC_TNCR = 50 ;	// words, 100 16 bit values
  405778:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
	dacptr->DACC_PTCR = DACC_PTCR_TXTEN ;
  40577c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  405780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405784:	6003      	str	r3, [r0, #0]
	NVIC_EnableIRQ(DACC_IRQn) ;
}
  405786:	bc70      	pop	{r4, r5, r6}
  405788:	4770      	bx	lr
  40578a:	bf00      	nop

0040578c <_Z9end_soundv>:
//	}
}

void end_sound()
{
	DACC->DACC_IDR = DACC_IDR_ENDTX ;
  40578c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
//		DACC->DACC_IDR = DACC_IDR_ENDTX ;
//	}
}

void end_sound()
{
  405790:	b410      	push	{r4}
	DACC->DACC_IDR = DACC_IDR_ENDTX ;
  405792:	f2c4 0003 	movt	r0, #16387	; 0x4003
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405796:	f44f 4261 	mov.w	r2, #57600	; 0xe100
  40579a:	2404      	movs	r4, #4
  40579c:	6284      	str	r4, [r0, #40]	; 0x28
  40579e:	f2ce 0200 	movt	r2, #57344	; 0xe000
  4057a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	NVIC_DisableIRQ(DACC_IRQn) ;
	TWI0->TWI_IDR = TWI_IDR_TXCOMP ;
  4057a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4057aa:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
  4057ae:	f2c4 0101 	movt	r1, #16385	; 0x4001
  4057b2:	2001      	movs	r0, #1
  4057b4:	6288      	str	r0, [r1, #40]	; 0x28
	NVIC_DisableIRQ(TWI0_IRQn) ;
	PMC->PMC_PCER0 &= ~0x00080000L ;		// Disable peripheral clock to TWI0
  4057b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4057ba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4057be:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4057c2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  4057c6:	691a      	ldr	r2, [r3, #16]
  4057c8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  4057cc:	611a      	str	r2, [r3, #16]
  PMC->PMC_PCER0 &= ~0x40000000L ;		// Disable peripheral clock to DAC
  4057ce:	691a      	ldr	r2, [r3, #16]
  4057d0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4057d4:	611a      	str	r2, [r3, #16]
}
  4057d6:	bc10      	pop	{r4}
  4057d8:	4770      	bx	lr
  4057da:	bf00      	nop

004057dc <_Z9sound_5msv>:

// Called every 5mS from interrupt routine
void sound_5ms()
{
  4057dc:	b430      	push	{r4, r5}
	if ( Sound_g.Tone_ms_timer > 0 )
  4057de:	4b4f      	ldr	r3, [pc, #316]	; (40591c <_Z9sound_5msv+0x140>)
  4057e0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
  4057e4:	b12a      	cbz	r2, 4057f2 <_Z9sound_5msv+0x16>
	{
		Sound_g.Tone_ms_timer -= 1 ;
  4057e6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
  4057ea:	3a01      	subs	r2, #1
  4057ec:	b2d2      	uxtb	r2, r2
  4057ee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	}
		
	if ( Sound_g.Tone_ms_timer == 0 )
  4057f2:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
  4057f6:	4a49      	ldr	r2, [pc, #292]	; (40591c <_Z9sound_5msv+0x140>)
  4057f8:	2900      	cmp	r1, #0
  4057fa:	d14d      	bne.n	405898 <_Z9sound_5msv+0xbc>
	{
		if ( Sound_g.Sound_time )
  4057fc:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
  405800:	2900      	cmp	r1, #0
  405802:	d077      	beq.n	4058f4 <_Z9sound_5msv+0x118>
		{
			Sound_g.Tone_ms_timer = ( Sound_g.Sound_time + 4 ) / 5 ;
  405804:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
  405808:	f64c 41cd 	movw	r1, #52429	; 0xcccd
  40580c:	3004      	adds	r0, #4
  40580e:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
  405812:	fba1 4100 	umull	r4, r1, r1, r0
			if ( Sound_g.Next_freq )		// 0 => silence for time
  405816:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
		
	if ( Sound_g.Tone_ms_timer == 0 )
	{
		if ( Sound_g.Sound_time )
		{
			Sound_g.Tone_ms_timer = ( Sound_g.Sound_time + 4 ) / 5 ;
  405818:	f3c1 0187 	ubfx	r1, r1, #2, #8
  40581c:	f882 108c 	strb.w	r1, [r2, #140]	; 0x8c
			if ( Sound_g.Next_freq )		// 0 => silence for time
  405820:	2800      	cmp	r0, #0
  405822:	d070      	beq.n	405906 <_Z9sound_5msv+0x12a>
void set_frequency( uint32_t frequency )
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
  405824:	f44f 7148 	mov.w	r1, #800	; 0x320
  405828:	fb01 f100 	mul.w	r1, r1, r0
  40582c:	f8d2 409c 	ldr.w	r4, [r2, #156]	; 0x9c
		{
			Sound_g.Tone_ms_timer = ( Sound_g.Sound_time + 4 ) / 5 ;
			if ( Sound_g.Next_freq )		// 0 => silence for time
			{
				Sound_g.Frequency = Sound_g.Next_freq ;
				Sound_g.Frequency_increment = Sound_g.Next_frequency_increment ;
  405830:	f8d2 5094 	ldr.w	r5, [r2, #148]	; 0x94
void set_frequency( uint32_t frequency )
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
  405834:	fbb4 f1f1 	udiv	r1, r4, r1
	if ( timer > 65535 )
  405838:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40583c:	42a1      	cmp	r1, r4
		{
			Sound_g.Tone_ms_timer = ( Sound_g.Sound_time + 4 ) / 5 ;
			if ( Sound_g.Next_freq )		// 0 => silence for time
			{
				Sound_g.Frequency = Sound_g.Next_freq ;
				Sound_g.Frequency_increment = Sound_g.Next_frequency_increment ;
  40583e:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
		if ( Sound_g.Sound_time )
		{
			Sound_g.Tone_ms_timer = ( Sound_g.Sound_time + 4 ) / 5 ;
			if ( Sound_g.Next_freq )		// 0 => silence for time
			{
				Sound_g.Frequency = Sound_g.Next_freq ;
  405842:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
	if ( timer > 65535 )
  405846:	bf84      	itt	hi
  405848:	f647 75ff 	movwhi	r5, #32767	; 0x7fff
	{
		timer = 65535 ;		
  40584c:	4621      	movhi	r1, r4
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
	if ( timer > 65535 )
  40584e:	d804      	bhi.n	40585a <_Z9sound_5msv+0x7e>
	{
		timer = 65535 ;		
	}
	if ( timer < 2 )
  405850:	084d      	lsrs	r5, r1, #1
  405852:	2901      	cmp	r1, #1
  405854:	d801      	bhi.n	40585a <_Z9sound_5msv+0x7e>
  405856:	2501      	movs	r5, #1
	{
		timer = 2 ;		
  405858:	2102      	movs	r1, #2
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
  40585a:	2200      	movs	r2, #0
  40585c:	f2c4 0201 	movt	r2, #16385	; 0x4001
  405860:	2402      	movs	r4, #2
  405862:	6414      	str	r4, [r2, #64]	; 0x40
}

// Time is in milliseconds
void tone_start( register uint32_t time )
{
  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  405864:	f44f 6080 	mov.w	r0, #1024	; 0x400
	{
		timer = 2 ;		
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
  405868:	65d1      	str	r1, [r2, #92]	; 0x5c
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
	ptc->TC_CHANNEL[1].TC_CCR = 5 ;		// Enable clock and trigger it (may only need trigger)
  40586a:	2105      	movs	r1, #5
		timer = 2 ;		
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  40586c:	6555      	str	r5, [r2, #84]	; 0x54
}

// Time is in milliseconds
void tone_start( register uint32_t time )
{
  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  40586e:	f2c4 000e 	movt	r0, #16398	; 0x400e
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
	ptc->TC_CHANNEL[1].TC_CCR = 5 ;		// Enable clock and trigger it (may only need trigger)
  405872:	6411      	str	r1, [r2, #64]	; 0x40
}

// Time is in milliseconds
void tone_start( register uint32_t time )
{
  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  405874:	6901      	ldr	r1, [r0, #16]
	Sound_g.Tone_timer = Sound_g.Frequency * time / 1000 ;
	DACC->DACC_IER = DACC_IER_ENDTX ;
  405876:	f44f 4240 	mov.w	r2, #49152	; 0xc000
}

// Time is in milliseconds
void tone_start( register uint32_t time )
{
  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  40587a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  40587e:	6101      	str	r1, [r0, #16]
	Sound_g.Tone_timer = Sound_g.Frequency * time / 1000 ;
  405880:	2100      	movs	r1, #0
  405882:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	DACC->DACC_IER = DACC_IER_ENDTX ;
  405886:	f2c4 0203 	movt	r2, #16387	; 0x4003
  40588a:	2104      	movs	r1, #4
  40588c:	6251      	str	r1, [r2, #36]	; 0x24
			}
			else
			{
				DACC->DACC_IDR = DACC_IDR_ENDTX ;		// Silence
			}
			Sound_g.Sound_time = 0 ;
  40588e:	2200      	movs	r2, #0
  405890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				Sound_g.Frequency += Sound_g.Frequency_increment ;
				set_frequency( Sound_g.Frequency ) ;
			}
		}
	}
}
  405894:	bc30      	pop	{r4, r5}
  405896:	4770      	bx	lr
		{
			DACC->DACC_IDR = DACC_IDR_ENDTX ;	// Disable interrupt
			Sound_g.Tone_timer = 0 ;	
		}
	}
	else if ( ( Sound_g.Tone_ms_timer & 1 ) == 0 )		// Every 10 mS
  405898:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
  40589c:	07d9      	lsls	r1, r3, #31
  40589e:	d4f9      	bmi.n	405894 <_Z9sound_5msv+0xb8>
	{
		if ( Sound_g.Frequency )
  4058a0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
  4058a4:	2b00      	cmp	r3, #0
  4058a6:	d0f5      	beq.n	405894 <_Z9sound_5msv+0xb8>
		{
			if ( Sound_g.Frequency_increment )
  4058a8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
  4058ac:	2900      	cmp	r1, #0
  4058ae:	d0f1      	beq.n	405894 <_Z9sound_5msv+0xb8>
			{
				Sound_g.Frequency += Sound_g.Frequency_increment ;
  4058b0:	18cb      	adds	r3, r1, r3
void set_frequency( uint32_t frequency )
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
  4058b2:	f44f 7148 	mov.w	r1, #800	; 0x320
  4058b6:	fb01 f103 	mul.w	r1, r1, r3
  4058ba:	f8d2 409c 	ldr.w	r4, [r2, #156]	; 0x9c
	if ( timer > 65535 )
  4058be:	f64f 70ff 	movw	r0, #65535	; 0xffff
void set_frequency( uint32_t frequency )
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
  4058c2:	fbb4 f1f1 	udiv	r1, r4, r1
	if ( timer > 65535 )
  4058c6:	4281      	cmp	r1, r0
	{
		if ( Sound_g.Frequency )
		{
			if ( Sound_g.Frequency_increment )
			{
				Sound_g.Frequency += Sound_g.Frequency_increment ;
  4058c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
	if ( timer > 65535 )
  4058cc:	bf84      	itt	hi
  4058ce:	f647 74ff 	movwhi	r4, #32767	; 0x7fff
	{
		timer = 65535 ;		
  4058d2:	4601      	movhi	r1, r0
{
  register Tc *ptc ;
	register uint32_t timer ;

	timer = Master_frequency / (800 * frequency) ;		// MCK/8 and 100 000 Hz
	if ( timer > 65535 )
  4058d4:	d804      	bhi.n	4058e0 <_Z9sound_5msv+0x104>
	{
		timer = 65535 ;		
	}
	if ( timer < 2 )
  4058d6:	084c      	lsrs	r4, r1, #1
  4058d8:	2901      	cmp	r1, #1
  4058da:	d801      	bhi.n	4058e0 <_Z9sound_5msv+0x104>
  4058dc:	2401      	movs	r4, #1
	{
		timer = 2 ;		
  4058de:	2102      	movs	r1, #2
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
  4058e0:	2300      	movs	r3, #0
  4058e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4058e6:	2202      	movs	r2, #2
  4058e8:	641a      	str	r2, [r3, #64]	; 0x40
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
	ptc->TC_CHANNEL[1].TC_CCR = 5 ;		// Enable clock and trigger it (may only need trigger)
  4058ea:	2205      	movs	r2, #5
	{
		timer = 2 ;		
	}
	ptc = TC0 ;		// Tc block 0 (TC0-2)
	ptc->TC_CHANNEL[1].TC_CCR = TC_CCR0_CLKDIS ;		// Stop clock
	ptc->TC_CHANNEL[1].TC_RC = timer ;			// 100 000 Hz
  4058ec:	65d9      	str	r1, [r3, #92]	; 0x5c
	ptc->TC_CHANNEL[1].TC_RA = timer >> 1 ;
  4058ee:	655c      	str	r4, [r3, #84]	; 0x54
	ptc->TC_CHANNEL[1].TC_CCR = 5 ;		// Enable clock and trigger it (may only need trigger)
  4058f0:	641a      	str	r2, [r3, #64]	; 0x40
  4058f2:	e7cf      	b.n	405894 <_Z9sound_5msv+0xb8>
			}
			Sound_g.Sound_time = 0 ;
		}
		else
		{
			DACC->DACC_IDR = DACC_IDR_ENDTX ;	// Disable interrupt
  4058f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  4058f8:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4058fc:	2004      	movs	r0, #4
  4058fe:	6298      	str	r0, [r3, #40]	; 0x28
			Sound_g.Tone_timer = 0 ;	
  405900:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  405904:	e7c6      	b.n	405894 <_Z9sound_5msv+0xb8>
				set_frequency( Sound_g.Frequency ) ;
				tone_start( 0 ) ;
			}
			else
			{
				DACC->DACC_IDR = DACC_IDR_ENDTX ;		// Silence
  405906:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  40590a:	f2c4 0203 	movt	r2, #16387	; 0x4003
  40590e:	2104      	movs	r1, #4
  405910:	6291      	str	r1, [r2, #40]	; 0x28
			}
			Sound_g.Sound_time = 0 ;
  405912:	2200      	movs	r2, #0
  405914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  405918:	e7bc      	b.n	405894 <_Z9sound_5msv+0xb8>
  40591a:	bf00      	nop
  40591c:	20000108 	.word	0x20000108

00405920 <_Z8playTonemm>:
}

// frequency in Hz, time in mS
void playTone( uint32_t frequency, uint32_t time )
{
	Sound_g.Next_frequency_increment = 0 ;
  405920:	f240 1308 	movw	r3, #264	; 0x108
  405924:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405928:	2200      	movs	r2, #0
  40592a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Sound_g.Next_freq = frequency ;
  40592e:	67d8      	str	r0, [r3, #124]	; 0x7c
	Sound_g.Sound_time = time ;
  405930:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
//	set_frequency( frequency ) ;
//	Tone_ms_timer = ( time + 4 ) / 5 ;
//	tone_start( 0 ) ;
}
  405934:	4770      	bx	lr
  405936:	bf00      	nop

00405938 <_Z9queueTonemmm>:

uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
  405938:	b410      	push	{r4}
	if ( Sound_g.Sound_time == 0 )
  40593a:	4b07      	ldr	r3, [pc, #28]	; (405958 <_Z9queueTonemmm+0x20>)
  40593c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  405940:	b93c      	cbnz	r4, 405952 <_Z9queueTonemmm+0x1a>
	{
		Sound_g.Next_freq = frequency ;
  405942:	67d8      	str	r0, [r3, #124]	; 0x7c
		Sound_g.Next_frequency_increment = frequency_increment ;
  405944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		Sound_g.Sound_time = time ;
  405948:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		return 1 ;
  40594c:	2001      	movs	r0, #1
	}
	return 0 ;	
}
  40594e:	bc10      	pop	{r4}
  405950:	4770      	bx	lr
		Sound_g.Next_freq = frequency ;
		Sound_g.Next_frequency_increment = frequency_increment ;
		Sound_g.Sound_time = time ;
		return 1 ;
	}
	return 0 ;	
  405952:	2000      	movs	r0, #0
  405954:	e7fb      	b.n	40594e <_Z9queueTonemmm+0x16>
  405956:	bf00      	nop
  405958:	20000108 	.word	0x20000108

0040595c <_Z10tone_startm>:
}

// Time is in milliseconds
void tone_start( register uint32_t time )
{
  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  40595c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405960:	f2c4 020e 	movt	r2, #16398	; 0x400e
  405964:	6911      	ldr	r1, [r2, #16]
	Sound_g.Tone_timer = Sound_g.Frequency * time / 1000 ;
  405966:	f240 1308 	movw	r3, #264	; 0x108
}

// Time is in milliseconds
void tone_start( register uint32_t time )
{
  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
  40596a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  40596e:	6111      	str	r1, [r2, #16]
	Sound_g.Tone_timer = Sound_g.Frequency * time / 1000 ;
  405970:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405974:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  405978:	f644 51d3 	movw	r1, #19923	; 0x4dd3
  40597c:	fb02 f200 	mul.w	r2, r2, r0
  405980:	f2c1 0162 	movt	r1, #4194	; 0x1062
  405984:	fba1 0202 	umull	r0, r2, r1, r2
	DACC->DACC_IER = DACC_IER_ENDTX ;
  405988:	f44f 4140 	mov.w	r1, #49152	; 0xc000

// Time is in milliseconds
void tone_start( register uint32_t time )
{
  PMC->PMC_PCER0 |= 0x40000000L ;		// Enable peripheral clock to DAC
	Sound_g.Tone_timer = Sound_g.Frequency * time / 1000 ;
  40598c:	0992      	lsrs	r2, r2, #6
  40598e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	DACC->DACC_IER = DACC_IER_ENDTX ;
  405992:	f2c4 0103 	movt	r1, #16387	; 0x4003
  405996:	2304      	movs	r3, #4
  405998:	624b      	str	r3, [r1, #36]	; 0x24
}
  40599a:	4770      	bx	lr

0040599c <_Z9tone_stopv>:

void tone_stop()
{
	DACC->DACC_IDR = DACC_IDR_ENDTX ;	// Disable interrupt
  40599c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  4059a0:	f2c4 0203 	movt	r2, #16387	; 0x4003
	Sound_g.Tone_timer = 0 ;	
  4059a4:	f240 1308 	movw	r3, #264	; 0x108
	DACC->DACC_IER = DACC_IER_ENDTX ;
}

void tone_stop()
{
	DACC->DACC_IDR = DACC_IDR_ENDTX ;	// Disable interrupt
  4059a8:	2104      	movs	r1, #4
  4059aa:	6291      	str	r1, [r2, #40]	; 0x28
	Sound_g.Tone_timer = 0 ;	
  4059ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4059b0:	2200      	movs	r2, #0
  4059b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
  4059b6:	4770      	bx	lr

004059b8 <_Z10set_volumeh>:
	
	if ( volume >= NUM_VOL_LEVELS )
	{
		volume = NUM_VOL_LEVELS - 1 ;		
	}
	volume = Volume_scale[volume] ;
  4059b8:	4b0d      	ldr	r3, [pc, #52]	; (4059f0 <_Z10set_volumeh+0x38>)
  4059ba:	2817      	cmp	r0, #23
  4059bc:	bf94      	ite	ls
  4059be:	1818      	addls	r0, r3, r0
  4059c0:	f103 0017 	addhi.w	r0, r3, #23
  4059c4:	f810 2c50 	ldrb.w	r2, [r0, #-80]

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq(void)              { __ASM volatile ("cpsid i"); }
  4059c8:	b672      	cpsid	i

	__disable_irq() ;
	if ( TWI0->TWI_IMR & TWI_IMR_TXCOMP )
  4059ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4059ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4059d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  4059d4:	07c8      	lsls	r0, r1, #31
  4059d6:	d406      	bmi.n	4059e6 <_Z10set_volumeh+0x2e>
	{
		Volume_required = volume ;
	}
	else
	{
		TWI0->TWI_THR = volume ;		// Send data
  4059d8:	635a      	str	r2, [r3, #52]	; 0x34
		TWI0->TWI_CR = TWI_CR_STOP ;		// Stop Tx
  4059da:	2202      	movs	r2, #2
  4059dc:	601a      	str	r2, [r3, #0]
		TWI0->TWI_IER = TWI_IER_TXCOMP ;
  4059de:	2201      	movs	r2, #1
  4059e0:	625a      	str	r2, [r3, #36]	; 0x24


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
  4059e2:	b662      	cpsie	i

	}
	__enable_irq() ;
}
  4059e4:	4770      	bx	lr
	volume = Volume_scale[volume] ;

	__disable_irq() ;
	if ( TWI0->TWI_IMR & TWI_IMR_TXCOMP )
	{
		Volume_required = volume ;
  4059e6:	4b03      	ldr	r3, [pc, #12]	; (4059f4 <_Z10set_volumeh+0x3c>)
  4059e8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  4059ec:	b662      	cpsie	i
		TWI0->TWI_CR = TWI_CR_STOP ;		// Stop Tx
		TWI0->TWI_IER = TWI_IER_TXCOMP ;

	}
	__enable_irq() ;
}
  4059ee:	4770      	bx	lr
  4059f0:	00410828 	.word	0x00410828
  4059f4:	20000108 	.word	0x20000108

004059f8 <_Z8init_twiv>:
void init_twi()
{
	register Pio *pioptr ;
	register uint32_t timing ;
  
	PMC->PMC_PCER0 |= 0x00080000L ;		// Enable peripheral clock to TWI0
  4059f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4059fc:	f2c4 020e 	movt	r2, #16398	; 0x400e
  405a00:	6911      	ldr	r1, [r2, #16]
	
	/* Configure PIO */
	pioptr = PIOA ;
  pioptr->PIO_ABCDSR[0] &= ~0x00000018 ;	// Peripheral A
  405a02:	f44f 6360 	mov.w	r3, #3584	; 0xe00
void init_twi()
{
	register Pio *pioptr ;
	register uint32_t timing ;
  
	PMC->PMC_PCER0 |= 0x00080000L ;		// Enable peripheral clock to TWI0
  405a06:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  405a0a:	6111      	str	r1, [r2, #16]
	
	/* Configure PIO */
	pioptr = PIOA ;
  pioptr->PIO_ABCDSR[0] &= ~0x00000018 ;	// Peripheral A
  405a0c:	f2c4 030e 	movt	r3, #16398	; 0x400e
  405a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405a12:	f022 0218 	bic.w	r2, r2, #24
  405a16:	671a      	str	r2, [r3, #112]	; 0x70
  pioptr->PIO_ABCDSR[1] &= ~0x00000018 ;	// Peripheral A
  405a18:	6f59      	ldr	r1, [r3, #116]	; 0x74
  pioptr->PIO_PDR = 0x00000018 ;					// Assign to peripheral
	
	timing = Master_frequency * 5 / 1000000 ;		// 5uS high and low
  405a1a:	f240 1208 	movw	r2, #264	; 0x108
	PMC->PMC_PCER0 |= 0x00080000L ;		// Enable peripheral clock to TWI0
	
	/* Configure PIO */
	pioptr = PIOA ;
  pioptr->PIO_ABCDSR[0] &= ~0x00000018 ;	// Peripheral A
  pioptr->PIO_ABCDSR[1] &= ~0x00000018 ;	// Peripheral A
  405a1e:	f021 0118 	bic.w	r1, r1, #24
  405a22:	6759      	str	r1, [r3, #116]	; 0x74
  pioptr->PIO_PDR = 0x00000018 ;					// Assign to peripheral
  405a24:	2118      	movs	r1, #24
  405a26:	6059      	str	r1, [r3, #4]
	
	timing = Master_frequency * 5 / 1000000 ;		// 5uS high and low
  405a28:	f2c2 0200 	movt	r2, #8192	; 0x2000
  405a2c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
  405a30:	f64d 6383 	movw	r3, #56963	; 0xde83
  405a34:	f2c4 331b 	movt	r3, #17179	; 0x431b
  405a38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  405a3c:	fba3 2101 	umull	r2, r1, r3, r1
  405a40:	0c89      	lsrs	r1, r1, #18
	timing += 15 - 4 ;
  405a42:	310b      	adds	r1, #11
	timing /= 16 ;
  405a44:	0909      	lsrs	r1, r1, #4
	timing |= timing << 8 ;
  405a46:	f441 2080 	orr.w	r0, r1, #262144	; 0x40000

	TWI0->TWI_CWGR = 0x00040000 | timing ;			// TWI clock set
  405a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405a4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  405a52:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  405a56:	6119      	str	r1, [r3, #16]
	TWI0->TWI_CR = TWI_CR_MSEN | TWI_CR_SVDIS ;		// Master mode enable
  405a58:	2124      	movs	r1, #36	; 0x24
  405a5a:	6019      	str	r1, [r3, #0]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  405a5c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
	TWI0->TWI_MMR = 0x002F0000 ;		// Device 5E (>>1) and master is writing
  405a60:	f44f 113c 	mov.w	r1, #3080192	; 0x2f0000
  405a64:	6059      	str	r1, [r3, #4]
  405a66:	f2ce 0200 	movt	r2, #57344	; 0xe000
  405a6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	NVIC_EnableIRQ(TWI0_IRQn) ;
	set_volume( 2 ) ;
  405a6e:	2002      	movs	r0, #2
  405a70:	6013      	str	r3, [r2, #0]
  405a72:	e7a1      	b.n	4059b8 <_Z10set_volumeh>

00405a74 <_Z11start_soundv>:


// Sound routines

void start_sound()
{
  405a74:	b508      	push	{r3, lr}
	register Pio *pioptr ;
	
	start_timer1() ;
  405a76:	f7ff fe25 	bl	4056c4 <_Z12start_timer1v>
	init_dac() ;
  405a7a:	f7ff fe55 	bl	405728 <_Z8init_dacv>
	init_twi() ;
  405a7e:	f7ff ffbb 	bl	4059f8 <_Z8init_twiv>

	pioptr = PIOA ;
#ifdef REVB
	pioptr->PIO_CODR = 0x02000000L ;	// Set bit A25 OFF
  405a82:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  405a86:	f2c4 030e 	movt	r3, #16398	; 0x400e
  405a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405a8e:	635a      	str	r2, [r3, #52]	; 0x34
	pioptr->PIO_PER = 0x02000000L ;		// Enable bit A25 (Stock buzzer)
  405a90:	601a      	str	r2, [r3, #0]
	pioptr->PIO_OER = 0x02000000L ;		// Set bit A25 as output
  405a92:	611a      	str	r2, [r3, #16]
#else
	pioptr->PIO_CODR = 0x00010000L ;	// Set bit A16 OFF
	pioptr->PIO_PER = 0x00010000L ;		// Enable bit A16 (Stock buzzer)
	pioptr->PIO_OER = 0x00010000L ;		// Set bit A16 as output
#endif
}
  405a94:	bd08      	pop	{r3, pc}
  405a96:	bf00      	nop

00405a98 <_Z10board_initv>:
                pioptr->PIO_PDR = pins ;
        }
}

void board_init()
{
  405a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // register uint32_t goto_usb ;
  register Pio *pioptr ;
  // Debug variable
  // uint32_t both_on ;

  WDT->WDT_MR = 0x3FFFAFFF ;                      // Disable watchdog
  405a9c:	f241 4250 	movw	r2, #5200	; 0x1450
  405aa0:	f64a 71ff 	movw	r1, #45055	; 0xafff
  405aa4:	f2c4 020e 	movt	r2, #16398	; 0x400e
  405aa8:	f6c3 71ff 	movt	r1, #16383	; 0x3fff

  MATRIX->CCFG_SYSIO |= 0x000000F0L ;             // Disable syspins, enable B4,5,6,7
  405aac:	f44f 7300 	mov.w	r3, #512	; 0x200
  // register uint32_t goto_usb ;
  register Pio *pioptr ;
  // Debug variable
  // uint32_t both_on ;

  WDT->WDT_MR = 0x3FFFAFFF ;                      // Disable watchdog
  405ab0:	6051      	str	r1, [r2, #4]

  MATRIX->CCFG_SYSIO |= 0x000000F0L ;             // Disable syspins, enable B4,5,6,7
  405ab2:	f2c4 030e 	movt	r3, #16398	; 0x400e
  405ab6:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114

  PMC->PMC_PCER0 = (1<<ID_PIOC)|(1<<ID_PIOB)|(1<<ID_PIOA)|(1<<ID_UART0) ;                               // Enable clocks to PIOB and PIOA and PIOC and UART0
  405aba:	f44f 6480 	mov.w	r4, #1024	; 0x400
  // Debug variable
  // uint32_t both_on ;

  WDT->WDT_MR = 0x3FFFAFFF ;                      // Disable watchdog

  MATRIX->CCFG_SYSIO |= 0x000000F0L ;             // Disable syspins, enable B4,5,6,7
  405abe:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0

  PMC->PMC_PCER0 = (1<<ID_PIOC)|(1<<ID_PIOB)|(1<<ID_PIOA)|(1<<ID_UART0) ;                               // Enable clocks to PIOB and PIOA and PIOC and UART0
  405ac2:	f2c4 040e 	movt	r4, #16398	; 0x400e
  // Debug variable
  // uint32_t both_on ;

  WDT->WDT_MR = 0x3FFFAFFF ;                      // Disable watchdog

  MATRIX->CCFG_SYSIO |= 0x000000F0L ;             // Disable syspins, enable B4,5,6,7
  405ac6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  PMC->PMC_PCER0 = (1<<ID_PIOC)|(1<<ID_PIOB)|(1<<ID_PIOA)|(1<<ID_UART0) ;                               // Enable clocks to PIOB and PIOA and PIOC and UART0
  405aca:	f44f 5364 	mov.w	r3, #14592	; 0x3900
                pioptr->PIO_PDR = pins ;
        }
}

void board_init()
{
  405ace:	b083      	sub	sp, #12

  WDT->WDT_MR = 0x3FFFAFFF ;                      // Disable watchdog

  MATRIX->CCFG_SYSIO |= 0x000000F0L ;             // Disable syspins, enable B4,5,6,7

  PMC->PMC_PCER0 = (1<<ID_PIOC)|(1<<ID_PIOB)|(1<<ID_PIOA)|(1<<ID_UART0) ;                               // Enable clocks to PIOB and PIOA and PIOC and UART0
  405ad0:	6123      	str	r3, [r4, #16]

#ifdef REVB
inline void init_soft_power()
{
  // Configure RF_power (PC17)
  configure_pins( PIO_PC17, PIN_ENABLE | PIN_INPUT | PIN_PORTC | PIN_NO_PULLUP | PIN_PULLDOWN ) ;
  405ad2:	218b      	movs	r1, #139	; 0x8b
  405ad4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  405ad8:	f7fa fc28 	bl	40032c <_Z14configure_pinsmt>

  // pioptr->PIO_PUER = 0x80000000 ;         // Enable pullup on bit A31 (EXIT)
  // pioptr->PIO_PER = 0x80000000 ;          // Enable bit A31

  pioptr = PIOC ;
  pioptr->PIO_PER = PIO_PC25 ;            // Enable bit C25 (USB-detect)
  405adc:	f44f 5690 	mov.w	r6, #4608	; 0x1200
#ifdef REVB
inline void init_soft_power()
{
  // Configure RF_power (PC17)
  configure_pins( PIO_PC17, PIN_ENABLE | PIN_INPUT | PIN_PORTC | PIN_NO_PULLUP | PIN_PULLDOWN ) ;
  configure_pins( PIO_PA8, PIN_ENABLE | PIN_INPUT | PIN_PORTA | PIN_PULLUP ) ; // Enable bit A8 (Soft Power)
  405ae0:	2107      	movs	r1, #7
  405ae2:	f44f 7080 	mov.w	r0, #256	; 0x100
  405ae6:	f7fa fc21 	bl	40032c <_Z14configure_pinsmt>

  // pioptr->PIO_PUER = 0x80000000 ;         // Enable pullup on bit A31 (EXIT)
  // pioptr->PIO_PER = 0x80000000 ;          // Enable bit A31

  pioptr = PIOC ;
  pioptr->PIO_PER = PIO_PC25 ;            // Enable bit C25 (USB-detect)
  405aea:	f2c4 060e 	movt	r6, #16398	; 0x400e
  405aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405af2:	6032      	str	r2, [r6, #0]
// PB14, PB6
// PC21, PC19, PC15 (PPM2 output)
inline void config_free_pins()
{
#ifdef REVB
  configure_pins( PIO_PB6 | PIO_PB14, PIN_ENABLE | PIN_INPUT | PIN_PORTB | PIN_PULLUP ) ;
  405af4:	2147      	movs	r1, #71	; 0x47
  405af6:	f244 0040 	movw	r0, #16448	; 0x4040
  405afa:	f7fa fc17 	bl	40032c <_Z14configure_pinsmt>
  configure_pins( PIO_PC19 | PIO_PC21, PIN_ENABLE | PIN_INPUT | PIN_PORTC | PIN_PULLUP ) ;
  405afe:	2187      	movs	r1, #135	; 0x87
  405b00:	f44f 1020 	mov.w	r0, #2621440	; 0x280000
  405b04:	f7fa fc12 	bl	40032c <_Z14configure_pinsmt>
  pioptr->PIO_PUER = 0x0000003CL ;                // Set bits 2, 3, 4, 5 with pullups
#endif

  pioptr = PIOB ;
#ifdef REVB
  pioptr->PIO_PUER = PIO_PB5 ;                                    // Enable pullup on bit B5 (MENU)
  405b08:	f44f 5580 	mov.w	r5, #4096	; 0x1000

  config_free_pins() ;

  // Next section configures the key inputs on the LCD data
#ifdef REVB
  pioptr->PIO_PER = 0x0000003BL ;         // Enable bits 1,3,4,5, 0
  405b0c:	213b      	movs	r1, #59	; 0x3b
  pioptr->PIO_PUER = 0x0000003CL ;                // Set bits 2, 3, 4, 5 with pullups
#endif

  pioptr = PIOB ;
#ifdef REVB
  pioptr->PIO_PUER = PIO_PB5 ;                                    // Enable pullup on bit B5 (MENU)
  405b0e:	f2c4 050e 	movt	r5, #16398	; 0x400e

  // Next section configures the key inputs on the LCD data
#ifdef REVB
  pioptr->PIO_PER = 0x0000003BL ;         // Enable bits 1,3,4,5, 0
  pioptr->PIO_OER = PIO_PC0 ;             // Set bit 0 output
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  405b12:	223a      	movs	r2, #58	; 0x3a

  config_free_pins() ;

  // Next section configures the key inputs on the LCD data
#ifdef REVB
  pioptr->PIO_PER = 0x0000003BL ;         // Enable bits 1,3,4,5, 0
  405b14:	6031      	str	r1, [r6, #0]
  pioptr->PIO_PUER = 0x0000003CL ;                // Set bits 2, 3, 4, 5 with pullups
#endif

  pioptr = PIOB ;
#ifdef REVB
  pioptr->PIO_PUER = PIO_PB5 ;                                    // Enable pullup on bit B5 (MENU)
  405b16:	2320      	movs	r3, #32
  config_free_pins() ;

  // Next section configures the key inputs on the LCD data
#ifdef REVB
  pioptr->PIO_PER = 0x0000003BL ;         // Enable bits 1,3,4,5, 0
  pioptr->PIO_OER = PIO_PC0 ;             // Set bit 0 output
  405b18:	2101      	movs	r1, #1

// Assumes PMC has already enabled clocks to ports
inline void setup_switches()
{
#ifdef REVB
  configure_pins( 0x01808087, PIN_ENABLE | PIN_INPUT | PIN_PORTA | PIN_PULLUP ) ;
  405b1a:	f248 0087 	movw	r0, #32903	; 0x8087
  config_free_pins() ;

  // Next section configures the key inputs on the LCD data
#ifdef REVB
  pioptr->PIO_PER = 0x0000003BL ;         // Enable bits 1,3,4,5, 0
  pioptr->PIO_OER = PIO_PC0 ;             // Set bit 0 output
  405b1e:	6131      	str	r1, [r6, #16]

// Assumes PMC has already enabled clocks to ports
inline void setup_switches()
{
#ifdef REVB
  configure_pins( 0x01808087, PIN_ENABLE | PIN_INPUT | PIN_PORTA | PIN_PULLUP ) ;
  405b20:	f2c0 1080 	movt	r0, #384	; 0x180

  // Next section configures the key inputs on the LCD data
#ifdef REVB
  pioptr->PIO_PER = 0x0000003BL ;         // Enable bits 1,3,4,5, 0
  pioptr->PIO_OER = PIO_PC0 ;             // Set bit 0 output
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  405b24:	6172      	str	r2, [r6, #20]

// Assumes PMC has already enabled clocks to ports
inline void setup_switches()
{
#ifdef REVB
  configure_pins( 0x01808087, PIN_ENABLE | PIN_INPUT | PIN_PORTA | PIN_PULLUP ) ;
  405b26:	2107      	movs	r1, #7
  // Next section configures the key inputs on the LCD data
#ifdef REVB
  pioptr->PIO_PER = 0x0000003BL ;         // Enable bits 1,3,4,5, 0
  pioptr->PIO_OER = PIO_PC0 ;             // Set bit 0 output
  pioptr->PIO_ODR = 0x0000003AL ;         // Set bits 1, 3, 4, 5 input
  pioptr->PIO_PUER = 0x0000003AL ;                // Set bits 1, 3, 4, 5 with pullups
  405b28:	6672      	str	r2, [r6, #100]	; 0x64
  pioptr->PIO_PUER = 0x0000003CL ;                // Set bits 2, 3, 4, 5 with pullups
#endif

  pioptr = PIOB ;
#ifdef REVB
  pioptr->PIO_PUER = PIO_PB5 ;                                    // Enable pullup on bit B5 (MENU)
  405b2a:	666b      	str	r3, [r5, #100]	; 0x64
  pioptr->PIO_PER = PIO_PB5 ;                                     // Enable bit B5
  405b2c:	602b      	str	r3, [r5, #0]

// Assumes PMC has already enabled clocks to ports
inline void setup_switches()
{
#ifdef REVB
  configure_pins( 0x01808087, PIN_ENABLE | PIN_INPUT | PIN_PORTA | PIN_PULLUP ) ;
  405b2e:	f7fa fbfd 	bl	40032c <_Z14configure_pinsmt>
  pioptr->PIO_ODR = 0xF8008184 ;          // Set bits input
  pioptr->PIO_PUER = 0xF8008184 ;         // Set bits with pullups
#endif

#ifdef REVB
  configure_pins( 0x00000030, PIN_ENABLE | PIN_INPUT | PIN_PORTB | PIN_PULLUP ) ;
  405b32:	2030      	movs	r0, #48	; 0x30
  405b34:	2147      	movs	r1, #71	; 0x47
  405b36:	f7fa fbf9 	bl	40032c <_Z14configure_pinsmt>
  pioptr->PIO_ODR = 0x00000010 ;          // Set bits input
  pioptr->PIO_PUER = 0x00000010 ;         // Set bits with pullups
#endif

#ifdef REVB
  configure_pins( 0x91114900, PIN_ENABLE | PIN_INPUT | PIN_PORTC | PIN_PULLUP ) ;
  405b3a:	f44f 4092 	mov.w	r0, #18688	; 0x4900
  405b3e:	2187      	movs	r1, #135	; 0x87
  405b40:	f2c9 1011 	movt	r0, #37137	; 0x9111
  405b44:	f7fa fbf2 	bl	40032c <_Z14configure_pinsmt>

  setup_switches() ;

  // Enable PCK2 on PB3, This is for testing of Timer 2 working
  // It will be used as serial data to the Bluetooth module
  pioptr->PIO_ABCDSR[0] |=  PIO_PB3 ;     // Peripheral B
  405b48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  pioptr->PIO_ABCDSR[1] &= ~PIO_PB3 ;   // Peripheral B
  pioptr->PIO_PDR = PIO_PB3 ;                                   // Assign to peripheral
  PMC->PMC_SCER |= 0x0400 ;                                                               // PCK2 enabled
  PMC->PMC_PCK[2] = 2 ;                                                                           // PCK2 is PLLA
  405b4a:	2602      	movs	r6, #2

  setup_switches() ;

  // Enable PCK2 on PB3, This is for testing of Timer 2 working
  // It will be used as serial data to the Bluetooth module
  pioptr->PIO_ABCDSR[0] |=  PIO_PB3 ;     // Peripheral B
  405b4c:	f043 0308 	orr.w	r3, r3, #8
  405b50:	672b      	str	r3, [r5, #112]	; 0x70
  pioptr->PIO_ABCDSR[1] &= ~PIO_PB3 ;   // Peripheral B
  405b52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405b54:	f248 17b5 	movw	r7, #33205	; 0x81b5
  setup_switches() ;

  // Enable PCK2 on PB3, This is for testing of Timer 2 working
  // It will be used as serial data to the Bluetooth module
  pioptr->PIO_ABCDSR[0] |=  PIO_PB3 ;     // Peripheral B
  pioptr->PIO_ABCDSR[1] &= ~PIO_PB3 ;   // Peripheral B
  405b58:	f023 0308 	bic.w	r3, r3, #8
  405b5c:	676b      	str	r3, [r5, #116]	; 0x74
  pioptr->PIO_PDR = PIO_PB3 ;                                   // Assign to peripheral
  405b5e:	2308      	movs	r3, #8
  405b60:	606b      	str	r3, [r5, #4]
  PMC->PMC_SCER |= 0x0400 ;                                                               // PCK2 enabled
  405b62:	6823      	ldr	r3, [r4, #0]
  PMC->PMC_PCK[2] = 2 ;                                                                           // PCK2 is PLLA

  UART_Configure( 9600, Master_frequency ) ;
  405b64:	f240 1508 	movw	r5, #264	; 0x108
  // Enable PCK2 on PB3, This is for testing of Timer 2 working
  // It will be used as serial data to the Bluetooth module
  pioptr->PIO_ABCDSR[0] |=  PIO_PB3 ;     // Peripheral B
  pioptr->PIO_ABCDSR[1] &= ~PIO_PB3 ;   // Peripheral B
  pioptr->PIO_PDR = PIO_PB3 ;                                   // Assign to peripheral
  PMC->PMC_SCER |= 0x0400 ;                                                               // PCK2 enabled
  405b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  405b6c:	6023      	str	r3, [r4, #0]
  PMC->PMC_PCK[2] = 2 ;                                                                           // PCK2 is PLLA

  UART_Configure( 9600, Master_frequency ) ;
  405b6e:	f2c2 0500 	movt	r5, #8192	; 0x2000
  // It will be used as serial data to the Bluetooth module
  pioptr->PIO_ABCDSR[0] |=  PIO_PB3 ;     // Peripheral B
  pioptr->PIO_ABCDSR[1] &= ~PIO_PB3 ;   // Peripheral B
  pioptr->PIO_PDR = PIO_PB3 ;                                   // Assign to peripheral
  PMC->PMC_SCER |= 0x0400 ;                                                               // PCK2 enabled
  PMC->PMC_PCK[2] = 2 ;                                                                           // PCK2 is PLLA
  405b72:	64a6      	str	r6, [r4, #72]	; 0x48

  UART_Configure( 9600, Master_frequency ) ;
  405b74:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405b78:	f6c1 374e 	movt	r7, #6990	; 0x1b4e
{
//    const Pin pPins[] = CONSOLE_PINS;
  register Uart *pUart = CONSOLE_USART;

  /* Configure PIO */
  configure_pins( (PIO_PA9 | PIO_PA10), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;
  405b7c:	4631      	mov	r1, r6
  405b7e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  405b82:	f7fa fbd3 	bl	40032c <_Z14configure_pinsmt>
  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405b86:	fba7 3108 	umull	r3, r1, r7, r8
  /* Configure PMC */
  PMC->PMC_PCER0 = 1 << CONSOLE_ID;

  /* Reset and disable receiver & transmitter */
  pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
                 | UART_CR_RXDIS | UART_CR_TXDIS;
  405b8a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  405b8e:	f2c4 020e 	movt	r2, #16398	; 0x400e
  405b92:	f04f 0aac 	mov.w	sl, #172	; 0xac

  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity
  405b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;

  /* Disable PDC channel */
  pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  405b9a:	f240 2902 	movw	r9, #514	; 0x202

  /* Enable receiver and transmitter */
  pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405b9e:	f04f 0850 	mov.w	r8, #80	; 0x50
  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405ba2:	0b89      	lsrs	r1, r1, #14

  /* Configure PIO */
  configure_pins( (PIO_PA9 | PIO_PA10), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;

  /* Configure PMC */
  PMC->PMC_PCER0 = 1 << CONSOLE_ID;
  405ba4:	f44f 7080 	mov.w	r0, #256	; 0x100
  405ba8:	6120      	str	r0, [r4, #16]

  /* Reset and disable receiver & transmitter */
  pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
                 | UART_CR_RXDIS | UART_CR_TXDIS;
  405baa:	f8c2 a000 	str.w	sl, [r2]

  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity
  405bae:	6053      	str	r3, [r2, #4]

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405bb0:	6211      	str	r1, [r2, #32]

  /* Disable PDC channel */
  pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  405bb2:	f8c2 9120 	str.w	r9, [r2, #288]	; 0x120

  /* Enable receiver and transmitter */
  pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405bb6:	f8c2 8000 	str.w	r8, [r2]
  pioptr->PIO_PDR = PIO_PB3 ;                                   // Assign to peripheral
  PMC->PMC_SCER |= 0x0400 ;                                                               // PCK2 enabled
  PMC->PMC_PCK[2] = 2 ;                                                                           // PCK2 is PLLA

  UART_Configure( 9600, Master_frequency ) ;
  UART2_Configure( 9600, Master_frequency ) ;             // Testing
  405bba:	f8d5 b09c 	ldr.w	fp, [r5, #156]	; 0x9c
{
////    const Pin pPins[] = CONSOLE_PINS;
  register Usart *pUsart = SECOND_USART;

  /* Configure PIO */
  configure_pins( (PIO_PA5 | PIO_PA6), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;
  405bbe:	4631      	mov	r1, r6
//  /* Configure mode */
  pUsart->US_MR =  0x000008C0 ;  // NORMAL, No Parity, 8 bit

//  /* Configure baudrate */
//  /* Asynchronous, no oversampling */
  pUsart->US_BRGR = (masterClock / baudrate) / 16;
  405bc0:	fba7 2b0b 	umull	r2, fp, r7, fp
{
////    const Pin pPins[] = CONSOLE_PINS;
  register Usart *pUsart = SECOND_USART;

  /* Configure PIO */
  configure_pins( (PIO_PA5 | PIO_PA6), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;
  405bc4:	2060      	movs	r0, #96	; 0x60
  405bc6:	9301      	str	r3, [sp, #4]
  405bc8:	f7fa fbb0 	bl	40032c <_Z14configure_pinsmt>

//  /* Configure PMC */
  PMC->PMC_PCER0 = 1 << SECOND_ID;
  405bcc:	f44f 4080 	mov.w	r0, #16384	; 0x4000

//  /* Reset and disable receiver & transmitter */
  pUsart->US_CR = US_CR_RSTRX | US_CR_RSTTX
                         | US_CR_RXDIS | US_CR_TXDIS;
  405bd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000

  /* Configure PIO */
  configure_pins( (PIO_PA5 | PIO_PA6), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTA | PIN_NO_PULLUP ) ;

//  /* Configure PMC */
  PMC->PMC_PCER0 = 1 << SECOND_ID;
  405bd4:	6120      	str	r0, [r4, #16]

//  /* Reset and disable receiver & transmitter */
  pUsart->US_CR = US_CR_RSTRX | US_CR_RSTTX
                         | US_CR_RXDIS | US_CR_TXDIS;
  405bd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
//  /* Configure mode */
  pUsart->US_MR =  0x000008C0 ;  // NORMAL, No Parity, 8 bit

//  /* Configure baudrate */
//  /* Asynchronous, no oversampling */
  pUsart->US_BRGR = (masterClock / baudrate) / 16;
  405bda:	ea4f 319b 	mov.w	r1, fp, lsr #14
//  /* Reset and disable receiver & transmitter */
  pUsart->US_CR = US_CR_RSTRX | US_CR_RSTTX
                         | US_CR_RXDIS | US_CR_TXDIS;

//  /* Configure mode */
  pUsart->US_MR =  0x000008C0 ;  // NORMAL, No Parity, 8 bit
  405bde:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
//  /* Configure PMC */
  PMC->PMC_PCER0 = 1 << SECOND_ID;

//  /* Reset and disable receiver & transmitter */
  pUsart->US_CR = US_CR_RSTRX | US_CR_RSTTX
                         | US_CR_RXDIS | US_CR_TXDIS;
  405be2:	f8c2 a000 	str.w	sl, [r2]

//  /* Configure mode */
  pUsart->US_MR =  0x000008C0 ;  // NORMAL, No Parity, 8 bit
  405be6:	6050      	str	r0, [r2, #4]

//  /* Configure baudrate */
//  /* Asynchronous, no oversampling */
  pUsart->US_BRGR = (masterClock / baudrate) / 16;
  405be8:	6211      	str	r1, [r2, #32]

//  /* Disable PDC channel */
  pUsart->US_PTCR = US_PTCR_RXTDIS | US_PTCR_TXTDIS;
  405bea:	f8c2 9120 	str.w	r9, [r2, #288]	; 0x120

//  /* Enable receiver and transmitter */
  pUsart->US_CR = US_CR_RXEN | US_CR_TXEN;
  405bee:	f8c2 8000 	str.w	r8, [r2]
  PMC->PMC_SCER |= 0x0400 ;                                                               // PCK2 enabled
  PMC->PMC_PCK[2] = 2 ;                                                                           // PCK2 is PLLA

  UART_Configure( 9600, Master_frequency ) ;
  UART2_Configure( 9600, Master_frequency ) ;             // Testing
  UART3_Configure( 9600, Master_frequency ) ;             // Testing
  405bf2:	f8d5 b09c 	ldr.w	fp, [r5, #156]	; 0x9c
{
//    const Pin pPins[] = CONSOLE_PINS;
  register Uart *pUart = BT_USART;

  /* Configure PIO */
  configure_pins( (PIO_PB2 | PIO_PB3), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTB | PIN_NO_PULLUP ) ;
  405bf6:	200c      	movs	r0, #12
  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405bf8:	fba7 270b 	umull	r2, r7, r7, fp
{
//    const Pin pPins[] = CONSOLE_PINS;
  register Uart *pUart = BT_USART;

  /* Configure PIO */
  configure_pins( (PIO_PB2 | PIO_PB3), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTB | PIN_NO_PULLUP ) ;
  405bfc:	2142      	movs	r1, #66	; 0x42
  405bfe:	f7fa fb95 	bl	40032c <_Z14configure_pinsmt>
  /* Reset and disable receiver & transmitter */
  pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
                 | UART_CR_RXDIS | UART_CR_TXDIS;

  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity
  405c02:	9b01      	ldr	r3, [sp, #4]
  /* Configure PMC */
  PMC->PMC_PCER0 = 1 << BT_ID;

  /* Reset and disable receiver & transmitter */
  pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
                 | UART_CR_RXDIS | UART_CR_TXDIS;
  405c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405c08:	f2c4 020e 	movt	r2, #16398	; 0x400e
  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405c0c:	0bbf      	lsrs	r7, r7, #14

  /* Configure PIO */
  configure_pins( (PIO_PB2 | PIO_PB3), PIN_PERIPHERAL | PIN_INPUT | PIN_PER_A | PIN_PORTB | PIN_NO_PULLUP ) ;

  /* Configure PMC */
  PMC->PMC_PCER0 = 1 << BT_ID;
  405c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
  405c12:	6121      	str	r1, [r4, #16]

  /* Reset and disable receiver & transmitter */
  pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
                 | UART_CR_RXDIS | UART_CR_TXDIS;
  405c14:	f8c2 a000 	str.w	sl, [r2]

  /* Configure mode */
  pUart->UART_MR =  0x800 ;  // NORMAL, No Parity
  405c18:	6053      	str	r3, [r2, #4]

  /* Configure baudrate */
  /* Asynchronous, no oversampling */
  pUart->UART_BRGR = (masterClock / baudrate) / 16;
  405c1a:	6217      	str	r7, [r2, #32]

//      baudrate = (masterClock * 8 / baudrate) / 16 ;
//  pUart->UART_BRGR = ( baudrate / 8 ) || ( ( baudrate & 7 ) << 16 ) ; // Fractional part to allow 152000 baud
//
  /* Disable PDC channel */
  pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  405c1c:	f8c2 9120 	str.w	r9, [r2, #288]	; 0x120

  /* Enable receiver and transmitter */
  pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405c20:	f8c2 8000 	str.w	r8, [r2]
{
  register Tc *ptc ;
  register uint32_t timer ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x02000000L ;               // Enable peripheral clock to TC2
  405c24:	6923      	ldr	r3, [r4, #16]

  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz
  405c26:	f248 511f 	movw	r1, #34079	; 0x851f
{
  register Tc *ptc ;
  register uint32_t timer ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x02000000L ;               // Enable peripheral clock to TC2
  405c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  405c2e:	6123      	str	r3, [r4, #16]

  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz
  405c30:	f8d5 c09c 	ldr.w	ip, [r5, #156]	; 0x9c
  405c34:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
  405c38:	fba1 310c 	umull	r3, r1, r1, ip
inline void init_adc()
{
  register Adc *padc ;
  register uint32_t timer ;

  timer = ( Master_frequency / (3600000*2) ) << 8 ;
  405c3c:	f647 4eb1 	movw	lr, #31921	; 0x7cb1
  PMC->PMC_PCER0 |= 0x02000000L ;               // Enable peripheral clock to TC2

  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz

  ptc = TC0 ;                                   // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                             // No sync
  405c40:	2300      	movs	r3, #0
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x00008000 ;      // Waveform mode
  ptc->TC_CHANNEL[2].TC_RC = timer ;            // 10 Hz
  ptc->TC_CHANNEL[2].TC_RA = timer >> 1 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x0009C003 ;      // 0000 0000 0000 1001 1100 0000 0000 0011
  405c42:	f24c 0703 	movw	r7, #49155	; 0xc003
inline void init_adc()
{
  register Adc *padc ;
  register uint32_t timer ;

  timer = ( Master_frequency / (3600000*2) ) << 8 ;
  405c46:	f2c9 5e21 	movt	lr, #38177	; 0x9521
  PMC->PMC_PCER0 |= 0x02000000L ;               // Enable peripheral clock to TC2

  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz

  ptc = TC0 ;                                   // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                             // No sync
  405c4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  405c4e:	2200      	movs	r2, #0
  register uint32_t timer ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x02000000L ;               // Enable peripheral clock to TC2

  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz
  405c50:	ea4f 3851 	mov.w	r8, r1, lsr #13
  ptc = TC0 ;                                   // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                             // No sync
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x00008000 ;      // Waveform mode
  ptc->TC_CHANNEL[2].TC_RC = timer ;            // 10 Hz
  ptc->TC_CHANNEL[2].TC_RA = timer >> 1 ;
  405c54:	ea4f 3991 	mov.w	r9, r1, lsr #14
inline void init_adc()
{
  register Adc *padc ;
  register uint32_t timer ;

  timer = ( Master_frequency / (3600000*2) ) << 8 ;
  405c58:	fbae ae0c 	umull	sl, lr, lr, ip
  ptc->TC_BCR = 0 ;                             // No sync
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x00008000 ;      // Waveform mode
  ptc->TC_CHANNEL[2].TC_RC = timer ;            // 10 Hz
  ptc->TC_CHANNEL[2].TC_RA = timer >> 1 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x0009C003 ;      // 0000 0000 0000 1001 1100 0000 0000 0011
  405c5c:	f2c0 0709 	movt	r7, #9
  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz

  ptc = TC0 ;                                   // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                             // No sync
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x00008000 ;      // Waveform mode
  405c60:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
  405c64:	f44f 4561 	mov.w	r5, #57600	; 0xe100
  PMC->PMC_PCER0 |= 0x02000000L ;               // Enable peripheral clock to TC2

  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz

  ptc = TC0 ;                                   // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                             // No sync
  405c68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x00008000 ;      // Waveform mode
  ptc->TC_CHANNEL[2].TC_RC = timer ;            // 10 Hz
  ptc->TC_CHANNEL[2].TC_RA = timer >> 1 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x0009C003 ;      // 0000 0000 0000 1001 1100 0000 0000 0011
  ptc->TC_CHANNEL[2].TC_CCR = 5 ;               // Enable clock and trigger it (may only need trigger)
  405c6c:	2005      	movs	r0, #5

  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz

  ptc = TC0 ;                                   // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                             // No sync
  ptc->TC_BMR = 0 ;
  405c6e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  ptc->TC_CHANNEL[2].TC_RA = timer >> 1 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x0009C003 ;      // 0000 0000 0000 1001 1100 0000 0000 0011
  ptc->TC_CHANNEL[2].TC_CCR = 5 ;               // Enable clock and trigger it (may only need trigger)

  NVIC_EnableIRQ(TC2_IRQn) ;
  TC0->TC_CHANNEL[2].TC_IER = TC_IER0_CPCS ;
  405c72:	2110      	movs	r1, #16
  timer = Master_frequency / 12800 / 2;            // MCK/128 and 200 Hz

  ptc = TC0 ;                                   // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                             // No sync
  ptc->TC_BMR = 0 ;
  ptc->TC_CHANNEL[2].TC_CMR = 0x00008000 ;      // Waveform mode
  405c74:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
  405c78:	f2ce 0500 	movt	r5, #57344	; 0xe000
  ptc->TC_CHANNEL[2].TC_RC = timer ;            // 10 Hz
  405c7c:	f8c3 809c 	str.w	r8, [r3, #156]	; 0x9c
  ptc->TC_CHANNEL[2].TC_RA = timer >> 1 ;
  405c80:	f8c3 9094 	str.w	r9, [r3, #148]	; 0x94
  ptc->TC_CHANNEL[2].TC_CMR = 0x0009C003 ;      // 0000 0000 0000 1001 1100 0000 0000 0011
  405c84:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
  405c88:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  ptc->TC_CHANNEL[2].TC_CCR = 5 ;               // Enable clock and trigger it (may only need trigger)
  405c8c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  405c90:	602f      	str	r7, [r5, #0]

  NVIC_EnableIRQ(TC2_IRQn) ;
  TC0->TC_CHANNEL[2].TC_IER = TC_IER0_CPCS ;
  405c92:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
inline void start_timer0()
{
  register Tc *ptc ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x00800000L ;               // Enable peripheral clock to TC0
  405c96:	6925      	ldr	r5, [r4, #16]
inline void init_adc()
{
  register Adc *padc ;
  register uint32_t timer ;

  timer = ( Master_frequency / (3600000*2) ) << 8 ;
  405c98:	ea4f 5e9e 	mov.w	lr, lr, lsr #22
inline void start_timer0()
{
  register Tc *ptc ;

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x00800000L ;               // Enable peripheral clock to TC0
  405c9c:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
  405ca0:	6125      	str	r5, [r4, #16]

  ptc = TC0 ;           // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                       // No sync
  ptc->TC_BMR = 2 ;
  ptc->TC_CHANNEL[0].TC_CMR = 0x00008001 ;      // Waveform mode MCK/8 for 36MHz osc.
  405ca2:	f248 0501 	movw	r5, #32769	; 0x8001

  // Enable peripheral clock TC0 = bit 23 thru TC5 = bit 28
  PMC->PMC_PCER0 |= 0x00800000L ;               // Enable peripheral clock to TC0

  ptc = TC0 ;           // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                       // No sync
  405ca6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  ptc->TC_BMR = 2 ;
  405caa:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
  ptc->TC_CHANNEL[0].TC_CMR = 0x00008001 ;      // Waveform mode MCK/8 for 36MHz osc.
  405cae:	605d      	str	r5, [r3, #4]
  ptc->TC_CHANNEL[0].TC_RC = 0xFFF0 ;
  405cb0:	f64f 75f0 	movw	r5, #65520	; 0xfff0
  405cb4:	61dd      	str	r5, [r3, #28]
  ptc->TC_CHANNEL[0].TC_RA = 0 ;
  ptc->TC_CHANNEL[0].TC_CMR = 0x00008040 ;        // 0000 0000 0000 0000 1000 0000 0100 0000, stop at regC
  405cb6:	f248 0540 	movw	r5, #32832	; 0x8040
  ptc = TC0 ;           // Tc block 0 (TC0-2)
  ptc->TC_BCR = 0 ;                       // No sync
  ptc->TC_BMR = 2 ;
  ptc->TC_CHANNEL[0].TC_CMR = 0x00008001 ;      // Waveform mode MCK/8 for 36MHz osc.
  ptc->TC_CHANNEL[0].TC_RC = 0xFFF0 ;
  ptc->TC_CHANNEL[0].TC_RA = 0 ;
  405cba:	615a      	str	r2, [r3, #20]
  ptc->TC_CHANNEL[0].TC_CMR = 0x00008040 ;        // 0000 0000 0000 0000 1000 0000 0100 0000, stop at regC
  405cbc:	605d      	str	r5, [r3, #4]
  ptc->TC_CHANNEL[0].TC_CCR = 5 ;                 // Enable clock and trigger it (may only need trigger)
  405cbe:	6018      	str	r0, [r3, #0]
  register Adc *padc ;
  register uint32_t timer ;

  timer = ( Master_frequency / (3600000*2) ) << 8 ;
  // Enable peripheral clock ADC = bit 29
  PMC->PMC_PCER0 |= 0x20000000L ;               // Enable peripheral clock to ADC
  405cc0:	6925      	ldr	r5, [r4, #16]
inline void init_adc()
{
  register Adc *padc ;
  register uint32_t timer ;

  timer = ( Master_frequency / (3600000*2) ) << 8 ;
  405cc2:	ea4f 200e 	mov.w	r0, lr, lsl #8
  // Enable peripheral clock ADC = bit 29
  PMC->PMC_PCER0 |= 0x20000000L ;               // Enable peripheral clock to ADC
  padc = ADC ;
  padc->ADC_MR = 0x14110000 | timer ;  // 0001 0100 0001 0001 xxxx xxxx 0000 0000
  405cc6:	4663      	mov	r3, ip
  405cc8:	f040 50a0 	orr.w	r0, r0, #335544320	; 0x14000000
  405ccc:	f2c4 0303 	movt	r3, #16387	; 0x4003
  405cd0:	f440 1088 	orr.w	r0, r0, #1114112	; 0x110000
  register Adc *padc ;
  register uint32_t timer ;

  timer = ( Master_frequency / (3600000*2) ) << 8 ;
  // Enable peripheral clock ADC = bit 29
  PMC->PMC_PCER0 |= 0x20000000L ;               // Enable peripheral clock to ADC
  405cd4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
  405cd8:	6125      	str	r5, [r4, #16]
  padc = ADC ;
  padc->ADC_MR = 0x14110000 | timer ;  // 0001 0100 0001 0001 xxxx xxxx 0000 0000
  405cda:	6058      	str	r0, [r3, #4]
  padc->ADC_ACR = ADC_ACR_TSON ;                        // Turn on temp sensor
  405cdc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
#ifdef REVB
  padc->ADC_CHER = 0x0000E33E ;  // channels 1,2,3,4,5,8,9,13,14,15
  405ce0:	f24e 313e 	movw	r1, #58174	; 0xe33e
  405ce4:	6119      	str	r1, [r3, #16]
#else
  padc->ADC_CHER = 0x0000E23E ;  // channels 1,2,3,4,5,9,13,14,15
#endif
  padc->ADC_CGR = 0 ;  // Gain = 1, all channels
  405ce6:	649a      	str	r2, [r3, #72]	; 0x48
  padc->ADC_COR = 0 ;  // Single ended, 0 offset, all channels
  405ce8:	64da      	str	r2, [r3, #76]	; 0x4c
  UART3_Configure( 9600, Master_frequency ) ;             // Testing

  start_timer2() ;
  start_timer0() ;
  init_adc() ;
  init_pwm() ;
  405cea:	f7fa fb4f 	bl	40038c <_Z8init_pwmv>


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
  405cee:	b662      	cpsie	i

  __enable_irq() ;

  start_sound() ;
  405cf0:	f7ff fec0 	bl	405a74 <_Z11start_soundv>

  eeprom_init();
}
  405cf4:	b003      	add	sp, #12
  405cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  __enable_irq() ;

  start_sound() ;

  eeprom_init();
  405cfa:	f7fc bc3f 	b.w	40257c <_Z11eeprom_initv>
  405cfe:	bf00      	nop

00405d00 <_ZN10audioQueueC1Ev>:
// --


audioQueue::audioQueue()
{
  toneTimeLeft = 0;
  405d00:	2300      	movs	r3, #0
  405d02:	7103      	strb	r3, [r0, #4]
  tonePause = 0;
  405d04:	7143      	strb	r3, [r0, #5]

  t_queueRidx = 0;
  405d06:	7003      	strb	r3, [r0, #0]
  t_queueWidx = 0;
  405d08:	7043      	strb	r3, [r0, #1]
}
  405d0a:	4770      	bx	lr

00405d0c <_ZN10audioQueue9heartbeatEv>:
{
#if defined(SIMU)
  return;
#endif

  if (toneTimeLeft == 0) {
  405d0c:	7903      	ldrb	r3, [r0, #4]

// heartbeat is responsibile for issueing the audio tones and general square waves
// it is essentially the life of the class.
// it is called every 10ms
void audioQueue::heartbeat()
{
  405d0e:	b4f0      	push	{r4, r5, r6, r7}
#if defined(SIMU)
  return;
#endif

  if (toneTimeLeft == 0) {
  405d10:	2b00      	cmp	r3, #0
  405d12:	d01f      	beq.n	405d54 <_ZN10audioQueue9heartbeatEv+0x48>
  405d14:	7882      	ldrb	r2, [r0, #2]
        }
      }
    }
  }

  if ((toneFreq > 0) & (toneTimeLeft > 0)) {
  405d16:	1c11      	adds	r1, r2, #0
  405d18:	bf18      	it	ne
  405d1a:	2101      	movne	r1, #1
  405d1c:	2b00      	cmp	r3, #0
  405d1e:	bf0c      	ite	eq
  405d20:	2100      	moveq	r1, #0
  405d22:	f001 0101 	andne.w	r1, r1, #1
  405d26:	2900      	cmp	r1, #0
  405d28:	f000 8088 	beq.w	405e3c <_ZN10audioQueue9heartbeatEv+0x130>
//	tone_start( 0 ) ;
}

uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
	if ( Sound_g.Sound_time == 0 )
  405d2c:	4945      	ldr	r1, [pc, #276]	; (405e44 <_ZN10audioQueue9heartbeatEv+0x138>)
      }
    }
  }

  if ((toneFreq > 0) & (toneTimeLeft > 0)) {
    QUEUE_TONE(toneFreq, toneTimeLeft, toneFreqIncr);
  405d2e:	78c4      	ldrb	r4, [r0, #3]
//	tone_start( 0 ) ;
}

uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
	if ( Sound_g.Sound_time == 0 )
  405d30:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
  405d34:	2d00      	cmp	r5, #0
  405d36:	d052      	beq.n	405dde <_ZN10audioQueue9heartbeatEv+0xd2>
  405d38:	79c2      	ldrb	r2, [r0, #7]
    QUEUE_TONE(tone2Freq, tone2TimeLeft, 0);
  }

  if (toneTimeLeft > 0) {
    toneTimeLeft--; //time gets counted down
    toneFreq += toneFreqIncr;
  405d3a:	7881      	ldrb	r1, [r0, #2]
    //second flow tone here, priority on 1st, pause of 1st not allow to start second
    QUEUE_TONE(tone2Freq, tone2TimeLeft, 0);
  }

  if (toneTimeLeft > 0) {
    toneTimeLeft--; //time gets counted down
  405d3c:	3b01      	subs	r3, #1
    toneFreq += toneFreqIncr;
  405d3e:	1864      	adds	r4, r4, r1
    //second flow tone here, priority on 1st, pause of 1st not allow to start second
    QUEUE_TONE(tone2Freq, tone2TimeLeft, 0);
  }

  if (toneTimeLeft > 0) {
    toneTimeLeft--; //time gets counted down
  405d40:	7103      	strb	r3, [r0, #4]
    toneFreq += toneFreqIncr;
  405d42:	7084      	strb	r4, [r0, #2]
      // SPEAKER_OFF;
      tonePause--; //time gets counted down
    }
  }

  if (tone2TimeLeft > 0) {
  405d44:	2a00      	cmp	r2, #0
  405d46:	d147      	bne.n	405dd8 <_ZN10audioQueue9heartbeatEv+0xcc>
  }
  else {
    if (toneTimeLeft == 0) {
      //SPEAKER_OFF;
    }
    if (tone2Pause > 0) {
  405d48:	7a03      	ldrb	r3, [r0, #8]
  405d4a:	b10b      	cbz	r3, 405d50 <_ZN10audioQueue9heartbeatEv+0x44>
      tone2Pause--; //time gets counted down
  405d4c:	3b01      	subs	r3, #1
  405d4e:	7203      	strb	r3, [r0, #8]
    }
  }
}
  405d50:	bcf0      	pop	{r4, r5, r6, r7}
  405d52:	4770      	bx	lr
#if defined(SIMU)
  return;
#endif

  if (toneTimeLeft == 0) {
    if (tonePause == 0) {
  405d54:	7941      	ldrb	r1, [r0, #5]
  405d56:	bb31      	cbnz	r1, 405da6 <_ZN10audioQueue9heartbeatEv+0x9a>
      if (t_queueRidx != t_queueWidx) {
  405d58:	7804      	ldrb	r4, [r0, #0]
  405d5a:	7843      	ldrb	r3, [r0, #1]
  405d5c:	42a3      	cmp	r3, r4
  405d5e:	d021      	beq.n	405da4 <_ZN10audioQueue9heartbeatEv+0x98>
        toneFreq = queueToneFreq[t_queueRidx];
  405d60:	1901      	adds	r1, r0, r4
        toneTimeLeft = queueToneLength[t_queueRidx];
        toneFreqIncr = queueToneFreqIncr[t_queueRidx];
        tonePause = queueTonePause[t_queueRidx];
        if (!queueToneRepeat[t_queueRidx]--) {
  405d62:	f891 5059 	ldrb.w	r5, [r1, #89]	; 0x59
#endif

  if (toneTimeLeft == 0) {
    if (tonePause == 0) {
      if (t_queueRidx != t_queueWidx) {
        toneFreq = queueToneFreq[t_queueRidx];
  405d66:	7a4a      	ldrb	r2, [r1, #9]
        toneTimeLeft = queueToneLength[t_queueRidx];
  405d68:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
        toneFreqIncr = queueToneFreqIncr[t_queueRidx];
  405d6c:	f891 c01d 	ldrb.w	ip, [r1, #29]
        tonePause = queueTonePause[t_queueRidx];
  405d70:	f891 7045 	ldrb.w	r7, [r1, #69]	; 0x45
        if (!queueToneRepeat[t_queueRidx]--) {
  405d74:	1e6e      	subs	r6, r5, #1
#endif

  if (toneTimeLeft == 0) {
    if (tonePause == 0) {
      if (t_queueRidx != t_queueWidx) {
        toneFreq = queueToneFreq[t_queueRidx];
  405d76:	7082      	strb	r2, [r0, #2]
        toneTimeLeft = queueToneLength[t_queueRidx];
  405d78:	7103      	strb	r3, [r0, #4]
        toneFreqIncr = queueToneFreqIncr[t_queueRidx];
  405d7a:	f880 c003 	strb.w	ip, [r0, #3]
        tonePause = queueTonePause[t_queueRidx];
  405d7e:	7147      	strb	r7, [r0, #5]
        if (!queueToneRepeat[t_queueRidx]--) {
  405d80:	f881 6059 	strb.w	r6, [r1, #89]	; 0x59
  405d84:	2d00      	cmp	r5, #0
  405d86:	d1c6      	bne.n	405d16 <_ZN10audioQueue9heartbeatEv+0xa>
          t_queueRidx = (t_queueRidx + 1) % AUDIO_QUEUE_LENGTH;
  405d88:	f246 6167 	movw	r1, #26215	; 0x6667
  405d8c:	3401      	adds	r4, #1
  405d8e:	f2c6 6166 	movt	r1, #26214	; 0x6666
  405d92:	fb81 5104 	smull	r5, r1, r1, r4
  405d96:	08c9      	lsrs	r1, r1, #3
  405d98:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  405d9c:	eba4 0481 	sub.w	r4, r4, r1, lsl #2
  405da0:	7004      	strb	r4, [r0, #0]
  405da2:	e7b8      	b.n	405d16 <_ZN10audioQueue9heartbeatEv+0xa>
  return;
#endif

  if (toneTimeLeft == 0) {
    if (tonePause == 0) {
      if (t_queueRidx != t_queueWidx) {
  405da4:	460b      	mov	r3, r1
  }

  if ((toneFreq > 0) & (toneTimeLeft > 0)) {
    QUEUE_TONE(toneFreq, toneTimeLeft, toneFreqIncr);
  }
  else if (((tone2Freq > 0) & (tone2TimeLeft > 0)) & (tonePause == 0)) {
  405da6:	7984      	ldrb	r4, [r0, #6]
  405da8:	79c2      	ldrb	r2, [r0, #7]
  405daa:	1c25      	adds	r5, r4, #0
  405dac:	bf18      	it	ne
  405dae:	2501      	movne	r5, #1
  405db0:	2a00      	cmp	r2, #0
  405db2:	bf0c      	ite	eq
  405db4:	2500      	moveq	r5, #0
  405db6:	f005 0501 	andne.w	r5, r5, #1
  405dba:	2900      	cmp	r1, #0
  405dbc:	bf14      	ite	ne
  405dbe:	2100      	movne	r1, #0
  405dc0:	f005 0101 	andeq.w	r1, r5, #1
  405dc4:	bb21      	cbnz	r1, 405e10 <_ZN10audioQueue9heartbeatEv+0x104>
    //second flow tone here, priority on 1st, pause of 1st not allow to start second
    QUEUE_TONE(tone2Freq, tone2TimeLeft, 0);
  }

  if (toneTimeLeft > 0) {
  405dc6:	2b00      	cmp	r3, #0
  405dc8:	d13a      	bne.n	405e40 <_ZN10audioQueue9heartbeatEv+0x134>
    toneTimeLeft--; //time gets counted down
    toneFreq += toneFreqIncr;
  }
  else {
    if (tonePause > 0) {
  405dca:	7943      	ldrb	r3, [r0, #5]
  405dcc:	2b00      	cmp	r3, #0
  405dce:	d0b9      	beq.n	405d44 <_ZN10audioQueue9heartbeatEv+0x38>
      // SPEAKER_OFF;
      tonePause--; //time gets counted down
  405dd0:	3b01      	subs	r3, #1
  405dd2:	7143      	strb	r3, [r0, #5]
    }
  }

  if (tone2TimeLeft > 0) {
  405dd4:	2a00      	cmp	r2, #0
  405dd6:	d0b7      	beq.n	405d48 <_ZN10audioQueue9heartbeatEv+0x3c>
    tone2TimeLeft--; //time gets counted down
  405dd8:	3a01      	subs	r2, #1
  405dda:	71c2      	strb	r2, [r0, #7]
  405ddc:	e7b8      	b.n	405d50 <_ZN10audioQueue9heartbeatEv+0x44>
      }
    }
  }

  if ((toneFreq > 0) & (toneTimeLeft > 0)) {
    QUEUE_TONE(toneFreq, toneTimeLeft, toneFreqIncr);
  405dde:	b264      	sxtb	r4, r4
  405de0:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
  405de4:	ebc2 1602 	rsb	r6, r2, r2, lsl #4
  405de8:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  405dec:	eb02 0286 	add.w	r2, r2, r6, lsl #2
  405df0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
  405df4:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
  405df8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  405dfc:	1064      	asrs	r4, r4, #1
  405dfe:	1052      	asrs	r2, r2, #1
  405e00:	006d      	lsls	r5, r5, #1
uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
	if ( Sound_g.Sound_time == 0 )
	{
		Sound_g.Next_freq = frequency ;
		Sound_g.Next_frequency_increment = frequency_increment ;
  405e02:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
		Sound_g.Sound_time = time ;
  405e06:	f8c1 5080 	str.w	r5, [r1, #128]	; 0x80

uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
	if ( Sound_g.Sound_time == 0 )
	{
		Sound_g.Next_freq = frequency ;
  405e0a:	67ca      	str	r2, [r1, #124]	; 0x7c
  405e0c:	78c4      	ldrb	r4, [r0, #3]
  405e0e:	e793      	b.n	405d38 <_ZN10audioQueue9heartbeatEv+0x2c>
//	tone_start( 0 ) ;
}

uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
	if ( Sound_g.Sound_time == 0 )
  405e10:	490c      	ldr	r1, [pc, #48]	; (405e44 <_ZN10audioQueue9heartbeatEv+0x138>)
  405e12:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
  405e16:	2d00      	cmp	r5, #0
  405e18:	d1d5      	bne.n	405dc6 <_ZN10audioQueue9heartbeatEv+0xba>
  if ((toneFreq > 0) & (toneTimeLeft > 0)) {
    QUEUE_TONE(toneFreq, toneTimeLeft, toneFreqIncr);
  }
  else if (((tone2Freq > 0) & (tone2TimeLeft > 0)) & (tonePause == 0)) {
    //second flow tone here, priority on 1st, pause of 1st not allow to start second
    QUEUE_TONE(tone2Freq, tone2TimeLeft, 0);
  405e1a:	ebc4 1604 	rsb	r6, r4, r4, lsl #4
  405e1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  405e22:	eb04 0486 	add.w	r4, r4, r6, lsl #2
  405e26:	0052      	lsls	r2, r2, #1
  405e28:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
	if ( Sound_g.Sound_time == 0 )
	{
		Sound_g.Next_freq = frequency ;
		Sound_g.Next_frequency_increment = frequency_increment ;
  405e2c:	f8c1 5094 	str.w	r5, [r1, #148]	; 0x94
		Sound_g.Sound_time = time ;
  405e30:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  if ((toneFreq > 0) & (toneTimeLeft > 0)) {
    QUEUE_TONE(toneFreq, toneTimeLeft, toneFreqIncr);
  }
  else if (((tone2Freq > 0) & (tone2TimeLeft > 0)) & (tonePause == 0)) {
    //second flow tone here, priority on 1st, pause of 1st not allow to start second
    QUEUE_TONE(tone2Freq, tone2TimeLeft, 0);
  405e34:	1064      	asrs	r4, r4, #1
  405e36:	79c2      	ldrb	r2, [r0, #7]

uint32_t queueTone( uint32_t frequency, uint32_t time, uint32_t frequency_increment )
{
	if ( Sound_g.Sound_time == 0 )
	{
		Sound_g.Next_freq = frequency ;
  405e38:	67cc      	str	r4, [r1, #124]	; 0x7c
  405e3a:	e7c4      	b.n	405dc6 <_ZN10audioQueue9heartbeatEv+0xba>
        }
      }
    }
  }

  if ((toneFreq > 0) & (toneTimeLeft > 0)) {
  405e3c:	7941      	ldrb	r1, [r0, #5]
  405e3e:	e7b2      	b.n	405da6 <_ZN10audioQueue9heartbeatEv+0x9a>
  405e40:	78c4      	ldrb	r4, [r0, #3]
  405e42:	e77a      	b.n	405d3a <_ZN10audioQueue9heartbeatEv+0x2e>
  405e44:	20000108 	.word	0x20000108

00405e48 <_ZN10audioQueue4playEhhhha>:
  return result;
}

void audioQueue::play(uint8_t tFreq, uint8_t tLen, uint8_t tPause,
    uint8_t tFlags, int8_t tFreqIncr)
{
  405e48:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  405e4c:	f89d 4014 	ldrb.w	r4, [sp, #20]
  405e50:	f99d 7018 	ldrsb.w	r7, [sp, #24]
  if (tFlags & PLAY_SOUND_VARIO) {
  405e54:	f014 0f20 	tst.w	r4, #32
    tone2Freq = tFreq;
  405e58:	bf1e      	ittt	ne
  405e5a:	7181      	strbne	r1, [r0, #6]
    tone2TimeLeft = tLen;
  405e5c:	71c2      	strbne	r2, [r0, #7]
    tone2Pause = tPause;
  405e5e:	7203      	strbne	r3, [r0, #8]
}

void audioQueue::play(uint8_t tFreq, uint8_t tLen, uint8_t tPause,
    uint8_t tFlags, int8_t tFreqIncr)
{
  if (tFlags & PLAY_SOUND_VARIO) {
  405e60:	d13b      	bne.n	405eda <_ZN10audioQueue4playEhhhha+0x92>
    tone2Freq = tFreq;
    tone2TimeLeft = tLen;
    tone2Pause = tPause;
  }
  else {
    tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
  405e62:	4d27      	ldr	r5, [pc, #156]	; (405f00 <_ZN10audioQueue4playEhhhha+0xb8>)
  405e64:	f895 6072 	ldrb.w	r6, [r5, #114]	; 0x72
}

inline uint8_t audioQueue::getToneLength(uint8_t tLen)
{
  uint8_t result = tLen; // default
  if (g_eeGeneral.beeperLength < 0) {
  405e68:	f895 5071 	ldrb.w	r5, [r5, #113]	; 0x71
    tone2Freq = tFreq;
    tone2TimeLeft = tLen;
    tone2Pause = tPause;
  }
  else {
    tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
  405e6c:	360a      	adds	r6, #10
}

inline uint8_t audioQueue::getToneLength(uint8_t tLen)
{
  uint8_t result = tLen; // default
  if (g_eeGeneral.beeperLength < 0) {
  405e6e:	f345 0502 	sbfx	r5, r5, #0, #3
    tone2Freq = tFreq;
    tone2TimeLeft = tLen;
    tone2Pause = tPause;
  }
  else {
    tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
  405e72:	1989      	adds	r1, r1, r6
}

inline uint8_t audioQueue::getToneLength(uint8_t tLen)
{
  uint8_t result = tLen; // default
  if (g_eeGeneral.beeperLength < 0) {
  405e74:	b26e      	sxtb	r6, r5
  405e76:	2e00      	cmp	r6, #0
    tone2Freq = tFreq;
    tone2TimeLeft = tLen;
    tone2Pause = tPause;
  }
  else {
    tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
  405e78:	b2c9      	uxtb	r1, r1
}

inline uint8_t audioQueue::getToneLength(uint8_t tLen)
{
  uint8_t result = tLen; // default
  if (g_eeGeneral.beeperLength < 0) {
  405e7a:	b2ed      	uxtb	r5, r5
  405e7c:	db3a      	blt.n	405ef4 <_ZN10audioQueue4playEhhhha+0xac>
    result /= (1-g_eeGeneral.beeperLength);
  }
  if (g_eeGeneral.beeperLength > 0) {
  405e7e:	b115      	cbz	r5, 405e86 <_ZN10audioQueue4playEhhhha+0x3e>
    result *= (1+g_eeGeneral.beeperLength);
  405e80:	fb06 2202 	mla	r2, r6, r2, r2
  405e84:	b2d2      	uxtb	r2, r2
    tone2Pause = tPause;
  }
  else {
    tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
    tLen = getToneLength(tLen);
    if (tFlags & PLAY_NOW || (!busy() && empty())) {
  405e86:	06e5      	lsls	r5, r4, #27
  405e88:	bf48      	it	mi
  405e8a:	7805      	ldrbmi	r5, [r0, #0]
  405e8c:	d42c      	bmi.n	405ee8 <_ZN10audioQueue4playEhhhha+0xa0>
  405e8e:	7905      	ldrb	r5, [r0, #4]
  405e90:	2d00      	cmp	r5, #0
  405e92:	d025      	beq.n	405ee0 <_ZN10audioQueue4playEhhhha+0x98>
      tonePause = tPause;
      toneFreqIncr = tFreqIncr;
      t_queueWidx = t_queueRidx;
    }
    else {
      tFlags++;
  405e94:	3401      	adds	r4, #1
  405e96:	b2e4      	uxtb	r4, r4
    }

    tFlags &= 0x0f;
    if (tFlags) {
  405e98:	f014 040f 	ands.w	r4, r4, #15
  405e9c:	d01d      	beq.n	405eda <_ZN10audioQueue4playEhhhha+0x92>
      uint8_t next_queueWidx = (t_queueWidx + 1) % AUDIO_QUEUE_LENGTH;
  405e9e:	7845      	ldrb	r5, [r0, #1]
  405ea0:	f246 6c67 	movw	ip, #26215	; 0x6667
  405ea4:	1c6e      	adds	r6, r5, #1
  405ea6:	f2c6 6c66 	movt	ip, #26214	; 0x6666
  405eaa:	fb8c 8c06 	smull	r8, ip, ip, r6
  405eae:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  405eb2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
  405eb6:	eba6 068c 	sub.w	r6, r6, ip, lsl #2
      if (next_queueWidx != t_queueRidx) {
  405eba:	f890 8000 	ldrb.w	r8, [r0]
      tFlags++;
    }

    tFlags &= 0x0f;
    if (tFlags) {
      uint8_t next_queueWidx = (t_queueWidx + 1) % AUDIO_QUEUE_LENGTH;
  405ebe:	b2f6      	uxtb	r6, r6
      if (next_queueWidx != t_queueRidx) {
  405ec0:	45b0      	cmp	r8, r6
  405ec2:	d00a      	beq.n	405eda <_ZN10audioQueue4playEhhhha+0x92>
        queueToneFreq[t_queueWidx] = tFreq;
  405ec4:	1945      	adds	r5, r0, r5
        queueToneLength[t_queueWidx] = tLen;
        queueTonePause[t_queueWidx] = tPause;
        queueToneRepeat[t_queueWidx] = tFlags - 1;
  405ec6:	3c01      	subs	r4, #1

    tFlags &= 0x0f;
    if (tFlags) {
      uint8_t next_queueWidx = (t_queueWidx + 1) % AUDIO_QUEUE_LENGTH;
      if (next_queueWidx != t_queueRidx) {
        queueToneFreq[t_queueWidx] = tFreq;
  405ec8:	7269      	strb	r1, [r5, #9]
        queueToneLength[t_queueWidx] = tLen;
  405eca:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
        queueTonePause[t_queueWidx] = tPause;
  405ece:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
        queueToneRepeat[t_queueWidx] = tFlags - 1;
  405ed2:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
        queueToneFreqIncr[t_queueWidx] = tFreqIncr;
  405ed6:	776f      	strb	r7, [r5, #29]
        t_queueWidx = next_queueWidx;
  405ed8:	7046      	strb	r6, [r0, #1]
      }
    }
  }
}
  405eda:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  405ede:	4770      	bx	lr
  405ee0:	7805      	ldrb	r5, [r0, #0]
    tone2Pause = tPause;
  }
  else {
    tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
    tLen = getToneLength(tLen);
    if (tFlags & PLAY_NOW || (!busy() && empty())) {
  405ee2:	7846      	ldrb	r6, [r0, #1]
  405ee4:	42ae      	cmp	r6, r5
  405ee6:	d1d5      	bne.n	405e94 <_ZN10audioQueue4playEhhhha+0x4c>
      toneFreq = tFreq;
  405ee8:	7081      	strb	r1, [r0, #2]
      toneTimeLeft = tLen;
  405eea:	7102      	strb	r2, [r0, #4]
      tonePause = tPause;
  405eec:	7143      	strb	r3, [r0, #5]
      toneFreqIncr = tFreqIncr;
  405eee:	70c7      	strb	r7, [r0, #3]
      t_queueWidx = t_queueRidx;
  405ef0:	7045      	strb	r5, [r0, #1]
  405ef2:	e7d1      	b.n	405e98 <_ZN10audioQueue4playEhhhha+0x50>

inline uint8_t audioQueue::getToneLength(uint8_t tLen)
{
  uint8_t result = tLen; // default
  if (g_eeGeneral.beeperLength < 0) {
    result /= (1-g_eeGeneral.beeperLength);
  405ef4:	f1c6 0601 	rsb	r6, r6, #1
  405ef8:	fb92 f2f6 	sdiv	r2, r2, r6
  405efc:	b2d2      	uxtb	r2, r2
  405efe:	e7c2      	b.n	405e86 <_ZN10audioQueue4playEhhhha+0x3e>
  405f00:	20000108 	.word	0x20000108

00405f04 <_ZN10audioQueue5eventEhh>:
    }
  }
}

void audioQueue::event(uint8_t e, uint8_t f)
{
  405f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (g_eeGeneral.flashBeep && (e <= AU_ERROR || e >= AU_WARNING1))
  405f06:	4b97      	ldr	r3, [pc, #604]	; (406164 <_ZN10audioQueue5eventEhh+0x260>)
    }
  }
}

void audioQueue::event(uint8_t e, uint8_t f)
{
  405f08:	4604      	mov	r4, r0
  if (g_eeGeneral.flashBeep && (e <= AU_ERROR || e >= AU_WARNING1))
  405f0a:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    }
  }
}

void audioQueue::event(uint8_t e, uint8_t f)
{
  405f0e:	b083      	sub	sp, #12
  if (g_eeGeneral.flashBeep && (e <= AU_ERROR || e >= AU_WARNING1))
  405f10:	f000 0008 	and.w	r0, r0, #8
  405f14:	b2c0      	uxtb	r0, r0
  405f16:	b118      	cbz	r0, 405f20 <_ZN10audioQueue5eventEhh+0x1c>
  405f18:	1ec8      	subs	r0, r1, #3
  405f1a:	b2c0      	uxtb	r0, r0
  405f1c:	2803      	cmp	r0, #3
  405f1e:	d845      	bhi.n	405fac <_ZN10audioQueue5eventEhh+0xa8>
    g_LightOffCounter = FLASH_DURATION;

  if (g_eeGeneral.beeperMode>0 || (g_eeGeneral.beeperMode==0 && e>=AU_WARNING1) || (g_eeGeneral.beeperMode>=-1 && e<=AU_ERROR)) {
  405f20:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
  405f24:	f003 0318 	and.w	r3, r3, #24
  405f28:	2b08      	cmp	r3, #8
  405f2a:	d037      	beq.n	405f9c <_ZN10audioQueue5eventEhh+0x98>
  405f2c:	f1d3 0001 	rsbs	r0, r3, #1
  405f30:	bf38      	it	cc
  405f32:	2000      	movcc	r0, #0
  405f34:	2906      	cmp	r1, #6
  405f36:	bf94      	ite	ls
  405f38:	2000      	movls	r0, #0
  405f3a:	f000 0001 	andhi.w	r0, r0, #1
  405f3e:	bb68      	cbnz	r0, 405f9c <_ZN10audioQueue5eventEhh+0x98>
  405f40:	3b10      	subs	r3, #16
  405f42:	bf18      	it	ne
  405f44:	2301      	movne	r3, #1
  405f46:	2902      	cmp	r1, #2
  405f48:	bf8c      	ite	hi
  405f4a:	2300      	movhi	r3, #0
  405f4c:	f003 0301 	andls.w	r3, r3, #1
  405f50:	b353      	cbz	r3, 405fa8 <_ZN10audioQueue5eventEhh+0xa4>
    if (e < AU_FRSKY_FIRST || empty()) {
      switch (e) {
  405f52:	2920      	cmp	r1, #32
  405f54:	d828      	bhi.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
  405f56:	e8df f011 	tbh	[pc, r1, lsl #1]
  405f5a:	012d      	.short	0x012d
  405f5c:	0149012f 	.word	0x0149012f
  405f60:	01a20197 	.word	0x01a20197
  405f64:	00440039 	.word	0x00440039
  405f68:	01f601eb 	.word	0x01f601eb
  405f6c:	003901ae 	.word	0x003901ae
  405f70:	01df01c4 	.word	0x01df01c4
  405f74:	018d0183 	.word	0x018d0183
  405f78:	0175016b 	.word	0x0175016b
  405f7c:	002e0177 	.word	0x002e0177
  405f80:	0154002e 	.word	0x0154002e
  405f84:	00500160 	.word	0x00500160
  405f88:	00750059 	.word	0x00750059
  405f8c:	00ae0093 	.word	0x00ae0093
  405f90:	00dd00c2 	.word	0x00dd00c2
  405f94:	010900f9 	.word	0x010900f9
  405f98:	01b90179 	.word	0x01b90179
{
  if (g_eeGeneral.flashBeep && (e <= AU_ERROR || e >= AU_WARNING1))
    g_LightOffCounter = FLASH_DURATION;

  if (g_eeGeneral.beeperMode>0 || (g_eeGeneral.beeperMode==0 && e>=AU_WARNING1) || (g_eeGeneral.beeperMode>=-1 && e<=AU_ERROR)) {
    if (e < AU_FRSKY_FIRST || empty()) {
  405f9c:	2913      	cmp	r1, #19
  405f9e:	d9d8      	bls.n	405f52 <_ZN10audioQueue5eventEhh+0x4e>
  405fa0:	7820      	ldrb	r0, [r4, #0]
  405fa2:	7863      	ldrb	r3, [r4, #1]
  405fa4:	4298      	cmp	r0, r3
  405fa6:	d0d4      	beq.n	405f52 <_ZN10audioQueue5eventEhh+0x4e>
        default:
          break;
      }
    }
  }
}
  405fa8:	b003      	add	sp, #12
  405faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

void audioQueue::event(uint8_t e, uint8_t f)
{
  if (g_eeGeneral.flashBeep && (e <= AU_ERROR || e >= AU_WARNING1))
    g_LightOffCounter = FLASH_DURATION;
  405fac:	486e      	ldr	r0, [pc, #440]	; (406168 <_ZN10audioQueue5eventEhh+0x264>)
  405fae:	2532      	movs	r5, #50	; 0x32
  405fb0:	f8a0 5b16 	strh.w	r5, [r0, #2838]	; 0xb16
  405fb4:	e7b4      	b.n	405f20 <_ZN10audioQueue5eventEhh+0x1c>
        case AU_TIMER_10:
          play(BEEP_DEFAULT_FREQ + 50, 15, 3, PLAY_NOW);
          break;
        // time <3 seconds left
        case AU_TIMER_LT3:
          play(BEEP_DEFAULT_FREQ + 50, 15, 3, PLAY_NOW);
  405fb6:	2310      	movs	r3, #16
        case AU_TIMER_30:
          play(BEEP_DEFAULT_FREQ + 50, 15, 3, 2|PLAY_NOW);
          break;
        // time 20 seconds left
        case AU_TIMER_20:
          play(BEEP_DEFAULT_FREQ + 50, 15, 3, 1|PLAY_NOW);
  405fb8:	9300      	str	r3, [sp, #0]
  405fba:	2300      	movs	r3, #0
  405fbc:	9301      	str	r3, [sp, #4]
  405fbe:	4620      	mov	r0, r4
  405fc0:	2178      	movs	r1, #120	; 0x78
  405fc2:	220f      	movs	r2, #15
  405fc4:	2303      	movs	r3, #3
  405fc6:	f7ff ff3f 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  405fca:	e7ed      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_KEYPAD_DOWN:
          play(BEEP_KEY_DOWN_FREQ, 10, 1, PLAY_NOW);
          break;
        // menu display (also used by a few generic beeps)
        case AU_MENUS:
          play(BEEP_DEFAULT_FREQ, 10, 2, PLAY_NOW);
  405fcc:	2310      	movs	r3, #16
  405fce:	9300      	str	r3, [sp, #0]
  405fd0:	2300      	movs	r3, #0
  405fd2:	9301      	str	r3, [sp, #4]
  405fd4:	4620      	mov	r0, r4
  405fd6:	2146      	movs	r1, #70	; 0x46
  405fd8:	220a      	movs	r2, #10
  405fda:	2302      	movs	r3, #2
  405fdc:	f7ff ff34 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  405fe0:	e7e2      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        // trim move
        case AU_TRIM_MOVE:
          play(f, 6, 1, PLAY_NOW);
  405fe2:	2310      	movs	r3, #16
  405fe4:	f04f 0e00 	mov.w	lr, #0
  405fe8:	e88d 4008 	stmia.w	sp, {r3, lr}
  405fec:	4611      	mov	r1, r2
  405fee:	4620      	mov	r0, r4
  405ff0:	2206      	movs	r2, #6
  405ff2:	2301      	movs	r3, #1
  405ff4:	f7ff ff28 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  405ff8:	e7d6      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
          break;
        case AU_FRSKY_WARN2:
          play(BEEP_DEFAULT_FREQ+30,15,5,2);
          break;
        case AU_FRSKY_CHEEP:
          play(BEEP_DEFAULT_FREQ+30,10,2,2,2);
  405ffa:	2302      	movs	r3, #2
  405ffc:	4620      	mov	r0, r4
  405ffe:	2164      	movs	r1, #100	; 0x64
  406000:	220a      	movs	r2, #10
  406002:	9300      	str	r3, [sp, #0]
  406004:	9301      	str	r3, [sp, #4]
  406006:	f7ff ff1f 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40600a:	e7cd      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_RING:
          play(BEEP_DEFAULT_FREQ+25,5,2,10);
  40600c:	260a      	movs	r6, #10
  40600e:	2500      	movs	r5, #0
  406010:	4620      	mov	r0, r4
  406012:	215f      	movs	r1, #95	; 0x5f
  406014:	2205      	movs	r2, #5
  406016:	2302      	movs	r3, #2
  406018:	9600      	str	r6, [sp, #0]
  40601a:	9501      	str	r5, [sp, #4]
          play(BEEP_DEFAULT_FREQ+25,5,10,1);
  40601c:	2701      	movs	r7, #1
          break;
        case AU_FRSKY_CHEEP:
          play(BEEP_DEFAULT_FREQ+30,10,2,2,2);
          break;
        case AU_FRSKY_RING:
          play(BEEP_DEFAULT_FREQ+25,5,2,10);
  40601e:	f7ff ff13 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(BEEP_DEFAULT_FREQ+25,5,10,1);
  406022:	4633      	mov	r3, r6
  406024:	4620      	mov	r0, r4
  406026:	215f      	movs	r1, #95	; 0x5f
  406028:	2205      	movs	r2, #5
  40602a:	9700      	str	r7, [sp, #0]
  40602c:	9501      	str	r5, [sp, #4]
  40602e:	f7ff ff0b 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(BEEP_DEFAULT_FREQ+25,5,2,10);
  406032:	4620      	mov	r0, r4
  406034:	215f      	movs	r1, #95	; 0x5f
  406036:	2205      	movs	r2, #5
  406038:	2302      	movs	r3, #2
  40603a:	9600      	str	r6, [sp, #0]
  40603c:	9501      	str	r5, [sp, #4]
  40603e:	f7ff ff03 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406042:	e7b1      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_SCIFI:
          play(80,10,3,2,-1);
  406044:	2602      	movs	r6, #2
  406046:	4620      	mov	r0, r4
  406048:	2150      	movs	r1, #80	; 0x50
  40604a:	220a      	movs	r2, #10
  40604c:	2303      	movs	r3, #3
  40604e:	f04f 37ff 	mov.w	r7, #4294967295
          play(60,10,3,2,1);
  406052:	2501      	movs	r5, #1
          play(BEEP_DEFAULT_FREQ+25,5,2,10);
          play(BEEP_DEFAULT_FREQ+25,5,10,1);
          play(BEEP_DEFAULT_FREQ+25,5,2,10);
          break;
        case AU_FRSKY_SCIFI:
          play(80,10,3,2,-1);
  406054:	9600      	str	r6, [sp, #0]
  406056:	9701      	str	r7, [sp, #4]
  406058:	f7ff fef6 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(60,10,3,2,1);
  40605c:	4620      	mov	r0, r4
  40605e:	213c      	movs	r1, #60	; 0x3c
  406060:	220a      	movs	r2, #10
  406062:	2303      	movs	r3, #3
  406064:	9600      	str	r6, [sp, #0]
  406066:	9501      	str	r5, [sp, #4]
  406068:	f7ff feee 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(70,10,1,0);
  40606c:	2300      	movs	r3, #0
  40606e:	9300      	str	r3, [sp, #0]
  406070:	9301      	str	r3, [sp, #4]
  406072:	4620      	mov	r0, r4
  406074:	2146      	movs	r1, #70	; 0x46
  406076:	220a      	movs	r2, #10
  406078:	462b      	mov	r3, r5
  40607a:	f7ff fee5 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40607e:	e793      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_ROBOT:
          play(70,5,1,1);
  406080:	2501      	movs	r5, #1
  406082:	2600      	movs	r6, #0
  406084:	4620      	mov	r0, r4
  406086:	462b      	mov	r3, r5
  406088:	2146      	movs	r1, #70	; 0x46
  40608a:	2205      	movs	r2, #5
  40608c:	e88d 0060 	stmia.w	sp, {r5, r6}
  406090:	f7ff feda 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(50,15,2,1);
  406094:	4620      	mov	r0, r4
  406096:	2132      	movs	r1, #50	; 0x32
  406098:	220f      	movs	r2, #15
  40609a:	2302      	movs	r3, #2
  40609c:	e88d 0060 	stmia.w	sp, {r5, r6}
  4060a0:	f7ff fed2 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(80,15,2,1);
  4060a4:	4620      	mov	r0, r4
  4060a6:	2150      	movs	r1, #80	; 0x50
  4060a8:	220f      	movs	r2, #15
  4060aa:	2302      	movs	r3, #2
  4060ac:	e88d 0060 	stmia.w	sp, {r5, r6}
  4060b0:	f7ff feca 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  4060b4:	e778      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_CHIRP:
          play(BEEP_DEFAULT_FREQ+40,5,1,2);
  4060b6:	2500      	movs	r5, #0
  4060b8:	4620      	mov	r0, r4
  4060ba:	216e      	movs	r1, #110	; 0x6e
  4060bc:	2205      	movs	r2, #5
  4060be:	2301      	movs	r3, #1
  4060c0:	2602      	movs	r6, #2
  4060c2:	9600      	str	r6, [sp, #0]
  4060c4:	9501      	str	r5, [sp, #4]
  4060c6:	f7ff febf 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(BEEP_DEFAULT_FREQ+54,5,1,3);
  4060ca:	2303      	movs	r3, #3
  4060cc:	e88d 0028 	stmia.w	sp, {r3, r5}
  4060d0:	4620      	mov	r0, r4
  4060d2:	217c      	movs	r1, #124	; 0x7c
  4060d4:	2205      	movs	r2, #5
  4060d6:	2301      	movs	r3, #1
  4060d8:	f7ff feb6 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  4060dc:	e764      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_TADA:
          play(50,5,5);
  4060de:	2205      	movs	r2, #5
  4060e0:	2500      	movs	r5, #0
  4060e2:	4620      	mov	r0, r4
  4060e4:	2132      	movs	r1, #50	; 0x32
  4060e6:	4613      	mov	r3, r2
  4060e8:	9500      	str	r5, [sp, #0]
  4060ea:	9501      	str	r5, [sp, #4]
  4060ec:	f7ff feac 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(90,5,5);
  4060f0:	2205      	movs	r2, #5
  4060f2:	4620      	mov	r0, r4
  4060f4:	215a      	movs	r1, #90	; 0x5a
  4060f6:	4613      	mov	r3, r2
  4060f8:	9500      	str	r5, [sp, #0]
  4060fa:	9501      	str	r5, [sp, #4]
  4060fc:	f7ff fea4 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(110,3,4,2);
  406100:	2302      	movs	r3, #2
  406102:	e88d 0028 	stmia.w	sp, {r3, r5}
  406106:	4620      	mov	r0, r4
  406108:	216e      	movs	r1, #110	; 0x6e
  40610a:	2203      	movs	r2, #3
  40610c:	2304      	movs	r3, #4
  40610e:	f7ff fe9b 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406112:	e749      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_CRICKET:
          play(80,5,10,3);
  406114:	2500      	movs	r5, #0
  406116:	2603      	movs	r6, #3
  406118:	4620      	mov	r0, r4
  40611a:	2150      	movs	r1, #80	; 0x50
  40611c:	2205      	movs	r2, #5
  40611e:	230a      	movs	r3, #10
  406120:	9600      	str	r6, [sp, #0]
  406122:	9501      	str	r5, [sp, #4]
          play(80,5,20,1);
  406124:	2701      	movs	r7, #1
          play(50,5,5);
          play(90,5,5);
          play(110,3,4,2);
          break;
        case AU_FRSKY_CRICKET:
          play(80,5,10,3);
  406126:	f7ff fe8f 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(80,5,20,1);
  40612a:	4620      	mov	r0, r4
  40612c:	2150      	movs	r1, #80	; 0x50
  40612e:	2205      	movs	r2, #5
  406130:	2314      	movs	r3, #20
  406132:	9700      	str	r7, [sp, #0]
  406134:	9501      	str	r5, [sp, #4]
  406136:	f7ff fe87 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(80,5,10,3);
  40613a:	4620      	mov	r0, r4
  40613c:	2150      	movs	r1, #80	; 0x50
  40613e:	2205      	movs	r2, #5
  406140:	230a      	movs	r3, #10
  406142:	9600      	str	r6, [sp, #0]
  406144:	9501      	str	r5, [sp, #4]
  406146:	f7ff fe7f 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40614a:	e72d      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_SIREN:
          play(10,20,5,2,1);
  40614c:	2102      	movs	r1, #2
  40614e:	2301      	movs	r3, #1
  406150:	e88d 000a 	stmia.w	sp, {r1, r3}
  406154:	4620      	mov	r0, r4
  406156:	210a      	movs	r1, #10
  406158:	2214      	movs	r2, #20
  40615a:	2305      	movs	r3, #5
  40615c:	f7ff fe74 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406160:	e722      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
  406162:	bf00      	nop
  406164:	20000108 	.word	0x20000108
  406168:	20001200 	.word	0x20001200
        case AU_FRSKY_ALARMC:
          play(50,4,10,2);
  40616c:	2500      	movs	r5, #0
  40616e:	2702      	movs	r7, #2
  406170:	4620      	mov	r0, r4
  406172:	2132      	movs	r1, #50	; 0x32
  406174:	2204      	movs	r2, #4
  406176:	230a      	movs	r3, #10
          play(70,8,20,1);
  406178:	2601      	movs	r6, #1
          break;
        case AU_FRSKY_SIREN:
          play(10,20,5,2,1);
          break;
        case AU_FRSKY_ALARMC:
          play(50,4,10,2);
  40617a:	9700      	str	r7, [sp, #0]
  40617c:	9501      	str	r5, [sp, #4]
  40617e:	f7ff fe63 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(70,8,20,1);
  406182:	4620      	mov	r0, r4
  406184:	2146      	movs	r1, #70	; 0x46
  406186:	2208      	movs	r2, #8
  406188:	2314      	movs	r3, #20
  40618a:	9600      	str	r6, [sp, #0]
  40618c:	9501      	str	r5, [sp, #4]
  40618e:	f7ff fe5b 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(50,8,10,2);
  406192:	4620      	mov	r0, r4
  406194:	2132      	movs	r1, #50	; 0x32
  406196:	2208      	movs	r2, #8
  406198:	230a      	movs	r3, #10
  40619a:	9700      	str	r7, [sp, #0]
  40619c:	9501      	str	r5, [sp, #4]
  40619e:	f7ff fe53 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(70,4,20,1);
  4061a2:	4620      	mov	r0, r4
  4061a4:	2146      	movs	r1, #70	; 0x46
  4061a6:	2204      	movs	r2, #4
  4061a8:	2314      	movs	r3, #20
  4061aa:	9600      	str	r6, [sp, #0]
  4061ac:	9501      	str	r5, [sp, #4]
  4061ae:	f7ff fe4b 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  4061b2:	e6f9      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
  if (g_eeGeneral.beeperMode>0 || (g_eeGeneral.beeperMode==0 && e>=AU_WARNING1) || (g_eeGeneral.beeperMode>=-1 && e<=AU_ERROR)) {
    if (e < AU_FRSKY_FIRST || empty()) {
      switch (e) {
        // inactivity timer alert
        case AU_INACTIVITY:
          play(70, 10, 2, 2|PLAY_NOW);
  4061b4:	2312      	movs	r3, #18
  4061b6:	e70a      	b.n	405fce <_ZN10audioQueue5eventEhh+0xca>
          break;
        // low battery in tx
        case AU_TX_BATTERY_LOW:
          if (empty()) {
  4061b8:	7822      	ldrb	r2, [r4, #0]
  4061ba:	7863      	ldrb	r3, [r4, #1]
  4061bc:	429a      	cmp	r2, r3
  4061be:	f47f aef3 	bne.w	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
            play(60, 20, 3, 2, 1);
  4061c2:	2502      	movs	r5, #2
  4061c4:	4620      	mov	r0, r4
  4061c6:	213c      	movs	r1, #60	; 0x3c
  4061c8:	2214      	movs	r2, #20
  4061ca:	2303      	movs	r3, #3
  4061cc:	2601      	movs	r6, #1
  4061ce:	9500      	str	r5, [sp, #0]
  4061d0:	9601      	str	r6, [sp, #4]
  4061d2:	f7ff fe39 	bl	405e48 <_ZN10audioQueue4playEhhhha>
            play(80, 20, 3, 2, -1);
  4061d6:	f04f 33ff 	mov.w	r3, #4294967295
  4061da:	9301      	str	r3, [sp, #4]
  4061dc:	4620      	mov	r0, r4
  4061de:	2150      	movs	r1, #80	; 0x50
  4061e0:	2214      	movs	r2, #20
  4061e2:	2303      	movs	r3, #3
  4061e4:	9500      	str	r5, [sp, #0]
  4061e6:	f7ff fe2f 	bl	405e48 <_ZN10audioQueue4playEhhhha>
  4061ea:	e6dd      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
          }
          break;
        // error
        case AU_ERROR:
          play(BEEP_DEFAULT_FREQ, 40, 1, PLAY_NOW);
  4061ec:	2110      	movs	r1, #16
  4061ee:	2300      	movs	r3, #0
  4061f0:	e88d 000a 	stmia.w	sp, {r1, r3}
  4061f4:	4620      	mov	r0, r4
  4061f6:	2146      	movs	r1, #70	; 0x46
  4061f8:	2228      	movs	r2, #40	; 0x28
  4061fa:	2301      	movs	r3, #1
  4061fc:	f7ff fe24 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406200:	e6d2      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        // time <3 seconds left
        case AU_TIMER_LT3:
          play(BEEP_DEFAULT_FREQ + 50, 15, 3, PLAY_NOW);
          break;
        case AU_FRSKY_WARN1:
          play(BEEP_DEFAULT_FREQ+20,15,5,2);
  406202:	2302      	movs	r3, #2
  406204:	f04f 0e00 	mov.w	lr, #0
  406208:	e88d 4008 	stmia.w	sp, {r3, lr}
  40620c:	4620      	mov	r0, r4
  40620e:	215a      	movs	r1, #90	; 0x5a
  406210:	220f      	movs	r2, #15
  406212:	2305      	movs	r3, #5
  406214:	f7ff fe18 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406218:	e6c6      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_FRSKY_WARN2:
          play(BEEP_DEFAULT_FREQ+30,15,5,2);
  40621a:	2002      	movs	r0, #2
  40621c:	2300      	movs	r3, #0
  40621e:	e88d 0009 	stmia.w	sp, {r0, r3}
  406222:	2164      	movs	r1, #100	; 0x64
  406224:	4620      	mov	r0, r4
  406226:	220f      	movs	r2, #15
  406228:	2305      	movs	r3, #5
  40622a:	f7ff fe0d 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40622e:	e6bb      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_MIX_WARNING_2:
          play(BEEP_DEFAULT_FREQ + 52, 6, 0, PLAY_NOW);
          break;
        // mix warning 3
        case AU_MIX_WARNING_3:
          play(BEEP_DEFAULT_FREQ + 54, 6, 0, PLAY_NOW);
  406230:	2210      	movs	r2, #16
  406232:	2300      	movs	r3, #0
  406234:	e88d 000c 	stmia.w	sp, {r2, r3}
  406238:	4620      	mov	r0, r4
  40623a:	217c      	movs	r1, #124	; 0x7c
  40623c:	2206      	movs	r2, #6
  40623e:	f7ff fe03 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406242:	e6b1      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        // time 30 seconds left
        case AU_TIMER_30:
          play(BEEP_DEFAULT_FREQ + 50, 15, 3, 2|PLAY_NOW);
  406244:	2312      	movs	r3, #18
  406246:	e6b7      	b.n	405fb8 <_ZN10audioQueue5eventEhh+0xb4>
          break;
        // time 20 seconds left
        case AU_TIMER_20:
          play(BEEP_DEFAULT_FREQ + 50, 15, 3, 1|PLAY_NOW);
  406248:	2311      	movs	r3, #17
  40624a:	e6b5      	b.n	405fb8 <_ZN10audioQueue5eventEhh+0xb4>
          play(70,8,20,1);
          play(50,8,10,2);
          play(70,4,20,1);
          break;
        case AU_FRSKY_RATATA:
          play(BEEP_DEFAULT_FREQ+50,5,10,10);
  40624c:	2200      	movs	r2, #0
  40624e:	230a      	movs	r3, #10
  406250:	9201      	str	r2, [sp, #4]
  406252:	4620      	mov	r0, r4
  406254:	2178      	movs	r1, #120	; 0x78
  406256:	2205      	movs	r2, #5
  406258:	9300      	str	r3, [sp, #0]
  40625a:	f7ff fdf5 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40625e:	e6a3      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_POT_STICK_MIDDLE:
          play(BEEP_DEFAULT_FREQ + 50, 10, 1, PLAY_NOW);
          break;
        // mix warning 1
        case AU_MIX_WARNING_1:
          play(BEEP_DEFAULT_FREQ + 50, 6, 0, PLAY_NOW);
  406260:	2210      	movs	r2, #16
  406262:	2300      	movs	r3, #0
  406264:	e88d 000c 	stmia.w	sp, {r2, r3}
  406268:	4620      	mov	r0, r4
  40626a:	2178      	movs	r1, #120	; 0x78
  40626c:	2206      	movs	r2, #6
  40626e:	f7ff fdeb 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406272:	e699      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        // mix warning 2
        case AU_MIX_WARNING_2:
          play(BEEP_DEFAULT_FREQ + 52, 6, 0, PLAY_NOW);
  406274:	2210      	movs	r2, #16
  406276:	2300      	movs	r3, #0
  406278:	e88d 000c 	stmia.w	sp, {r2, r3}
  40627c:	4620      	mov	r0, r4
  40627e:	217a      	movs	r1, #122	; 0x7a
  406280:	2206      	movs	r2, #6
  406282:	f7ff fde1 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406286:	e68f      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_ERROR:
          play(BEEP_DEFAULT_FREQ, 40, 1, PLAY_NOW);
          break;
        // keypad up (seems to be used when going left/right through system menu options. 0-100 scales etc)
        case AU_KEYPAD_UP:
          play(BEEP_KEY_UP_FREQ, 10, 1, PLAY_NOW);
  406288:	2210      	movs	r2, #16
  40628a:	2300      	movs	r3, #0
  40628c:	e88d 000c 	stmia.w	sp, {r2, r3}
  406290:	4620      	mov	r0, r4
  406292:	214b      	movs	r1, #75	; 0x4b
  406294:	220a      	movs	r2, #10
  406296:	2301      	movs	r3, #1
  406298:	f7ff fdd6 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40629c:	e684      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        // keypad down (seems to be used when going left/right through system menu options. 0-100 scales etc)
        case AU_KEYPAD_DOWN:
          play(BEEP_KEY_DOWN_FREQ, 10, 1, PLAY_NOW);
  40629e:	2310      	movs	r3, #16
  4062a0:	f04f 0c00 	mov.w	ip, #0
  4062a4:	e88d 1008 	stmia.w	sp, {r3, ip}
  4062a8:	4620      	mov	r0, r4
  4062aa:	2141      	movs	r1, #65	; 0x41
  4062ac:	220a      	movs	r2, #10
  4062ae:	2301      	movs	r3, #1
  4062b0:	f7ff fdca 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  4062b4:	e678      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_WARNING2:
          play(BEEP_DEFAULT_FREQ, 20, 1, PLAY_NOW);
          break;
        // warning three
        case AU_WARNING3:
          play(BEEP_DEFAULT_FREQ, 30, 1, PLAY_NOW);
  4062b6:	2210      	movs	r2, #16
  4062b8:	2300      	movs	r3, #0
  4062ba:	e88d 000c 	stmia.w	sp, {r2, r3}
  4062be:	4620      	mov	r0, r4
  4062c0:	2146      	movs	r1, #70	; 0x46
  4062c2:	221e      	movs	r2, #30
  4062c4:	2301      	movs	r3, #1
  4062c6:	f7ff fdbf 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  4062ca:	e66d      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
          break;
        case AU_FRSKY_RATATA:
          play(BEEP_DEFAULT_FREQ+50,5,10,10);
          break;
        case AU_FRSKY_TICK:
          play(BEEP_DEFAULT_FREQ+50,5,50,2);
  4062cc:	2202      	movs	r2, #2
  4062ce:	2300      	movs	r3, #0
  4062d0:	e88d 000c 	stmia.w	sp, {r2, r3}
  4062d4:	4620      	mov	r0, r4
  4062d6:	2178      	movs	r1, #120	; 0x78
  4062d8:	2205      	movs	r2, #5
  4062da:	2332      	movs	r3, #50	; 0x32
  4062dc:	f7ff fdb4 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  4062e0:	e662      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_WARNING3:
          play(BEEP_DEFAULT_FREQ, 30, 1, PLAY_NOW);
          break;
        // startup tune
        case AU_TADA:
          play(50, 10, 5);
  4062e2:	2500      	movs	r5, #0
  4062e4:	4620      	mov	r0, r4
  4062e6:	2132      	movs	r1, #50	; 0x32
  4062e8:	220a      	movs	r2, #10
  4062ea:	2305      	movs	r3, #5
  4062ec:	9500      	str	r5, [sp, #0]
  4062ee:	9501      	str	r5, [sp, #4]
  4062f0:	f7ff fdaa 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(90, 10, 5);
  4062f4:	4620      	mov	r0, r4
  4062f6:	215a      	movs	r1, #90	; 0x5a
  4062f8:	220a      	movs	r2, #10
  4062fa:	2305      	movs	r3, #5
  4062fc:	9500      	str	r5, [sp, #0]
  4062fe:	9501      	str	r5, [sp, #4]
  406300:	f7ff fda2 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          play(110, 5, 4, 2);
  406304:	2302      	movs	r3, #2
  406306:	e88d 0028 	stmia.w	sp, {r3, r5}
  40630a:	4620      	mov	r0, r4
  40630c:	216e      	movs	r1, #110	; 0x6e
  40630e:	2205      	movs	r2, #5
  406310:	2304      	movs	r3, #4
  406312:	f7ff fd99 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406316:	e647      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        // pot/stick center
        case AU_POT_STICK_MIDDLE:
          play(BEEP_DEFAULT_FREQ + 50, 10, 1, PLAY_NOW);
  406318:	2310      	movs	r3, #16
  40631a:	f04f 0c00 	mov.w	ip, #0
  40631e:	e88d 1008 	stmia.w	sp, {r3, ip}
  406322:	4620      	mov	r0, r4
  406324:	2178      	movs	r1, #120	; 0x78
  406326:	220a      	movs	r2, #10
  406328:	2301      	movs	r3, #1
  40632a:	f7ff fd8d 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40632e:	e63b      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        case AU_TRIM_MIDDLE:
          play(BEEP_DEFAULT_FREQ, 10, 2, PLAY_NOW);
          break;
        // warning one
        case AU_WARNING1:
          play(BEEP_DEFAULT_FREQ, 10, 1, PLAY_NOW);
  406330:	2010      	movs	r0, #16
  406332:	2300      	movs	r3, #0
  406334:	e88d 0009 	stmia.w	sp, {r0, r3}
  406338:	2146      	movs	r1, #70	; 0x46
  40633a:	4620      	mov	r0, r4
  40633c:	220a      	movs	r2, #10
  40633e:	2301      	movs	r3, #1
  406340:	f7ff fd82 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  406344:	e630      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>
        // warning two
        case AU_WARNING2:
          play(BEEP_DEFAULT_FREQ, 20, 1, PLAY_NOW);
  406346:	2110      	movs	r1, #16
  406348:	2300      	movs	r3, #0
  40634a:	e88d 000a 	stmia.w	sp, {r1, r3}
  40634e:	4620      	mov	r0, r4
  406350:	2146      	movs	r1, #70	; 0x46
  406352:	2214      	movs	r2, #20
  406354:	2301      	movs	r3, #1
  406356:	f7ff fd77 	bl	405e48 <_ZN10audioQueue4playEhhhha>
          break;
  40635a:	e625      	b.n	405fa8 <_ZN10audioQueue5eventEhh+0xa4>

0040635c <_Z9hapticOffv>:
#include "open9x.h"

#if defined(PCBARM)
void hapticOff()
{
	PWM->PWM_DIS = PWM_DIS_CHID2 ;						// Disable channel 2
  40635c:	2300      	movs	r3, #0
  40635e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  406362:	2204      	movs	r2, #4
  406364:	609a      	str	r2, [r3, #8]
	PWM->PWM_OOV &= ~0x00040000 ;	// Force low
  406366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  406368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  40636c:	645a      	str	r2, [r3, #68]	; 0x44
	PWM->PWM_OSS |= 0x00040000 ;	// Force low
  40636e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  406370:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  406374:	64da      	str	r2, [r3, #76]	; 0x4c
}
  406376:	4770      	bx	lr

00406378 <_Z8hapticOnm>:

	if ( pwmPercent > 100 )
	{
		pwmPercent = 100 ;		
	}
	pwmptr->PWM_CH_NUM[2].PWM_CDTYUPD = pwmPercent ;		// Duty
  406378:	2300      	movs	r3, #0
  40637a:	f2c4 0302 	movt	r3, #16386	; 0x4002
	pwmptr->PWM_ENA = PWM_ENA_CHID2 ;						// Enable channel 2
  40637e:	2204      	movs	r2, #4
	PWM->PWM_OSS |= 0x00040000 ;	// Force low
}

// pwmPercent 0-100
void hapticOn( uint32_t pwmPercent )
{
  406380:	2864      	cmp	r0, #100	; 0x64
  406382:	bf28      	it	cs
  406384:	2064      	movcs	r0, #100	; 0x64

	if ( pwmPercent > 100 )
	{
		pwmPercent = 100 ;		
	}
	pwmptr->PWM_CH_NUM[2].PWM_CDTYUPD = pwmPercent ;		// Duty
  406386:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
	pwmptr->PWM_ENA = PWM_ENA_CHID2 ;						// Enable channel 2
  40638a:	605a      	str	r2, [r3, #4]
	pwmptr->PWM_OSC = 0x00040000 ;	// Enable output
  40638c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  406390:	651a      	str	r2, [r3, #80]	; 0x50
}
  406392:	4770      	bx	lr

00406394 <_ZN11hapticQueueC1Ev>:



hapticQueue::hapticQueue()
{
  buzzTimeLeft = 0;
  406394:	2300      	movs	r3, #0
  406396:	7083      	strb	r3, [r0, #2]
  buzzPause = 0;
  406398:	70c3      	strb	r3, [r0, #3]

  t_queueRidx = 0;
  40639a:	7003      	strb	r3, [r0, #0]
  t_queueWidx = 0;
  40639c:	7043      	strb	r3, [r0, #1]

  hapticTick = 0;
  40639e:	7103      	strb	r3, [r0, #4]
}
  4063a0:	4770      	bx	lr
  4063a2:	bf00      	nop

004063a4 <_ZN11hapticQueue9heartbeatEv>:
{
#if defined(SIMU)
  return;
#endif

  if (buzzTimeLeft > 0) {
  4063a4:	7883      	ldrb	r3, [r0, #2]

  hapticTick = 0;
}

void hapticQueue::heartbeat()
{
  4063a6:	b470      	push	{r4, r5, r6}
#if defined(SIMU)
  return;
#endif

  if (buzzTimeLeft > 0) {
  4063a8:	b1c3      	cbz	r3, 4063dc <_ZN11hapticQueue9heartbeatEv+0x38>
    buzzTimeLeft--; // time gets counted down
  4063aa:	3b01      	subs	r3, #1
  4063ac:	7083      	strb	r3, [r0, #2]
#if defined(PCBARM)
    hapticOn(g_eeGeneral.hapticStrength * 20);
  4063ae:	4b21      	ldr	r3, [pc, #132]	; (406434 <_ZN11hapticQueue9heartbeatEv+0x90>)
  4063b0:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71

	if ( pwmPercent > 100 )
	{
		pwmPercent = 100 ;		
	}
	pwmptr->PWM_CH_NUM[2].PWM_CDTYUPD = pwmPercent ;		// Duty
  4063b4:	2300      	movs	r3, #0
#endif

  if (buzzTimeLeft > 0) {
    buzzTimeLeft--; // time gets counted down
#if defined(PCBARM)
    hapticOn(g_eeGeneral.hapticStrength * 20);
  4063b6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
  4063ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4063be:	0092      	lsls	r2, r2, #2

	if ( pwmPercent > 100 )
	{
		pwmPercent = 100 ;		
	}
	pwmptr->PWM_CH_NUM[2].PWM_CDTYUPD = pwmPercent ;		// Duty
  4063c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
#endif

  if (buzzTimeLeft > 0) {
    buzzTimeLeft--; // time gets counted down
#if defined(PCBARM)
    hapticOn(g_eeGeneral.hapticStrength * 20);
  4063c4:	2a64      	cmp	r2, #100	; 0x64
  4063c6:	bf28      	it	cs
  4063c8:	2264      	movcs	r2, #100	; 0x64

	if ( pwmPercent > 100 )
	{
		pwmPercent = 100 ;		
	}
	pwmptr->PWM_CH_NUM[2].PWM_CDTYUPD = pwmPercent ;		// Duty
  4063ca:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	pwmptr->PWM_ENA = PWM_ENA_CHID2 ;						// Enable channel 2
  4063ce:	2204      	movs	r2, #4
  4063d0:	605a      	str	r2, [r3, #4]
	pwmptr->PWM_OSC = 0x00040000 ;	// Enable output
  4063d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4063d6:	651a      	str	r2, [r3, #80]	; 0x50
      if (!queueHapticRepeat[t_queueRidx]--) {
        t_queueRidx = (t_queueRidx + 1) % HAPTIC_QUEUE_LENGTH;
      }
    }
  }
}
  4063d8:	bc70      	pop	{r4, r5, r6}
  4063da:	4770      	bx	lr
#include "open9x.h"

#if defined(PCBARM)
void hapticOff()
{
	PWM->PWM_DIS = PWM_DIS_CHID2 ;						// Disable channel 2
  4063dc:	2300      	movs	r3, #0
  4063de:	f2c4 0302 	movt	r3, #16386	; 0x4002
  4063e2:	2204      	movs	r2, #4
  4063e4:	609a      	str	r2, [r3, #8]
	PWM->PWM_OOV &= ~0x00040000 ;	// Force low
  4063e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  4063e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  4063ec:	645a      	str	r2, [r3, #68]	; 0x44
	PWM->PWM_OSS |= 0x00040000 ;	// Force low
  4063ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  4063f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  4063f4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
#endif
  }
  else {
    HAPTIC_OFF; // haptic output 'high'
    if (buzzPause > 0) {
  4063f6:	78c3      	ldrb	r3, [r0, #3]
  4063f8:	b9cb      	cbnz	r3, 40642e <_ZN11hapticQueue9heartbeatEv+0x8a>
      buzzPause--;
    }
    else if (t_queueRidx != t_queueWidx) {
  4063fa:	7802      	ldrb	r2, [r0, #0]
  4063fc:	7843      	ldrb	r3, [r0, #1]
  4063fe:	4293      	cmp	r3, r2
  406400:	d0ea      	beq.n	4063d8 <_ZN11hapticQueue9heartbeatEv+0x34>
      buzzTimeLeft = queueHapticLength[t_queueRidx];
  406402:	1883      	adds	r3, r0, r2
      buzzPause = queueHapticPause[t_queueRidx];
      if (!queueHapticRepeat[t_queueRidx]--) {
  406404:	7ad9      	ldrb	r1, [r3, #11]
    HAPTIC_OFF; // haptic output 'high'
    if (buzzPause > 0) {
      buzzPause--;
    }
    else if (t_queueRidx != t_queueWidx) {
      buzzTimeLeft = queueHapticLength[t_queueRidx];
  406406:	795e      	ldrb	r6, [r3, #5]
      buzzPause = queueHapticPause[t_queueRidx];
  406408:	7a1d      	ldrb	r5, [r3, #8]
      if (!queueHapticRepeat[t_queueRidx]--) {
  40640a:	1e4c      	subs	r4, r1, #1
    HAPTIC_OFF; // haptic output 'high'
    if (buzzPause > 0) {
      buzzPause--;
    }
    else if (t_queueRidx != t_queueWidx) {
      buzzTimeLeft = queueHapticLength[t_queueRidx];
  40640c:	7086      	strb	r6, [r0, #2]
      buzzPause = queueHapticPause[t_queueRidx];
  40640e:	70c5      	strb	r5, [r0, #3]
      if (!queueHapticRepeat[t_queueRidx]--) {
  406410:	72dc      	strb	r4, [r3, #11]
  406412:	2900      	cmp	r1, #0
  406414:	d1e0      	bne.n	4063d8 <_ZN11hapticQueue9heartbeatEv+0x34>
        t_queueRidx = (t_queueRidx + 1) % HAPTIC_QUEUE_LENGTH;
  406416:	f245 5356 	movw	r3, #21846	; 0x5556
  40641a:	3201      	adds	r2, #1
  40641c:	f2c5 5355 	movt	r3, #21845	; 0x5555
  406420:	fb83 1302 	smull	r1, r3, r3, r2
  406424:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406428:	1ad2      	subs	r2, r2, r3
  40642a:	7002      	strb	r2, [r0, #0]
  40642c:	e7d4      	b.n	4063d8 <_ZN11hapticQueue9heartbeatEv+0x34>
#endif
  }
  else {
    HAPTIC_OFF; // haptic output 'high'
    if (buzzPause > 0) {
      buzzPause--;
  40642e:	3b01      	subs	r3, #1
  406430:	70c3      	strb	r3, [r0, #3]
  406432:	e7d1      	b.n	4063d8 <_ZN11hapticQueue9heartbeatEv+0x34>
  406434:	20000108 	.word	0x20000108

00406438 <_ZN11hapticQueue4playEhhh>:
    }
  }
}

void hapticQueue::play(uint8_t tLen, uint8_t tPause, uint8_t tFlags)
{
  406438:	b4f0      	push	{r4, r5, r6, r7}
      return (t_queueRidx == t_queueWidx);
    }

  protected:
    inline uint8_t getHapticLength(uint8_t tLen) {
      return ((g_eeGeneral.hapticLength * 2) + tLen) * 2;
  40643a:	4c19      	ldr	r4, [pc, #100]	; (4064a0 <_ZN11hapticQueue4playEhhh+0x68>)
  40643c:	f994 406f 	ldrsb.w	r4, [r4, #111]	; 0x6f
  406440:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  406444:	0049      	lsls	r1, r1, #1
  tLen = getHapticLength(tLen);

  if (tFlags & PLAY_NOW || (!busy() && empty())) {
  406446:	06dc      	lsls	r4, r3, #27
  406448:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  40644c:	bf48      	it	mi
  40644e:	7804      	ldrbmi	r4, [r0, #0]
  406450:	d51c      	bpl.n	40648c <_ZN11hapticQueue4playEhhh+0x54>
    buzzTimeLeft = tLen;
  406452:	7081      	strb	r1, [r0, #2]
    buzzPause = tPause;
  406454:	70c2      	strb	r2, [r0, #3]
    t_queueWidx = t_queueRidx;
  406456:	7044      	strb	r4, [r0, #1]
  else {
    tFlags += 1;
  }

  tFlags &= 0x0f;
  if (tFlags) {
  406458:	f013 030f 	ands.w	r3, r3, #15
  40645c:	d014      	beq.n	406488 <_ZN11hapticQueue4playEhhh+0x50>
    uint8_t next_queueWidx = (t_queueWidx + 1) % HAPTIC_QUEUE_LENGTH;
  40645e:	7845      	ldrb	r5, [r0, #1]
  406460:	f245 5756 	movw	r7, #21846	; 0x5556
  406464:	1c6e      	adds	r6, r5, #1
  406466:	f2c5 5755 	movt	r7, #21845	; 0x5555
  40646a:	fb87 4706 	smull	r4, r7, r7, r6
  40646e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  406472:	1bf6      	subs	r6, r6, r7
    if (next_queueWidx != t_queueRidx) {
  406474:	7804      	ldrb	r4, [r0, #0]
    tFlags += 1;
  }

  tFlags &= 0x0f;
  if (tFlags) {
    uint8_t next_queueWidx = (t_queueWidx + 1) % HAPTIC_QUEUE_LENGTH;
  406476:	b2f6      	uxtb	r6, r6
    if (next_queueWidx != t_queueRidx) {
  406478:	42b4      	cmp	r4, r6
  40647a:	d005      	beq.n	406488 <_ZN11hapticQueue4playEhhh+0x50>
      queueHapticLength[t_queueWidx] = tLen;
  40647c:	1945      	adds	r5, r0, r5
      queueHapticPause[t_queueWidx] = tPause;
      queueHapticRepeat[t_queueWidx] = tFlags-1;
  40647e:	3b01      	subs	r3, #1

  tFlags &= 0x0f;
  if (tFlags) {
    uint8_t next_queueWidx = (t_queueWidx + 1) % HAPTIC_QUEUE_LENGTH;
    if (next_queueWidx != t_queueRidx) {
      queueHapticLength[t_queueWidx] = tLen;
  406480:	7169      	strb	r1, [r5, #5]
      queueHapticPause[t_queueWidx] = tPause;
  406482:	722a      	strb	r2, [r5, #8]
      queueHapticRepeat[t_queueWidx] = tFlags-1;
  406484:	72eb      	strb	r3, [r5, #11]
      t_queueWidx = next_queueWidx;
  406486:	7046      	strb	r6, [r0, #1]
    }
  }
}
  406488:	bcf0      	pop	{r4, r5, r6, r7}
  40648a:	4770      	bx	lr

void hapticQueue::play(uint8_t tLen, uint8_t tPause, uint8_t tFlags)
{
  tLen = getHapticLength(tLen);

  if (tFlags & PLAY_NOW || (!busy() && empty())) {
  40648c:	7884      	ldrb	r4, [r0, #2]
  40648e:	b91c      	cbnz	r4, 406498 <_ZN11hapticQueue4playEhhh+0x60>
  406490:	7804      	ldrb	r4, [r0, #0]
  406492:	7845      	ldrb	r5, [r0, #1]
  406494:	42a5      	cmp	r5, r4
  406496:	d0dc      	beq.n	406452 <_ZN11hapticQueue4playEhhh+0x1a>
    buzzTimeLeft = tLen;
    buzzPause = tPause;
    t_queueWidx = t_queueRidx;
  }
  else {
    tFlags += 1;
  406498:	3301      	adds	r3, #1
  40649a:	b2db      	uxtb	r3, r3
  40649c:	e7dc      	b.n	406458 <_ZN11hapticQueue4playEhhh+0x20>
  40649e:	bf00      	nop
  4064a0:	20000108 	.word	0x20000108

004064a4 <_ZN11hapticQueue5eventEh>:
  }
}

void hapticQueue::event(uint8_t e)
{
  if (g_eeGeneral.hapticMode>0 || (g_eeGeneral.hapticMode==0 && e>=AU_WARNING1) || (g_eeGeneral.hapticMode>=-1 && e<=AU_ERROR)) {
  4064a4:	4b18      	ldr	r3, [pc, #96]	; (406508 <_ZN11hapticQueue5eventEh+0x64>)
    }
  }
}

void hapticQueue::event(uint8_t e)
{
  4064a6:	460a      	mov	r2, r1
  if (g_eeGeneral.hapticMode>0 || (g_eeGeneral.hapticMode==0 && e>=AU_WARNING1) || (g_eeGeneral.hapticMode>=-1 && e<=AU_ERROR)) {
  4064a8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
  4064ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4064b0:	2b40      	cmp	r3, #64	; 0x40
  4064b2:	d009      	beq.n	4064c8 <_ZN11hapticQueue5eventEh+0x24>
  4064b4:	f1d3 0101 	rsbs	r1, r3, #1
  4064b8:	bf38      	it	cc
  4064ba:	2100      	movcc	r1, #0
  4064bc:	2a06      	cmp	r2, #6
  4064be:	bf94      	ite	ls
  4064c0:	2100      	movls	r1, #0
  4064c2:	f001 0101 	andhi.w	r1, r1, #1
  4064c6:	b141      	cbz	r1, 4064da <_ZN11hapticQueue5eventEh+0x36>
    switch (e) {
  4064c8:	2a10      	cmp	r2, #16
  4064ca:	d015      	beq.n	4064f8 <_ZN11hapticQueue5eventEh+0x54>
  4064cc:	2a11      	cmp	r2, #17
  4064ce:	d00f      	beq.n	4064f0 <_ZN11hapticQueue5eventEh+0x4c>
  4064d0:	2a00      	cmp	r2, #0
  4064d2:	d115      	bne.n	406500 <_ZN11hapticQueue5eventEh+0x5c>
      case 0: // very little buzz for keys / trims
        play(5, 0, PLAY_NOW);
  4064d4:	2105      	movs	r1, #5
  4064d6:	2310      	movs	r3, #16
  4064d8:	e7ae      	b.n	406438 <_ZN11hapticQueue4playEhhh>
  }
}

void hapticQueue::event(uint8_t e)
{
  if (g_eeGeneral.hapticMode>0 || (g_eeGeneral.hapticMode==0 && e>=AU_WARNING1) || (g_eeGeneral.hapticMode>=-1 && e<=AU_ERROR)) {
  4064da:	3b80      	subs	r3, #128	; 0x80
  4064dc:	bf18      	it	ne
  4064de:	2301      	movne	r3, #1
  4064e0:	2a02      	cmp	r2, #2
  4064e2:	bf8c      	ite	hi
  4064e4:	2300      	movhi	r3, #0
  4064e6:	f003 0301 	andls.w	r3, r3, #1
  4064ea:	2b00      	cmp	r3, #0
  4064ec:	d1ec      	bne.n	4064c8 <_ZN11hapticQueue5eventEh+0x24>
  4064ee:	4770      	bx	lr
    switch (e) {
      case 0: // very little buzz for keys / trims
        play(5, 0, PLAY_NOW);
        break;
      case AU_TIMER_20: // two buzz
        play(10,2,1);
  4064f0:	210a      	movs	r1, #10
  4064f2:	2202      	movs	r2, #2
  4064f4:	2301      	movs	r3, #1
  4064f6:	e79f      	b.n	406438 <_ZN11hapticQueue4playEhhh>
        break;
      case AU_TIMER_30: // three buzz
        play(10,2,2);
  4064f8:	2202      	movs	r2, #2
  4064fa:	210a      	movs	r1, #10
  4064fc:	4613      	mov	r3, r2
  4064fe:	e79b      	b.n	406438 <_ZN11hapticQueue4playEhhh>
        break;
      default:
        play(10,2,0);
  406500:	210a      	movs	r1, #10
  406502:	2202      	movs	r2, #2
  406504:	2300      	movs	r3, #0
  406506:	e797      	b.n	406438 <_ZN11hapticQueue4playEhhh>
  406508:	20000108 	.word	0x20000108

0040650c <_Z13audioDefeventh>:
    }
  }
}

void audioDefevent(uint8_t e)
{
  40650c:	b538      	push	{r3, r4, r5, lr}
#ifdef HAPTIC
  haptic.event(e); //do this before audio to help sync timings
  40650e:	f241 2400 	movw	r4, #4608	; 0x1200
  406512:	f2c2 0400 	movt	r4, #8192	; 0x2000
  406516:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  40651a:	3318      	adds	r3, #24
    }
  }
}

void audioDefevent(uint8_t e)
{
  40651c:	4605      	mov	r5, r0
#ifdef HAPTIC
  haptic.event(e); //do this before audio to help sync timings
  40651e:	4601      	mov	r1, r0
  406520:	4618      	mov	r0, r3
  406522:	f7ff ffbf 	bl	4064a4 <_ZN11hapticQueue5eventEh>
#endif	
  audio.event(e, BEEP_DEFAULT_FREQ);
  406526:	f504 6032 	add.w	r0, r4, #2848	; 0xb20
  40652a:	3008      	adds	r0, #8
  40652c:	4629      	mov	r1, r5
  40652e:	2246      	movs	r2, #70	; 0x46
}
  406530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void audioDefevent(uint8_t e)
{
#ifdef HAPTIC
  haptic.event(e); //do this before audio to help sync timings
#endif	
  audio.event(e, BEEP_DEFAULT_FREQ);
  406534:	e4e6      	b.n	405f04 <_ZN10audioQueue5eventEhh>
  406536:	bf00      	nop

00406538 <_Z7per10msv>:

#if defined (PCBV4)
uint8_t g_ms100 = 0; // global to allow time set function to reset to zero
#endif
void per10ms()
{
  406538:	b538      	push	{r3, r4, r5, lr}
  g_tmr10ms++;
  40653a:	4d27      	ldr	r5, [pc, #156]	; (4065d8 <_Z7per10msv+0xa0>)
  g_blinkTmr10ms++;
  40653c:	4c27      	ldr	r4, [pc, #156]	; (4065dc <_Z7per10msv+0xa4>)
#if defined (PCBV4)
uint8_t g_ms100 = 0; // global to allow time set function to reset to zero
#endif
void per10ms()
{
  g_tmr10ms++;
  40653e:	f8b5 39aa 	ldrh.w	r3, [r5, #2474]	; 0x9aa
  406542:	3301      	adds	r3, #1
  406544:	b29b      	uxth	r3, r3
  406546:	f8a5 39aa 	strh.w	r3, [r5, #2474]	; 0x9aa
  g_blinkTmr10ms++;
  40654a:	f894 3a84 	ldrb.w	r3, [r4, #2692]	; 0xa84
  40654e:	3301      	adds	r3, #1
  406550:	b2db      	uxtb	r3, r3
  406552:	f884 3a84 	strb.w	r3, [r4, #2692]	; 0xa84

#if defined (PCBARM)
  Tenms |= 1 ;                    // 10 mS has passed
  406556:	f8d4 3b98 	ldr.w	r3, [r4, #2968]	; 0xb98
  40655a:	f043 0301 	orr.w	r3, r3, #1
  40655e:	f8c4 3b98 	str.w	r3, [r4, #2968]	; 0xb98
    g_unixTime++; // inc global unix timestamp one second
    g_ms100 = 0;
  }
#endif

  readKeysAndTrims();
  406562:	f7fd fc8b 	bl	403e7c <_Z16readKeysAndTrimsv>
#if defined (FRSKY) && !defined(PCBARM)
  check_frsky();
#endif

  // These moved here from perOut() to improve beep trigger reliability.
  if(mixWarning & 1) if(((g_tmr10ms&0xFF)==  0)) AUDIO_MIX_WARNING_1();
  406566:	f894 3b9c 	ldrb.w	r3, [r4, #2972]	; 0xb9c
  40656a:	07d9      	lsls	r1, r3, #31
  40656c:	d504      	bpl.n	406578 <_Z7per10msv+0x40>
  40656e:	f8b5 29aa 	ldrh.w	r2, [r5, #2474]	; 0x9aa
  406572:	f012 0fff 	tst.w	r2, #255	; 0xff
  406576:	d023      	beq.n	4065c0 <_Z7per10msv+0x88>
  if(mixWarning & 2) if(((g_tmr10ms&0xFF)== 64) || ((g_tmr10ms&0xFF)== 72)) AUDIO_MIX_WARNING_2();
  406578:	079a      	lsls	r2, r3, #30
  40657a:	d50a      	bpl.n	406592 <_Z7per10msv+0x5a>
  40657c:	f8b5 29aa 	ldrh.w	r2, [r5, #2474]	; 0x9aa
  406580:	b2d2      	uxtb	r2, r2
  406582:	2a40      	cmp	r2, #64	; 0x40
  406584:	d022      	beq.n	4065cc <_Z7per10msv+0x94>
  406586:	4a14      	ldr	r2, [pc, #80]	; (4065d8 <_Z7per10msv+0xa0>)
  406588:	f8b2 29aa 	ldrh.w	r2, [r2, #2474]	; 0x9aa
  40658c:	b2d2      	uxtb	r2, r2
  40658e:	2a48      	cmp	r2, #72	; 0x48
  406590:	d01c      	beq.n	4065cc <_Z7per10msv+0x94>
  if(mixWarning & 4) if(((g_tmr10ms&0xFF)==128) || ((g_tmr10ms&0xFF)==136) || ((g_tmr10ms&0xFF)==144)) AUDIO_MIX_WARNING_3();
  406592:	075b      	lsls	r3, r3, #29
  406594:	d50f      	bpl.n	4065b6 <_Z7per10msv+0x7e>
  406596:	f8b5 29aa 	ldrh.w	r2, [r5, #2474]	; 0x9aa
  40659a:	4b0f      	ldr	r3, [pc, #60]	; (4065d8 <_Z7per10msv+0xa0>)
  40659c:	b2d2      	uxtb	r2, r2
  40659e:	2a80      	cmp	r2, #128	; 0x80
  4065a0:	d00a      	beq.n	4065b8 <_Z7per10msv+0x80>
  4065a2:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
  4065a6:	b2d2      	uxtb	r2, r2
  4065a8:	2a88      	cmp	r2, #136	; 0x88
  4065aa:	d005      	beq.n	4065b8 <_Z7per10msv+0x80>
  4065ac:	f8b3 39aa 	ldrh.w	r3, [r3, #2474]	; 0x9aa
  4065b0:	b2db      	uxtb	r3, r3
  4065b2:	2b90      	cmp	r3, #144	; 0x90
  4065b4:	d000      	beq.n	4065b8 <_Z7per10msv+0x80>
  4065b6:	bd38      	pop	{r3, r4, r5, pc}
  4065b8:	200f      	movs	r0, #15

}
  4065ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

  // These moved here from perOut() to improve beep trigger reliability.
  if(mixWarning & 1) if(((g_tmr10ms&0xFF)==  0)) AUDIO_MIX_WARNING_1();
  if(mixWarning & 2) if(((g_tmr10ms&0xFF)== 64) || ((g_tmr10ms&0xFF)== 72)) AUDIO_MIX_WARNING_2();
  if(mixWarning & 4) if(((g_tmr10ms&0xFF)==128) || ((g_tmr10ms&0xFF)==136) || ((g_tmr10ms&0xFF)==144)) AUDIO_MIX_WARNING_3();
  4065be:	e7a5      	b.n	40650c <_Z13audioDefeventh>
#if defined (FRSKY) && !defined(PCBARM)
  check_frsky();
#endif

  // These moved here from perOut() to improve beep trigger reliability.
  if(mixWarning & 1) if(((g_tmr10ms&0xFF)==  0)) AUDIO_MIX_WARNING_1();
  4065c0:	200d      	movs	r0, #13
  4065c2:	f7ff ffa3 	bl	40650c <_Z13audioDefeventh>
  4065c6:	f894 3b9c 	ldrb.w	r3, [r4, #2972]	; 0xb9c
  4065ca:	e7d5      	b.n	406578 <_Z7per10msv+0x40>
  if(mixWarning & 2) if(((g_tmr10ms&0xFF)== 64) || ((g_tmr10ms&0xFF)== 72)) AUDIO_MIX_WARNING_2();
  4065cc:	200e      	movs	r0, #14
  4065ce:	f7ff ff9d 	bl	40650c <_Z13audioDefeventh>
  4065d2:	f894 3b9c 	ldrb.w	r3, [r4, #2972]	; 0xb9c
  4065d6:	e7dc      	b.n	406592 <_Z7per10msv+0x5a>
  4065d8:	20000108 	.word	0x20000108
  4065dc:	20001200 	.word	0x20001200

004065e0 <TC2_IRQHandler>:
  TC1->TC_CHANNEL[0].TC_IDR = TC_IDR0_LDRAS ;
  NVIC_DisableIRQ(TC3_IRQn) ;
}

extern "C" void TC2_IRQHandler()
{
  4065e0:	b508      	push	{r3, lr}
  register uint32_t dummy;
  static uint32_t pre_scale ;             // Used to get 10 Hz counter

  /* Clear status bit to acknowledge interrupt */
  dummy = TC0->TC_CHANNEL[2].TC_SR;
  4065e2:	2300      	movs	r3, #0
  4065e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4065e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  (void) dummy ;          // Discard value - prevents compiler warning

  sound_5ms() ;
  4065ec:	f7ff f8f6 	bl	4057dc <_Z9sound_5msv>

  if ( ++pre_scale >= 2 ) {
  4065f0:	4b12      	ldr	r3, [pc, #72]	; (40663c <TC2_IRQHandler+0x5c>)
  4065f2:	f8d3 2ba0 	ldr.w	r2, [r3, #2976]	; 0xba0
  4065f6:	3201      	adds	r2, #1
  4065f8:	2a01      	cmp	r2, #1
  4065fa:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
  4065fe:	d91c      	bls.n	40663a <TC2_IRQHandler+0x5a>
    Tenms |= 1 ;                    // 10 mS has passed
  406600:	f8d3 2b98 	ldr.w	r2, [r3, #2968]	; 0xb98
  406604:	f042 0201 	orr.w	r2, r2, #1
  406608:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
     if ( Buzzer_count ) {
  40660c:	f893 2b14 	ldrb.w	r2, [r3, #2836]	; 0xb14
  406610:	b16a      	cbz	r2, 40662e <TC2_IRQHandler+0x4e>
       if ( --Buzzer_count == 0 )
  406612:	f893 2b14 	ldrb.w	r2, [r3, #2836]	; 0xb14
  406616:	3a01      	subs	r2, #1
  406618:	b2d2      	uxtb	r2, r2
  40661a:	f883 2b14 	strb.w	r2, [r3, #2836]	; 0xb14
  40661e:	b932      	cbnz	r2, 40662e <TC2_IRQHandler+0x4e>
	PIOA->PIO_SODR = 0x02000000L ;	// Set bit A25 ON
}

void buzzer_off()
{
	PIOA->PIO_CODR = 0x02000000L ;	// Set bit A25 ON
  406620:	f44f 6260 	mov.w	r2, #3584	; 0xe00
  406624:	f2c4 020e 	movt	r2, #16398	; 0x400e
  406628:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40662c:	6351      	str	r1, [r2, #52]	; 0x34
         buzzer_off() ;
     }
     pre_scale = 0 ;
  40662e:	2200      	movs	r2, #0
  406630:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
     per10ms();
  }
}
  406634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     if ( Buzzer_count ) {
       if ( --Buzzer_count == 0 )
         buzzer_off() ;
     }
     pre_scale = 0 ;
     per10ms();
  406638:	e77e      	b.n	406538 <_Z7per10msv>
  40663a:	bd08      	pop	{r3, pc}
  40663c:	20001200 	.word	0x20001200

00406640 <_Z9chainMenuPFvhE>:
    alert(STR_MENUSERROR);
  }
}

void chainMenu(MenuFuncP newMenu)
{
  406640:	b508      	push	{r3, lr}
#if defined(ROTARY_ENCODERS)
  s_warning = NULL;
#endif
  g_menuStack[g_menuStackPtr] = newMenu;
  406642:	f241 2200 	movw	r2, #4608	; 0x1200
  406646:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40664a:	f892 1ba4 	ldrb.w	r1, [r2, #2980]	; 0xba4
    alert(STR_MENUSERROR);
  }
}

void chainMenu(MenuFuncP newMenu)
{
  40664e:	4603      	mov	r3, r0
#if defined(ROTARY_ENCODERS)
  s_warning = NULL;
#endif
  g_menuStack[g_menuStackPtr] = newMenu;
  406650:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  406654:	f8c2 0a98 	str.w	r0, [r2, #2712]	; 0xa98
  (*newMenu)(EVT_ENTRY);
  406658:	20bf      	movs	r0, #191	; 0xbf
  40665a:	4798      	blx	r3
  AUDIO_MENUS();
  40665c:	2005      	movs	r0, #5
}
  40665e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if defined(ROTARY_ENCODERS)
  s_warning = NULL;
#endif
  g_menuStack[g_menuStackPtr] = newMenu;
  (*newMenu)(EVT_ENTRY);
  AUDIO_MENUS();
  406662:	e753      	b.n	40650c <_Z13audioDefeventh>

00406664 <_Z17menuProcStatistich>:
 */

#include "open9x.h"

void menuProcStatistic(uint8_t event)
{
  406664:	b570      	push	{r4, r5, r6, lr}
  406666:	4604      	mov	r4, r0
  TITLE(STR_MENUSTAT);
  406668:	2000      	movs	r0, #0
  40666a:	2302      	movs	r3, #2
 */

#include "open9x.h"

void menuProcStatistic(uint8_t event)
{
  40666c:	b082      	sub	sp, #8
  TITLE(STR_MENUSTAT);
  40666e:	4601      	mov	r1, r0
  406670:	4a3f      	ldr	r2, [pc, #252]	; (406770 <_Z17menuProcStatistich+0x10c>)
  406672:	f7fc f921 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  switch(event)
  406676:	2c61      	cmp	r4, #97	; 0x61
  406678:	d304      	bcc.n	406684 <_Z17menuProcStatistich+0x20>
  40667a:	2c62      	cmp	r4, #98	; 0x62
  40667c:	d872      	bhi.n	406764 <_Z17menuProcStatistich+0x100>
    case EVT_KEY_FIRST(KEY_UP):
      chainMenu(menuProcDebug);
      break;
    case EVT_KEY_FIRST(KEY_DOWN):
    case EVT_KEY_FIRST(KEY_EXIT):
      chainMenu(menuMainView);
  40667e:	483d      	ldr	r0, [pc, #244]	; (406774 <_Z17menuProcStatistich+0x110>)
  406680:	f7ff ffde 	bl	406640 <_Z9chainMenuPFvhE>
      break;
  }

  lcd_puts(  1*FW, FH*1, STR_TM1TM2);
  putsTime(    5*FW, FH*1, s_timerVal[0], 0, 0);
  406684:	4c3c      	ldr	r4, [pc, #240]	; (406778 <_Z17menuProcStatistich+0x114>)
  406686:	2500      	movs	r5, #0
    case EVT_KEY_FIRST(KEY_EXIT):
      chainMenu(menuMainView);
      break;
  }

  lcd_puts(  1*FW, FH*1, STR_TM1TM2);
  406688:	2006      	movs	r0, #6
  40668a:	2108      	movs	r1, #8
  40668c:	4a3b      	ldr	r2, [pc, #236]	; (40677c <_Z17menuProcStatistich+0x118>)
  40668e:	f7fc f91b 	bl	4028c8 <_Z8lcd_putshhPKc>
  putsTime(    5*FW, FH*1, s_timerVal[0], 0, 0);
  406692:	f9b4 2908 	ldrsh.w	r2, [r4, #2312]	; 0x908
  406696:	201e      	movs	r0, #30
  406698:	2108      	movs	r1, #8
  40669a:	462b      	mov	r3, r5
  40669c:	9500      	str	r5, [sp, #0]
  40669e:	f7fc fe01 	bl	4032a4 <_Z8putsTimehhshh>
  putsTime(   12*FW, FH*1, s_timerVal[1], 0, 0);
  4066a2:	f9b4 290a 	ldrsh.w	r2, [r4, #2314]	; 0x90a
  4066a6:	462b      	mov	r3, r5

  lcd_puts(  1*FW, FH*2, STR_THRTHP);
  putsTime(    5*FW, FH*2, s_timeCumThr, 0, 0);
  4066a8:	4c35      	ldr	r4, [pc, #212]	; (406780 <_Z17menuProcStatistich+0x11c>)
      break;
  }

  lcd_puts(  1*FW, FH*1, STR_TM1TM2);
  putsTime(    5*FW, FH*1, s_timerVal[0], 0, 0);
  putsTime(   12*FW, FH*1, s_timerVal[1], 0, 0);
  4066aa:	2048      	movs	r0, #72	; 0x48
  4066ac:	2108      	movs	r1, #8
  4066ae:	9500      	str	r5, [sp, #0]
  4066b0:	f7fc fdf8 	bl	4032a4 <_Z8putsTimehhshh>

  lcd_puts(  1*FW, FH*2, STR_THRTHP);
  4066b4:	2006      	movs	r0, #6
  4066b6:	2110      	movs	r1, #16
  4066b8:	4a32      	ldr	r2, [pc, #200]	; (406784 <_Z17menuProcStatistich+0x120>)
  4066ba:	f7fc f905 	bl	4028c8 <_Z8lcd_putshhPKc>
  putsTime(    5*FW, FH*2, s_timeCumThr, 0, 0);
  4066be:	f9b4 2ba6 	ldrsh.w	r2, [r4, #2982]	; 0xba6
  4066c2:	201e      	movs	r0, #30
  4066c4:	2110      	movs	r1, #16
  4066c6:	462b      	mov	r3, r5
  4066c8:	9500      	str	r5, [sp, #0]
  4066ca:	f7fc fdeb 	bl	4032a4 <_Z8putsTimehhshh>
  putsTime(   12*FW, FH*2, s_timeCum16ThrP/16, 0, 0);
  4066ce:	f8b4 2ba8 	ldrh.w	r2, [r4, #2984]	; 0xba8
  4066d2:	462b      	mov	r3, r5
  4066d4:	0912      	lsrs	r2, r2, #4
  4066d6:	2048      	movs	r0, #72	; 0x48
  4066d8:	2110      	movs	r1, #16
  4066da:	9500      	str	r5, [sp, #0]
  4066dc:	f7fc fde2 	bl	4032a4 <_Z8putsTimehhshh>

  lcd_puts( 17*FW, FH*0, STR_TOT);
  4066e0:	2066      	movs	r0, #102	; 0x66
  4066e2:	4629      	mov	r1, r5
  4066e4:	4a28      	ldr	r2, [pc, #160]	; (406788 <_Z17menuProcStatistich+0x124>)
  4066e6:	f7fc f8ef 	bl	4028c8 <_Z8lcd_putshhPKc>
  putsTime(   12*FW, FH*0, s_timeCumTot, 0, 0);
  4066ea:	f9b4 2baa 	ldrsh.w	r2, [r4, #2986]	; 0xbaa
  4066ee:	2048      	movs	r0, #72	; 0x48
  4066f0:	4629      	mov	r1, r5
  4066f2:	462b      	mov	r3, r5
  4066f4:	9500      	str	r5, [sp, #0]
  4066f6:	f7fc fdd5 	bl	4032a4 <_Z8putsTimehhshh>

  uint8_t traceRd = (s_traceCnt < 0 ? s_traceWr : 0);
  4066fa:	f994 3bac 	ldrsb.w	r3, [r4, #2988]	; 0xbac
  4066fe:	42ab      	cmp	r3, r5
  406700:	bfb8      	it	lt
  406702:	f894 5bad 	ldrblt.w	r5, [r4, #2989]	; 0xbad
  const uint8_t x=5;
  const uint8_t y=60;
  lcd_hline(x-3,y,120+3+3);
  406706:	2002      	movs	r0, #2
  406708:	213c      	movs	r1, #60	; 0x3c
  40670a:	227e      	movs	r2, #126	; 0x7e
  40670c:	f7fc f970 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
  lcd_vline(x,y-32,32+3);
  406710:	2005      	movs	r0, #5
  406712:	211c      	movs	r1, #28
  406714:	2223      	movs	r2, #35	; 0x23
  406716:	f7fc fa1b 	bl	402b50 <_Z9lcd_vlinehaa>
  40671a:	260b      	movs	r6, #11

  for(uint8_t i=0; i<120; i+=6)
  {
    lcd_vline(x+i+6,y-1,3);
  40671c:	4630      	mov	r0, r6
  40671e:	3606      	adds	r6, #6
  406720:	213b      	movs	r1, #59	; 0x3b
  406722:	2203      	movs	r2, #3
  406724:	b2f6      	uxtb	r6, r6
  406726:	f7fc fa13 	bl	402b50 <_Z9lcd_vlinehaa>
  const uint8_t x=5;
  const uint8_t y=60;
  lcd_hline(x-3,y,120+3+3);
  lcd_vline(x,y-32,32+3);

  for(uint8_t i=0; i<120; i+=6)
  40672a:	2e83      	cmp	r6, #131	; 0x83
  40672c:	d1f6      	bne.n	40671c <_Z17menuProcStatistich+0xb8>
  40672e:	2606      	movs	r6, #6
  406730:	e001      	b.n	406736 <_Z17menuProcStatistich+0xd2>
  {
    lcd_vline(x+i+6,y-1,3);
  }
  for(uint8_t i=1; i<=120; i++)
  406732:	2e7e      	cmp	r6, #126	; 0x7e
  406734:	d014      	beq.n	406760 <_Z17menuProcStatistich+0xfc>
  {
    lcd_vline(x+i,y-s_traceBuf[traceRd],s_traceBuf[traceRd]);
  406736:	1963      	adds	r3, r4, r5
  406738:	f893 2bb0 	ldrb.w	r2, [r3, #2992]	; 0xbb0
  40673c:	4630      	mov	r0, r6
  40673e:	f1c2 013c 	rsb	r1, r2, #60	; 0x3c
    traceRd++;
  406742:	3501      	adds	r5, #1
  {
    lcd_vline(x+i+6,y-1,3);
  }
  for(uint8_t i=1; i<=120; i++)
  {
    lcd_vline(x+i,y-s_traceBuf[traceRd],s_traceBuf[traceRd]);
  406744:	b249      	sxtb	r1, r1
  406746:	b252      	sxtb	r2, r2
  406748:	f7fc fa02 	bl	402b50 <_Z9lcd_vlinehaa>
    traceRd++;
  40674c:	b2ed      	uxtb	r5, r5
    if(traceRd>=MAXTRACE) traceRd=0;
    if(traceRd==s_traceWr) break;
  40674e:	f894 3bad 	ldrb.w	r3, [r4, #2989]	; 0xbad
  }
  for(uint8_t i=1; i<=120; i++)
  {
    lcd_vline(x+i,y-s_traceBuf[traceRd],s_traceBuf[traceRd]);
    traceRd++;
    if(traceRd>=MAXTRACE) traceRd=0;
  406752:	2d77      	cmp	r5, #119	; 0x77
  406754:	bf88      	it	hi
  406756:	2500      	movhi	r5, #0
    if(traceRd==s_traceWr) break;
  406758:	3601      	adds	r6, #1
  40675a:	42ab      	cmp	r3, r5
  40675c:	b2f6      	uxtb	r6, r6
  40675e:	d1e8      	bne.n	406732 <_Z17menuProcStatistich+0xce>
  }
}
  406760:	b002      	add	sp, #8
  406762:	bd70      	pop	{r4, r5, r6, pc}
#include "open9x.h"

void menuProcStatistic(uint8_t event)
{
  TITLE(STR_MENUSTAT);
  switch(event)
  406764:	2c63      	cmp	r4, #99	; 0x63
  406766:	d18d      	bne.n	406684 <_Z17menuProcStatistich+0x20>
  {
    case EVT_KEY_FIRST(KEY_UP):
      chainMenu(menuProcDebug);
  406768:	4808      	ldr	r0, [pc, #32]	; (40678c <_Z17menuProcStatistich+0x128>)
  40676a:	f7ff ff69 	bl	406640 <_Z9chainMenuPFvhE>
      break;
  40676e:	e789      	b.n	406684 <_Z17menuProcStatistich+0x20>
  406770:	004107f0 	.word	0x004107f0
  406774:	0040c6a1 	.word	0x0040c6a1
  406778:	20000108 	.word	0x20000108
  40677c:	004107f8 	.word	0x004107f8
  406780:	20001200 	.word	0x20001200
  406784:	00410800 	.word	0x00410800
  406788:	00410808 	.word	0x00410808
  40678c:	00406e7d 	.word	0x00406e7d

00406790 <_Z13menuProcFrskyh>:
{
  return (50 + g_model.frsky.rssiAlarms[alarm].value);
}

void menuProcFrsky(uint8_t event)
{
  406790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (event) {
  406794:	2860      	cmp	r0, #96	; 0x60
{
  return (50 + g_model.frsky.rssiAlarms[alarm].value);
}

void menuProcFrsky(uint8_t event)
{
  406796:	b08b      	sub	sp, #44	; 0x2c
  406798:	4683      	mov	fp, r0
  switch (event) {
  40679a:	f000 81d9 	beq.w	406b50 <_Z13menuProcFrskyh+0x3c0>
  40679e:	d80f      	bhi.n	4067c0 <_Z13menuProcFrskyh+0x30>
  4067a0:	2822      	cmp	r0, #34	; 0x22
      if (s_frsky_view-- == 0)
        s_frsky_view = FRSKY_VIEW_MAX;
      break;

    case EVT_KEY_BREAK(KEY_DOWN):
      if (s_frsky_view++ == FRSKY_VIEW_MAX)
  4067a2:	4c94      	ldr	r4, [pc, #592]	; (4069f4 <_Z13menuProcFrskyh+0x264>)
  return (50 + g_model.frsky.rssiAlarms[alarm].value);
}

void menuProcFrsky(uint8_t event)
{
  switch (event) {
  4067a4:	f000 81c8 	beq.w	406b38 <_Z13menuProcFrskyh+0x3a8>
  4067a8:	2823      	cmp	r0, #35	; 0x23
  4067aa:	d10d      	bne.n	4067c8 <_Z13menuProcFrskyh+0x38>
    case EVT_KEY_BREAK(KEY_UP):
      if (s_frsky_view-- == 0)
  4067ac:	f894 3c28 	ldrb.w	r3, [r4, #3112]	; 0xc28
  4067b0:	1e5a      	subs	r2, r3, #1
  4067b2:	f884 2c28 	strb.w	r2, [r4, #3112]	; 0xc28
  4067b6:	b93b      	cbnz	r3, 4067c8 <_Z13menuProcFrskyh+0x38>
        s_frsky_view = FRSKY_VIEW_MAX;
  4067b8:	2303      	movs	r3, #3
  4067ba:	f884 3c28 	strb.w	r3, [r4, #3112]	; 0xc28
  4067be:	e003      	b.n	4067c8 <_Z13menuProcFrskyh+0x38>
  return (50 + g_model.frsky.rssiAlarms[alarm].value);
}

void menuProcFrsky(uint8_t event)
{
  switch (event) {
  4067c0:	2861      	cmp	r0, #97	; 0x61
  4067c2:	f000 80a6 	beq.w	406912 <_Z13menuProcFrskyh+0x182>
  4067c6:	4c8b      	ldr	r4, [pc, #556]	; (4069f4 <_Z13menuProcFrskyh+0x264>)
      resetTelemetry();
      break;
  }

  // The top black bar
  putsModelName(0, 0, g_model.name, g_eeGeneral.currModel, 0);
  4067c8:	f8df 8230 	ldr.w	r8, [pc, #560]	; 4069fc <_Z13menuProcFrskyh+0x26c>
  4067cc:	2500      	movs	r5, #0
  4067ce:	f898 3051 	ldrb.w	r3, [r8, #81]	; 0x51
  4067d2:	4628      	mov	r0, r5
  4067d4:	4629      	mov	r1, r5
  4067d6:	f508 729e 	add.w	r2, r8, #316	; 0x13c
  4067da:	9500      	str	r5, [sp, #0]
  4067dc:	f7fc fe68 	bl	4034b0 <_Z13putsModelNamehhPchh>
  uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0);
  4067e0:	f898 2053 	ldrb.w	r2, [r8, #83]	; 0x53
  4067e4:	f8b4 3a8e 	ldrh.w	r3, [r4, #2702]	; 0xa8e
  putsVBat(14*FW,0,att);
  4067e8:	2054      	movs	r0, #84	; 0x54
  4067ea:	429a      	cmp	r2, r3
  4067ec:	bf94      	ite	ls
  4067ee:	2200      	movls	r2, #0
  4067f0:	2201      	movhi	r2, #1
  4067f2:	4629      	mov	r1, r5
  4067f4:	f7fc fdd4 	bl	4033a0 <_Z8putsVBathhh>
  if (g_model.timers[0].mode) {
  4067f8:	f998 3146 	ldrsb.w	r3, [r8, #326]	; 0x146
  4067fc:	b173      	cbz	r3, 40681c <_Z13menuProcFrskyh+0x8c>
    att = (s_timerState[0]==TMR_BEEPING ? BLINK : 0);
  4067fe:	f898 39e8 	ldrb.w	r3, [r8, #2536]	; 0x9e8
    putsTime(17*FW, 0, s_timerVal[0], att, att);
  406802:	f9b8 2908 	ldrsh.w	r2, [r8, #2312]	; 0x908
  // The top black bar
  putsModelName(0, 0, g_model.name, g_eeGeneral.currModel, 0);
  uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0);
  putsVBat(14*FW,0,att);
  if (g_model.timers[0].mode) {
    att = (s_timerState[0]==TMR_BEEPING ? BLINK : 0);
  406806:	f1a3 0c02 	sub.w	ip, r3, #2
  40680a:	f1dc 0300 	rsbs	r3, ip, #0
  40680e:	eb43 030c 	adc.w	r3, r3, ip
    putsTime(17*FW, 0, s_timerVal[0], att, att);
  406812:	4629      	mov	r1, r5
  406814:	2066      	movs	r0, #102	; 0x66
  406816:	9300      	str	r3, [sp, #0]
  406818:	f7fc fd44 	bl	4032a4 <_Z8putsTimehhshh>
  }
  lcd_filled_rect(0, 0, DISPLAY_W, 8);
  40681c:	2500      	movs	r5, #0
  40681e:	2308      	movs	r3, #8
  406820:	26ff      	movs	r6, #255	; 0xff
  406822:	4629      	mov	r1, r5
  406824:	2280      	movs	r2, #128	; 0x80
  406826:	4628      	mov	r0, r5
  406828:	9600      	str	r6, [sp, #0]
  40682a:	9501      	str	r5, [sp, #4]
  40682c:	f7fc fc96 	bl	40315c <_Z15lcd_filled_recthahhhh>

  if (frskyStreaming >= 0) {
  406830:	f240 0100 	movw	r1, #0
  406834:	f2c2 0100 	movt	r1, #8192	; 0x2000
  406838:	f991 30fa 	ldrsb.w	r3, [r1, #250]	; 0xfa
  40683c:	42ab      	cmp	r3, r5
  40683e:	f2c0 818a 	blt.w	406b56 <_Z13menuProcFrskyh+0x3c6>
    if (s_frsky_view == e_frsky_custom) {
  406842:	f894 3c28 	ldrb.w	r3, [r4, #3112]	; 0xc28
  406846:	2b00      	cmp	r3, #0
  406848:	f040 808e 	bne.w	406968 <_Z13menuProcFrskyh+0x1d8>
  40684c:	4699      	mov	r9, r3
  40684e:	461e      	mov	r6, r3
  406850:	9305      	str	r3, [sp, #20]
            if (field <= TELEM_TM2) {
              uint8_t x = (i==3 ? j?80:20 : j?74:10);
              putsTime(x, 1+FH+2*FH*i, value, att, att);
            }
            else {
              putsTelemetryChannel(j ? 128 : 63, i==3 ? 1+7*FH : 1+2*FH+2*FH*i, field-1, value, att);
  406852:	f8cd b01c 	str.w	fp, [sp, #28]
  406856:	f109 0311 	add.w	r3, r9, #17

  if (frskyStreaming >= 0) {
    if (s_frsky_view == e_frsky_custom) {
      // The custom view
      uint8_t fields_count = 0;
      for (uint8_t i=0; i<4; i++) {
  40685a:	2e03      	cmp	r6, #3
            if (field <= TELEM_TM2) {
              uint8_t x = (i==3 ? j?80:20 : j?74:10);
              putsTime(x, 1+FH+2*FH*i, value, att, att);
            }
            else {
              putsTelemetryChannel(j ? 128 : 63, i==3 ? 1+7*FH : 1+2*FH+2*FH*i, field-1, value, att);
  40685c:	b2db      	uxtb	r3, r3
            fields_count++;
            int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+field-1);
            uint8_t att = (i==3 ? NO_UNIT : DBLSIZE|NO_UNIT);
            if (field <= TELEM_TM2) {
              uint8_t x = (i==3 ? j?80:20 : j?74:10);
              putsTime(x, 1+FH+2*FH*i, value, att, att);
  40685e:	f109 0b09 	add.w	fp, r9, #9
            }
            else {
              putsTelemetryChannel(j ? 128 : 63, i==3 ? 1+7*FH : 1+2*FH+2*FH*i, field-1, value, att);
  406862:	f04f 0700 	mov.w	r7, #0
  406866:	bf08      	it	eq
  406868:	2339      	moveq	r3, #57	; 0x39

  if (frskyStreaming >= 0) {
    if (s_frsky_view == e_frsky_custom) {
      // The custom view
      uint8_t fields_count = 0;
      for (uint8_t i=0; i<4; i++) {
  40686a:	bf14      	ite	ne
  40686c:	f04f 0a00 	movne.w	sl, #0
  406870:	f04f 0a01 	moveq.w	sl, #1
            fields_count++;
            int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+field-1);
            uint8_t att = (i==3 ? NO_UNIT : DBLSIZE|NO_UNIT);
            if (field <= TELEM_TM2) {
              uint8_t x = (i==3 ? j?80:20 : j?74:10);
              putsTime(x, 1+FH+2*FH*i, value, att, att);
  406874:	fa5f fb8b 	uxtb.w	fp, fp
            }
            else {
              putsTelemetryChannel(j ? 128 : 63, i==3 ? 1+7*FH : 1+2*FH+2*FH*i, field-1, value, att);
  406878:	9306      	str	r3, [sp, #24]
  40687a:	463c      	mov	r4, r7
    if (s_frsky_view == e_frsky_custom) {
      // The custom view
      uint8_t fields_count = 0;
      for (uint8_t i=0; i<4; i++) {
        for (uint8_t j=0; j<2; j++) {
          uint8_t field = getTelemCustomField(i, j);
  40687c:	4630      	mov	r0, r6
  40687e:	4621      	mov	r1, r4
  406880:	f7fe fe20 	bl	4054c4 <_Z19getTelemCustomFieldhh>
          if (i==3 && j==0) {
  406884:	2c00      	cmp	r4, #0
  406886:	bf14      	ite	ne
  406888:	2300      	movne	r3, #0
  40688a:	f00a 0301 	andeq.w	r3, sl, #1
    if (s_frsky_view == e_frsky_custom) {
      // The custom view
      uint8_t fields_count = 0;
      for (uint8_t i=0; i<4; i++) {
        for (uint8_t j=0; j<2; j++) {
          uint8_t field = getTelemCustomField(i, j);
  40688e:	4605      	mov	r5, r0
          if (i==3 && j==0) {
  406890:	2b00      	cmp	r3, #0
  406892:	d126      	bne.n	4068e2 <_Z13menuProcFrskyh+0x152>
            else {
              displayRssiLine();
              return;
            }
          }
          if (field) {
  406894:	2d00      	cmp	r5, #0
  406896:	d141      	bne.n	40691c <_Z13menuProcFrskyh+0x18c>
  if (frskyStreaming >= 0) {
    if (s_frsky_view == e_frsky_custom) {
      // The custom view
      uint8_t fields_count = 0;
      for (uint8_t i=0; i<4; i++) {
        for (uint8_t j=0; j<2; j++) {
  406898:	3401      	adds	r4, #1
  40689a:	b2e4      	uxtb	r4, r4
  40689c:	3741      	adds	r7, #65	; 0x41
  40689e:	2c02      	cmp	r4, #2
  4068a0:	b2ff      	uxtb	r7, r7
  4068a2:	d1eb      	bne.n	40687c <_Z13menuProcFrskyh+0xec>

  if (frskyStreaming >= 0) {
    if (s_frsky_view == e_frsky_custom) {
      // The custom view
      uint8_t fields_count = 0;
      for (uint8_t i=0; i<4; i++) {
  4068a4:	3601      	adds	r6, #1
  4068a6:	b2f6      	uxtb	r6, r6
  4068a8:	f109 0910 	add.w	r9, r9, #16
  4068ac:	2e04      	cmp	r6, #4
  4068ae:	fa5f f989 	uxtb.w	r9, r9
  4068b2:	d1d0      	bne.n	406856 <_Z13menuProcFrskyh+0xc6>
              lcd_putsiAtt(j*65, 1+FH+2*FH*i, STR_VTELEMCHNS, field, 0);
            }
          }
        }
      }
      if (fields_count == 0) {
  4068b4:	9c05      	ldr	r4, [sp, #20]
  4068b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4068ba:	b934      	cbnz	r4, 4068ca <_Z13menuProcFrskyh+0x13a>
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
  4068bc:	f1bb 0f23 	cmp.w	fp, #35	; 0x23
  4068c0:	bf18      	it	ne
  4068c2:	f04f 0b22 	movne.w	fp, #34	; 0x22
#include "open9x.h"

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
  4068c6:	f888 b9ae 	strb.w	fp, [r8, #2478]	; 0x9ae
      }
      lcd_status_line();
  4068ca:	23ff      	movs	r3, #255	; 0xff
  4068cc:	2000      	movs	r0, #0
  4068ce:	9300      	str	r3, [sp, #0]
  4068d0:	2138      	movs	r1, #56	; 0x38
  4068d2:	2280      	movs	r2, #128	; 0x80
  4068d4:	2308      	movs	r3, #8
  4068d6:	9001      	str	r0, [sp, #4]
  4068d8:	f7fc fc40 	bl	40315c <_Z15lcd_filled_recthahhhh>
#endif    
  }
  else {
    lcd_putsAtt(22, 40, STR_NODATA, DBLSIZE);
  }
}
  4068dc:	b00b      	add	sp, #44	; 0x2c
  4068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t fields_count = 0;
      for (uint8_t i=0; i<4; i++) {
        for (uint8_t j=0; j<2; j++) {
          uint8_t field = getTelemCustomField(i, j);
          if (i==3 && j==0) {
            lcd_vline(63, 8, 48);
  4068e2:	2230      	movs	r2, #48	; 0x30
  4068e4:	203f      	movs	r0, #63	; 0x3f
  4068e6:	2108      	movs	r1, #8
  4068e8:	f7fc f932 	bl	402b50 <_Z9lcd_vlinehaa>
            if (frskyStreaming > 0) {
  4068ec:	f240 0200 	movw	r2, #0
  4068f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4068f4:	f992 30fa 	ldrsb.w	r3, [r2, #250]	; 0xfa
  4068f8:	2b00      	cmp	r3, #0
  4068fa:	f340 8118 	ble.w	406b2e <_Z13menuProcFrskyh+0x39e>
              if (field == TELEM_ACC) {
  4068fe:	2d1e      	cmp	r5, #30
  406900:	f000 826b 	beq.w	406dda <_Z13menuProcFrskyh+0x64a>
                lcd_outdezNAtt(4*FW, 7*FH+1, frskyHubData.accelX, LEFT|PREC2);
                lcd_outdezNAtt(10*FW, 7*FH+1, frskyHubData.accelY, LEFT|PREC2);
                lcd_outdezNAtt(16*FW, 7*FH+1, frskyHubData.accelZ, LEFT|PREC2);
                break;
              }
              else if (field == TELEM_GPS_TIME) {
  406904:	2d1f      	cmp	r5, #31
  406906:	d1c5      	bne.n	406894 <_Z13menuProcFrskyh+0x104>
#endif    
  }
  else {
    lcd_putsAtt(22, 40, STR_NODATA, DBLSIZE);
  }
}
  406908:	b00b      	add	sp, #44	; 0x2c
  40690a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                lcd_outdezNAtt(10*FW, 7*FH+1, frskyHubData.accelY, LEFT|PREC2);
                lcd_outdezNAtt(16*FW, 7*FH+1, frskyHubData.accelZ, LEFT|PREC2);
                break;
              }
              else if (field == TELEM_GPS_TIME) {
                displayGpsTime();
  40690e:	f7fe bcd7 	b.w	4052c0 <_Z14displayGpsTimev>
      if (s_frsky_view++ == FRSKY_VIEW_MAX)
        s_frsky_view = 0;
      break;

    case EVT_KEY_FIRST(KEY_EXIT):
      chainMenu(menuMainView);
  406912:	4839      	ldr	r0, [pc, #228]	; (4069f8 <_Z13menuProcFrskyh+0x268>)
  406914:	f7ff fe94 	bl	406640 <_Z9chainMenuPFvhE>
  406918:	4c36      	ldr	r4, [pc, #216]	; (4069f4 <_Z13menuProcFrskyh+0x264>)
      break;
  40691a:	e755      	b.n	4067c8 <_Z13menuProcFrskyh+0x38>
              displayRssiLine();
              return;
            }
          }
          if (field) {
            fields_count++;
  40691c:	9905      	ldr	r1, [sp, #20]
            int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+field-1);
  40691e:	f105 0033 	add.w	r0, r5, #51	; 0x33
              displayRssiLine();
              return;
            }
          }
          if (field) {
            fields_count++;
  406922:	1c4b      	adds	r3, r1, #1
  406924:	b2db      	uxtb	r3, r3
            int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+field-1);
  406926:	b2c0      	uxtb	r0, r0
              displayRssiLine();
              return;
            }
          }
          if (field) {
            fields_count++;
  406928:	9305      	str	r3, [sp, #20]
            int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+field-1);
  40692a:	f7fa f9a3 	bl	400c74 <_Z8getValueh>
            uint8_t att = (i==3 ? NO_UNIT : DBLSIZE|NO_UNIT);
  40692e:	f1ba 0f00 	cmp.w	sl, #0
  406932:	bf0c      	ite	eq
  406934:	f04f 0e44 	moveq.w	lr, #68	; 0x44
  406938:	f04f 0e40 	movne.w	lr, #64	; 0x40
            if (field <= TELEM_TM2) {
  40693c:	2d02      	cmp	r5, #2
              return;
            }
          }
          if (field) {
            fields_count++;
            int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+field-1);
  40693e:	4603      	mov	r3, r0
            uint8_t att = (i==3 ? NO_UNIT : DBLSIZE|NO_UNIT);
            if (field <= TELEM_TM2) {
  406940:	d844      	bhi.n	4069cc <_Z13menuProcFrskyh+0x23c>
              uint8_t x = (i==3 ? j?80:20 : j?74:10);
  406942:	2c00      	cmp	r4, #0
  406944:	bf0c      	ite	eq
  406946:	2014      	moveq	r0, #20
  406948:	2050      	movne	r0, #80	; 0x50
  40694a:	f1ba 0f00 	cmp.w	sl, #0
  40694e:	d103      	bne.n	406958 <_Z13menuProcFrskyh+0x1c8>
  406950:	2c00      	cmp	r4, #0
  406952:	bf0c      	ite	eq
  406954:	200a      	moveq	r0, #10
  406956:	204a      	movne	r0, #74	; 0x4a
              putsTime(x, 1+FH+2*FH*i, value, att, att);
  406958:	461a      	mov	r2, r3
  40695a:	4659      	mov	r1, fp
  40695c:	4673      	mov	r3, lr
  40695e:	f8cd e000 	str.w	lr, [sp]
  406962:	f7fc fc9f 	bl	4032a4 <_Z8putsTimehhshh>
  406966:	e797      	b.n	406898 <_Z13menuProcFrskyh+0x108>
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
      }
      lcd_status_line();
    }
    else if (s_frsky_view == e_frsky_bars) {
  406968:	2b01      	cmp	r3, #1
  40696a:	f000 80fd 	beq.w	406b68 <_Z13menuProcFrskyh+0x3d8>
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
      }
      displayRssiLine();
    }
    else if (s_frsky_view == e_frsky_a1a2) {
  40696e:	2b02      	cmp	r3, #2
  406970:	d04e      	beq.n	406a10 <_Z13menuProcFrskyh+0x280>
#endif

      displayRssiLine();
    }
#ifdef FRSKY_HUB
    else if (s_frsky_view == e_frsky_after_flight) {
  406972:	2b03      	cmp	r3, #3
  406974:	d1b2      	bne.n	4068dc <_Z13menuProcFrskyh+0x14c>
      uint8_t line=1*FH+1;
      if (g_model.frsky.usrProto == 1) { // FrSky Hub
  406976:	f898 3860 	ldrb.w	r3, [r8, #2144]	; 0x860
  40697a:	4d20      	ldr	r5, [pc, #128]	; (4069fc <_Z13menuProcFrskyh+0x26c>)
  40697c:	f003 0307 	and.w	r3, r3, #7
  406980:	2b01      	cmp	r3, #1
  406982:	f000 8257 	beq.w	406e34 <_Z13menuProcFrskyh+0x6a4>

      displayRssiLine();
    }
#ifdef FRSKY_HUB
    else if (s_frsky_view == e_frsky_after_flight) {
      uint8_t line=1*FH+1;
  406986:	2509      	movs	r5, #9
        displayGpsCoord(line, frskyHubData.gpsLongitudeEW, frskyHubData.gpsLongitude_bp, frskyHubData.gpsLongitude_ap);
        displayGpsTime();
        line+=1*FH+1;
      }
      // Rssi
      lcd_putsLeft(line, STR_MINRSSI);
  406988:	4628      	mov	r0, r5
  40698a:	491d      	ldr	r1, [pc, #116]	; (406a00 <_Z13menuProcFrskyh+0x270>)
  40698c:	f7fb ff9e 	bl	4028cc <_Z12lcd_putsLefthPKc>
      lcd_puts(10*FW, line, STR_TX);
  406990:	4629      	mov	r1, r5
  406992:	203c      	movs	r0, #60	; 0x3c
  406994:	4a1b      	ldr	r2, [pc, #108]	; (406a04 <_Z13menuProcFrskyh+0x274>)
  406996:	f7fb ff97 	bl	4028c8 <_Z8lcd_putshhPKc>
      lcd_outdezNAtt(lcd_lastPos, line, frskyRSSI[1].min, LEFT|LEADING0, 2);
  40699a:	2602      	movs	r6, #2
  40699c:	f894 0a85 	ldrb.w	r0, [r4, #2693]	; 0xa85
  4069a0:	2390      	movs	r3, #144	; 0x90
  4069a2:	f898 2917 	ldrb.w	r2, [r8, #2327]	; 0x917
  4069a6:	4629      	mov	r1, r5
  4069a8:	9600      	str	r6, [sp, #0]
  4069aa:	f7fc f8d3 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
      lcd_puts(16*FW, line, STR_RX);
  4069ae:	4629      	mov	r1, r5
  4069b0:	2060      	movs	r0, #96	; 0x60
  4069b2:	4a15      	ldr	r2, [pc, #84]	; (406a08 <_Z13menuProcFrskyh+0x278>)
  4069b4:	f7fb ff88 	bl	4028c8 <_Z8lcd_putshhPKc>
      lcd_outdezNAtt(lcd_lastPos, line, frskyRSSI[0].min, LEFT|LEADING0, 2);
  4069b8:	f894 0a85 	ldrb.w	r0, [r4, #2693]	; 0xa85
  4069bc:	f898 2915 	ldrb.w	r2, [r8, #2325]	; 0x915
  4069c0:	4629      	mov	r1, r5
  4069c2:	2390      	movs	r3, #144	; 0x90
  4069c4:	9600      	str	r6, [sp, #0]
  4069c6:	f7fc f8c5 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  4069ca:	e787      	b.n	4068dc <_Z13menuProcFrskyh+0x14c>
            if (field <= TELEM_TM2) {
              uint8_t x = (i==3 ? j?80:20 : j?74:10);
              putsTime(x, 1+FH+2*FH*i, value, att, att);
            }
            else {
              putsTelemetryChannel(j ? 128 : 63, i==3 ? 1+7*FH : 1+2*FH+2*FH*i, field-1, value, att);
  4069cc:	1e6a      	subs	r2, r5, #1
  4069ce:	2c00      	cmp	r4, #0
  4069d0:	bf0c      	ite	eq
  4069d2:	203f      	moveq	r0, #63	; 0x3f
  4069d4:	2080      	movne	r0, #128	; 0x80
  4069d6:	9906      	ldr	r1, [sp, #24]
  4069d8:	b2d2      	uxtb	r2, r2
  4069da:	f8cd e000 	str.w	lr, [sp]
  4069de:	f7fe fbe7 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
              lcd_putsiAtt(j*65, 1+FH+2*FH*i, STR_VTELEMCHNS, field, 0);
  4069e2:	2200      	movs	r2, #0
  4069e4:	9200      	str	r2, [sp, #0]
  4069e6:	4638      	mov	r0, r7
  4069e8:	4659      	mov	r1, fp
  4069ea:	4a08      	ldr	r2, [pc, #32]	; (406a0c <_Z13menuProcFrskyh+0x27c>)
  4069ec:	462b      	mov	r3, r5
  4069ee:	f7fb ff3f 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  4069f2:	e751      	b.n	406898 <_Z13menuProcFrskyh+0x108>
  4069f4:	20001200 	.word	0x20001200
  4069f8:	0040c6a1 	.word	0x0040c6a1
  4069fc:	20000108 	.word	0x20000108
  406a00:	0041082c 	.word	0x0041082c
  406a04:	004107c8 	.word	0x004107c8
  406a08:	004107cc 	.word	0x004107cc
  406a0c:	00410570 	.word	0x00410570
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
      }
      displayRssiLine();
    }
    else if (s_frsky_view == e_frsky_a1a2) {
  406a10:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 406cd4 <_Z13menuProcFrskyh+0x544>
  406a14:	f04f 0b01 	mov.w	fp, #1
  406a18:	2710      	movs	r7, #16
      for (uint8_t i=0; i<2; i++) {
        if (g_model.frsky.channels[i].ratio) {
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
          putsTelemetryChannel(3*FW, y, i+MAX_TIMERS, frskyTelemetry[i].value, blink|DBLSIZE|LEFT);
          lcd_putc(12*FW-1, y-FH, '<'); putsTelemetryChannel(17*FW, y-FH, i+MAX_TIMERS, frskyTelemetry[i].min, NO_UNIT);
  406a1a:	9405      	str	r4, [sp, #20]
NOINLINE uint8_t getRssiAlarmValue(uint8_t alarm)
{
  return (50 + g_model.frsky.rssiAlarms[alarm].value);
}

void menuProcFrsky(uint8_t event)
  406a1c:	49a9      	ldr	r1, [pc, #676]	; (406cc4 <_Z13menuProcFrskyh+0x534>)
    else if (s_frsky_view == e_frsky_a1a2) {
      // Big A1 / A2 with min and max
      uint8_t blink;
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
        if (g_model.frsky.channels[i].ratio) {
  406a1e:	f899 3718 	ldrb.w	r3, [r9, #1816]	; 0x718
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
          putsTelemetryChannel(3*FW, y, i+MAX_TIMERS, frskyTelemetry[i].value, blink|DBLSIZE|LEFT);
  406a22:	f10b 0601 	add.w	r6, fp, #1
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
      }
      displayRssiLine();
    }
    else if (s_frsky_view == e_frsky_a1a2) {
  406a26:	f10b 30ff 	add.w	r0, fp, #4294967295
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
        if (g_model.frsky.channels[i].ratio) {
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
          putsTelemetryChannel(3*FW, y, i+MAX_TIMERS, frskyTelemetry[i].value, blink|DBLSIZE|LEFT);
  406a2a:	fa5f fa86 	uxtb.w	sl, r6
NOINLINE uint8_t getRssiAlarmValue(uint8_t alarm)
{
  return (50 + g_model.frsky.rssiAlarms[alarm].value);
}

void menuProcFrsky(uint8_t event)
  406a2e:	eb01 0c05 	add.w	ip, r1, r5
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
      }
      displayRssiLine();
    }
    else if (s_frsky_view == e_frsky_a1a2) {
  406a32:	b2c0      	uxtb	r0, r0
      // Big A1 / A2 with min and max
      uint8_t blink;
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
        if (g_model.frsky.channels[i].ratio) {
  406a34:	2b00      	cmp	r3, #0
  406a36:	d03f      	beq.n	406ab8 <_Z13menuProcFrskyh+0x328>
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
  406a38:	f8cd c00c 	str.w	ip, [sp, #12]
  406a3c:	f7fd fe16 	bl	40466c <_Z17FRSKY_alarmRaisedh>
  406a40:	4604      	mov	r4, r0
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
  406a42:	2000      	movs	r0, #0
  406a44:	4639      	mov	r1, r7
  406a46:	465b      	mov	r3, fp
  406a48:	4a9f      	ldr	r2, [pc, #636]	; (406cc8 <_Z13menuProcFrskyh+0x538>)
      // Big A1 / A2 with min and max
      uint8_t blink;
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
        if (g_model.frsky.channels[i].ratio) {
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
  406a4a:	4284      	cmp	r4, r0
  406a4c:	bf0c      	ite	eq
  406a4e:	f04f 0b84 	moveq.w	fp, #132	; 0x84
  406a52:	f04f 0b86 	movne.w	fp, #134	; 0x86
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
  406a56:	2480      	movs	r4, #128	; 0x80
  406a58:	9400      	str	r4, [sp, #0]
  406a5a:	f7fc fcad 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
          putsTelemetryChannel(3*FW, y, i+MAX_TIMERS, frskyTelemetry[i].value, blink|DBLSIZE|LEFT);
  406a5e:	4999      	ldr	r1, [pc, #612]	; (406cc4 <_Z13menuProcFrskyh+0x534>)
          lcd_putc(12*FW-1, y-FH, '<'); putsTelemetryChannel(17*FW, y-FH, i+MAX_TIMERS, frskyTelemetry[i].min, NO_UNIT);
  406a60:	f1a7 0408 	sub.w	r4, r7, #8
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
        if (g_model.frsky.channels[i].ratio) {
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
          putsTelemetryChannel(3*FW, y, i+MAX_TIMERS, frskyTelemetry[i].value, blink|DBLSIZE|LEFT);
  406a64:	5d4b      	ldrb	r3, [r1, r5]
          lcd_putc(12*FW-1, y-FH, '<'); putsTelemetryChannel(17*FW, y-FH, i+MAX_TIMERS, frskyTelemetry[i].min, NO_UNIT);
  406a66:	b2e4      	uxtb	r4, r4
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
        if (g_model.frsky.channels[i].ratio) {
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
          putsTelemetryChannel(3*FW, y, i+MAX_TIMERS, frskyTelemetry[i].value, blink|DBLSIZE|LEFT);
  406a68:	4639      	mov	r1, r7
  406a6a:	2012      	movs	r0, #18
  406a6c:	4652      	mov	r2, sl
  406a6e:	f8cd b000 	str.w	fp, [sp]
  406a72:	f7fe fb9d 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
          lcd_putc(12*FW-1, y-FH, '<'); putsTelemetryChannel(17*FW, y-FH, i+MAX_TIMERS, frskyTelemetry[i].min, NO_UNIT);
  406a76:	4621      	mov	r1, r4
  406a78:	2047      	movs	r0, #71	; 0x47
  406a7a:	223c      	movs	r2, #60	; 0x3c
  406a7c:	f7fb feb2 	bl	4027e4 <_Z8lcd_putchhh>
  406a80:	f8dd c00c 	ldr.w	ip, [sp, #12]
  406a84:	4621      	mov	r1, r4
  406a86:	f89c 3001 	ldrb.w	r3, [ip, #1]
  406a8a:	2066      	movs	r0, #102	; 0x66
  406a8c:	4652      	mov	r2, sl
  406a8e:	2440      	movs	r4, #64	; 0x40
  406a90:	9400      	str	r4, [sp, #0]
  406a92:	f7fe fb8d 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
          lcd_putc(12*FW, y, '>');      putsTelemetryChannel(17*FW, y, i+MAX_TIMERS, frskyTelemetry[i].max, NO_UNIT);
  406a96:	4639      	mov	r1, r7
  406a98:	2048      	movs	r0, #72	; 0x48
  406a9a:	223e      	movs	r2, #62	; 0x3e
  406a9c:	f7fb fea2 	bl	4027e4 <_Z8lcd_putchhh>
  406aa0:	f8dd c00c 	ldr.w	ip, [sp, #12]
  406aa4:	4639      	mov	r1, r7
  406aa6:	f89c 3002 	ldrb.w	r3, [ip, #2]
  406aaa:	2066      	movs	r0, #102	; 0x66
  406aac:	4652      	mov	r2, sl
  406aae:	9400      	str	r4, [sp, #0]
  406ab0:	f7fe fb7e 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
          y += 3*FH;
  406ab4:	3718      	adds	r7, #24
  406ab6:	b2ff      	uxtb	r7, r7
  406ab8:	fa5f fb86 	uxtb.w	fp, r6
  406abc:	3503      	adds	r5, #3
    }
    else if (s_frsky_view == e_frsky_a1a2) {
      // Big A1 / A2 with min and max
      uint8_t blink;
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
  406abe:	f1bb 0f03 	cmp.w	fp, #3
          blink = (FRSKY_alarmRaised(i) ? INVERS : 0);
          putsStrIdx(0, y, STR_A, i+1, TWO_DOTS);
          putsTelemetryChannel(3*FW, y, i+MAX_TIMERS, frskyTelemetry[i].value, blink|DBLSIZE|LEFT);
          lcd_putc(12*FW-1, y-FH, '<'); putsTelemetryChannel(17*FW, y-FH, i+MAX_TIMERS, frskyTelemetry[i].min, NO_UNIT);
          lcd_putc(12*FW, y, '>');      putsTelemetryChannel(17*FW, y, i+MAX_TIMERS, frskyTelemetry[i].max, NO_UNIT);
          y += 3*FH;
  406ac2:	f109 0906 	add.w	r9, r9, #6
    }
    else if (s_frsky_view == e_frsky_a1a2) {
      // Big A1 / A2 with min and max
      uint8_t blink;
      uint8_t y = 2*FH;
      for (uint8_t i=0; i<2; i++) {
  406ac6:	d1a9      	bne.n	406a1c <_Z13menuProcFrskyh+0x28c>
          y += 3*FH;
        }
      }
#ifdef FRSKY_HUB
      // Cells voltage
      if (frskyHubData.cellsCount > 0) {
  406ac8:	f898 3966 	ldrb.w	r3, [r8, #2406]	; 0x966
  406acc:	9c05      	ldr	r4, [sp, #20]
  406ace:	091b      	lsrs	r3, r3, #4
  406ad0:	2b00      	cmp	r3, #0
  406ad2:	d02c      	beq.n	406b2e <_Z13menuProcFrskyh+0x39e>
        uint8_t y = 1*FH;
        for (uint8_t k=0; k<frskyHubData.cellsCount && k<6; k++) {
  406ad4:	dd26      	ble.n	406b24 <_Z13menuProcFrskyh+0x394>
  406ad6:	2300      	movs	r3, #0
  406ad8:	461d      	mov	r5, r3
  406ada:	2608      	movs	r6, #8
          uint8_t attr = (barsThresholds[THLD_CELL] && frskyHubData.cellVolts[k] < barsThresholds[THLD_CELL]) ? BLINK|PREC2 : PREC2;
          lcd_outdezNAtt(21*FW, y, frskyHubData.cellVolts[k] * 2, attr, 4);
  406adc:	2704      	movs	r7, #4
#ifdef FRSKY_HUB
      // Cells voltage
      if (frskyHubData.cellsCount > 0) {
        uint8_t y = 1*FH;
        for (uint8_t k=0; k<frskyHubData.cellsCount && k<6; k++) {
          uint8_t attr = (barsThresholds[THLD_CELL] && frskyHubData.cellVolts[k] < barsThresholds[THLD_CELL]) ? BLINK|PREC2 : PREC2;
  406ade:	f894 1aec 	ldrb.w	r1, [r4, #2796]	; 0xaec
  406ae2:	eb08 0203 	add.w	r2, r8, r3
  406ae6:	2900      	cmp	r1, #0
  406ae8:	f040 80e5 	bne.w	406cb6 <_Z13menuProcFrskyh+0x526>
  406aec:	f892 292c 	ldrb.w	r2, [r2, #2348]	; 0x92c
  406af0:	2330      	movs	r3, #48	; 0x30
          lcd_outdezNAtt(21*FW, y, frskyHubData.cellVolts[k] * 2, attr, 4);
  406af2:	0052      	lsls	r2, r2, #1
  406af4:	4631      	mov	r1, r6
  406af6:	207e      	movs	r0, #126	; 0x7e
      }
#ifdef FRSKY_HUB
      // Cells voltage
      if (frskyHubData.cellsCount > 0) {
        uint8_t y = 1*FH;
        for (uint8_t k=0; k<frskyHubData.cellsCount && k<6; k++) {
  406af8:	3501      	adds	r5, #1
          uint8_t attr = (barsThresholds[THLD_CELL] && frskyHubData.cellVolts[k] < barsThresholds[THLD_CELL]) ? BLINK|PREC2 : PREC2;
          lcd_outdezNAtt(21*FW, y, frskyHubData.cellVolts[k] * 2, attr, 4);
  406afa:	9700      	str	r7, [sp, #0]
  406afc:	f7fc f82a 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
      }
#ifdef FRSKY_HUB
      // Cells voltage
      if (frskyHubData.cellsCount > 0) {
        uint8_t y = 1*FH;
        for (uint8_t k=0; k<frskyHubData.cellsCount && k<6; k++) {
  406b00:	f898 3966 	ldrb.w	r3, [r8, #2406]	; 0x966
  406b04:	b2ed      	uxtb	r5, r5
  406b06:	ebb5 1f13 	cmp.w	r5, r3, lsr #4
  406b0a:	bfac      	ite	ge
  406b0c:	2200      	movge	r2, #0
  406b0e:	2201      	movlt	r2, #1
  406b10:	2d05      	cmp	r5, #5
  406b12:	bf8c      	ite	hi
  406b14:	2200      	movhi	r2, #0
  406b16:	f002 0201 	andls.w	r2, r2, #1
          uint8_t attr = (barsThresholds[THLD_CELL] && frskyHubData.cellVolts[k] < barsThresholds[THLD_CELL]) ? BLINK|PREC2 : PREC2;
          lcd_outdezNAtt(21*FW, y, frskyHubData.cellVolts[k] * 2, attr, 4);
          y += 1*FH;
  406b1a:	3608      	adds	r6, #8
  406b1c:	b2f6      	uxtb	r6, r6
      }
#ifdef FRSKY_HUB
      // Cells voltage
      if (frskyHubData.cellsCount > 0) {
        uint8_t y = 1*FH;
        for (uint8_t k=0; k<frskyHubData.cellsCount && k<6; k++) {
  406b1e:	462b      	mov	r3, r5
  406b20:	2a00      	cmp	r2, #0
  406b22:	d1dc      	bne.n	406ade <_Z13menuProcFrskyh+0x34e>
          uint8_t attr = (barsThresholds[THLD_CELL] && frskyHubData.cellVolts[k] < barsThresholds[THLD_CELL]) ? BLINK|PREC2 : PREC2;
          lcd_outdezNAtt(21*FW, y, frskyHubData.cellVolts[k] * 2, attr, 4);
          y += 1*FH;
        }
        lcd_vline(17*FW+4, 8, 47);
  406b24:	206a      	movs	r0, #106	; 0x6a
  406b26:	2108      	movs	r1, #8
  406b28:	222f      	movs	r2, #47	; 0x2f
  406b2a:	f7fc f811 	bl	402b50 <_Z9lcd_vlinehaa>
#endif    
  }
  else {
    lcd_putsAtt(22, 40, STR_NODATA, DBLSIZE);
  }
}
  406b2e:	b00b      	add	sp, #44	; 0x2c
  406b30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
        lcd_vline(17*FW+4, 8, 47);
      }
#endif

      displayRssiLine();
  406b34:	f7fe bcf4 	b.w	405520 <_Z15displayRssiLinev>
      if (s_frsky_view-- == 0)
        s_frsky_view = FRSKY_VIEW_MAX;
      break;

    case EVT_KEY_BREAK(KEY_DOWN):
      if (s_frsky_view++ == FRSKY_VIEW_MAX)
  406b38:	f894 3c28 	ldrb.w	r3, [r4, #3112]	; 0xc28
  406b3c:	1c5a      	adds	r2, r3, #1
  406b3e:	2b03      	cmp	r3, #3
  406b40:	f884 2c28 	strb.w	r2, [r4, #3112]	; 0xc28
  406b44:	f47f ae40 	bne.w	4067c8 <_Z13menuProcFrskyh+0x38>
        s_frsky_view = 0;
  406b48:	2300      	movs	r3, #0
  406b4a:	f884 3c28 	strb.w	r3, [r4, #3112]	; 0xc28
  406b4e:	e63b      	b.n	4067c8 <_Z13menuProcFrskyh+0x38>
    case EVT_KEY_FIRST(KEY_EXIT):
      chainMenu(menuMainView);
      break;

    case EVT_KEY_FIRST(KEY_MENU):
      resetTelemetry();
  406b50:	f7fd fede 	bl	404910 <_Z14resetTelemetryv>
  406b54:	e637      	b.n	4067c6 <_Z13menuProcFrskyh+0x36>
      lcd_outdezNAtt(lcd_lastPos, line, frskyRSSI[0].min, LEFT|LEADING0, 2);
    }
#endif    
  }
  else {
    lcd_putsAtt(22, 40, STR_NODATA, DBLSIZE);
  406b56:	4a5d      	ldr	r2, [pc, #372]	; (406ccc <_Z13menuProcFrskyh+0x53c>)
  406b58:	2016      	movs	r0, #22
  406b5a:	2128      	movs	r1, #40	; 0x28
  406b5c:	2304      	movs	r3, #4
  }
}
  406b5e:	b00b      	add	sp, #44	; 0x2c
  406b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      lcd_outdezNAtt(lcd_lastPos, line, frskyRSSI[0].min, LEFT|LEADING0, 2);
    }
#endif    
  }
  else {
    lcd_putsAtt(22, 40, STR_NODATA, DBLSIZE);
  406b64:	f7fb bea8 	b.w	4028b8 <_Z11lcd_putsAtthhPKch>
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
      }
      lcd_status_line();
    }
    else if (s_frsky_view == e_frsky_bars) {
  406b68:	f04f 0a04 	mov.w	sl, #4
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
        if (source && bmax > bmin) {
          lcd_putsiAtt(0, bars_height+bars_height+1+i*(bars_height+6), STR_VTELEMCHNS, source, 0);
          lcd_rect(25, bars_height+6+i*(bars_height+6), 101, bars_height+2);
  406b6c:	9409      	str	r4, [sp, #36]	; 0x24
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
      }
      lcd_status_line();
    }
    else if (s_frsky_view == e_frsky_bars) {
  406b6e:	f04f 0903 	mov.w	r9, #3
  406b72:	2705      	movs	r7, #5
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
        if (source && bmax > bmin) {
          lcd_putsiAtt(0, bars_height+bars_height+1+i*(bars_height+6), STR_VTELEMCHNS, source, 0);
          lcd_rect(25, bars_height+6+i*(bars_height+6), 101, bars_height+2);
  406b74:	f8cd b020 	str.w	fp, [sp, #32]
  406b78:	4654      	mov	r4, sl
    }
    else if (s_frsky_view == e_frsky_bars) {
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
  406b7a:	f509 7364 	add.w	r3, r9, #912	; 0x390
  406b7e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
  406b82:	f893 6142 	ldrb.w	r6, [r3, #322]	; 0x142
    }
    else if (s_frsky_view == e_frsky_bars) {
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
  406b86:	f893 5141 	ldrb.w	r5, [r3, #321]	; 0x141
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
  406b8a:	f3c6 0385 	ubfx	r3, r6, #2, #6
    else if (s_frsky_view == e_frsky_bars) {
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
  406b8e:	f006 0603 	and.w	r6, r6, #3
  406b92:	0136      	lsls	r6, r6, #4
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
  406b94:	ebc3 1a83 	rsb	sl, r3, r3, lsl #6
    else if (s_frsky_view == e_frsky_bars) {
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
  406b98:	ea46 1615 	orr.w	r6, r6, r5, lsr #4
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
  406b9c:	ebc3 0a8a 	rsb	sl, r3, sl, lsl #2
    else if (s_frsky_view == e_frsky_bars) {
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
  406ba0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
        if (source && bmax > bmin) {
  406ba4:	f015 030f 	ands.w	r3, r5, #15
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
  406ba8:	f10a 3aff 	add.w	sl, sl, #4294967295
    else if (s_frsky_view == e_frsky_bars) {
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
  406bac:	fa5f fc86 	uxtb.w	ip, r6
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
  406bb0:	fa5f fa8a 	uxtb.w	sl, sl
        if (source && bmax > bmin) {
  406bb4:	bf18      	it	ne
  406bb6:	2301      	movne	r3, #1
  406bb8:	45e2      	cmp	sl, ip
  406bba:	bf94      	ite	ls
  406bbc:	2300      	movls	r3, #0
  406bbe:	f003 0301 	andhi.w	r3, r3, #1
  406bc2:	f005 050f 	and.w	r5, r5, #15
  406bc6:	b99b      	cbnz	r3, 406bf0 <_Z13menuProcFrskyh+0x460>
            lcd_vlineStip(26+thresholdX, bars_height+4+i*(bars_height+6), bars_height+3, DOTTED);
            lcd_hline(25+thresholdX, bars_height+4+i*(bars_height+6), 3);
          }
        }
        else {
          bars_height += 2;
  406bc8:	3702      	adds	r7, #2
  406bca:	b2ff      	uxtb	r7, r7
  406bcc:	3c01      	subs	r4, #1
  406bce:	b2e4      	uxtb	r4, r4
  406bd0:	f109 39ff 	add.w	r9, r9, #4294967295
      lcd_status_line();
    }
    else if (s_frsky_view == e_frsky_bars) {
      // The bars
      uint8_t bars_height = 5;
      for (int8_t i=3; i>=0; i--) {
  406bd4:	2c00      	cmp	r4, #0
  406bd6:	d1d0      	bne.n	406b7a <_Z13menuProcFrskyh+0x3ea>
        }
        else {
          bars_height += 2;
        }
      }
      if (bars_height == 13) {
  406bd8:	2f0d      	cmp	r7, #13
  406bda:	f8dd b020 	ldr.w	fp, [sp, #32]
  406bde:	d1a6      	bne.n	406b2e <_Z13menuProcFrskyh+0x39e>
        // No bars at all!
        putEvent(event == EVT_KEY_BREAK(KEY_UP) ? event : EVT_KEY_BREAK(KEY_DOWN));
  406be0:	f1bb 0f23 	cmp.w	fp, #35	; 0x23
  406be4:	bf18      	it	ne
  406be6:	f04f 0b22 	movne.w	fp, #34	; 0x22
  406bea:	f888 b9ae 	strb.w	fp, [r8, #2478]	; 0x9ae
  406bee:	e79e      	b.n	406b2e <_Z13menuProcFrskyh+0x39e>
      for (int8_t i=3; i>=0; i--) {
        uint8_t source = g_model.frsky.bars[i].source;
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
        if (source && bmax > bmin) {
          lcd_putsiAtt(0, bars_height+bars_height+1+i*(bars_height+6), STR_VTELEMCHNS, source, 0);
  406bf0:	f107 0b06 	add.w	fp, r7, #6
  406bf4:	fa5f fb8b 	uxtb.w	fp, fp
  406bf8:	fb09 f30b 	mul.w	r3, r9, fp
  406bfc:	b2db      	uxtb	r3, r3
  406bfe:	eb03 0147 	add.w	r1, r3, r7, lsl #1
  406c02:	3101      	adds	r1, #1
  406c04:	2000      	movs	r0, #0
  406c06:	9305      	str	r3, [sp, #20]
  406c08:	b2c9      	uxtb	r1, r1
  406c0a:	4a31      	ldr	r2, [pc, #196]	; (406cd0 <_Z13menuProcFrskyh+0x540>)
  406c0c:	462b      	mov	r3, r5
  406c0e:	f8cd c00c 	str.w	ip, [sp, #12]
  406c12:	9000      	str	r0, [sp, #0]
  406c14:	f7fb fe2c 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
          lcd_rect(25, bars_height+6+i*(bars_height+6), 101, bars_height+2);
  406c18:	fb04 f10b 	mul.w	r1, r4, fp
  406c1c:	1cbb      	adds	r3, r7, #2
  406c1e:	b2db      	uxtb	r3, r3
  406c20:	2019      	movs	r0, #25
  406c22:	2265      	movs	r2, #101	; 0x65
  406c24:	f04f 0e00 	mov.w	lr, #0
  406c28:	b2c9      	uxtb	r1, r1
  406c2a:	26ff      	movs	r6, #255	; 0xff
  406c2c:	e88d 4040 	stmia.w	sp, {r6, lr}
  406c30:	f7fc f96a 	bl	402f08 <_Z8lcd_recthhhhhh>
          int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+source-1);
  406c34:	f105 0033 	add.w	r0, r5, #51	; 0x33
  406c38:	f7fa f81c 	bl	400c74 <_Z8getValueh>
          int16_t threshold = 0;
          uint8_t thresholdX = 0;
          if (source <= TELEM_TM2)
  406c3c:	2d02      	cmp	r5, #2
        uint8_t bmin = g_model.frsky.bars[i].barMin * 5;
        uint8_t bmax = (51 - g_model.frsky.bars[i].barMax) * 5;
        if (source && bmax > bmin) {
          lcd_putsiAtt(0, bars_height+bars_height+1+i*(bars_height+6), STR_VTELEMCHNS, source, 0);
          lcd_rect(25, bars_height+6+i*(bars_height+6), 101, bars_height+2);
          int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+source-1);
  406c3e:	4603      	mov	r3, r0
          int16_t threshold = 0;
          uint8_t thresholdX = 0;
          if (source <= TELEM_TM2)
  406c40:	f8dd c00c 	ldr.w	ip, [sp, #12]
  406c44:	d948      	bls.n	406cd8 <_Z13menuProcFrskyh+0x548>
            threshold = 0;
          else if (source <= TELEM_A2)
  406c46:	2d04      	cmp	r5, #4
  406c48:	f240 80b4 	bls.w	406db4 <_Z13menuProcFrskyh+0x624>
            threshold = g_model.frsky.channels[source-TELEM_A1].alarms_value[0];
          else if (source <= TELEM_RSSI_RX)
  406c4c:	2d06      	cmp	r5, #6
  406c4e:	f200 80e2 	bhi.w	406e16 <_Z13menuProcFrskyh+0x686>
            threshold = getRssiAlarmValue(source-TELEM_RSSI_TX);
  406c52:	1f68      	subs	r0, r5, #5
  406c54:	b2c0      	uxtb	r0, r0
  406c56:	9304      	str	r3, [sp, #16]
  406c58:	f8cd c00c 	str.w	ip, [sp, #12]
  406c5c:	f7fe fc54 	bl	405508 <_Z17getRssiAlarmValueh>
  406c60:	9b04      	ldr	r3, [sp, #16]
  406c62:	f8dd c00c 	ldr.w	ip, [sp, #12]
  406c66:	4683      	mov	fp, r0
          else
            threshold = convertTelemValue(source, barsThresholds[source-TELEM_ALT]);
          int16_t barMin = convertTelemValue(source, bmin);
  406c68:	4661      	mov	r1, ip
  406c6a:	4628      	mov	r0, r5
  406c6c:	9304      	str	r3, [sp, #16]
  406c6e:	f7fd fec3 	bl	4049f8 <_Z17convertTelemValuehh>
          int16_t barMax = convertTelemValue(source, bmax);
  406c72:	4651      	mov	r1, sl
            threshold = g_model.frsky.channels[source-TELEM_A1].alarms_value[0];
          else if (source <= TELEM_RSSI_RX)
            threshold = getRssiAlarmValue(source-TELEM_RSSI_TX);
          else
            threshold = convertTelemValue(source, barsThresholds[source-TELEM_ALT]);
          int16_t barMin = convertTelemValue(source, bmin);
  406c74:	4606      	mov	r6, r0
          int16_t barMax = convertTelemValue(source, bmax);
  406c76:	4628      	mov	r0, r5
  406c78:	f7fd febe 	bl	4049f8 <_Z17convertTelemValuehh>
          if (threshold) {
  406c7c:	9b04      	ldr	r3, [sp, #16]
  406c7e:	f04f 0c1a 	mov.w	ip, #26
  406c82:	4659      	mov	r1, fp
  406c84:	f1bb 0f00 	cmp.w	fp, #0
  406c88:	d036      	beq.n	406cf8 <_Z13menuProcFrskyh+0x568>
            thresholdX = (uint8_t)(((int32_t)(threshold - barMin) * (int32_t)100) / (barMax - barMin));
  406c8a:	fa0f f18b 	sxth.w	r1, fp
  406c8e:	1b8a      	subs	r2, r1, r6
  406c90:	f04f 0b64 	mov.w	fp, #100	; 0x64
  406c94:	fb0b fb02 	mul.w	fp, fp, r2
  406c98:	1b82      	subs	r2, r0, r6
  406c9a:	fb9b fbf2 	sdiv	fp, fp, r2
  406c9e:	fa5f fb8b 	uxtb.w	fp, fp
            if (thresholdX > 100)
  406ca2:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
  406ca6:	bf92      	itee	ls
  406ca8:	f10b 0c1a 	addls.w	ip, fp, #26
  406cac:	f04f 0c1a 	movhi.w	ip, #26
              thresholdX = 0;
  406cb0:	f04f 0b00 	movhi.w	fp, #0
  406cb4:	e020      	b.n	406cf8 <_Z13menuProcFrskyh+0x568>
#ifdef FRSKY_HUB
      // Cells voltage
      if (frskyHubData.cellsCount > 0) {
        uint8_t y = 1*FH;
        for (uint8_t k=0; k<frskyHubData.cellsCount && k<6; k++) {
          uint8_t attr = (barsThresholds[THLD_CELL] && frskyHubData.cellVolts[k] < barsThresholds[THLD_CELL]) ? BLINK|PREC2 : PREC2;
  406cb6:	f892 292c 	ldrb.w	r2, [r2, #2348]	; 0x92c
  406cba:	2331      	movs	r3, #49	; 0x31
  406cbc:	4291      	cmp	r1, r2
  406cbe:	f63f af18 	bhi.w	406af2 <_Z13menuProcFrskyh+0x362>
  406cc2:	e715      	b.n	406af0 <_Z13menuProcFrskyh+0x360>
  406cc4:	20000a14 	.word	0x20000a14
  406cc8:	004105f5 	.word	0x004105f5
  406ccc:	004107d0 	.word	0x004107d0
  406cd0:	00410570 	.word	0x00410570
  406cd4:	20000244 	.word	0x20000244
            threshold = g_model.frsky.channels[source-TELEM_A1].alarms_value[0];
          else if (source <= TELEM_RSSI_RX)
            threshold = getRssiAlarmValue(source-TELEM_RSSI_TX);
          else
            threshold = convertTelemValue(source, barsThresholds[source-TELEM_ALT]);
          int16_t barMin = convertTelemValue(source, bmin);
  406cd8:	4661      	mov	r1, ip
  406cda:	4628      	mov	r0, r5
  406cdc:	9304      	str	r3, [sp, #16]
  406cde:	f7fd fe8b 	bl	4049f8 <_Z17convertTelemValuehh>
          int16_t barMax = convertTelemValue(source, bmax);
  406ce2:	4651      	mov	r1, sl
            threshold = g_model.frsky.channels[source-TELEM_A1].alarms_value[0];
          else if (source <= TELEM_RSSI_RX)
            threshold = getRssiAlarmValue(source-TELEM_RSSI_TX);
          else
            threshold = convertTelemValue(source, barsThresholds[source-TELEM_ALT]);
          int16_t barMin = convertTelemValue(source, bmin);
  406ce4:	4606      	mov	r6, r0
          int16_t barMax = convertTelemValue(source, bmax);
  406ce6:	4628      	mov	r0, r5
  406ce8:	f7fd fe86 	bl	4049f8 <_Z17convertTelemValuehh>
        if (source && bmax > bmin) {
          lcd_putsiAtt(0, bars_height+bars_height+1+i*(bars_height+6), STR_VTELEMCHNS, source, 0);
          lcd_rect(25, bars_height+6+i*(bars_height+6), 101, bars_height+2);
          int16_t value = getValue(CSW_CHOUT_BASE+NUM_CHNOUT+source-1);
          int16_t threshold = 0;
          uint8_t thresholdX = 0;
  406cec:	f04f 0b00 	mov.w	fp, #0
  406cf0:	9b04      	ldr	r3, [sp, #16]
          else if (source <= TELEM_RSSI_RX)
            threshold = getRssiAlarmValue(source-TELEM_RSSI_TX);
          else
            threshold = convertTelemValue(source, barsThresholds[source-TELEM_ALT]);
          int16_t barMin = convertTelemValue(source, bmin);
          int16_t barMax = convertTelemValue(source, bmax);
  406cf2:	f04f 0c1a 	mov.w	ip, #26
  406cf6:	4659      	mov	r1, fp
          if (threshold) {
            thresholdX = (uint8_t)(((int32_t)(threshold - barMin) * (int32_t)100) / (barMax - barMin));
            if (thresholdX > 100)
              thresholdX = 0;
          }
          uint8_t width = (uint8_t)limit((int16_t)0, (int16_t)(((int32_t)100 * (value - barMin)) / (barMax - barMin)), (int16_t)100);
  406cf8:	b232      	sxth	r2, r6
  406cfa:	ebc2 0e03 	rsb	lr, r2, r3
  406cfe:	2664      	movs	r6, #100	; 0x64
  406d00:	fb06 fe0e 	mul.w	lr, r6, lr
  406d04:	b200      	sxth	r0, r0
  406d06:	1a80      	subs	r0, r0, r2
  406d08:	fb9e fef0 	sdiv	lr, lr, r0
  406d0c:	fa1f fe8e 	uxth.w	lr, lr
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  406d10:	fa0f f28e 	sxth.w	r2, lr
  406d14:	2a00      	cmp	r2, #0
  406d16:	db5e      	blt.n	406dd6 <_Z13menuProcFrskyh+0x646>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  406d18:	2a63      	cmp	r2, #99	; 0x63
  406d1a:	bfd8      	it	le
  406d1c:	fa5f f68e 	uxtble.w	r6, lr

	   // reversed barshade for T1/T2
	  uint8_t barShade;
	  if (source == TELEM_T1 || source == TELEM_T2)
  406d20:	3d0a      	subs	r5, #10
  406d22:	b2ed      	uxtb	r5, r5
  406d24:	2d01      	cmp	r5, #1
  406d26:	d951      	bls.n	406dcc <_Z13menuProcFrskyh+0x63c>
		barShade = ((threshold < value) ? DOTTED : SOLID);
	  else
		barShade = ((threshold > value) ? DOTTED : SOLID);
  406d28:	428b      	cmp	r3, r1
  406d2a:	bfac      	ite	ge
  406d2c:	25ff      	movge	r5, #255	; 0xff
  406d2e:	2555      	movlt	r5, #85	; 0x55
	  lcd_filled_rect(26, bars_height+6+1+i*(bars_height+6), width, bars_height, barShade);
  406d30:	9905      	ldr	r1, [sp, #20]
  406d32:	4632      	mov	r2, r6
  406d34:	19cb      	adds	r3, r1, r7
  406d36:	b2db      	uxtb	r3, r3
  406d38:	f103 0a07 	add.w	sl, r3, #7
  406d3c:	fa4f fa8a 	sxtb.w	sl, sl
  406d40:	9306      	str	r3, [sp, #24]
  406d42:	9500      	str	r5, [sp, #0]
  406d44:	463b      	mov	r3, r7
  406d46:	2500      	movs	r5, #0
  406d48:	201a      	movs	r0, #26
  406d4a:	4651      	mov	r1, sl
  406d4c:	9501      	str	r5, [sp, #4]
  406d4e:	f8cd c00c 	str.w	ip, [sp, #12]
  406d52:	f7fc fa03 	bl	40315c <_Z15lcd_filled_recthahhhh>
	  
          for (uint8_t j=50; j<125; j+=25)
            if (j>26+thresholdX || j>26+width) lcd_vline(j, bars_height+6+1+i*(bars_height+6), bars_height);
  406d56:	f8dd c00c 	ldr.w	ip, [sp, #12]
  406d5a:	b27b      	sxtb	r3, r7
  406d5c:	9707      	str	r7, [sp, #28]
	  uint8_t barShade;
	  if (source == TELEM_T1 || source == TELEM_T2)
		barShade = ((threshold < value) ? DOTTED : SOLID);
	  else
		barShade = ((threshold > value) ? DOTTED : SOLID);
	  lcd_filled_rect(26, bars_height+6+1+i*(bars_height+6), width, bars_height, barShade);
  406d5e:	2532      	movs	r5, #50	; 0x32
	  
          for (uint8_t j=50; j<125; j+=25)
            if (j>26+thresholdX || j>26+width) lcd_vline(j, bars_height+6+1+i*(bars_height+6), bars_height);
  406d60:	4627      	mov	r7, r4
  406d62:	9305      	str	r3, [sp, #20]
  406d64:	361a      	adds	r6, #26
  406d66:	4664      	mov	r4, ip
  406d68:	42a5      	cmp	r5, r4
	  uint8_t barShade;
	  if (source == TELEM_T1 || source == TELEM_T2)
		barShade = ((threshold < value) ? DOTTED : SOLID);
	  else
		barShade = ((threshold > value) ? DOTTED : SOLID);
	  lcd_filled_rect(26, bars_height+6+1+i*(bars_height+6), width, bars_height, barShade);
  406d6a:	b2e8      	uxtb	r0, r5
	  
          for (uint8_t j=50; j<125; j+=25)
            if (j>26+thresholdX || j>26+width) lcd_vline(j, bars_height+6+1+i*(bars_height+6), bars_height);
  406d6c:	dc01      	bgt.n	406d72 <_Z13menuProcFrskyh+0x5e2>
  406d6e:	42b5      	cmp	r5, r6
  406d70:	dd03      	ble.n	406d7a <_Z13menuProcFrskyh+0x5ea>
  406d72:	4651      	mov	r1, sl
  406d74:	9a05      	ldr	r2, [sp, #20]
  406d76:	f7fb feeb 	bl	402b50 <_Z9lcd_vlinehaa>
  406d7a:	3519      	adds	r5, #25
		barShade = ((threshold < value) ? DOTTED : SOLID);
	  else
		barShade = ((threshold > value) ? DOTTED : SOLID);
	  lcd_filled_rect(26, bars_height+6+1+i*(bars_height+6), width, bars_height, barShade);
	  
          for (uint8_t j=50; j<125; j+=25)
  406d7c:	2d7d      	cmp	r5, #125	; 0x7d
  406d7e:	d1f3      	bne.n	406d68 <_Z13menuProcFrskyh+0x5d8>
  406d80:	463c      	mov	r4, r7
  406d82:	9f07      	ldr	r7, [sp, #28]
            if (j>26+thresholdX || j>26+width) lcd_vline(j, bars_height+6+1+i*(bars_height+6), bars_height);
          if (thresholdX) {
  406d84:	f1bb 0f00 	cmp.w	fp, #0
  406d88:	f43f af20 	beq.w	406bcc <_Z13menuProcFrskyh+0x43c>
            lcd_vlineStip(26+thresholdX, bars_height+4+i*(bars_height+6), bars_height+3, DOTTED);
  406d8c:	9e06      	ldr	r6, [sp, #24]
  406d8e:	f10b 001a 	add.w	r0, fp, #26
  406d92:	1d35      	adds	r5, r6, #4
  406d94:	b2ed      	uxtb	r5, r5
  406d96:	1cfa      	adds	r2, r7, #3
  406d98:	b269      	sxtb	r1, r5
  406d9a:	b2c0      	uxtb	r0, r0
  406d9c:	b252      	sxtb	r2, r2
  406d9e:	2355      	movs	r3, #85	; 0x55
  406da0:	f7fb fe3a 	bl	402a18 <_Z13lcd_vlineStiphaah>
            lcd_hline(25+thresholdX, bars_height+4+i*(bars_height+6), 3);
  406da4:	f10b 0019 	add.w	r0, fp, #25
  406da8:	b2c0      	uxtb	r0, r0
  406daa:	4629      	mov	r1, r5
  406dac:	2203      	movs	r2, #3
  406dae:	f7fb fe1f 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
  406db2:	e70b      	b.n	406bcc <_Z13menuProcFrskyh+0x43c>
          int16_t threshold = 0;
          uint8_t thresholdX = 0;
          if (source <= TELEM_TM2)
            threshold = 0;
          else if (source <= TELEM_A2)
            threshold = g_model.frsky.channels[source-TELEM_A1].alarms_value[0];
  406db4:	1eea      	subs	r2, r5, #3
  406db6:	f240 1108 	movw	r1, #264	; 0x108
  406dba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  406dbe:	f2c2 0100 	movt	r1, #8192	; 0x2000
  406dc2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  406dc6:	f892 b857 	ldrb.w	fp, [r2, #2135]	; 0x857
  406dca:	e74d      	b.n	406c68 <_Z13menuProcFrskyh+0x4d8>
          uint8_t width = (uint8_t)limit((int16_t)0, (int16_t)(((int32_t)100 * (value - barMin)) / (barMax - barMin)), (int16_t)100);

	   // reversed barshade for T1/T2
	  uint8_t barShade;
	  if (source == TELEM_T1 || source == TELEM_T2)
		barShade = ((threshold < value) ? DOTTED : SOLID);
  406dcc:	428b      	cmp	r3, r1
  406dce:	bfd4      	ite	le
  406dd0:	25ff      	movle	r5, #255	; 0xff
  406dd2:	2555      	movgt	r5, #85	; 0x55
  406dd4:	e7ac      	b.n	406d30 <_Z13menuProcFrskyh+0x5a0>
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  406dd6:	2600      	movs	r6, #0
  406dd8:	e7a2      	b.n	406d20 <_Z13menuProcFrskyh+0x590>
          uint8_t field = getTelemCustomField(i, j);
          if (i==3 && j==0) {
            lcd_vline(63, 8, 48);
            if (frskyStreaming > 0) {
              if (field == TELEM_ACC) {
                lcd_putsLeft(7*FH+1, STR_ACCEL);
  406dda:	2039      	movs	r0, #57	; 0x39
  406ddc:	4924      	ldr	r1, [pc, #144]	; (406e70 <_Z13menuProcFrskyh+0x6e0>)
  406dde:	f7fb fd75 	bl	4028cc <_Z12lcd_putsLefthPKc>
                lcd_outdezNAtt(4*FW, 7*FH+1, frskyHubData.accelX, LEFT|PREC2);
  406de2:	2400      	movs	r4, #0
  406de4:	f9b8 2960 	ldrsh.w	r2, [r8, #2400]	; 0x960
  406de8:	2018      	movs	r0, #24
  406dea:	2139      	movs	r1, #57	; 0x39
  406dec:	23b0      	movs	r3, #176	; 0xb0
  406dee:	9400      	str	r4, [sp, #0]
  406df0:	f7fb feb0 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
                lcd_outdezNAtt(10*FW, 7*FH+1, frskyHubData.accelY, LEFT|PREC2);
  406df4:	f9b8 2962 	ldrsh.w	r2, [r8, #2402]	; 0x962
  406df8:	2139      	movs	r1, #57	; 0x39
  406dfa:	23b0      	movs	r3, #176	; 0xb0
  406dfc:	203c      	movs	r0, #60	; 0x3c
  406dfe:	9400      	str	r4, [sp, #0]
  406e00:	f7fb fea8 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
                lcd_outdezNAtt(16*FW, 7*FH+1, frskyHubData.accelZ, LEFT|PREC2);
  406e04:	f9b8 2964 	ldrsh.w	r2, [r8, #2404]	; 0x964
  406e08:	2060      	movs	r0, #96	; 0x60
  406e0a:	2139      	movs	r1, #57	; 0x39
  406e0c:	23b0      	movs	r3, #176	; 0xb0
  406e0e:	9400      	str	r4, [sp, #0]
  406e10:	f7fb fea0 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
                break;
  406e14:	e546      	b.n	4068a4 <_Z13menuProcFrskyh+0x114>
          else if (source <= TELEM_A2)
            threshold = g_model.frsky.channels[source-TELEM_A1].alarms_value[0];
          else if (source <= TELEM_RSSI_RX)
            threshold = getRssiAlarmValue(source-TELEM_RSSI_TX);
          else
            threshold = convertTelemValue(source, barsThresholds[source-TELEM_ALT]);
  406e16:	9e09      	ldr	r6, [sp, #36]	; 0x24
  406e18:	4628      	mov	r0, r5
  406e1a:	1972      	adds	r2, r6, r5
  406e1c:	f892 1add 	ldrb.w	r1, [r2, #2781]	; 0xadd
  406e20:	9304      	str	r3, [sp, #16]
  406e22:	f8cd c00c 	str.w	ip, [sp, #12]
  406e26:	f7fd fde7 	bl	4049f8 <_Z17convertTelemValuehh>
  406e2a:	f8dd c00c 	ldr.w	ip, [sp, #12]
  406e2e:	4683      	mov	fp, r0
  406e30:	9b04      	ldr	r3, [sp, #16]
  406e32:	e719      	b.n	406c68 <_Z13menuProcFrskyh+0x4d8>
#ifdef FRSKY_HUB
    else if (s_frsky_view == e_frsky_after_flight) {
      uint8_t line=1*FH+1;
      if (g_model.frsky.usrProto == 1) { // FrSky Hub
        // Latitude
        lcd_putsLeft(line, STR_LATITUDE);
  406e34:	2009      	movs	r0, #9
  406e36:	490f      	ldr	r1, [pc, #60]	; (406e74 <_Z13menuProcFrskyh+0x6e4>)
  406e38:	f7fb fd48 	bl	4028cc <_Z12lcd_putsLefthPKc>
        displayGpsCoord(line, frskyHubData.gpsLatitudeNS, frskyHubData.gpsLatitude_bp, frskyHubData.gpsLatitude_ap);
  406e3c:	f9b5 293e 	ldrsh.w	r2, [r5, #2366]	; 0x93e
  406e40:	f9b5 394e 	ldrsh.w	r3, [r5, #2382]	; 0x94e
  406e44:	f895 195e 	ldrb.w	r1, [r5, #2398]	; 0x95e
  406e48:	2009      	movs	r0, #9
  406e4a:	f7fe fa77 	bl	40533c <_Z15displayGpsCoordhcss>
        // Longitude
        line+=1*FH+1;
        lcd_putsLeft(line, STR_LONGITUDE);
  406e4e:	2012      	movs	r0, #18
  406e50:	4909      	ldr	r1, [pc, #36]	; (406e78 <_Z13menuProcFrskyh+0x6e8>)
  406e52:	f7fb fd3b 	bl	4028cc <_Z12lcd_putsLefthPKc>
        displayGpsCoord(line, frskyHubData.gpsLongitudeEW, frskyHubData.gpsLongitude_bp, frskyHubData.gpsLongitude_ap);
  406e56:	f895 195c 	ldrb.w	r1, [r5, #2396]	; 0x95c
  406e5a:	f9b5 293c 	ldrsh.w	r2, [r5, #2364]	; 0x93c
  406e5e:	f9b5 394c 	ldrsh.w	r3, [r5, #2380]	; 0x94c
  406e62:	2012      	movs	r0, #18
  406e64:	f7fe fa6a 	bl	40533c <_Z15displayGpsCoordhcss>
        displayGpsTime();
        line+=1*FH+1;
  406e68:	251b      	movs	r5, #27
        displayGpsCoord(line, frskyHubData.gpsLatitudeNS, frskyHubData.gpsLatitude_bp, frskyHubData.gpsLatitude_ap);
        // Longitude
        line+=1*FH+1;
        lcd_putsLeft(line, STR_LONGITUDE);
        displayGpsCoord(line, frskyHubData.gpsLongitudeEW, frskyHubData.gpsLongitude_bp, frskyHubData.gpsLongitude_ap);
        displayGpsTime();
  406e6a:	f7fe fa29 	bl	4052c0 <_Z14displayGpsTimev>
  406e6e:	e58b      	b.n	406988 <_Z13menuProcFrskyh+0x1f8>
  406e70:	0041080c 	.word	0x0041080c
  406e74:	00410814 	.word	0x00410814
  406e78:	00410820 	.word	0x00410820

00406e7c <_Z13menuProcDebugh>:
  }
}

#define MENU_DEBUG_COL_OFS (14*FW)
void menuProcDebug(uint8_t event)
{
  406e7c:	b570      	push	{r4, r5, r6, lr}
  TITLE(STR_MENUDEBUG);
  406e7e:	2100      	movs	r1, #0
  }
}

#define MENU_DEBUG_COL_OFS (14*FW)
void menuProcDebug(uint8_t event)
{
  406e80:	4604      	mov	r4, r0
  406e82:	b082      	sub	sp, #8
  TITLE(STR_MENUDEBUG);
  406e84:	4608      	mov	r0, r1
  406e86:	4a35      	ldr	r2, [pc, #212]	; (406f5c <_Z13menuProcDebugh+0xe0>)
  406e88:	2302      	movs	r3, #2
  switch(event)
  406e8a:	3c60      	subs	r4, #96	; 0x60
}

#define MENU_DEBUG_COL_OFS (14*FW)
void menuProcDebug(uint8_t event)
{
  TITLE(STR_MENUDEBUG);
  406e8c:	f7fb fd14 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  switch(event)
  406e90:	2c03      	cmp	r4, #3
  406e92:	d806      	bhi.n	406ea2 <_Z13menuProcDebugh+0x26>
  406e94:	e8df f004 	tbb	[pc, r4]
  406e98:	0255025a 	.word	0x0255025a
    case EVT_KEY_FIRST(KEY_DOWN):
      chainMenu(menuProcStatistic);
      break;
    case EVT_KEY_FIRST(KEY_UP):
    case EVT_KEY_FIRST(KEY_EXIT):
      chainMenu(menuMainView);
  406e9c:	4830      	ldr	r0, [pc, #192]	; (406f60 <_Z13menuProcDebugh+0xe4>)
  406e9e:	f7ff fbcf 	bl	406640 <_Z9chainMenuPFvhE>
  406ea2:	4c30      	ldr	r4, [pc, #192]	; (406f64 <_Z13menuProcDebugh+0xe8>)
  lcd_outdez8(MENU_DEBUG_COL_OFS , 2*FH, g_tmr1Latency_min/2 );
  lcd_putsLeft(3*FH, STR_TMR1JITTERUS);
  lcd_outdez8(MENU_DEBUG_COL_OFS , 3*FH, (g_tmr1Latency_max - g_tmr1Latency_min) /2 );
#endif

  lcd_putsLeft(4*FH, STR_TMAINMAXMS);
  406ea4:	2020      	movs	r0, #32
  406ea6:	4930      	ldr	r1, [pc, #192]	; (406f68 <_Z13menuProcDebugh+0xec>)
  406ea8:	f7fb fd10 	bl	4028cc <_Z12lcd_putsLefthPKc>
#if defined(PCBARM)
  lcd_outdezAtt(MENU_DEBUG_COL_OFS, 4*FH, (g_timeMain)/20, PREC2);
  406eac:	f8b4 2c2a 	ldrh.w	r2, [r4, #3114]	; 0xc2a
  406eb0:	f64c 43cd 	movw	r3, #52429	; 0xcccd
  406eb4:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
  406eb8:	fba3 1302 	umull	r1, r3, r3, r2
  406ebc:	2054      	movs	r0, #84	; 0x54
  406ebe:	091a      	lsrs	r2, r3, #4
  406ec0:	2120      	movs	r1, #32
  406ec2:	2330      	movs	r3, #48	; 0x30
  406ec4:	f7fb ffb8 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  lcd_outdezAtt(MENU_DEBUG_COL_OFS, 4*FH, (g_timeMain*100)/16, PREC2);
#endif

#if defined(PCBARM)
#if defined(REVB)
  lcd_putsLeft(2*FH, STR_CURRENT);
  406ec8:	4928      	ldr	r1, [pc, #160]	; (406f6c <_Z13menuProcDebugh+0xf0>)
  406eca:	2010      	movs	r0, #16
  406ecc:	f7fb fcfe 	bl	4028cc <_Z12lcd_putsLefthPKc>
  putsTelemetryValue(MENU_DEBUG_COL_OFS, 2*FH, getCurrent(), UNIT_MILLIAMPS, 0) ;
  406ed0:	f7f9 fc9a 	bl	400808 <_Z10getCurrentv>
  406ed4:	2400      	movs	r4, #0
  406ed6:	b202      	sxth	r2, r0
  406ed8:	2308      	movs	r3, #8
  406eda:	2054      	movs	r0, #84	; 0x54
  406edc:	2110      	movs	r1, #16
#endif

  lcd_putsLeft(3*FH, PSTR("CPU temp.\010>"));
  putsTelemetryValue(MENU_DEBUG_COL_OFS, 3*FH, (((((int32_t)Temperature - 838 ) * 621 ) >> 11 ) - 20), UNIT_DEGREES, 0 ) ;
  406ede:	4e24      	ldr	r6, [pc, #144]	; (406f70 <_Z13menuProcDebugh+0xf4>)
#endif

#if defined(PCBARM)
#if defined(REVB)
  lcd_putsLeft(2*FH, STR_CURRENT);
  putsTelemetryValue(MENU_DEBUG_COL_OFS, 2*FH, getCurrent(), UNIT_MILLIAMPS, 0) ;
  406ee0:	9400      	str	r4, [sp, #0]
  406ee2:	f7fb ffd5 	bl	402e90 <_Z18putsTelemetryValuehhshh>
#endif

  lcd_putsLeft(3*FH, PSTR("CPU temp.\010>"));
  406ee6:	2018      	movs	r0, #24
  406ee8:	4922      	ldr	r1, [pc, #136]	; (406f74 <_Z13menuProcDebugh+0xf8>)
  406eea:	f7fb fcef 	bl	4028cc <_Z12lcd_putsLefthPKc>
  putsTelemetryValue(MENU_DEBUG_COL_OFS, 3*FH, (((((int32_t)Temperature - 838 ) * 621 ) >> 11 ) - 20), UNIT_DEGREES, 0 ) ;
  406eee:	f8b6 20de 	ldrh.w	r2, [r6, #222]	; 0xde
  406ef2:	f240 256d 	movw	r5, #621	; 0x26d
  406ef6:	fb05 f202 	mul.w	r2, r5, r2
  406efa:	f5a2 22fe 	sub.w	r2, r2, #520192	; 0x7f000
  406efe:	3ace      	subs	r2, #206	; 0xce
  406f00:	12d2      	asrs	r2, r2, #11
  406f02:	3a14      	subs	r2, #20
  406f04:	2118      	movs	r1, #24
  406f06:	2306      	movs	r3, #6
  406f08:	2054      	movs	r0, #84	; 0x54
  406f0a:	b212      	sxth	r2, r2
  406f0c:	9400      	str	r4, [sp, #0]
  406f0e:	f7fb ffbf 	bl	402e90 <_Z18putsTelemetryValuehhshh>
  putsTelemetryValue(20*FW+2, 3*FH, (((((int32_t)maxTemperature - 838 ) * 621 ) >> 11 ) - 20), UNIT_DEGREES, 0 ) ;
  406f12:	f8b6 20e0 	ldrh.w	r2, [r6, #224]	; 0xe0
  406f16:	207a      	movs	r0, #122	; 0x7a
  406f18:	fb05 f202 	mul.w	r2, r5, r2
  406f1c:	f5a2 22fe 	sub.w	r2, r2, #520192	; 0x7f000
  406f20:	3ace      	subs	r2, #206	; 0xce
  406f22:	12d2      	asrs	r2, r2, #11
  406f24:	3a14      	subs	r2, #20
  406f26:	2118      	movs	r1, #24
  406f28:	b212      	sxth	r2, r2
  406f2a:	2306      	movs	r3, #6
  406f2c:	9400      	str	r4, [sp, #0]
  406f2e:	f7fb ffaf 	bl	402e90 <_Z18putsTelemetryValuehhshh>
  lcd_puts( 0*FW,  6*FH, STR_T10MSUS);
  lcd_outdez8(MENU_DEBUG_COL_OFS, 6*FH, g_time_per10/2 );
#endif


  lcd_puts( 3*FW,  7*FH, STR_MENUTORESET);
  406f32:	4a11      	ldr	r2, [pc, #68]	; (406f78 <_Z13menuProcDebugh+0xfc>)
  406f34:	2012      	movs	r0, #18
  406f36:	2138      	movs	r1, #56	; 0x38
}
  406f38:	b002      	add	sp, #8
  406f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  lcd_puts( 0*FW,  6*FH, STR_T10MSUS);
  lcd_outdez8(MENU_DEBUG_COL_OFS, 6*FH, g_time_per10/2 );
#endif


  lcd_puts( 3*FW,  7*FH, STR_MENUTORESET);
  406f3e:	f7fb bcc3 	b.w	4028c8 <_Z8lcd_putshhPKc>
#endif
      g_timeMain    = 0;
      AUDIO_KEYPAD_UP();
      break;
    case EVT_KEY_FIRST(KEY_DOWN):
      chainMenu(menuProcStatistic);
  406f42:	480e      	ldr	r0, [pc, #56]	; (406f7c <_Z13menuProcDebugh+0x100>)
  406f44:	f7ff fb7c 	bl	406640 <_Z9chainMenuPFvhE>
  406f48:	4c06      	ldr	r4, [pc, #24]	; (406f64 <_Z13menuProcDebugh+0xe8>)
      break;
  406f4a:	e7ab      	b.n	406ea4 <_Z13menuProcDebugh+0x28>
    case EVT_KEY_FIRST(KEY_MENU):
#if !defined(PCBARM)
      g_tmr1Latency_min = 0xff;
      g_tmr1Latency_max = 0;
#endif
      g_timeMain    = 0;
  406f4c:	4c05      	ldr	r4, [pc, #20]	; (406f64 <_Z13menuProcDebugh+0xe8>)
  406f4e:	2300      	movs	r3, #0
  406f50:	f8a4 3c2a 	strh.w	r3, [r4, #3114]	; 0xc2a
      AUDIO_KEYPAD_UP();
  406f54:	2003      	movs	r0, #3
  406f56:	f7ff fad9 	bl	40650c <_Z13audioDefeventh>
      break;
  406f5a:	e7a3      	b.n	406ea4 <_Z13menuProcDebugh+0x28>
  406f5c:	00410838 	.word	0x00410838
  406f60:	0040c6a1 	.word	0x0040c6a1
  406f64:	20001200 	.word	0x20001200
  406f68:	00410840 	.word	0x00410840
  406f6c:	00410850 	.word	0x00410850
  406f70:	20000108 	.word	0x20000108
  406f74:	00411414 	.word	0x00411414
  406f78:	00410858 	.word	0x00410858
  406f7c:	00406665 	.word	0x00406665

00406f80 <_Z11checkIncDechsssh>:
int16_t p1valdiff;
#endif

int8_t  checkIncDec_Ret;
int16_t checkIncDec(uint8_t event, int16_t val, int16_t i_min, int16_t i_max, uint8_t i_flags)
{
  406f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f84:	b083      	sub	sp, #12
  406f86:	4616      	mov	r6, r2
  406f88:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
  406f8c:	4698      	mov	r8, r3
  int16_t newval = val;
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;

  if(event & _MSK_KEY_DBL){ 
  406f8e:	2364      	movs	r3, #100	; 0x64
  406f90:	06c7      	lsls	r7, r0, #27
int16_t p1valdiff;
#endif

int8_t  checkIncDec_Ret;
int16_t checkIncDec(uint8_t event, int16_t val, int16_t i_min, int16_t i_max, uint8_t i_flags)
{
  406f92:	4604      	mov	r4, r0
  406f94:	460d      	mov	r5, r1
  406f96:	9201      	str	r2, [sp, #4]
  int16_t newval = val;
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;
  406f98:	f04f 0905 	mov.w	r9, #5
  406f9c:	f04f 0b04 	mov.w	fp, #4

  if(event & _MSK_KEY_DBL){ 
  406fa0:	d508      	bpl.n	406fb4 <_Z11checkIncDechsssh+0x34>
    uint8_t hlp=kpl;
    kpl=kmi;
    kmi=hlp;
    event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
  406fa2:	f000 040f 	and.w	r4, r0, #15
  406fa6:	f044 0460 	orr.w	r4, r4, #96	; 0x60
  406faa:	2365      	movs	r3, #101	; 0x65
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;

  if(event & _MSK_KEY_DBL){ 
    uint8_t hlp=kpl;
    kpl=kmi;
    kmi=hlp;
  406fac:	f04f 0904 	mov.w	r9, #4
  int16_t newval = val;
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;

  if(event & _MSK_KEY_DBL){ 
    uint8_t hlp=kpl;
    kpl=kmi;
  406fb0:	f04f 0b05 	mov.w	fp, #5
    kmi=hlp;
    event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
  }
  if(event==EVT_KEY_FIRST(kpl) || event== EVT_KEY_REPT(kpl) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_UP) || event== EVT_KEY_REPT(KEY_UP))) ) {
  406fb4:	429c      	cmp	r4, r3
  406fb6:	bf08      	it	eq
  406fb8:	f8df a218 	ldreq.w	sl, [pc, #536]	; 4071d4 <_Z11checkIncDechsssh+0x254>
  406fbc:	f000 809c 	beq.w	4070f8 <_Z11checkIncDechsssh+0x178>
  406fc0:	f04b 0340 	orr.w	r3, fp, #64	; 0x40
  406fc4:	42a3      	cmp	r3, r4
  406fc6:	f8df a20c 	ldr.w	sl, [pc, #524]	; 4071d4 <_Z11checkIncDechsssh+0x254>
  406fca:	f000 8095 	beq.w	4070f8 <_Z11checkIncDechsssh+0x178>
  406fce:	f99a 3c2c 	ldrsb.w	r3, [sl, #3116]	; 0xc2c
  406fd2:	2b00      	cmp	r3, #0
  406fd4:	dd0b      	ble.n	406fee <_Z11checkIncDechsssh+0x6e>
  406fd6:	f1a4 0063 	sub.w	r0, r4, #99	; 0x63
  406fda:	4242      	negs	r2, r0
  406fdc:	eb42 0200 	adc.w	r2, r2, r0
  406fe0:	2c43      	cmp	r4, #67	; 0x43
  406fe2:	bf08      	it	eq
  406fe4:	f042 0201 	orreq.w	r2, r2, #1
  406fe8:	2a00      	cmp	r2, #0
  406fea:	f040 8085 	bne.w	4070f8 <_Z11checkIncDechsssh+0x178>
    newval++;
    AUDIO_KEYPAD_UP();
    kother=kmi;
  }
  else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) ) {
  406fee:	f049 0260 	orr.w	r2, r9, #96	; 0x60
  406ff2:	42a2      	cmp	r2, r4
  406ff4:	d012      	beq.n	40701c <_Z11checkIncDechsssh+0x9c>
  406ff6:	f049 0240 	orr.w	r2, r9, #64	; 0x40
  406ffa:	42a2      	cmp	r2, r4
  406ffc:	d00e      	beq.n	40701c <_Z11checkIncDechsssh+0x9c>
  406ffe:	2b00      	cmp	r3, #0
  407000:	f340 80e1 	ble.w	4071c6 <_Z11checkIncDechsssh+0x246>
  407004:	f1a4 0162 	sub.w	r1, r4, #98	; 0x62
  407008:	424b      	negs	r3, r1
  40700a:	eb43 0301 	adc.w	r3, r3, r1
  40700e:	2c42      	cmp	r4, #66	; 0x42
  407010:	bf08      	it	eq
  407012:	f043 0301 	orreq.w	r3, r3, #1
  407016:	2b00      	cmp	r3, #0
  407018:	f000 80d5 	beq.w	4071c6 <_Z11checkIncDechsssh+0x246>
    newval--;
    AUDIO_KEYPAD_DOWN();
  40701c:	2004      	movs	r0, #4
    newval++;
    AUDIO_KEYPAD_UP();
    kother=kmi;
  }
  else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) ) {
    newval--;
  40701e:	1e6f      	subs	r7, r5, #1
    AUDIO_KEYPAD_DOWN();
  407020:	f7ff fa74 	bl	40650c <_Z13audioDefeventh>
    kother=kpl;
  407024:	4658      	mov	r0, fp
    newval++;
    AUDIO_KEYPAD_UP();
    kother=kmi;
  }
  else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) ) {
    newval--;
  407026:	b2bf      	uxth	r7, r7
    AUDIO_KEYPAD_DOWN();
    kother=kpl;
  }
  if((kother != (uint8_t)-1) && keyState((EnumKeys)kother)){
  407028:	f7f9 fab6 	bl	400598 <_Z8keyState8EnumKeys>
  40702c:	2800      	cmp	r0, #0
  40702e:	d16d      	bne.n	40710c <_Z11checkIncDechsssh+0x18c>
    newval=-val;
    killEvents(kmi);
    killEvents(kpl);
  }
  if(i_min==0 && i_max==1 && event==EVT_KEY_FIRST(KEY_MENU)) {
  407030:	f1d6 0301 	rsbs	r3, r6, #1
  407034:	bf38      	it	cc
  407036:	2300      	movcc	r3, #0
  407038:	f1b8 0f01 	cmp.w	r8, #1
  40703c:	bf14      	ite	ne
  40703e:	2300      	movne	r3, #0
  407040:	f003 0301 	andeq.w	r3, r3, #1
  407044:	b113      	cbz	r3, 40704c <_Z11checkIncDechsssh+0xcc>
  407046:	2c60      	cmp	r4, #96	; 0x60
  407048:	f000 8099 	beq.w	40717e <_Z11checkIncDechsssh+0x1fe>
#if defined (ROTARY_ENCODERS) || defined(NAVIGATION_POT1)
  //change values based on P1
  newval -= p1valdiff;
#endif

  if(newval > i_max)
  40704c:	b23f      	sxth	r7, r7
  40704e:	4547      	cmp	r7, r8
  407050:	dd12      	ble.n	407078 <_Z11checkIncDechsssh+0xf8>
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  407052:	f004 030f 	and.w	r3, r4, #15
  if(event < (int)DIM(keys))  keys[event].killEvents();
  407056:	2b0d      	cmp	r3, #13
  407058:	d809      	bhi.n	40706e <_Z11checkIncDechsssh+0xee>
  40705a:	4a5c      	ldr	r2, [pc, #368]	; (4071cc <_Z11checkIncDechsssh+0x24c>)
  40705c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  407060:	18d1      	adds	r1, r2, r3
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  407062:	2063      	movs	r0, #99	; 0x63
  407064:	7088      	strb	r0, [r1, #2]
  407066:	5cd1      	ldrb	r1, [r2, r3]
  407068:	f36f 1105 	bfc	r1, #4, #2
  40706c:	54d1      	strb	r1, [r2, r3]
  {
    newval = i_max;
    killEvents(event);
    AUDIO_WARNING2();
  40706e:	2008      	movs	r0, #8
  407070:	f7ff fa4c 	bl	40650c <_Z13audioDefeventh>
  407074:	fa0f f788 	sxth.w	r7, r8
  }
  if(newval < i_min)
  407078:	42b7      	cmp	r7, r6
  40707a:	da07      	bge.n	40708c <_Z11checkIncDechsssh+0x10c>
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  40707c:	f004 030f 	and.w	r3, r4, #15
  if(event < (int)DIM(keys))  keys[event].killEvents();
  407080:	2b0d      	cmp	r3, #13
  407082:	d971      	bls.n	407168 <_Z11checkIncDechsssh+0x1e8>
  {
    newval = i_min;
    killEvents(event);
    AUDIO_WARNING2();
  407084:	2008      	movs	r0, #8
  407086:	f7ff fa41 	bl	40650c <_Z13audioDefeventh>
  40708a:	b237      	sxth	r7, r6
    }
    eeDirty(i_flags & (EE_GENERAL|EE_MODEL));
    checkIncDec_Ret = (newval > val ? 1 : -1);
  }
  else {
    checkIncDec_Ret = 0;
  40708c:	2300      	movs	r3, #0
  {
    newval = i_min;
    killEvents(event);
    AUDIO_WARNING2();
  }
  if (newval != val) {
  40708e:	42af      	cmp	r7, r5
  407090:	d02c      	beq.n	4070ec <_Z11checkIncDechsssh+0x16c>
    if ((~i_flags & NO_INCDEC_MARKS) && (newval==0 || newval==-100 || newval==+100)) {
  407092:	9b01      	ldr	r3, [sp, #4]
  407094:	075a      	lsls	r2, r3, #29
  407096:	d456      	bmi.n	407146 <_Z11checkIncDechsssh+0x1c6>
  407098:	f117 0f64 	cmn.w	r7, #100	; 0x64
  40709c:	bf14      	ite	ne
  40709e:	2300      	movne	r3, #0
  4070a0:	2301      	moveq	r3, #1
  4070a2:	2f00      	cmp	r7, #0
  4070a4:	bf08      	it	eq
  4070a6:	f043 0301 	orreq.w	r3, r3, #1
  4070aa:	2b00      	cmp	r3, #0
  4070ac:	d049      	beq.n	407142 <_Z11checkIncDechsssh+0x1c2>
  }
}

void pauseEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  4070ae:	f004 040f 	and.w	r4, r4, #15
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
  4070b2:	2c0d      	cmp	r4, #13
  4070b4:	d807      	bhi.n	4070c6 <_Z11checkIncDechsssh+0x146>
  4070b6:	4b45      	ldr	r3, [pc, #276]	; (4071cc <_Z11checkIncDechsssh+0x24c>)
  4070b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  4070bc:	191c      	adds	r4, r3, r4
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  4070be:	2362      	movs	r3, #98	; 0x62
  4070c0:	70a3      	strb	r3, [r4, #2]
  4070c2:	2300      	movs	r3, #0
  4070c4:	7063      	strb	r3, [r4, #1]
      pauseEvents(event); // delay before auto-repeat continues
      if (newval>val) // without AUDIO it's optimized, because the 2 sounds are the same
  4070c6:	42af      	cmp	r7, r5
  4070c8:	dd6b      	ble.n	4071a2 <_Z11checkIncDechsssh+0x222>
        AUDIO_KEYPAD_UP();
  4070ca:	2003      	movs	r0, #3
  4070cc:	f7ff fa1e 	bl	40650c <_Z13audioDefeventh>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4070d0:	4b3f      	ldr	r3, [pc, #252]	; (4071d0 <_Z11checkIncDechsssh+0x250>)
      else
        AUDIO_KEYPAD_DOWN();
    }
    eeDirty(i_flags & (EE_GENERAL|EE_MODEL));
  4070d2:	9a01      	ldr	r2, [sp, #4]
  4070d4:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  4070d8:	f002 0003 	and.w	r0, r2, #3
  s_eeDirtyTime10ms = get_tmr10ms() ;
  4070dc:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4070e0:	4301      	orrs	r1, r0
  4070e2:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  4070e6:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
    checkIncDec_Ret = (newval > val ? 1 : -1);
  4070ea:	2301      	movs	r3, #1
  }
  else {
    checkIncDec_Ret = 0;
  4070ec:	f88a 3c2d 	strb.w	r3, [sl, #3117]	; 0xc2d
  }
  return newval;
}
  4070f0:	4638      	mov	r0, r7
  4070f2:	b003      	add	sp, #12
  4070f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    kmi=hlp;
    event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
  }
  if(event==EVT_KEY_FIRST(kpl) || event== EVT_KEY_REPT(kpl) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_UP) || event== EVT_KEY_REPT(KEY_UP))) ) {
    newval++;
    AUDIO_KEYPAD_UP();
  4070f8:	2003      	movs	r0, #3
    kpl=kmi;
    kmi=hlp;
    event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
  }
  if(event==EVT_KEY_FIRST(kpl) || event== EVT_KEY_REPT(kpl) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_UP) || event== EVT_KEY_REPT(KEY_UP))) ) {
    newval++;
  4070fa:	1c6f      	adds	r7, r5, #1
    AUDIO_KEYPAD_UP();
  4070fc:	f7ff fa06 	bl	40650c <_Z13audioDefeventh>
    kother=kmi;
  407100:	4648      	mov	r0, r9
    kpl=kmi;
    kmi=hlp;
    event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
  }
  if(event==EVT_KEY_FIRST(kpl) || event== EVT_KEY_REPT(kpl) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_UP) || event== EVT_KEY_REPT(KEY_UP))) ) {
    newval++;
  407102:	b2bf      	uxth	r7, r7
  else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) ) {
    newval--;
    AUDIO_KEYPAD_DOWN();
    kother=kpl;
  }
  if((kother != (uint8_t)-1) && keyState((EnumKeys)kother)){
  407104:	f7f9 fa48 	bl	400598 <_Z8keyState8EnumKeys>
  407108:	2800      	cmp	r0, #0
  40710a:	d091      	beq.n	407030 <_Z11checkIncDechsssh+0xb0>
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].killEvents();
  40710c:	4b2f      	ldr	r3, [pc, #188]	; (4071cc <_Z11checkIncDechsssh+0x24c>)
  40710e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  407112:	2263      	movs	r2, #99	; 0x63
  407114:	eb03 0109 	add.w	r1, r3, r9
  407118:	708a      	strb	r2, [r1, #2]
  40711a:	f813 1009 	ldrb.w	r1, [r3, r9]
  40711e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
  407122:	f36f 1105 	bfc	r1, #4, #2
  407126:	eb03 000b 	add.w	r0, r3, fp
  40712a:	f803 1009 	strb.w	r1, [r3, r9]
  40712e:	7082      	strb	r2, [r0, #2]
  407130:	f813 200b 	ldrb.w	r2, [r3, fp]
    newval=-val;
  407134:	426f      	negs	r7, r5
  407136:	f36f 1205 	bfc	r2, #4, #2
  40713a:	b2bf      	uxth	r7, r7
  40713c:	f803 200b 	strb.w	r2, [r3, fp]
  407140:	e776      	b.n	407030 <_Z11checkIncDechsssh+0xb0>
    newval = i_min;
    killEvents(event);
    AUDIO_WARNING2();
  }
  if (newval != val) {
    if ((~i_flags & NO_INCDEC_MARKS) && (newval==0 || newval==-100 || newval==+100)) {
  407142:	2f64      	cmp	r7, #100	; 0x64
  407144:	d0b3      	beq.n	4070ae <_Z11checkIncDechsssh+0x12e>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  407146:	4b22      	ldr	r3, [pc, #136]	; (4071d0 <_Z11checkIncDechsssh+0x250>)
      if (newval>val) // without AUDIO it's optimized, because the 2 sounds are the same
        AUDIO_KEYPAD_UP();
      else
        AUDIO_KEYPAD_DOWN();
    }
    eeDirty(i_flags & (EE_GENERAL|EE_MODEL));
  407148:	9a01      	ldr	r2, [sp, #4]
  40714a:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  40714e:	f002 0003 	and.w	r0, r2, #3
  s_eeDirtyTime10ms = get_tmr10ms() ;
  407152:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  407156:	4301      	orrs	r1, r0
  407158:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40715c:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
    checkIncDec_Ret = (newval > val ? 1 : -1);
  407160:	23ff      	movs	r3, #255	; 0xff
  407162:	42af      	cmp	r7, r5
  407164:	ddc2      	ble.n	4070ec <_Z11checkIncDechsssh+0x16c>
  407166:	e7c0      	b.n	4070ea <_Z11checkIncDechsssh+0x16a>
  407168:	4a18      	ldr	r2, [pc, #96]	; (4071cc <_Z11checkIncDechsssh+0x24c>)
  40716a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40716e:	18d1      	adds	r1, r2, r3
  407170:	2063      	movs	r0, #99	; 0x63
  407172:	7088      	strb	r0, [r1, #2]
  407174:	5cd1      	ldrb	r1, [r2, r3]
  407176:	f36f 1105 	bfc	r1, #4, #2
  40717a:	54d1      	strb	r1, [r2, r3]
  40717c:	e782      	b.n	407084 <_Z11checkIncDechsssh+0x104>
  40717e:	4b14      	ldr	r3, [pc, #80]	; (4071d0 <_Z11checkIncDechsssh+0x250>)
    newval=-val;
    killEvents(kmi);
    killEvents(kpl);
  }
  if(i_min==0 && i_max==1 && event==EVT_KEY_FIRST(KEY_MENU)) {
    s_editMode = 0;
  407180:	2100      	movs	r1, #0
  407182:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
  407186:	f88a 1c2c 	strb.w	r1, [sl, #3116]	; 0xc2c
  40718a:	f361 1205 	bfi	r2, r1, #4, #2
  40718e:	2163      	movs	r1, #99	; 0x63
  407190:	f1d5 0701 	rsbs	r7, r5, #1
  407194:	f883 10a2 	strb.w	r1, [r3, #162]	; 0xa2
  407198:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  40719c:	bf38      	it	cc
  40719e:	2700      	movcc	r7, #0
  4071a0:	e774      	b.n	40708c <_Z11checkIncDechsssh+0x10c>
    if ((~i_flags & NO_INCDEC_MARKS) && (newval==0 || newval==-100 || newval==+100)) {
      pauseEvents(event); // delay before auto-repeat continues
      if (newval>val) // without AUDIO it's optimized, because the 2 sounds are the same
        AUDIO_KEYPAD_UP();
      else
        AUDIO_KEYPAD_DOWN();
  4071a2:	2004      	movs	r0, #4
  4071a4:	f7ff f9b2 	bl	40650c <_Z13audioDefeventh>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4071a8:	4b09      	ldr	r3, [pc, #36]	; (4071d0 <_Z11checkIncDechsssh+0x250>)
    }
    eeDirty(i_flags & (EE_GENERAL|EE_MODEL));
  4071aa:	9a01      	ldr	r2, [sp, #4]
  4071ac:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  4071b0:	f002 0003 	and.w	r0, r2, #3
  s_eeDirtyTime10ms = get_tmr10ms() ;
  4071b4:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4071b8:	4301      	orrs	r1, r0
  4071ba:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  4071be:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
    checkIncDec_Ret = (newval > val ? 1 : -1);
  4071c2:	23ff      	movs	r3, #255	; 0xff
  4071c4:	e792      	b.n	4070ec <_Z11checkIncDechsssh+0x16c>
  if(event==EVT_KEY_FIRST(kpl) || event== EVT_KEY_REPT(kpl) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_UP) || event== EVT_KEY_REPT(KEY_UP))) ) {
    newval++;
    AUDIO_KEYPAD_UP();
    kother=kmi;
  }
  else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode>0 && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) ) {
  4071c6:	462f      	mov	r7, r5
  4071c8:	e732      	b.n	407030 <_Z11checkIncDechsssh+0xb0>
  4071ca:	bf00      	nop
  4071cc:	200001a8 	.word	0x200001a8
  4071d0:	20000108 	.word	0x20000108
  4071d4:	20001200 	.word	0x20001200

004071d8 <_Z14checkIncDecGenhaaa>:
{
  return checkIncDec(event,i_val,i_min,i_max,EE_MODEL);
}

int8_t checkIncDecGen(uint8_t event, int8_t i_val, int8_t i_min, int8_t i_max)
{
  4071d8:	b510      	push	{r4, lr}
  return checkIncDec(event,i_val,i_min,i_max,EE_GENERAL);
  4071da:	2401      	movs	r4, #1
{
  return checkIncDec(event,i_val,i_min,i_max,EE_MODEL);
}

int8_t checkIncDecGen(uint8_t event, int8_t i_val, int8_t i_min, int8_t i_max)
{
  4071dc:	b082      	sub	sp, #8
  return checkIncDec(event,i_val,i_min,i_max,EE_GENERAL);
  4071de:	9400      	str	r4, [sp, #0]
  4071e0:	f7ff fece 	bl	406f80 <_Z11checkIncDechsssh>
  4071e4:	b240      	sxtb	r0, r0
}
  4071e6:	b002      	add	sp, #8
  4071e8:	bd10      	pop	{r4, pc}
  4071ea:	bf00      	nop

004071ec <_Z14selectMenuItemhPKcS0_aaahh>:
  menuProcDiagCalib
};

#define GENERAL_PARAM_OFS   (2+16*FW)
NOINLINE int8_t selectMenuItem(uint8_t y, const pm_char *label, const pm_char *values, int8_t value, int8_t min, int8_t max, uint8_t attr, uint8_t event)
{
  4071ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4071f0:	b082      	sub	sp, #8
  4071f2:	f99d 7028 	ldrsb.w	r7, [sp, #40]	; 0x28
  4071f6:	461e      	mov	r6, r3
  4071f8:	4605      	mov	r5, r0
  4071fa:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
  4071fe:	4692      	mov	sl, r2
  407200:	f99d 902c 	ldrsb.w	r9, [sp, #44]	; 0x2c
  407204:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  lcd_putsLeft(y, label);
  407208:	f7fb fb60 	bl	4028cc <_Z12lcd_putsLefthPKc>
  lcd_putsiAtt(GENERAL_PARAM_OFS, y, values, value-min, attr) ;
  40720c:	1bf3      	subs	r3, r6, r7
  40720e:	b2db      	uxtb	r3, r3
  407210:	2062      	movs	r0, #98	; 0x62
  407212:	4629      	mov	r1, r5
  407214:	4652      	mov	r2, sl
  407216:	9400      	str	r4, [sp, #0]
  407218:	f7fb fb2a 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  if (attr) CHECK_INCDEC_GENVAR(event, value, min, max);
  40721c:	b91c      	cbnz	r4, 407226 <_Z14selectMenuItemhPKcS0_aaahh+0x3a>
  return value;
}
  40721e:	4630      	mov	r0, r6
  407220:	b002      	add	sp, #8
  407222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#define GENERAL_PARAM_OFS   (2+16*FW)
NOINLINE int8_t selectMenuItem(uint8_t y, const pm_char *label, const pm_char *values, int8_t value, int8_t min, int8_t max, uint8_t attr, uint8_t event)
{
  lcd_putsLeft(y, label);
  lcd_putsiAtt(GENERAL_PARAM_OFS, y, values, value-min, attr) ;
  if (attr) CHECK_INCDEC_GENVAR(event, value, min, max);
  407226:	4640      	mov	r0, r8
  407228:	4631      	mov	r1, r6
  40722a:	463a      	mov	r2, r7
  40722c:	464b      	mov	r3, r9
  return value;
}
  40722e:	b002      	add	sp, #8
  407230:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#define GENERAL_PARAM_OFS   (2+16*FW)
NOINLINE int8_t selectMenuItem(uint8_t y, const pm_char *label, const pm_char *values, int8_t value, int8_t min, int8_t max, uint8_t attr, uint8_t event)
{
  lcd_putsLeft(y, label);
  lcd_putsiAtt(GENERAL_PARAM_OFS, y, values, value-min, attr) ;
  if (attr) CHECK_INCDEC_GENVAR(event, value, min, max);
  407234:	e7d0      	b.n	4071d8 <_Z14checkIncDecGenhaaa>
  407236:	bf00      	nop

00407238 <_Z13onoffMenuItemhhPKchh>:
  return value;
}

NOINLINE uint8_t onoffMenuItem(uint8_t value, uint8_t y, const pm_char *label, uint8_t attr, uint8_t event )
{
  407238:	b530      	push	{r4, r5, lr}
  return selectMenuItem(y, label, STR_OFFON, value, 0, 1, attr, event);
  40723a:	b245      	sxtb	r5, r0
  if (attr) CHECK_INCDEC_GENVAR(event, value, min, max);
  return value;
}

NOINLINE uint8_t onoffMenuItem(uint8_t value, uint8_t y, const pm_char *label, uint8_t attr, uint8_t event )
{
  40723c:	b085      	sub	sp, #20
  40723e:	461c      	mov	r4, r3
  return selectMenuItem(y, label, STR_OFFON, value, 0, 1, attr, event);
  407240:	9402      	str	r4, [sp, #8]
  407242:	462b      	mov	r3, r5
  407244:	f89d 4020 	ldrb.w	r4, [sp, #32]
  407248:	2500      	movs	r5, #0
  40724a:	9500      	str	r5, [sp, #0]
  40724c:	4608      	mov	r0, r1
  40724e:	2501      	movs	r5, #1
  407250:	4611      	mov	r1, r2
  407252:	4a04      	ldr	r2, [pc, #16]	; (407264 <_Z13onoffMenuItemhhPKchh+0x2c>)
  407254:	9501      	str	r5, [sp, #4]
  407256:	9403      	str	r4, [sp, #12]
  407258:	f7ff ffc8 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  40725c:	b2c0      	uxtb	r0, r0
}
  40725e:	b005      	add	sp, #20
  407260:	bd30      	pop	{r4, r5, pc}
  407262:	bf00      	nop
  407264:	004102dc 	.word	0x004102dc

00407268 <_Z16checkIncDecModelhaaa>:
  }
  return newval;
}

int8_t checkIncDecModel(uint8_t event, int8_t i_val, int8_t i_min, int8_t i_max)
{
  407268:	b510      	push	{r4, lr}
  return checkIncDec(event,i_val,i_min,i_max,EE_MODEL);
  40726a:	2402      	movs	r4, #2
  }
  return newval;
}

int8_t checkIncDecModel(uint8_t event, int8_t i_val, int8_t i_min, int8_t i_max)
{
  40726c:	b082      	sub	sp, #8
  return checkIncDec(event,i_val,i_min,i_max,EE_MODEL);
  40726e:	9400      	str	r4, [sp, #0]
  407270:	f7ff fe86 	bl	406f80 <_Z11checkIncDechsssh>
  407274:	b240      	sxtb	r0, r0
}
  407276:	b002      	add	sp, #8
  407278:	bd10      	pop	{r4, pc}
  40727a:	bf00      	nop

0040727c <_Z8EditNamehhPchhbRh>:
  }
#endif
}

void EditName(uint8_t x, uint8_t y, char *name, uint8_t size, uint8_t event, bool active, uint8_t & cur)
{
  40727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407280:	b083      	sub	sp, #12
  407282:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
  407286:	4680      	mov	r8, r0
  407288:	4689      	mov	r9, r1
  40728a:	4616      	mov	r6, r2
  40728c:	469a      	mov	sl, r3
  40728e:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
  407292:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? ((s_editMode>0) ? 0 : INVERS) : 0));
  407294:	2f00      	cmp	r7, #0
  407296:	d044      	beq.n	407322 <_Z8EditNamehhPchhbRh+0xa6>
  407298:	f8df b118 	ldr.w	fp, [pc, #280]	; 4073b4 <_Z8EditNamehhPchhbRh+0x138>
  40729c:	f99b 7c2c 	ldrsb.w	r7, [fp, #3116]	; 0xc2c
  4072a0:	2f00      	cmp	r7, #0
  4072a2:	bfd4      	ite	le
  4072a4:	2722      	movle	r7, #34	; 0x22
  4072a6:	2720      	movgt	r7, #32
  4072a8:	9700      	str	r7, [sp, #0]
  4072aa:	f7fb fa9d 	bl	4027e8 <_Z12lcd_putsnAtthhPKchh>

  if (active) {
    if (s_editMode>0) {
  4072ae:	f99b 3c2c 	ldrsb.w	r3, [fp, #3116]	; 0xc2c
  4072b2:	2b00      	cmp	r3, #0
  4072b4:	dd71      	ble.n	40739a <_Z8EditNamehhPchhbRh+0x11e>
      uint8_t next = cur;
      char c = name[next];
      char v = c;
      if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP)
  4072b6:	f1a4 0c42 	sub.w	ip, r4, #66	; 0x42
  4072ba:	f1dc 0200 	rsbs	r2, ip, #0
  4072be:	f1a4 0362 	sub.w	r3, r4, #98	; 0x62
{
  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? ((s_editMode>0) ? 0 : INVERS) : 0));

  if (active) {
    if (s_editMode>0) {
      uint8_t next = cur;
  4072c2:	782f      	ldrb	r7, [r5, #0]
      char c = name[next];
      char v = c;
      if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP)
  4072c4:	b2db      	uxtb	r3, r3
  4072c6:	eb42 020c 	adc.w	r2, r2, ip
  4072ca:	2b01      	cmp	r3, #1
  4072cc:	bf8c      	ite	hi
  4072ce:	4613      	movhi	r3, r2
  4072d0:	f042 0301 	orrls.w	r3, r2, #1
  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? ((s_editMode>0) ? 0 : INVERS) : 0));

  if (active) {
    if (s_editMode>0) {
      uint8_t next = cur;
      char c = name[next];
  4072d4:	5df1      	ldrb	r1, [r6, r7]
      char v = c;
      if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP)
  4072d6:	2b00      	cmp	r3, #0
  4072d8:	d12b      	bne.n	407332 <_Z8EditNamehhPchhbRh+0xb6>
  4072da:	2c43      	cmp	r4, #67	; 0x43
  4072dc:	d029      	beq.n	407332 <_Z8EditNamehhPchhbRh+0xb6>
         v = checkIncDec(event, abs(v), 0, ZCHAR_MAX, 0);
         if (c < 0) v = -v;
         STORE_MODELVARS;
      }

      switch (event) {
  4072de:	2c25      	cmp	r4, #37	; 0x25
  4072e0:	d03f      	beq.n	407362 <_Z8EditNamehhPchhbRh+0xe6>
  4072e2:	d942      	bls.n	40736a <_Z8EditNamehhPchhbRh+0xee>
  4072e4:	f1a4 0384 	sub.w	r3, r4, #132	; 0x84
  4072e8:	2b01      	cmp	r3, #1
  4072ea:	d840      	bhi.n	40736e <_Z8EditNamehhPchhbRh+0xf2>
          }
          // no break
#endif
        case EVT_KEY_LONG(KEY_LEFT):
        case EVT_KEY_LONG(KEY_RIGHT):
          if (v>=-26 && v<=26) {
  4072ec:	291a      	cmp	r1, #26
  4072ee:	d83e      	bhi.n	40736e <_Z8EditNamehhPchhbRh+0xf2>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4072f0:	4b2f      	ldr	r3, [pc, #188]	; (4073b0 <_Z8EditNamehhPchhbRh+0x134>)
            v = -v; // toggle case
  4072f2:	4249      	negs	r1, r1
  4072f4:	f893 09a8 	ldrb.w	r0, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  4072f8:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  4072fc:	f040 0002 	orr.w	r0, r0, #2
            STORE_MODELVARS; // TODO optim if (c!=v) at the end
            if (event==EVT_KEY_LONG(KEY_LEFT))
  407300:	2c85      	cmp	r4, #133	; 0x85
  407302:	f883 09a8 	strb.w	r0, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  407306:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
          // no break
#endif
        case EVT_KEY_LONG(KEY_LEFT):
        case EVT_KEY_LONG(KEY_RIGHT):
          if (v>=-26 && v<=26) {
            v = -v; // toggle case
  40730a:	b2c9      	uxtb	r1, r1
            STORE_MODELVARS; // TODO optim if (c!=v) at the end
            if (event==EVT_KEY_LONG(KEY_LEFT))
  40730c:	d12f      	bne.n	40736e <_Z8EditNamehhPchhbRh+0xf2>
  40730e:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
  407312:	2063      	movs	r0, #99	; 0x63
  407314:	f36f 1205 	bfc	r2, #4, #2
  407318:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
  40731c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  407320:	e025      	b.n	40736e <_Z8EditNamehhPchhbRh+0xf2>
#endif
}

void EditName(uint8_t x, uint8_t y, char *name, uint8_t size, uint8_t event, bool active, uint8_t & cur)
{
  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? ((s_editMode>0) ? 0 : INVERS) : 0));
  407322:	2320      	movs	r3, #32
  407324:	930c      	str	r3, [sp, #48]	; 0x30
  407326:	4653      	mov	r3, sl
    }
    else {
      cur = 0;
    }
  }
}
  407328:	b003      	add	sp, #12
  40732a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
}

void EditName(uint8_t x, uint8_t y, char *name, uint8_t size, uint8_t event, bool active, uint8_t & cur)
{
  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? ((s_editMode>0) ? 0 : INVERS) : 0));
  40732e:	f7fb ba5b 	b.w	4027e8 <_Z12lcd_putsnAtthhPKchh>
      uint8_t next = cur;
      char c = name[next];
      char v = c;
      if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP)
          || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP)) {
         v = checkIncDec(event, abs(v), 0, ZCHAR_MAX, 0);
  407332:	f04f 0e00 	mov.w	lr, #0
  407336:	2328      	movs	r3, #40	; 0x28
  407338:	b209      	sxth	r1, r1
  40733a:	4672      	mov	r2, lr
  40733c:	4620      	mov	r0, r4
  40733e:	f8cd e000 	str.w	lr, [sp]
  407342:	f7ff fe1d 	bl	406f80 <_Z11checkIncDechsssh>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  407346:	4b1a      	ldr	r3, [pc, #104]	; (4073b0 <_Z8EditNamehhPchhbRh+0x134>)
  407348:	b2c1      	uxtb	r1, r0
  40734a:	f893 09a8 	ldrb.w	r0, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40734e:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  407352:	f040 0002 	orr.w	r0, r0, #2
         if (c < 0) v = -v;
         STORE_MODELVARS;
      }

      switch (event) {
  407356:	2c25      	cmp	r4, #37	; 0x25
  407358:	f883 09a8 	strb.w	r0, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40735c:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
  407360:	d1bf      	bne.n	4072e2 <_Z8EditNamehhPchhbRh+0x66>
        case EVT_KEY_BREAK(KEY_LEFT):
          if (next>0) next--;
  407362:	b127      	cbz	r7, 40736e <_Z8EditNamehhPchhbRh+0xf2>
  407364:	3f01      	subs	r7, #1
  407366:	b2ff      	uxtb	r7, r7
  407368:	e001      	b.n	40736e <_Z8EditNamehhPchhbRh+0xf2>
         v = checkIncDec(event, abs(v), 0, ZCHAR_MAX, 0);
         if (c < 0) v = -v;
         STORE_MODELVARS;
      }

      switch (event) {
  40736a:	2c24      	cmp	r4, #36	; 0x24
  40736c:	d018      	beq.n	4073a0 <_Z8EditNamehhPchhbRh+0x124>
              killEvents(KEY_LEFT);
          }
          break;
      }

      name[cur] = v;
  40736e:	782b      	ldrb	r3, [r5, #0]
      lcd_putcAtt(x+cur*FW, y, idx2char(v), INVERS);
  407370:	b248      	sxtb	r0, r1
              killEvents(KEY_LEFT);
          }
          break;
      }

      name[cur] = v;
  407372:	54f1      	strb	r1, [r6, r3]
      lcd_putcAtt(x+cur*FW, y, idx2char(v), INVERS);
  407374:	782b      	ldrb	r3, [r5, #0]
  407376:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40737a:	eb08 0843 	add.w	r8, r8, r3, lsl #1
  40737e:	f7f9 fa85 	bl	40088c <_Z8idx2chara>
  407382:	fa5f f888 	uxtb.w	r8, r8
  407386:	4602      	mov	r2, r0
  407388:	4649      	mov	r1, r9
  40738a:	4640      	mov	r0, r8
  40738c:	2302      	movs	r3, #2
  40738e:	f7fb f96d 	bl	40266c <_Z11lcd_putcAtthhhh>
      cur = next;
  407392:	702f      	strb	r7, [r5, #0]
    }
    else {
      cur = 0;
    }
  }
}
  407394:	b003      	add	sp, #12
  407396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      name[cur] = v;
      lcd_putcAtt(x+cur*FW, y, idx2char(v), INVERS);
      cur = next;
    }
    else {
      cur = 0;
  40739a:	2300      	movs	r3, #0
  40739c:	702b      	strb	r3, [r5, #0]
  40739e:	e7f9      	b.n	407394 <_Z8EditNamehhPchhbRh+0x118>
      switch (event) {
        case EVT_KEY_BREAK(KEY_LEFT):
          if (next>0) next--;
          break;
        case EVT_KEY_BREAK(KEY_RIGHT):
          if (next<size-1) next++;
  4073a0:	f10a 3aff 	add.w	sl, sl, #4294967295
  4073a4:	4557      	cmp	r7, sl
  4073a6:	dae2      	bge.n	40736e <_Z8EditNamehhPchhbRh+0xf2>
  4073a8:	3701      	adds	r7, #1
  4073aa:	b2ff      	uxtb	r7, r7
  4073ac:	e7df      	b.n	40736e <_Z8EditNamehhPchhbRh+0xf2>
  4073ae:	bf00      	nop
  4073b0:	20000108 	.word	0x20000108
  4073b4:	20001200 	.word	0x20001200

004073b8 <_Z7messagePKcS0_S0_S0_>:
    wdt_reset();
  }
}

void message(const pm_char *title, const pm_char *s, const pm_char *t, const char *last)
{
  4073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073ba:	4607      	mov	r7, r0
  4073bc:	460e      	mov	r6, r1
  4073be:	4615      	mov	r5, r2
  4073c0:	461c      	mov	r4, r3
  lcd_clear();
  4073c2:	f7fb f905 	bl	4025d0 <_Z9lcd_clearv>
  lcd_putsAtt(0, 0, title, DBLSIZE);
  4073c6:	2000      	movs	r0, #0
  4073c8:	4601      	mov	r1, r0
  4073ca:	463a      	mov	r2, r7
  4073cc:	2304      	movs	r3, #4
  4073ce:	f7fb fa73 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  lcd_putsLeft(4*FH, s);
  4073d2:	2020      	movs	r0, #32
  4073d4:	4631      	mov	r1, r6
  4073d6:	f7fb fa79 	bl	4028cc <_Z12lcd_putsLefthPKc>
  if (t)
  4073da:	b11d      	cbz	r5, 4073e4 <_Z7messagePKcS0_S0_S0_+0x2c>
    lcd_putsLeft(5*FH, t);
  4073dc:	2028      	movs	r0, #40	; 0x28
  4073de:	4629      	mov	r1, r5
  4073e0:	f7fb fa74 	bl	4028cc <_Z12lcd_putsLefthPKc>
  if (last) {
  4073e4:	b134      	cbz	r4, 4073f4 <_Z7messagePKcS0_S0_S0_+0x3c>
    lcd_putsLeft(7*FH, last);
  4073e6:	2038      	movs	r0, #56	; 0x38
  4073e8:	4621      	mov	r1, r4
  4073ea:	f7fb fa6f 	bl	4028cc <_Z12lcd_putsLefthPKc>
    AUDIO_ERROR();
  4073ee:	2002      	movs	r0, #2
  4073f0:	f7ff f88c 	bl	40650c <_Z13audioDefeventh>
  }
  refreshDisplay();
  4073f4:	f7fc fbfa 	bl	403bec <_Z14refreshDisplayv>
  lcdSetRefVolt(g_eeGeneral.contrast);
  4073f8:	4b04      	ldr	r3, [pc, #16]	; (40740c <_Z7messagePKcS0_S0_S0_+0x54>)
  4073fa:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
  4073fe:	f7fc fb97 	bl	403b30 <_Z13lcdSetRefVolth>
  clearKeyEvents();
}
  407402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lcd_putsLeft(7*FH, last);
    AUDIO_ERROR();
  }
  refreshDisplay();
  lcdSetRefVolt(g_eeGeneral.contrast);
  clearKeyEvents();
  407406:	f7f9 bdb3 	b.w	400f70 <_Z14clearKeyEventsv>
  40740a:	bf00      	nop
  40740c:	20000108 	.word	0x20000108

00407410 <_Z5alertPKc>:
#endif
  }
}

void alert(const pm_char * s)
{
  407410:	4601      	mov	r1, r0
  message(STR_ALERT, s, 0, STR_PRESSANYKEY);
  407412:	480d      	ldr	r0, [pc, #52]	; (407448 <_Z5alertPKc+0x38>)
#endif
  }
}

void alert(const pm_char * s)
{
  407414:	b538      	push	{r3, r4, r5, lr}
  message(STR_ALERT, s, 0, STR_PRESSANYKEY);
  407416:	2200      	movs	r2, #0
  407418:	f100 0308 	add.w	r3, r0, #8

    if (keyDown()) return;  // wait for key release

    checkBacklight();

    wdt_reset();
  40741c:	f241 4550 	movw	r5, #5200	; 0x1450
  407420:	2401      	movs	r4, #1
  }
}

void alert(const pm_char * s)
{
  message(STR_ALERT, s, 0, STR_PRESSANYKEY);
  407422:	f7ff ffc9 	bl	4073b8 <_Z7messagePKcS0_S0_S0_>

    if (keyDown()) return;  // wait for key release

    checkBacklight();

    wdt_reset();
  407426:	f2c4 050e 	movt	r5, #16398	; 0x400e
  40742a:	f2ca 5400 	movt	r4, #42240	; 0xa500
  40742e:	e005      	b.n	40743c <_Z5alertPKc+0x2c>
    sleep(1/*ms*/);
#endif

    if (check_soft_power() > e_power_trainer) return; // Usb on or power off

    if (keyDown()) return;  // wait for key release
  407430:	f7f9 f8aa 	bl	400588 <_Z7keyDownv>
  407434:	b930      	cbnz	r0, 407444 <_Z5alertPKc+0x34>

    checkBacklight();
  407436:	f7fd fc15 	bl	404c64 <_Z14checkBacklightv>

    wdt_reset();
  40743a:	602c      	str	r4, [r5, #0]
#ifdef SIMU
    if (!main_thread_running) return;
    sleep(1/*ms*/);
#endif

    if (check_soft_power() > e_power_trainer) return; // Usb on or power off
  40743c:	f7f8 ff22 	bl	400284 <_Z16check_soft_powerv>
  407440:	2801      	cmp	r0, #1
  407442:	d9f5      	bls.n	407430 <_Z5alertPKc+0x20>
  407444:	bd38      	pop	{r3, r4, r5, pc}
  407446:	bf00      	nop
  407448:	00410868 	.word	0x00410868

0040744c <_Z10checkAlarmv>:
  }
}

void checkAlarm() // added by Gohst
{
  if (g_eeGeneral.disableAlarmWarning) return;
  40744c:	4b06      	ldr	r3, [pc, #24]	; (407468 <_Z10checkAlarmv+0x1c>)
  40744e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
  407452:	f003 0280 	and.w	r2, r3, #128	; 0x80
  407456:	b2d2      	uxtb	r2, r2
  407458:	b91a      	cbnz	r2, 407462 <_Z10checkAlarmv+0x16>
  if (g_eeGeneral.beeperMode == e_mode_quiet) alert(STR_ALARMSDISABLED);
  40745a:	f003 0318 	and.w	r3, r3, #24
  40745e:	2b10      	cmp	r3, #16
  407460:	d000      	beq.n	407464 <_Z10checkAlarmv+0x18>
  407462:	4770      	bx	lr
  407464:	4801      	ldr	r0, [pc, #4]	; (40746c <_Z10checkAlarmv+0x20>)
  407466:	e7d3      	b.n	407410 <_Z5alertPKc>
  407468:	20000108 	.word	0x20000108
  40746c:	00410880 	.word	0x00410880

00407470 <_Z13checkSwitchesv>:
}

void checkSwitches()
{
  407470:	b570      	push	{r4, r5, r6, lr}
  if(!g_eeGeneral.switchWarning) return; // if warning is on
  407472:	4b19      	ldr	r3, [pc, #100]	; (4074d8 <_Z13checkSwitchesv+0x68>)
  407474:	f893 4067 	ldrb.w	r4, [r3, #103]	; 0x67
  407478:	f014 0406 	ands.w	r4, r4, #6
  40747c:	d019      	beq.n	4074b2 <_Z13checkSwitchesv+0x42>

  bool state = (g_eeGeneral.switchWarning > 0);
  40747e:	f1a4 0302 	sub.w	r3, r4, #2
  407482:	425c      	negs	r4, r3
  407484:	eb44 0403 	adc.w	r4, r4, r3
  bool first = true;
  407488:	2601      	movs	r6, #1
  40748a:	250f      	movs	r5, #15
  40748c:	e001      	b.n	407492 <_Z13checkSwitchesv+0x22>

void checkSwitches()
{
  if(!g_eeGeneral.switchWarning) return; // if warning is on

  bool state = (g_eeGeneral.switchWarning > 0);
  40748e:	3501      	adds	r5, #1
  407490:	b2ed      	uxtb	r5, r5
{
  if (g_eeGeneral.disableAlarmWarning) return;
  if (g_eeGeneral.beeperMode == e_mode_quiet) alert(STR_ALARMSDISABLED);
}

void checkSwitches()
  407492:	f1a5 000e 	sub.w	r0, r5, #14
  {
    uint8_t i;
    for(i=SW_BASE; i<SW_Trainer; i++)
    {
        if(i==SW_ID0) continue;
        if(getSwitch(i-SW_BASE+1,0) != state) break;
  407496:	2100      	movs	r1, #0
  while (1)
  {
    uint8_t i;
    for(i=SW_BASE; i<SW_Trainer; i++)
    {
        if(i==SW_ID0) continue;
  407498:	2d12      	cmp	r5, #18
        if(getSwitch(i-SW_BASE+1,0) != state) break;
  40749a:	b240      	sxtb	r0, r0
  while (1)
  {
    uint8_t i;
    for(i=SW_BASE; i<SW_Trainer; i++)
    {
        if(i==SW_ID0) continue;
  40749c:	d0f7      	beq.n	40748e <_Z13checkSwitchesv+0x1e>
        if(getSwitch(i-SW_BASE+1,0) != state) break;
  40749e:	f7fd fbd7 	bl	404c50 <_Z9getSwitchab>
  4074a2:	4284      	cmp	r4, r0
  4074a4:	d102      	bne.n	4074ac <_Z13checkSwitchesv+0x3c>

  //loop until all switches are reset
  while (1)
  {
    uint8_t i;
    for(i=SW_BASE; i<SW_Trainer; i++)
  4074a6:	2d16      	cmp	r5, #22
  4074a8:	d1f1      	bne.n	40748e <_Z13checkSwitchesv+0x1e>
  4074aa:	bd70      	pop	{r4, r5, r6, pc}
    {
        if(i==SW_ID0) continue;
        if(getSwitch(i-SW_BASE+1,0) != state) break;
    }
    if(i==SW_Trainer || keyDown()) return;
  4074ac:	f7f9 f86c 	bl	400588 <_Z7keyDownv>
  4074b0:	b100      	cbz	r0, 4074b4 <_Z13checkSwitchesv+0x44>
  4074b2:	bd70      	pop	{r4, r5, r6, pc}

    // first - display warning
    if (first) {
  4074b4:	b146      	cbz	r6, 4074c8 <_Z13checkSwitchesv+0x58>
      message(STR_ALERT, STR_SWITCHESNOTOFF, STR_PLEASERESETTHEM, STR_PRESSANYKEYTOSKIP);
  4074b6:	4809      	ldr	r0, [pc, #36]	; (4074dc <_Z13checkSwitchesv+0x6c>)
  4074b8:	f100 0128 	add.w	r1, r0, #40	; 0x28
  4074bc:	f100 023c 	add.w	r2, r0, #60	; 0x3c
  4074c0:	f100 0350 	add.w	r3, r0, #80	; 0x50
  4074c4:	f7ff ff78 	bl	4073b8 <_Z7messagePKcS0_S0_S0_>
      first = false;
    }

    if (check_soft_power() > e_power_trainer) return; // Usb on or power off
  4074c8:	f7f8 fedc 	bl	400284 <_Z16check_soft_powerv>
  4074cc:	2801      	cmp	r0, #1
  4074ce:	d8f0      	bhi.n	4074b2 <_Z13checkSwitchesv+0x42>

    checkBacklight();
  4074d0:	f7fd fbc8 	bl	404c64 <_Z14checkBacklightv>
  4074d4:	2600      	movs	r6, #0

  bool state = (g_eeGeneral.switchWarning > 0);
  bool first = true;

  //loop until all switches are reset
  while (1)
  4074d6:	e7d8      	b.n	40748a <_Z13checkSwitchesv+0x1a>
  4074d8:	20000108 	.word	0x20000108
  4074dc:	00410868 	.word	0x00410868

004074e0 <_Z8checkTHRv>:
  }
}
#endif

void checkTHR()
{
  4074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(g_eeGeneral.disableThrottleWarning) return;
  4074e2:	4c2e      	ldr	r4, [pc, #184]	; (40759c <_Z8checkTHRv+0xbc>)
  4074e4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
  4074e8:	07d8      	lsls	r0, r3, #31
  4074ea:	d500      	bpl.n	4074ee <_Z8checkTHRv+0xe>
  4074ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  int thrchn=(2-(stickMode&1));//stickMode=0123 -> thr=2121
  4074ee:	4b2c      	ldr	r3, [pc, #176]	; (4075a0 <_Z8checkTHRv+0xc0>)
  4074f0:	f893 6a86 	ldrb.w	r6, [r3, #2694]	; 0xa86
  4074f4:	f006 0601 	and.w	r6, r6, #1
  4074f8:	f1c6 0602 	rsb	r6, r6, #2

  int16_t lowLim = THRCHK_DEADBAND + g_eeGeneral.calibMid[thrchn] - g_eeGeneral.calibSpanNeg[thrchn];
  4074fc:	eb04 0346 	add.w	r3, r4, r6, lsl #1
  407500:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
  407504:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  407508:	1d33      	adds	r3, r6, #4
  40750a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  40750e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  407512:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
  407516:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
  40751a:	b20b      	sxth	r3, r1
  40751c:	3310      	adds	r3, #16
  40751e:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  407522:	1b5d      	subs	r5, r3, r5

#ifndef SIMU
  getADC_single();   // if thr is down - do not display warning at all
  407524:	f7f9 fda8 	bl	401078 <_Z13getADC_singlev>
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  407528:	4b1e      	ldr	r3, [pc, #120]	; (4075a4 <_Z8checkTHRv+0xc4>)
  40752a:	b2f6      	uxtb	r6, r6
  40752c:	199e      	adds	r6, r3, r6
  40752e:	f896 6020 	ldrb.w	r6, [r6, #32]

#ifndef SIMU
  getADC_single();   // if thr is down - do not display warning at all
#endif
  int16_t v = anaIn(thrchn);
  if (g_eeGeneral.throttleReversed) v = - v;
  407532:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  407536:	0076      	lsls	r6, r6, #1
  407538:	19a3      	adds	r3, r4, r6
  40753a:	f8b3 39b0 	ldrh.w	r3, [r3, #2480]	; 0x9b0

#ifndef SIMU
  getADC_single();   // if thr is down - do not display warning at all
#endif
  int16_t v = anaIn(thrchn);
  if (g_eeGeneral.throttleReversed) v = - v;
  40753e:	07d1      	lsls	r1, r2, #31
  407540:	bf48      	it	mi
  407542:	425b      	negmi	r3, r3
{
  if(g_eeGeneral.disableThrottleWarning) return;

  int thrchn=(2-(stickMode&1));//stickMode=0123 -> thr=2121

  int16_t lowLim = THRCHK_DEADBAND + g_eeGeneral.calibMid[thrchn] - g_eeGeneral.calibSpanNeg[thrchn];
  407544:	b2ad      	uxth	r5, r5

#ifndef SIMU
  getADC_single();   // if thr is down - do not display warning at all
#endif
  int16_t v = anaIn(thrchn);
  if (g_eeGeneral.throttleReversed) v = - v;
  407546:	b29b      	uxth	r3, r3

  if(v<=lowLim) return;
  407548:	b21b      	sxth	r3, r3
  40754a:	b22d      	sxth	r5, r5
  40754c:	42ab      	cmp	r3, r5
  40754e:	ddcd      	ble.n	4074ec <_Z8checkTHRv+0xc>

  // first - display warning
  message(STR_ALERT, STR_THROTTLENOTIDLE, STR_RESETTHROTTLE, STR_PRESSANYKEYTOSKIP);
  407550:	4815      	ldr	r0, [pc, #84]	; (4075a8 <_Z8checkTHRv+0xc8>)
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  407552:	19a6      	adds	r6, r4, r6
  if (g_eeGeneral.throttleReversed) v = - v;

  if(v<=lowLim) return;

  // first - display warning
  message(STR_ALERT, STR_THROTTLENOTIDLE, STR_RESETTHROTTLE, STR_PRESSANYKEYTOSKIP);
  407554:	f100 0168 	add.w	r1, r0, #104	; 0x68
  407558:	f100 027c 	add.w	r2, r0, #124	; 0x7c
  40755c:	f100 0350 	add.w	r3, r0, #80	; 0x50
  407560:	f7ff ff2a 	bl	4073b8 <_Z7messagePKcS0_S0_S0_>
  {
#ifdef SIMU
      if (!main_thread_running) return;
      sleep(1/*ms*/);
#else
      getADC_single();
  407564:	f7f9 fd88 	bl	401078 <_Z13getADC_singlev>
#endif
      int16_t v = anaIn(thrchn);
      if (g_eeGeneral.throttleReversed) v = - v;
  407568:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  40756c:	f8b6 79b0 	ldrh.w	r7, [r6, #2480]	; 0x9b0
      sleep(1/*ms*/);
#else
      getADC_single();
#endif
      int16_t v = anaIn(thrchn);
      if (g_eeGeneral.throttleReversed) v = - v;
  407570:	07da      	lsls	r2, r3, #31
  407572:	bf48      	it	mi
  407574:	427f      	negmi	r7, r7

      if (check_soft_power() > e_power_trainer) return; // Usb on or power off
  407576:	f7f8 fe85 	bl	400284 <_Z16check_soft_powerv>
      sleep(1/*ms*/);
#else
      getADC_single();
#endif
      int16_t v = anaIn(thrchn);
      if (g_eeGeneral.throttleReversed) v = - v;
  40757a:	b2bf      	uxth	r7, r7

      if (check_soft_power() > e_power_trainer) return; // Usb on or power off
  40757c:	2801      	cmp	r0, #1

      if(v<=lowLim || keyDown()) {
  40757e:	b23f      	sxth	r7, r7
      getADC_single();
#endif
      int16_t v = anaIn(thrchn);
      if (g_eeGeneral.throttleReversed) v = - v;

      if (check_soft_power() > e_power_trainer) return; // Usb on or power off
  407580:	d8b4      	bhi.n	4074ec <_Z8checkTHRv+0xc>

      if(v<=lowLim || keyDown()) {
  407582:	42af      	cmp	r7, r5
  407584:	dc03      	bgt.n	40758e <_Z8checkTHRv+0xae>
        return;
      }

      checkBacklight();
  }
}
  407586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      if (g_eeGeneral.throttleReversed) v = - v;

      if (check_soft_power() > e_power_trainer) return; // Usb on or power off

      if(v<=lowLim || keyDown()) {
        clearKeyEvents();
  40758a:	f7f9 bcf1 	b.w	400f70 <_Z14clearKeyEventsv>
      int16_t v = anaIn(thrchn);
      if (g_eeGeneral.throttleReversed) v = - v;

      if (check_soft_power() > e_power_trainer) return; // Usb on or power off

      if(v<=lowLim || keyDown()) {
  40758e:	f7f8 fffb 	bl	400588 <_Z7keyDownv>
  407592:	2800      	cmp	r0, #0
  407594:	d1f7      	bne.n	407586 <_Z8checkTHRv+0xa6>
        clearKeyEvents();
        return;
      }

      checkBacklight();
  407596:	f7fd fb65 	bl	404c64 <_Z14checkBacklightv>

  // first - display warning
  message(STR_ALERT, STR_THROTTLENOTIDLE, STR_RESETTHROTTLE, STR_PRESSANYKEYTOSKIP);

  //loop until all switches are reset
  while (1)
  40759a:	e7e3      	b.n	407564 <_Z8checkTHRv+0x84>
  40759c:	20000108 	.word	0x20000108
  4075a0:	20001200 	.word	0x20001200
  4075a4:	0040f730 	.word	0x0040f730
  4075a8:	00410868 	.word	0x00410868

004075ac <_Z8pushMenuPFvhE>:
  (*newMenu)(EVT_ENTRY);
  AUDIO_MENUS();
}

void pushMenu(MenuFuncP newMenu)
{
  4075ac:	b538      	push	{r3, r4, r5, lr}
#if defined(ROTARY_ENCODERS)
  s_warning = NULL;
#endif

  g_menuPos[g_menuStackPtr] = m_posVert;
  4075ae:	4c10      	ldr	r4, [pc, #64]	; (4075f0 <_Z8pushMenuPFvhE+0x44>)
  (*newMenu)(EVT_ENTRY);
  AUDIO_MENUS();
}

void pushMenu(MenuFuncP newMenu)
{
  4075b0:	4605      	mov	r5, r0
#if defined(ROTARY_ENCODERS)
  s_warning = NULL;
#endif

  g_menuPos[g_menuStackPtr] = m_posVert;
  4075b2:	f894 3ba4 	ldrb.w	r3, [r4, #2980]	; 0xba4
  4075b6:	f894 0c34 	ldrb.w	r0, [r4, #3124]	; 0xc34

  g_menuStackPtr++;
  4075ba:	1c5a      	adds	r2, r3, #1
  4075bc:	b2d2      	uxtb	r2, r2
{
#if defined(ROTARY_ENCODERS)
  s_warning = NULL;
#endif

  g_menuPos[g_menuStackPtr] = m_posVert;
  4075be:	18e1      	adds	r1, r4, r3

  g_menuStackPtr++;
  if(g_menuStackPtr >= DIM(g_menuStack))
  4075c0:	2a04      	cmp	r2, #4
{
#if defined(ROTARY_ENCODERS)
  s_warning = NULL;
#endif

  g_menuPos[g_menuStackPtr] = m_posVert;
  4075c2:	f881 0c30 	strb.w	r0, [r1, #3120]	; 0xc30

  g_menuStackPtr++;
  4075c6:	f884 2ba4 	strb.w	r2, [r4, #2980]	; 0xba4
  if(g_menuStackPtr >= DIM(g_menuStack))
  4075ca:	d80b      	bhi.n	4075e4 <_Z8pushMenuPFvhE+0x38>
  {
    g_menuStackPtr--;
    alert(STR_MENUSERROR);
    return;
  }
  AUDIO_MENUS();
  4075cc:	2005      	movs	r0, #5
  4075ce:	f7fe ff9d 	bl	40650c <_Z13audioDefeventh>
  g_menuStack[g_menuStackPtr] = newMenu;
  4075d2:	f894 3ba4 	ldrb.w	r3, [r4, #2980]	; 0xba4
  (*newMenu)(EVT_ENTRY);
  4075d6:	20bf      	movs	r0, #191	; 0xbf
    g_menuStackPtr--;
    alert(STR_MENUSERROR);
    return;
  }
  AUDIO_MENUS();
  g_menuStack[g_menuStackPtr] = newMenu;
  4075d8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  4075dc:	f8c4 5a98 	str.w	r5, [r4, #2712]	; 0xa98
  (*newMenu)(EVT_ENTRY);
  4075e0:	47a8      	blx	r5
}
  4075e2:	bd38      	pop	{r3, r4, r5, pc}

  g_menuStackPtr++;
  if(g_menuStackPtr >= DIM(g_menuStack))
  {
    g_menuStackPtr--;
    alert(STR_MENUSERROR);
  4075e4:	4803      	ldr	r0, [pc, #12]	; (4075f4 <_Z8pushMenuPFvhE+0x48>)
  g_menuPos[g_menuStackPtr] = m_posVert;

  g_menuStackPtr++;
  if(g_menuStackPtr >= DIM(g_menuStack))
  {
    g_menuStackPtr--;
  4075e6:	f884 3ba4 	strb.w	r3, [r4, #2980]	; 0xba4
    return;
  }
  AUDIO_MENUS();
  g_menuStack[g_menuStackPtr] = newMenu;
  (*newMenu)(EVT_ENTRY);
}
  4075ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  g_menuStackPtr++;
  if(g_menuStackPtr >= DIM(g_menuStack))
  {
    g_menuStackPtr--;
    alert(STR_MENUSERROR);
  4075ee:	e70f      	b.n	407410 <_Z5alertPKc>
  4075f0:	20001200 	.word	0x20001200
  4075f4:	004108f4 	.word	0x004108f4

004075f8 <_Z7popMenuv>:
uint8_t m_posVert;
#endif
uint8_t m_posHorz;

void popMenu()
{
  4075f8:	b510      	push	{r4, lr}
  if (g_menuStackPtr>0) {
  4075fa:	4c0f      	ldr	r4, [pc, #60]	; (407638 <_Z7popMenuv+0x40>)
  4075fc:	f894 3ba4 	ldrb.w	r3, [r4, #2980]	; 0xba4
  407600:	b91b      	cbnz	r3, 40760a <_Z7popMenuv+0x12>
    m_posHorz = 0;
    m_posVert = g_menuPos[g_menuStackPtr];
    (*g_menuStack[g_menuStackPtr])(EVT_ENTRY_UP);
  }
  else {
    alert(STR_MENUSERROR);
  407602:	480e      	ldr	r0, [pc, #56]	; (40763c <_Z7popMenuv+0x44>)
  }
}
  407604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m_posHorz = 0;
    m_posVert = g_menuPos[g_menuStackPtr];
    (*g_menuStack[g_menuStackPtr])(EVT_ENTRY_UP);
  }
  else {
    alert(STR_MENUSERROR);
  407608:	e702      	b.n	407410 <_Z5alertPKc>
uint8_t m_posHorz;

void popMenu()
{
  if (g_menuStackPtr>0) {
    g_menuStackPtr = g_menuStackPtr-1;
  40760a:	3b01      	subs	r3, #1
    AUDIO_KEYPAD_UP();
  40760c:	2003      	movs	r0, #3
uint8_t m_posHorz;

void popMenu()
{
  if (g_menuStackPtr>0) {
    g_menuStackPtr = g_menuStackPtr-1;
  40760e:	f884 3ba4 	strb.w	r3, [r4, #2980]	; 0xba4
    AUDIO_KEYPAD_UP();
  407612:	f7fe ff7b 	bl	40650c <_Z13audioDefeventh>
    m_posHorz = 0;
    m_posVert = g_menuPos[g_menuStackPtr];
  407616:	f894 3ba4 	ldrb.w	r3, [r4, #2980]	; 0xba4
void popMenu()
{
  if (g_menuStackPtr>0) {
    g_menuStackPtr = g_menuStackPtr-1;
    AUDIO_KEYPAD_UP();
    m_posHorz = 0;
  40761a:	2100      	movs	r1, #0
    m_posVert = g_menuPos[g_menuStackPtr];
  40761c:	18e2      	adds	r2, r4, r3
  40761e:	f892 2c30 	ldrb.w	r2, [r2, #3120]	; 0xc30
    (*g_menuStack[g_menuStackPtr])(EVT_ENTRY_UP);
  407622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
void popMenu()
{
  if (g_menuStackPtr>0) {
    g_menuStackPtr = g_menuStackPtr-1;
    AUDIO_KEYPAD_UP();
    m_posHorz = 0;
  407626:	f884 1c35 	strb.w	r1, [r4, #3125]	; 0xc35
    m_posVert = g_menuPos[g_menuStackPtr];
  40762a:	f884 2c34 	strb.w	r2, [r4, #3124]	; 0xc34
    (*g_menuStack[g_menuStackPtr])(EVT_ENTRY_UP);
  40762e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
  407632:	20be      	movs	r0, #190	; 0xbe
  407634:	4798      	blx	r3
  }
  else {
    alert(STR_MENUSERROR);
  }
}
  407636:	bd10      	pop	{r4, pc}
  407638:	20001200 	.word	0x20001200
  40763c:	004108f4 	.word	0x004108f4

00407640 <_Z16menuProcCurveOneh>:
    lcd_plot(X0+xv, yv, BLACK);
  }
}

void menuProcCurveOne(uint8_t event)
{
  407640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t points;
  int8_t *crv;
  static int8_t dfltCrv;
  static uint8_t autoThrStep;

  TITLE(STR_MENUCURVE);
  407644:	2100      	movs	r1, #0
    lcd_plot(X0+xv, yv, BLACK);
  }
}

void menuProcCurveOne(uint8_t event)
{
  407646:	b085      	sub	sp, #20
  int8_t *crv;
  static int8_t dfltCrv;
  static uint8_t autoThrStep;

  TITLE(STR_MENUCURVE);
  lcd_outdezAtt(5*FW+1, 0, s_curveChan+1, INVERS|LEFT);
  407648:	4cb1      	ldr	r4, [pc, #708]	; (407910 <_Z16menuProcCurveOneh+0x2d0>)
  uint8_t points;
  int8_t *crv;
  static int8_t dfltCrv;
  static uint8_t autoThrStep;

  TITLE(STR_MENUCURVE);
  40764a:	2302      	movs	r3, #2
  40764c:	4ab1      	ldr	r2, [pc, #708]	; (407914 <_Z16menuProcCurveOneh+0x2d4>)
    lcd_plot(X0+xv, yv, BLACK);
  }
}

void menuProcCurveOne(uint8_t event)
{
  40764e:	9002      	str	r0, [sp, #8]
  uint8_t points;
  int8_t *crv;
  static int8_t dfltCrv;
  static uint8_t autoThrStep;

  TITLE(STR_MENUCURVE);
  407650:	4608      	mov	r0, r1
  407652:	f7fb f931 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  lcd_outdezAtt(5*FW+1, 0, s_curveChan+1, INVERS|LEFT);
  407656:	f894 6897 	ldrb.w	r6, [r4, #2199]	; 0x897
  40765a:	2382      	movs	r3, #130	; 0x82
  40765c:	1c72      	adds	r2, r6, #1
  40765e:	201f      	movs	r0, #31
  407660:	2100      	movs	r1, #0
  407662:	f7fb fbe9 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  DISPLAY_PROGRESS_BAR(20*FW+1);

  if (s_curveChan >= MAX_CURVE5) {
  407666:	2e07      	cmp	r6, #7
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  407668:	f504 739e 	add.w	r3, r4, #316	; 0x13c

  TITLE(STR_MENUCURVE);
  lcd_outdezAtt(5*FW+1, 0, s_curveChan+1, INVERS|LEFT);
  DISPLAY_PROGRESS_BAR(20*FW+1);

  if (s_curveChan >= MAX_CURVE5) {
  40766c:	f240 80ab 	bls.w	4077c6 <_Z16menuProcCurveOneh+0x186>
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  407670:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
  407674:	199e      	adds	r6, r3, r6
  else {
    points = 5;
    crv = g_model.curves5[s_curveChan];
  }

  switch(event) {
  407676:	9a02      	ldr	r2, [sp, #8]
  lcd_outdezAtt(5*FW+1, 0, s_curveChan+1, INVERS|LEFT);
  DISPLAY_PROGRESS_BAR(20*FW+1);

  if (s_curveChan >= MAX_CURVE5) {
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  407678:	f506 66a6 	add.w	r6, r6, #1328	; 0x530
  40767c:	3605      	adds	r6, #5
  else {
    points = 5;
    crv = g_model.curves5[s_curveChan];
  }

  switch(event) {
  40767e:	2a61      	cmp	r2, #97	; 0x61
  TITLE(STR_MENUCURVE);
  lcd_outdezAtt(5*FW+1, 0, s_curveChan+1, INVERS|LEFT);
  DISPLAY_PROGRESS_BAR(20*FW+1);

  if (s_curveChan >= MAX_CURVE5) {
    points = 9;
  407680:	f04f 0909 	mov.w	r9, #9
  else {
    points = 5;
    crv = g_model.curves5[s_curveChan];
  }

  switch(event) {
  407684:	f000 80ab 	beq.w	4077de <_Z16menuProcCurveOneh+0x19e>
  407688:	f240 80be 	bls.w	407808 <_Z16menuProcCurveOneh+0x1c8>
  40768c:	9a02      	ldr	r2, [sp, #8]
  40768e:	2a65      	cmp	r2, #101	; 0x65
  407690:	f000 8126 	beq.w	4078e0 <_Z16menuProcCurveOneh+0x2a0>
  407694:	2abf      	cmp	r2, #191	; 0xbf
  407696:	f000 80dd 	beq.w	407854 <_Z16menuProcCurveOneh+0x214>
  40769a:	2a64      	cmp	r2, #100	; 0x64
  40769c:	f000 80bb 	beq.w	407816 <_Z16menuProcCurveOneh+0x1d6>
  4076a0:	4d9d      	ldr	r5, [pc, #628]	; (407918 <_Z16menuProcCurveOneh+0x2d8>)
  4076a2:	f895 8c36 	ldrb.w	r8, [r5, #3126]	; 0xc36
  4076a6:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
    case EVT_KEY_FIRST(KEY_LEFT):
      if (!autoThrStep && m_posHorz>0) m_posHorz--;
      break;
    case EVT_KEY_REPT(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
  4076aa:	2400      	movs	r4, #0
  4076ac:	27e0      	movs	r7, #224	; 0xe0
  4076ae:	4623      	mov	r3, r4
  4076b0:	e010      	b.n	4076d4 <_Z16menuProcCurveOneh+0x94>
      x = 8*FW; y = (i-4) * FH;
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    }
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
  4076b2:	f895 2c35 	ldrb.w	r2, [r5, #3125]	; 0xc35
    lcd_outdezAtt(x, y, crv[i], attr);
  4076b6:	3708      	adds	r7, #8
      x = 8*FW; y = (i-4) * FH;
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    }
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
  4076b8:	429a      	cmp	r2, r3
  4076ba:	bf0c      	ite	eq
  4076bc:	2302      	moveq	r3, #2
  4076be:	2300      	movne	r3, #0
    lcd_outdezAtt(x, y, crv[i], attr);
  4076c0:	5732      	ldrsb	r2, [r6, r4]
  4076c2:	3401      	adds	r4, #1
  4076c4:	f7fb fbb8 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
  4076c8:	b2e3      	uxtb	r3, r4
  4076ca:	4599      	cmp	r9, r3
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    }
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
    lcd_outdezAtt(x, y, crv[i], attr);
  4076cc:	b2ff      	uxtb	r7, r7
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
  4076ce:	d915      	bls.n	4076fc <_Z16menuProcCurveOneh+0xbc>
  4076d0:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
    uint8_t x, y;
    if (i>4) {
      x = 8*FW; y = (i-4) * FH;
    }
    else {
      x = 4*FW; y = (i+1) * FH;
  4076d4:	2018      	movs	r0, #24
  4076d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
    uint8_t x, y;
    if (i>4) {
  4076da:	2b04      	cmp	r3, #4
      x = 8*FW; y = (i-4) * FH;
    }
    else {
      x = 4*FW; y = (i+1) * FH;
  4076dc:	b2c9      	uxtb	r1, r1
  }

  for (uint8_t i = 0; i < points; i++) {
    uint8_t x, y;
    if (i>4) {
      x = 8*FW; y = (i-4) * FH;
  4076de:	bf84      	itt	hi
  4076e0:	4639      	movhi	r1, r7
  4076e2:	2030      	movhi	r0, #48	; 0x30
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    }
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
  4076e4:	2a00      	cmp	r2, #0
  4076e6:	dce4      	bgt.n	4076b2 <_Z16menuProcCurveOneh+0x72>
  4076e8:	2300      	movs	r3, #0
    lcd_outdezAtt(x, y, crv[i], attr);
  4076ea:	5732      	ldrsb	r2, [r6, r4]
  4076ec:	3401      	adds	r4, #1
  4076ee:	f7fb fba3 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
  4076f2:	b2e3      	uxtb	r3, r4
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    }
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
    lcd_outdezAtt(x, y, crv[i], attr);
  4076f4:	3708      	adds	r7, #8
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
  4076f6:	4599      	cmp	r9, r3
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    }
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
    lcd_outdezAtt(x, y, crv[i], attr);
  4076f8:	b2ff      	uxtb	r7, r7
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
  4076fa:	d8e9      	bhi.n	4076d0 <_Z16menuProcCurveOneh+0x90>
    }
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
    lcd_outdezAtt(x, y, crv[i], attr);
  }

  lcd_putsLeft(7*FH, STR_MODE);
  4076fc:	2038      	movs	r0, #56	; 0x38
  4076fe:	4987      	ldr	r1, [pc, #540]	; (40791c <_Z16menuProcCurveOneh+0x2dc>)
  407700:	f7fb f8e4 	bl	4028cc <_Z12lcd_putsLefthPKc>
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);
  407704:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  407708:	f895 3c35 	ldrb.w	r3, [r5, #3125]	; 0xc35
  40770c:	f1b8 0f00 	cmp.w	r8, #0
  407710:	bf0c      	ite	eq
  407712:	2402      	moveq	r4, #2
  407714:	2400      	movne	r4, #0
  407716:	2a00      	cmp	r2, #0
  407718:	bfc8      	it	gt
  40771a:	2300      	movgt	r3, #0
  40771c:	4a80      	ldr	r2, [pc, #512]	; (407920 <_Z16menuProcCurveOneh+0x2e0>)
  40771e:	bfc8      	it	gt
  407720:	2400      	movgt	r4, #0
  407722:	201c      	movs	r0, #28
  407724:	2138      	movs	r1, #56	; 0x38
  407726:	9400      	str	r4, [sp, #0]
  407728:	f7fb f8a2 	bl	402870 <_Z12lcd_putsiAtthhPKchh>

  if (s_editMode>0 || autoThrStep) {
  40772c:	f995 3c2c 	ldrsb.w	r3, [r5, #3116]	; 0xc2c
  407730:	2b00      	cmp	r3, #0
  407732:	f340 80d0 	ble.w	4078d6 <_Z16menuProcCurveOneh+0x296>
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
      }
      else if (m_posHorz==i) {
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
  407736:	9a02      	ldr	r2, [sp, #8]
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
  407738:	f248 571f 	movw	r7, #34079	; 0x851f
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
      }
      else if (m_posHorz==i) {
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
  40773c:	f1a2 0362 	sub.w	r3, r2, #98	; 0x62
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
  407740:	f2c5 17eb 	movt	r7, #20971	; 0x51eb
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
      }
      else if (m_posHorz==i) {
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
  407744:	b2db      	uxtb	r3, r3
  }

  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
  407746:	ea4f 0b59 	mov.w	fp, r9, lsr #1
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
      }
      else if (m_posHorz==i) {
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
  40774a:	46ca      	mov	sl, r9
    uint8_t attr = (s_editMode>0 && m_posHorz==i) ? INVERS : 0;
    lcd_outdezAtt(x, y, crv[i], attr);
  }

  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);
  40774c:	2400      	movs	r4, #0
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
      }
      else if (m_posHorz==i) {
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
  40774e:	46b9      	mov	r9, r7
  407750:	9303      	str	r3, [sp, #12]
  407752:	4647      	mov	r7, r8
  407754:	e008      	b.n	407768 <_Z16menuProcCurveOneh+0x128>
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;

      if (autoThrStep) {
        if (autoThrStep==i+1)
  407756:	3401      	adds	r4, #1
  407758:	42a7      	cmp	r7, r4
  40775a:	f000 80ae 	beq.w	4078ba <_Z16menuProcCurveOneh+0x27a>

  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
  40775e:	b2e4      	uxtb	r4, r4
  407760:	45a2      	cmp	sl, r4
  407762:	d92a      	bls.n	4077ba <_Z16menuProcCurveOneh+0x17a>
  407764:	f895 7c36 	ldrb.w	r7, [r5, #3126]	; 0xc36
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
  407768:	5731      	ldrsb	r1, [r6, r4]
  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
  40776a:	0160      	lsls	r0, r4, #5
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
  40776c:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
  407770:	f501 51c4 	add.w	r1, r1, #6272	; 0x1880
  407774:	311c      	adds	r1, #28
  407776:	fb89 2301 	smull	r2, r3, r9, r1
  40777a:	17c9      	asrs	r1, r1, #31
  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
  40777c:	fb90 f0fb 	sdiv	r0, r0, fp
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
  407780:	eba1 11a3 	sub.w	r1, r1, r3, asr #6
  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
  407784:	b2c0      	uxtb	r0, r0
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
  407786:	eb06 0804 	add.w	r8, r6, r4
  40778a:	b2c9      	uxtb	r1, r1

      if (autoThrStep) {
  40778c:	2f00      	cmp	r7, #0
  40778e:	d1e2      	bne.n	407756 <_Z16menuProcCurveOneh+0x116>
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
      }
      else if (m_posHorz==i) {
  407790:	f895 3c35 	ldrb.w	r3, [r5, #3125]	; 0xc35
  407794:	42a3      	cmp	r3, r4
  407796:	d067      	beq.n	407868 <_Z16menuProcCurveOneh+0x228>
  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
  407798:	303d      	adds	r0, #61	; 0x3d
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
          CHECK_INCDEC_MODELVAR( event, crv[i], -100,100);  // edit on up/down
      }
      else {
        lcd_filled_rect(xx, yy-1, 3, 3); // do markup square
  40779a:	313e      	adds	r1, #62	; 0x3e
  40779c:	2203      	movs	r2, #3
  40779e:	f04f 0eff 	mov.w	lr, #255	; 0xff
  4077a2:	b2c0      	uxtb	r0, r0
  4077a4:	b249      	sxtb	r1, r1
  4077a6:	4613      	mov	r3, r2
  4077a8:	f8cd e000 	str.w	lr, [sp]
  4077ac:	9701      	str	r7, [sp, #4]
  4077ae:	f7fb fcd5 	bl	40315c <_Z15lcd_filled_recthahhhh>
  4077b2:	3401      	adds	r4, #1

  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
    for (uint8_t i=0; i<points; i++) {
  4077b4:	b2e4      	uxtb	r4, r4
  4077b6:	45a2      	cmp	sl, r4
  4077b8:	d8d4      	bhi.n	407764 <_Z16menuProcCurveOneh+0x124>
        lcd_filled_rect(xx, yy-1, 3, 3); // do markup square
      }
    }
  }

  DrawCurve(curveFn);
  4077ba:	485a      	ldr	r0, [pc, #360]	; (407924 <_Z16menuProcCurveOneh+0x2e4>)
}
  4077bc:	b005      	add	sp, #20
  4077be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lcd_filled_rect(xx, yy-1, 3, 3); // do markup square
      }
    }
  }

  DrawCurve(curveFn);
  4077c2:	f7fb b98d 	b.w	402ae0 <_Z9DrawCurvePFssE>
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  }
  else {
    points = 5;
    crv = g_model.curves5[s_curveChan];
  4077c6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4077ca:	199e      	adds	r6, r3, r6
  }

  switch(event) {
  4077cc:	9a02      	ldr	r2, [sp, #8]
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  }
  else {
    points = 5;
    crv = g_model.curves5[s_curveChan];
  4077ce:	f506 66aa 	add.w	r6, r6, #1360	; 0x550
  4077d2:	3605      	adds	r6, #5
  }

  switch(event) {
  4077d4:	2a61      	cmp	r2, #97	; 0x61
  if (s_curveChan >= MAX_CURVE5) {
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  }
  else {
    points = 5;
  4077d6:	f04f 0905 	mov.w	r9, #5
    crv = g_model.curves5[s_curveChan];
  }

  switch(event) {
  4077da:	f47f af55 	bne.w	407688 <_Z16menuProcCurveOneh+0x48>
        }
      }
      break;
    case EVT_KEY_FIRST(KEY_EXIT):
      killEvents(event);
      if (autoThrStep) {
  4077de:	4d4e      	ldr	r5, [pc, #312]	; (407918 <_Z16menuProcCurveOneh+0x2d8>)
  4077e0:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
  4077e4:	f895 3c36 	ldrb.w	r3, [r5, #3126]	; 0xc36
  4077e8:	f36f 1205 	bfc	r2, #4, #2
  4077ec:	2163      	movs	r1, #99	; 0x63
  4077ee:	f884 10a5 	strb.w	r1, [r4, #165]	; 0xa5
  4077f2:	f884 20a3 	strb.w	r2, [r4, #163]	; 0xa3
  4077f6:	2b00      	cmp	r3, #0
  4077f8:	d07e      	beq.n	4078f8 <_Z16menuProcCurveOneh+0x2b8>
        autoThrStep = 0;
  4077fa:	f04f 0800 	mov.w	r8, #0
  4077fe:	f885 8c36 	strb.w	r8, [r5, #3126]	; 0xc36
  407802:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  407806:	e750      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
  else {
    points = 5;
    crv = g_model.curves5[s_curveChan];
  }

  switch(event) {
  407808:	2a45      	cmp	r2, #69	; 0x45
  40780a:	d069      	beq.n	4078e0 <_Z16menuProcCurveOneh+0x2a0>
  40780c:	2a60      	cmp	r2, #96	; 0x60
  40780e:	d019      	beq.n	407844 <_Z16menuProcCurveOneh+0x204>
  407810:	2a44      	cmp	r2, #68	; 0x44
  407812:	f47f af45 	bne.w	4076a0 <_Z16menuProcCurveOneh+0x60>
    case EVT_KEY_FIRST(KEY_LEFT):
      if (!autoThrStep && m_posHorz>0) m_posHorz--;
      break;
    case EVT_KEY_REPT(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
  407816:	4d40      	ldr	r5, [pc, #256]	; (407918 <_Z16menuProcCurveOneh+0x2d8>)
  407818:	f895 8c36 	ldrb.w	r8, [r5, #3126]	; 0xc36
  40781c:	f1b8 0f00 	cmp.w	r8, #0
  407820:	d167      	bne.n	4078f2 <_Z16menuProcCurveOneh+0x2b2>
  407822:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  407826:	f895 1c35 	ldrb.w	r1, [r5, #3125]	; 0xc35
  40782a:	2a00      	cmp	r2, #0
  40782c:	bfc8      	it	gt
  40782e:	f109 33ff 	addgt.w	r3, r9, #4294967295
  407832:	f340 808a 	ble.w	40794a <_Z16menuProcCurveOneh+0x30a>
  407836:	428b      	cmp	r3, r1
  407838:	f77f af37 	ble.w	4076aa <_Z16menuProcCurveOneh+0x6a>
  40783c:	3101      	adds	r1, #1
  40783e:	f885 1c35 	strb.w	r1, [r5, #3125]	; 0xc35
  407842:	e732      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
    case EVT_KEY_BREAK(BTN_REb):
      if (!navigationRotaryEncoder(event))
        break;
#endif
    case EVT_KEY_FIRST(KEY_MENU):
      if (s_editMode<=0) {
  407844:	4d34      	ldr	r5, [pc, #208]	; (407918 <_Z16menuProcCurveOneh+0x2d8>)
  407846:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  40784a:	2a00      	cmp	r2, #0
  40784c:	dd6c      	ble.n	407928 <_Z16menuProcCurveOneh+0x2e8>
        switch (m_posHorz) {
          case 0:
            s_editMode = 1;
  40784e:	f895 8c36 	ldrb.w	r8, [r5, #3126]	; 0xc36
            break;
  407852:	e72a      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
    crv = g_model.curves5[s_curveChan];
  }

  switch(event) {
    case EVT_ENTRY:
      dfltCrv = 0;
  407854:	4d30      	ldr	r5, [pc, #192]	; (407918 <_Z16menuProcCurveOneh+0x2d8>)
  407856:	f04f 0800 	mov.w	r8, #0
  40785a:	f885 8c37 	strb.w	r8, [r5, #3127]	; 0xc37
      autoThrStep = 0;
  40785e:	f885 8c36 	strb.w	r8, [r5, #3126]	; 0xc36
  407862:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
#if defined(ROTARY_ENCODERS)
      s_editMode = -1;
#endif
      break;
  407866:	e720      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
      if (autoThrStep) {
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
      }
      else if (m_posHorz==i) {
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
  407868:	2205      	movs	r2, #5
  40786a:	303c      	adds	r0, #60	; 0x3c
  40786c:	313d      	adds	r1, #61	; 0x3d
  40786e:	4613      	mov	r3, r2
  407870:	f04f 0eff 	mov.w	lr, #255	; 0xff
  407874:	b2c0      	uxtb	r0, r0
  407876:	b249      	sxtb	r1, r1
  407878:	f8cd e000 	str.w	lr, [sp]
  40787c:	9701      	str	r7, [sp, #4]
  40787e:	f7fb fc6d 	bl	40315c <_Z15lcd_filled_recthahhhh>
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
  407882:	9a02      	ldr	r2, [sp, #8]
  407884:	f1a2 0e42 	sub.w	lr, r2, #66	; 0x42
  407888:	f1de 0300 	rsbs	r3, lr, #0
  40788c:	9a03      	ldr	r2, [sp, #12]
  40788e:	eb43 030e 	adc.w	r3, r3, lr
  407892:	2a01      	cmp	r2, #1
  407894:	bf98      	it	ls
  407896:	f043 0301 	orrls.w	r3, r3, #1
  40789a:	b913      	cbnz	r3, 4078a2 <_Z16menuProcCurveOneh+0x262>
  40789c:	9b02      	ldr	r3, [sp, #8]
  40789e:	2b43      	cmp	r3, #67	; 0x43
  4078a0:	d187      	bne.n	4077b2 <_Z16menuProcCurveOneh+0x172>
          CHECK_INCDEC_MODELVAR( event, crv[i], -100,100);  // edit on up/down
  4078a2:	f998 1000 	ldrsb.w	r1, [r8]
  4078a6:	9802      	ldr	r0, [sp, #8]
  4078a8:	f06f 0263 	mvn.w	r2, #99	; 0x63
  4078ac:	2364      	movs	r3, #100	; 0x64
  4078ae:	f7ff fcdb 	bl	407268 <_Z16checkIncDecModelhaaa>
  4078b2:	3401      	adds	r4, #1
  4078b4:	f888 0000 	strb.w	r0, [r8]
  4078b8:	e751      	b.n	40775e <_Z16menuProcCurveOneh+0x11e>
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;

      if (autoThrStep) {
        if (autoThrStep==i+1)
          lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
  4078ba:	23ff      	movs	r3, #255	; 0xff
  4078bc:	303c      	adds	r0, #60	; 0x3c
  4078be:	313d      	adds	r1, #61	; 0x3d
  4078c0:	f04f 0c00 	mov.w	ip, #0
  4078c4:	2205      	movs	r2, #5
  4078c6:	e88d 1008 	stmia.w	sp, {r3, ip}
  4078ca:	b249      	sxtb	r1, r1
  4078cc:	b2c0      	uxtb	r0, r0
  4078ce:	4613      	mov	r3, r2
  4078d0:	f7fb fc44 	bl	40315c <_Z15lcd_filled_recthahhhh>
  4078d4:	e743      	b.n	40775e <_Z16menuProcCurveOneh+0x11e>
  }

  lcd_putsLeft(7*FH, STR_MODE);
  lcd_putsiAtt(5*FW-2, 7*FH, STR_CURVMODES, (s_editMode<=0)*m_posHorz, s_editMode>0 || autoThrStep ? 0 : INVERS);

  if (s_editMode>0 || autoThrStep) {
  4078d6:	f1b8 0f00 	cmp.w	r8, #0
  4078da:	f47f af2c 	bne.w	407736 <_Z16menuProcCurveOneh+0xf6>
  4078de:	e76c      	b.n	4077ba <_Z16menuProcCurveOneh+0x17a>
        popMenu();
      }
      break;
    case EVT_KEY_REPT(KEY_LEFT):
    case EVT_KEY_FIRST(KEY_LEFT):
      if (!autoThrStep && m_posHorz>0) m_posHorz--;
  4078e0:	4d0d      	ldr	r5, [pc, #52]	; (407918 <_Z16menuProcCurveOneh+0x2d8>)
  4078e2:	f895 8c36 	ldrb.w	r8, [r5, #3126]	; 0xc36
  4078e6:	f1b8 0f00 	cmp.w	r8, #0
  4078ea:	d102      	bne.n	4078f2 <_Z16menuProcCurveOneh+0x2b2>
  4078ec:	f895 3c35 	ldrb.w	r3, [r5, #3125]	; 0xc35
  4078f0:	bb2b      	cbnz	r3, 40793e <_Z16menuProcCurveOneh+0x2fe>
  4078f2:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  4078f6:	e6d8      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
    case EVT_KEY_FIRST(KEY_EXIT):
      killEvents(event);
      if (autoThrStep) {
        autoThrStep = 0;
      }
      else if (s_editMode>0) {
  4078f8:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  4078fc:	2a00      	cmp	r2, #0
  4078fe:	dd3e      	ble.n	40797e <_Z16menuProcCurveOneh+0x33e>
        m_posHorz = 0;
        s_editMode = 0;
  407900:	4698      	mov	r8, r3
      killEvents(event);
      if (autoThrStep) {
        autoThrStep = 0;
      }
      else if (s_editMode>0) {
        m_posHorz = 0;
  407902:	f885 3c35 	strb.w	r3, [r5, #3125]	; 0xc35
        s_editMode = 0;
  407906:	f885 3c2c 	strb.w	r3, [r5, #3116]	; 0xc2c
  40790a:	461a      	mov	r2, r3
  40790c:	e6cd      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
  40790e:	bf00      	nop
  407910:	20000108 	.word	0x20000108
  407914:	00410904 	.word	0x00410904
  407918:	20001200 	.word	0x20001200
  40791c:	0041090c 	.word	0x0041090c
  407920:	004103ca 	.word	0x004103ca
  407924:	00400a71 	.word	0x00400a71
      if (!navigationRotaryEncoder(event))
        break;
#endif
    case EVT_KEY_FIRST(KEY_MENU):
      if (s_editMode<=0) {
        switch (m_posHorz) {
  407928:	f895 3c35 	ldrb.w	r3, [r5, #3125]	; 0xc35
  40792c:	2b01      	cmp	r3, #1
  40792e:	d02d      	beq.n	40798c <_Z16menuProcCurveOneh+0x34c>
  407930:	d216      	bcs.n	407960 <_Z16menuProcCurveOneh+0x320>
          case 0:
            s_editMode = 1;
  407932:	2201      	movs	r2, #1
  407934:	f885 2c2c 	strb.w	r2, [r5, #3116]	; 0xc2c
  407938:	f895 8c36 	ldrb.w	r8, [r5, #3126]	; 0xc36
  40793c:	e6b5      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
        popMenu();
      }
      break;
    case EVT_KEY_REPT(KEY_LEFT):
    case EVT_KEY_FIRST(KEY_LEFT):
      if (!autoThrStep && m_posHorz>0) m_posHorz--;
  40793e:	3b01      	subs	r3, #1
  407940:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  407944:	f885 3c35 	strb.w	r3, [r5, #3125]	; 0xc35
  407948:	e6af      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
      break;
    case EVT_KEY_REPT(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
  40794a:	f895 0ba4 	ldrb.w	r0, [r5, #2980]	; 0xba4
  40794e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  407952:	f8d0 4a94 	ldr.w	r4, [r0, #2708]	; 0xa94
  407956:	4826      	ldr	r0, [pc, #152]	; (4079f0 <_Z16menuProcCurveOneh+0x3b0>)
  407958:	4284      	cmp	r4, r0
  40795a:	d03d      	beq.n	4079d8 <_Z16menuProcCurveOneh+0x398>
  40795c:	2301      	movs	r3, #1
  40795e:	e76a      	b.n	407836 <_Z16menuProcCurveOneh+0x1f6>
      if (!navigationRotaryEncoder(event))
        break;
#endif
    case EVT_KEY_FIRST(KEY_MENU):
      if (s_editMode<=0) {
        switch (m_posHorz) {
  407960:	2b02      	cmp	r3, #2
  407962:	f47f af74 	bne.w	40784e <_Z16menuProcCurveOneh+0x20e>
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
              crv[i] = (i-(points/2)) * dfltCrv * 50 / (points-1);
            break;
          case 2:
            crv[0] = -100; crv[points-1] = 100;
  407966:	219c      	movs	r1, #156	; 0x9c
  407968:	7031      	strb	r1, [r6, #0]
            autoThrStep = 1; // the lowest point first
  40796a:	f04f 0801 	mov.w	r8, #1
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
              crv[i] = (i-(points/2)) * dfltCrv * 50 / (points-1);
            break;
          case 2:
            crv[0] = -100; crv[points-1] = 100;
  40796e:	eb06 0309 	add.w	r3, r6, r9
  407972:	2164      	movs	r1, #100	; 0x64
            autoThrStep = 1; // the lowest point first
  407974:	f885 8c36 	strb.w	r8, [r5, #3126]	; 0xc36
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
              crv[i] = (i-(points/2)) * dfltCrv * 50 / (points-1);
            break;
          case 2:
            crv[0] = -100; crv[points-1] = 100;
  407978:	f803 1c01 	strb.w	r1, [r3, #-1]
            autoThrStep = 1; // the lowest point first
            // s_autoThrValue =
            break;
  40797c:	e695      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
      else if (s_editMode>0) {
        m_posHorz = 0;
        s_editMode = 0;
      }
      else {
        popMenu();
  40797e:	f7ff fe3b 	bl	4075f8 <_Z7popMenuv>
  407982:	f895 8c36 	ldrb.w	r8, [r5, #3126]	; 0xc36
  407986:	f995 2c2c 	ldrsb.w	r2, [r5, #3116]	; 0xc2c
  40798a:	e68e      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
        switch (m_posHorz) {
          case 0:
            s_editMode = 1;
            break;
          case 1:
            if (++dfltCrv > 4)
  40798c:	f895 3c37 	ldrb.w	r3, [r5, #3127]	; 0xc37
  407990:	3301      	adds	r3, #1
  407992:	b2db      	uxtb	r3, r3
  407994:	b25f      	sxtb	r7, r3
  407996:	2f04      	cmp	r7, #4
  407998:	f885 3c37 	strb.w	r3, [r5, #3127]	; 0xc37
  40799c:	dd04      	ble.n	4079a8 <_Z16menuProcCurveOneh+0x368>
              dfltCrv = -4;
  40799e:	23fc      	movs	r3, #252	; 0xfc
  4079a0:	f885 3c37 	strb.w	r3, [r5, #3127]	; 0xc37
  4079a4:	f06f 0703 	mvn.w	r7, #3
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    lcd_plot(X0+xv, yv, BLACK);
  }
}

void menuProcCurveOne(uint8_t event)
  4079a8:	ea4f 0159 	mov.w	r1, r9, lsr #1
  4079ac:	4249      	negs	r1, r1
  4079ae:	fb07 f101 	mul.w	r1, r7, r1
  4079b2:	2332      	movs	r3, #50	; 0x32
  4079b4:	fb03 f707 	mul.w	r7, r3, r7
  4079b8:	fb03 f101 	mul.w	r1, r3, r1
          case 0:
            s_editMode = 1;
            break;
          case 1:
            if (++dfltCrv > 4)
              dfltCrv = -4;
  4079bc:	f109 34ff 	add.w	r4, r9, #4294967295
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    lcd_plot(X0+xv, yv, BLACK);
  }
}

void menuProcCurveOne(uint8_t event)
  4079c0:	2300      	movs	r3, #0
            break;
          case 1:
            if (++dfltCrv > 4)
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
              crv[i] = (i-(points/2)) * dfltCrv * 50 / (points-1);
  4079c2:	fb91 f0f4 	sdiv	r0, r1, r4
  4079c6:	54f0      	strb	r0, [r6, r3]
  4079c8:	3301      	adds	r3, #1
            s_editMode = 1;
            break;
          case 1:
            if (++dfltCrv > 4)
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
  4079ca:	b2d8      	uxtb	r0, r3
  4079cc:	4581      	cmp	r9, r0
              crv[i] = (i-(points/2)) * dfltCrv * 50 / (points-1);
  4079ce:	4439      	add	r1, r7
            s_editMode = 1;
            break;
          case 1:
            if (++dfltCrv > 4)
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
  4079d0:	d8f7      	bhi.n	4079c2 <_Z16menuProcCurveOneh+0x382>
#endif
    case EVT_KEY_FIRST(KEY_MENU):
      if (s_editMode<=0) {
        switch (m_posHorz) {
          case 0:
            s_editMode = 1;
  4079d2:	f895 8c36 	ldrb.w	r8, [r5, #3126]	; 0xc36
  4079d6:	e668      	b.n	4076aa <_Z16menuProcCurveOneh+0x6a>
  return &g_model.phaseData[idx];
}

ExpoData *expoaddress(uint8_t idx )
{
  return &g_model.expoData[idx];
  4079d8:	f895 0af8 	ldrb.w	r0, [r5, #2808]	; 0xaf8
    case EVT_KEY_FIRST(KEY_LEFT):
      if (!autoThrStep && m_posHorz>0) m_posHorz--;
      break;
    case EVT_KEY_REPT(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (!autoThrStep && m_posHorz<((s_editMode>0) ? points-1 : ((g_menuStack[g_menuStackPtr-1] == menuProcExpoOne && expoaddress(s_currIdx)->chn == THR_STICK) ? 2 : 1))) m_posHorz++;
  4079dc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4079e0:	181b      	adds	r3, r3, r0
  4079e2:	f893 3476 	ldrb.w	r3, [r3, #1142]	; 0x476
  4079e6:	2b02      	cmp	r3, #2
  4079e8:	bf18      	it	ne
  4079ea:	2301      	movne	r3, #1
  4079ec:	e723      	b.n	407836 <_Z16menuProcCurveOneh+0x1f6>
  4079ee:	bf00      	nop
  4079f0:	0040b225 	.word	0x0040b225

004079f4 <_Z6perOuth>:
    }
  }
}

void perOut(uint8_t phase)
{
  4079f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s_perOut_flight_phase = phase;
#endif

  BeepANACenter anaCenter = evalSticks(phase);

  if (s_perout_mode == e_perout_mode_normal) {
  4079f8:	4ca7      	ldr	r4, [pc, #668]	; (407c98 <_Z6perOuth+0x2a4>)
    }
  }
}

void perOut(uint8_t phase)
{
  4079fa:	b087      	sub	sp, #28
  4079fc:	9001      	str	r0, [sp, #4]
#if defined(PCBV4)
  s_perOut_flight_phase = phase;
#endif

  BeepANACenter anaCenter = evalSticks(phase);
  4079fe:	f7fd fa75 	bl	404eec <_Z10evalSticksh>

  if (s_perout_mode == e_perout_mode_normal) {
  407a02:	f894 3afc 	ldrb.w	r3, [r4, #2812]	; 0xafc
  407a06:	b9c3      	cbnz	r3, 407a3a <_Z6perOuth+0x46>
    //===========BEEP CENTER================
    anaCenter &= g_model.beepANACenter;
  407a08:	4da4      	ldr	r5, [pc, #656]	; (407c9c <_Z6perOuth+0x2a8>)
    if(((bpanaCenter ^ anaCenter) & anaCenter)) AUDIO_POT_STICK_MIDDLE();
  407a0a:	f8b4 3afa 	ldrh.w	r3, [r4, #2810]	; 0xafa

  BeepANACenter anaCenter = evalSticks(phase);

  if (s_perout_mode == e_perout_mode_normal) {
    //===========BEEP CENTER================
    anaCenter &= g_model.beepANACenter;
  407a0e:	f895 214f 	ldrb.w	r2, [r5, #335]	; 0x14f
  407a12:	f895 6150 	ldrb.w	r6, [r5, #336]	; 0x150
  407a16:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  407a1a:	4006      	ands	r6, r0
    if(((bpanaCenter ^ anaCenter) & anaCenter)) AUDIO_POT_STICK_MIDDLE();
  407a1c:	ea36 0303 	bics.w	r3, r6, r3
  407a20:	f040 8272 	bne.w	407f08 <_Z6perOuth+0x514>
          break;
      }
    }
#endif

    s_trimPtr[0] = NULL;
  407a24:	2300      	movs	r3, #0

  if (s_perout_mode == e_perout_mode_normal) {
    //===========BEEP CENTER================
    anaCenter &= g_model.beepANACenter;
    if(((bpanaCenter ^ anaCenter) & anaCenter)) AUDIO_POT_STICK_MIDDLE();
    bpanaCenter = anaCenter;
  407a26:	f8a4 6afa 	strh.w	r6, [r4, #2810]	; 0xafa
          break;
      }
    }
#endif

    s_trimPtr[0] = NULL;
  407a2a:	f8c5 3998 	str.w	r3, [r5, #2456]	; 0x998
    s_trimPtr[1] = NULL;
  407a2e:	f8c5 399c 	str.w	r3, [r5, #2460]	; 0x99c
    s_trimPtr[2] = NULL;
  407a32:	f8c5 39a0 	str.w	r3, [r5, #2464]	; 0x9a0
    s_trimPtr[3] = NULL;
  407a36:	f8c5 39a4 	str.w	r3, [r5, #2468]	; 0x9a4
  }

  memset(chans, 0, sizeof(chans));        // All outputs to 0
  407a3a:	2280      	movs	r2, #128	; 0x80
  407a3c:	4898      	ldr	r0, [pc, #608]	; (407ca0 <_Z6perOuth+0x2ac>)
  407a3e:	2100      	movs	r1, #0
  407a40:	f007 fd08 	bl	40f454 <memset>
    switch(md->mltpx){
      case MLTPX_REP:
        *ptr = dv;
        break;
      case MLTPX_MUL:
        dv /= 100;
  407a44:	f248 521f 	movw	r2, #34079	; 0x851f
  }

  memset(chans, 0, sizeof(chans));        // All outputs to 0

  //========== MIXER LOOP ===============
  mixWarning = 0; // TODO should be in a local variable on stack
  407a48:	2300      	movs	r3, #0
    switch(md->mltpx){
      case MLTPX_REP:
        *ptr = dv;
        break;
      case MLTPX_MUL:
        dv /= 100;
  407a4a:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
  407a4e:	f8df b25c 	ldr.w	fp, [pc, #604]	; 407cac <_Z6perOuth+0x2b8>
  }

  memset(chans, 0, sizeof(chans));        // All outputs to 0

  //========== MIXER LOOP ===============
  mixWarning = 0; // TODO should be in a local variable on stack
  407a52:	4698      	mov	r8, r3
  407a54:	f884 3b9c 	strb.w	r3, [r4, #2972]	; 0xb9c
  407a58:	4699      	mov	r9, r3
  407a5a:	461e      	mov	r6, r3
    switch(md->mltpx){
      case MLTPX_REP:
        *ptr = dv;
        break;
      case MLTPX_MUL:
        dv /= 100;
  407a5c:	9202      	str	r2, [sp, #8]
  407a5e:	e00f      	b.n	407a80 <_Z6perOuth+0x8c>
    MixData *md = mixaddress( i ) ;

    if (md->srcRaw==0) break;

    if (md->phase != 0) {
      if (md->phase > 0) {
  407a60:	b25b      	sxtb	r3, r3
  407a62:	2b00      	cmp	r3, #0
  407a64:	f340 8112 	ble.w	407c8c <_Z6perOuth+0x298>
        if (phase+1 != md->phase)
  407a68:	9801      	ldr	r0, [sp, #4]
  407a6a:	1c42      	adds	r2, r0, #1
  407a6c:	429a      	cmp	r2, r3
  407a6e:	d013      	beq.n	407a98 <_Z6perOuth+0xa4>
        dv /= RESXl;
        *ptr = dv;
        break;
      default:  // MLTPX_ADD
        *ptr += dv; //Mixer output add up to the line (dv + (dv>0 ? 100/2 : -100/2))/(100);
        break;
  407a70:	3601      	adds	r6, #1

  memset(chans, 0, sizeof(chans));        // All outputs to 0

  //========== MIXER LOOP ===============
  mixWarning = 0; // TODO should be in a local variable on stack
  for (uint8_t i=0; i<MAX_MIXERS; i++) {
  407a72:	2e40      	cmp	r6, #64	; 0x40
        dv /= RESXl;
        *ptr = dv;
        break;
      default:  // MLTPX_ADD
        *ptr += dv; //Mixer output add up to the line (dv + (dv>0 ? 100/2 : -100/2))/(100);
        break;
  407a74:	f109 0904 	add.w	r9, r9, #4
  407a78:	f108 0802 	add.w	r8, r8, #2

  memset(chans, 0, sizeof(chans));        // All outputs to 0

  //========== MIXER LOOP ===============
  mixWarning = 0; // TODO should be in a local variable on stack
  for (uint8_t i=0; i<MAX_MIXERS; i++) {
  407a7c:	f000 80c9 	beq.w	407c12 <_Z6perOuth+0x21e>

    MixData *md = mixaddress( i ) ;
  407a80:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
  407a84:	3710      	adds	r7, #16
  407a86:	445f      	add	r7, fp
  407a88:	1d7d      	adds	r5, r7, #5

    if (md->srcRaw==0) break;
  407a8a:	7aeb      	ldrb	r3, [r5, #11]
  407a8c:	2b00      	cmp	r3, #0
  407a8e:	f000 80c0 	beq.w	407c12 <_Z6perOuth+0x21e>

    if (md->phase != 0) {
  407a92:	786b      	ldrb	r3, [r5, #1]
  407a94:	2b00      	cmp	r3, #0
  407a96:	d1e3      	bne.n	407a60 <_Z6perOuth+0x6c>
          continue;
      }
    }

    //========== SWITCH ===============
    bool sw = getSwitch(md->swtch, 1);
  407a98:	2101      	movs	r1, #1
  407a9a:	f995 0003 	ldrsb.w	r0, [r5, #3]
  407a9e:	f7fd f8d7 	bl	404c50 <_Z9getSwitchab>

    //========== VALUE ===============
    //Notice 0 = NC switch means not used -> always on line
    uint8_t k = md->srcRaw-1;
  407aa2:	7aea      	ldrb	r2, [r5, #11]
    int16_t v = 0;
    if (s_perout_mode != e_perout_mode_normal) {
  407aa4:	f894 1afc 	ldrb.w	r1, [r4, #2812]	; 0xafc
    //========== SWITCH ===============
    bool sw = getSwitch(md->swtch, 1);

    //========== VALUE ===============
    //Notice 0 = NC switch means not used -> always on line
    uint8_t k = md->srcRaw-1;
  407aa8:	f102 3aff 	add.w	sl, r2, #4294967295
          continue;
      }
    }

    //========== SWITCH ===============
    bool sw = getSwitch(md->swtch, 1);
  407aac:	4603      	mov	r3, r0

    //========== VALUE ===============
    //Notice 0 = NC switch means not used -> always on line
    uint8_t k = md->srcRaw-1;
  407aae:	fa5f fa8a 	uxtb.w	sl, sl
    int16_t v = 0;
    if (s_perout_mode != e_perout_mode_normal) {
  407ab2:	2900      	cmp	r1, #0
  407ab4:	f000 80b9 	beq.w	407c2a <_Z6perOuth+0x236>
      if (!sw || k >= NUM_STICKS || (k == THR_STICK && g_model.thrTrim))
  407ab8:	2800      	cmp	r0, #0
  407aba:	d0d9      	beq.n	407a70 <_Z6perOuth+0x7c>
  407abc:	f1ba 0f03 	cmp.w	sl, #3
  407ac0:	d8d6      	bhi.n	407a70 <_Z6perOuth+0x7c>
  407ac2:	f1ba 0f02 	cmp.w	sl, #2
  407ac6:	f000 81f9 	beq.w	407ebc <_Z6perOuth+0x4c8>
  407aca:	f895 c004 	ldrb.w	ip, [r5, #4]
  407ace:	2000      	movs	r0, #0
        }
      }
    }

    //========== OFFSET ===============
    if (apply_offset && md->sOffset) v += calc100toRESX(md->sOffset);
  407ad0:	7bab      	ldrb	r3, [r5, #14]
  407ad2:	2b00      	cmp	r3, #0
  407ad4:	f040 80a0 	bne.w	407c18 <_Z6perOuth+0x224>

    //========== SPEED ===============
    if (s_perout_mode==e_perout_mode_normal && (md->speedUp || md->speedDown))  // there are delay values
  407ad8:	2900      	cmp	r1, #0
  407ada:	d150      	bne.n	407b7e <_Z6perOuth+0x18a>
  407adc:	7a69      	ldrb	r1, [r5, #9]
  407ade:	9103      	str	r1, [sp, #12]
  407ae0:	b911      	cbnz	r1, 407ae8 <_Z6perOuth+0xf4>
  407ae2:	7aab      	ldrb	r3, [r5, #10]
  407ae4:	2b00      	cmp	r3, #0
  407ae6:	d04a      	beq.n	407b7e <_Z6perOuth+0x18a>
    {
#define DEL_MULT 256

      int16_t diff = v-act[i]/DEL_MULT;
  407ae8:	4a6e      	ldr	r2, [pc, #440]	; (407ca4 <_Z6perOuth+0x2b0>)
  407aea:	f852 3009 	ldr.w	r3, [r2, r9]
  407aee:	f103 01ff 	add.w	r1, r3, #255	; 0xff
  407af2:	ea33 0223 	bics.w	r2, r3, r3, asr #32
  407af6:	bf28      	it	cs
  407af8:	460a      	movcs	r2, r1
  407afa:	eba0 2222 	sub.w	r2, r0, r2, asr #8
  407afe:	b292      	uxth	r2, r2
  407b00:	9204      	str	r2, [sp, #16]

      if (diff) {
  407b02:	2a00      	cmp	r2, #0
  407b04:	d03b      	beq.n	407b7e <_Z6perOuth+0x18a>
        //rate = steps/sec => 32*1024/100*md->speedUp/Down
        //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
        //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 since it's asymmetrical
        if (tick10ms) {
  407b06:	f241 2200 	movw	r2, #4608	; 0x1200
  407b0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  407b0e:	f892 2d78 	ldrb.w	r2, [r2, #3448]	; 0xd78
  407b12:	2a00      	cmp	r2, #0
  407b14:	f000 818d 	beq.w	407e32 <_Z6perOuth+0x43e>
            int32_t rate = (int32_t)DEL_MULT*2048*100;
            if(md->weight) rate /= abs(md->weight);
  407b18:	78aa      	ldrb	r2, [r5, #2]
  407b1a:	2a00      	cmp	r2, #0
  407b1c:	f000 81e5 	beq.w	407eea <_Z6perOuth+0x4f6>
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  407b20:	b252      	sxtb	r2, r2
  407b22:	2a00      	cmp	r2, #0
  407b24:	bfb8      	it	lt
  407b26:	4252      	neglt	r2, r2
  407b28:	b252      	sxtb	r2, r2
  407b2a:	f04f 7148 	mov.w	r1, #52428800	; 0x3200000
  407b2e:	fb91 f1f2 	sdiv	r1, r1, r2
            // TODO port optim er9x by Mike
            act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
  407b32:	9a04      	ldr	r2, [sp, #16]
        //rate = steps/sec => 32*1024/100*md->speedUp/Down
        //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
        //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 since it's asymmetrical
        if (tick10ms) {
            int32_t rate = (int32_t)DEL_MULT*2048*100;
            if(md->weight) rate /= abs(md->weight);
  407b34:	9105      	str	r1, [sp, #20]
            // TODO port optim er9x by Mike
            act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
  407b36:	b212      	sxth	r2, r2
  407b38:	2a00      	cmp	r2, #0
  407b3a:	9204      	str	r2, [sp, #16]
  407b3c:	f340 81de 	ble.w	407efc <_Z6perOuth+0x508>
  407b40:	9903      	ldr	r1, [sp, #12]
  407b42:	2264      	movs	r2, #100	; 0x64
  407b44:	2900      	cmp	r1, #0
  407b46:	f000 81ab 	beq.w	407ea0 <_Z6perOuth+0x4ac>
  407b4a:	fb01 f202 	mul.w	r2, r1, r2
  407b4e:	9905      	ldr	r1, [sp, #20]
  407b50:	fb91 f2f2 	sdiv	r2, r1, r2
  407b54:	189b      	adds	r3, r3, r2
  407b56:	b202      	sxth	r2, r0
  407b58:	4852      	ldr	r0, [pc, #328]	; (407ca4 <_Z6perOuth+0x2b0>)
  407b5a:	f103 01ff 	add.w	r1, r3, #255	; 0xff
  407b5e:	f840 3009 	str.w	r3, [r0, r9]
        }

        if(((diff>0) && (v<(act[i]/DEL_MULT))) || ((diff<0) && (v>(act[i]/DEL_MULT)))) act[i]=(int32_t)v*DEL_MULT; //deal with overflow
  407b62:	9804      	ldr	r0, [sp, #16]
  407b64:	ea33 0323 	bics.w	r3, r3, r3, asr #32
  407b68:	bf28      	it	cs
  407b6a:	460b      	movcs	r3, r1
  407b6c:	2800      	cmp	r0, #0
  407b6e:	ea4f 2023 	mov.w	r0, r3, asr #8
  407b72:	f300 816c 	bgt.w	407e4e <_Z6perOuth+0x45a>
  407b76:	4282      	cmp	r2, r0
  407b78:	f300 816c 	bgt.w	407e54 <_Z6perOuth+0x460>
        v = act[i]/DEL_MULT;
  407b7c:	b280      	uxth	r0, r0
      }
    }

    //========== CURVES ===============
    if (md->curve)
  407b7e:	7969      	ldrb	r1, [r5, #5]
  407b80:	b139      	cbz	r1, 407b92 <_Z6perOuth+0x19e>
      v = applyCurve(v, md->curve);
  407b82:	b200      	sxth	r0, r0
  407b84:	b249      	sxtb	r1, r1
  407b86:	f8cd c000 	str.w	ip, [sp]
  407b8a:	f7f8 ff79 	bl	400a80 <_Z10applyCurvesa>
  407b8e:	f8dd c000 	ldr.w	ip, [sp]

    //========== TRIMS ===============
    if (k < NUM_STICKS) {
  407b92:	f1ba 0f03 	cmp.w	sl, #3
  407b96:	d804      	bhi.n	407ba2 <_Z6perOuth+0x1ae>
      if (s_perout_mode < e_perout_mode_zeros && md->carryTrim == TRIM_ON) {
  407b98:	f894 3afc 	ldrb.w	r3, [r4, #2812]	; 0xafc
  407b9c:	2b01      	cmp	r3, #1
  407b9e:	f240 812b 	bls.w	407df8 <_Z6perOuth+0x404>
        s_trimPtr[k] = &md->sOffset;  // use the value stored here for the trim
      }
    }

    //========== MULTIPLEX ===============
    int32_t dv = (int32_t)v*md->weight;
  407ba2:	f995 3002 	ldrsb.w	r3, [r5, #2]
  407ba6:	b200      	sxth	r0, r0

    int8_t differential = md->differential;
  407ba8:	7b2a      	ldrb	r2, [r5, #12]
        s_trimPtr[k] = &md->sOffset;  // use the value stored here for the trim
      }
    }

    //========== MULTIPLEX ===============
    int32_t dv = (int32_t)v*md->weight;
  407baa:	fb03 f000 	mul.w	r0, r3, r0

    int8_t differential = md->differential;
    if (differential>0 && dv<0)
  407bae:	b253      	sxtb	r3, r2
  407bb0:	2b00      	cmp	r3, #0
  407bb2:	bfd4      	ite	le
  407bb4:	2100      	movle	r1, #0
  407bb6:	2101      	movgt	r1, #1
  407bb8:	ea11 71d0 	ands.w	r1, r1, r0, lsr #31
      dv = (dv * (50-differential)) / 50;
  407bbc:	bf18      	it	ne
  407bbe:	f1c3 0332 	rsbne	r3, r3, #50	; 0x32

    //========== MULTIPLEX ===============
    int32_t dv = (int32_t)v*md->weight;

    int8_t differential = md->differential;
    if (differential>0 && dv<0)
  407bc2:	d107      	bne.n	407bd4 <_Z6perOuth+0x1e0>
      dv = (dv * (50-differential)) / 50;
    else if (differential<0 && dv>0)
  407bc4:	09d2      	lsrs	r2, r2, #7
  407bc6:	2800      	cmp	r0, #0
  407bc8:	bfd4      	ite	le
  407bca:	2200      	movle	r2, #0
  407bcc:	f002 0201 	andgt.w	r2, r2, #1
  407bd0:	b142      	cbz	r2, 407be4 <_Z6perOuth+0x1f0>
      dv = (dv * (50+differential)) / 50;
  407bd2:	3332      	adds	r3, #50	; 0x32
  407bd4:	fb00 f003 	mul.w	r0, r0, r3
  407bd8:	9a02      	ldr	r2, [sp, #8]
  407bda:	fb82 2300 	smull	r2, r3, r2, r0
  407bde:	17c0      	asrs	r0, r0, #31
  407be0:	ebc0 1023 	rsb	r0, r0, r3, asr #4

    int32_t *ptr = &chans[md->destCh]; // Save calculating address several times
    switch(md->mltpx){
  407be4:	f1bc 0f01 	cmp.w	ip, #1
    if (differential>0 && dv<0)
      dv = (dv * (50-differential)) / 50;
    else if (differential<0 && dv>0)
      dv = (dv * (50+differential)) / 50;

    int32_t *ptr = &chans[md->destCh]; // Save calculating address several times
  407be8:	797b      	ldrb	r3, [r7, #5]
    switch(md->mltpx){
  407bea:	f000 80c3 	beq.w	407d74 <_Z6perOuth+0x380>
  407bee:	f1bc 0f02 	cmp.w	ip, #2
      case MLTPX_REP:
        *ptr = dv;
  407bf2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
      dv = (dv * (50-differential)) / 50;
    else if (differential<0 && dv>0)
      dv = (dv * (50+differential)) / 50;

    int32_t *ptr = &chans[md->destCh]; // Save calculating address several times
    switch(md->mltpx){
  407bf6:	d002      	beq.n	407bfe <_Z6perOuth+0x20a>
        dv *= *ptr;
        dv /= RESXl;
        *ptr = dv;
        break;
      default:  // MLTPX_ADD
        *ptr += dv; //Mixer output add up to the line (dv + (dv>0 ? 100/2 : -100/2))/(100);
  407bf8:	f8d3 2c38 	ldr.w	r2, [r3, #3128]	; 0xc38
  407bfc:	1810      	adds	r0, r2, r0
        break;
  407bfe:	3601      	adds	r6, #1

  memset(chans, 0, sizeof(chans));        // All outputs to 0

  //========== MIXER LOOP ===============
  mixWarning = 0; // TODO should be in a local variable on stack
  for (uint8_t i=0; i<MAX_MIXERS; i++) {
  407c00:	2e40      	cmp	r6, #64	; 0x40
        dv *= *ptr;
        dv /= RESXl;
        *ptr = dv;
        break;
      default:  // MLTPX_ADD
        *ptr += dv; //Mixer output add up to the line (dv + (dv>0 ? 100/2 : -100/2))/(100);
  407c02:	f8c3 0c38 	str.w	r0, [r3, #3128]	; 0xc38
        break;
  407c06:	f109 0904 	add.w	r9, r9, #4
  407c0a:	f108 0802 	add.w	r8, r8, #2

  memset(chans, 0, sizeof(chans));        // All outputs to 0

  //========== MIXER LOOP ===============
  mixWarning = 0; // TODO should be in a local variable on stack
  for (uint8_t i=0; i<MAX_MIXERS; i++) {
  407c0e:	f47f af37 	bne.w	407a80 <_Z6perOuth+0x8c>
      default:  // MLTPX_ADD
        *ptr += dv; //Mixer output add up to the line (dv + (dv>0 ? 100/2 : -100/2))/(100);
        break;
      }
  }
}
  407c12:	b007      	add	sp, #28
  407c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void resetProto();

#if defined(PCBARM)
inline int32_t calc100toRESX(register int8_t x)
{
  return ((uint32_t)x*655)>>6 ;
  407c18:	b25b      	sxtb	r3, r3
  407c1a:	f240 228f 	movw	r2, #655	; 0x28f
  407c1e:	fb02 f303 	mul.w	r3, r2, r3
        }
      }
    }

    //========== OFFSET ===============
    if (apply_offset && md->sOffset) v += calc100toRESX(md->sOffset);
  407c22:	eb00 1093 	add.w	r0, r0, r3, lsr #6
  407c26:	b280      	uxth	r0, r0
  407c28:	e756      	b.n	407ad8 <_Z6perOuth+0xe4>
    if (s_perout_mode != e_perout_mode_normal) {
      if (!sw || k >= NUM_STICKS || (k == THR_STICK && g_model.thrTrim))
        continue;
    }
    else {
      if (k < NUM_STICKS)
  407c2a:	f1ba 0f03 	cmp.w	sl, #3
  407c2e:	d83f      	bhi.n	407cb0 <_Z6perOuth+0x2bc>
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
  407c30:	f241 2000 	movw	r0, #4608	; 0x1200
  407c34:	f2c2 0000 	movt	r0, #8192	; 0x2000
  407c38:	eb00 024a 	add.w	r2, r0, sl, lsl #1
  407c3c:	f8b2 0b00 	ldrh.w	r0, [r2, #2816]	; 0xb00
    }

    //========== DELAYS ===============
    uint8_t swTog;
    bool apply_offset = true;
    if (sw) { // switch on?  (if no switch selected => on)
  407c40:	2b00      	cmp	r3, #0
  407c42:	d152      	bne.n	407cea <_Z6perOuth+0x2f6>
        if (md->mixWarn) mixWarning |= 1<<(md->mixWarn-1); // Mix warning
      }
    }
    else {
      bool has_delay = false;
      swTog = swOn[i];
  407c44:	4b18      	ldr	r3, [pc, #96]	; (407ca8 <_Z6perOuth+0x2b4>)
      swOn[i] = false;
      if (md->delayDown) {
  407c46:	7a2a      	ldrb	r2, [r5, #8]
      }
    }
    else {
      bool has_delay = false;
      swTog = swOn[i];
      swOn[i] = false;
  407c48:	f04f 0c00 	mov.w	ip, #0
        if (md->mixWarn) mixWarning |= 1<<(md->mixWarn-1); // Mix warning
      }
    }
    else {
      bool has_delay = false;
      swTog = swOn[i];
  407c4c:	5cf1      	ldrb	r1, [r6, r3]
      swOn[i] = false;
  407c4e:	f806 c003 	strb.w	ip, [r6, r3]
      if (md->delayDown) {
  407c52:	2a00      	cmp	r2, #0
  407c54:	f000 80ab 	beq.w	407dae <_Z6perOuth+0x3ba>
        if (swTog) {
  407c58:	2900      	cmp	r1, #0
  407c5a:	f040 80b9 	bne.w	407dd0 <_Z6perOuth+0x3dc>
  407c5e:	3340      	adds	r3, #64	; 0x40
  407c60:	f833 2008 	ldrh.w	r2, [r3, r8]
          sDelay[i] = md->delayDown * 100;
        }
        if (sDelay[i]) { // perform delay
  407c64:	2a00      	cmp	r2, #0
  407c66:	f000 809c 	beq.w	407da2 <_Z6perOuth+0x3ae>
          if(tick10ms) sDelay[i]--;
  407c6a:	f894 1d78 	ldrb.w	r1, [r4, #3448]	; 0xd78
  407c6e:	b111      	cbz	r1, 407c76 <_Z6perOuth+0x282>
  407c70:	3a01      	subs	r2, #1
  407c72:	f823 2008 	strh.w	r2, [r3, r8]
          if (!md->swtch) v = +1024;
  407c76:	f995 3003 	ldrsb.w	r3, [r5, #3]
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
      else if (k>=MIXSRC_CH1-1 && k<=MIXSRC_CH16-1 && k-MIXSRC_CH1+1<md->destCh) // if we've already calculated the value - take it instead
        v = chans[k-MIXSRC_CH1+1] / 100;
      else if (k>=MIXSRC_THR-1 && k<=MIXSRC_SWC-1) {
        v = getSwitch(k-MIXSRC_THR+1+1, 0) ? +1024 : -1024;
        if (v<0 && !md->swtch)
  407c7a:	f894 1afc 	ldrb.w	r1, [r4, #2812]	; 0xafc
        if (swTog) {
          sDelay[i] = md->delayDown * 100;
        }
        if (sDelay[i]) { // perform delay
          if(tick10ms) sDelay[i]--;
          if (!md->swtch) v = +1024;
  407c7e:	2b00      	cmp	r3, #0
  407c80:	bf08      	it	eq
  407c82:	f44f 6080 	moveq.w	r0, #1024	; 0x400
  407c86:	f895 c004 	ldrb.w	ip, [r5, #4]
  407c8a:	e721      	b.n	407ad0 <_Z6perOuth+0xdc>
      if (md->phase > 0) {
        if (phase+1 != md->phase)
          continue;
      }
      else {
        if (phase+1 == -md->phase)
  407c8c:	9901      	ldr	r1, [sp, #4]
  407c8e:	1c4a      	adds	r2, r1, #1
  407c90:	42da      	cmn	r2, r3
  407c92:	f47f af01 	bne.w	407a98 <_Z6perOuth+0xa4>
  407c96:	e6eb      	b.n	407a70 <_Z6perOuth+0x7c>
  407c98:	20001200 	.word	0x20001200
  407c9c:	20000108 	.word	0x20000108
  407ca0:	20001e38 	.word	0x20001e38
  407ca4:	20001f7c 	.word	0x20001f7c
  407ca8:	20001eb8 	.word	0x20001eb8
  407cac:	20000244 	.word	0x20000244
        continue;
    }
    else {
      if (k < NUM_STICKS)
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
      else if (k>=MIXSRC_CH1-1 && k<=MIXSRC_CH16-1 && k-MIXSRC_CH1+1<md->destCh) // if we've already calculated the value - take it instead
  407cb0:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
  407cb4:	fa5f fc8c 	uxtb.w	ip, ip
  407cb8:	f1bc 0f0f 	cmp.w	ip, #15
  407cbc:	d84a      	bhi.n	407d54 <_Z6perOuth+0x360>
  407cbe:	7979      	ldrb	r1, [r7, #5]
  407cc0:	f1aa 0028 	sub.w	r0, sl, #40	; 0x28
  407cc4:	4288      	cmp	r0, r1
  407cc6:	dc45      	bgt.n	407d54 <_Z6perOuth+0x360>
        v = chans[k-MIXSRC_CH1+1] / 100;
  407cc8:	f241 2100 	movw	r1, #4608	; 0x1200
  407ccc:	f2c2 0100 	movt	r1, #8192	; 0x2000
  407cd0:	eb01 028a 	add.w	r2, r1, sl, lsl #2
  407cd4:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
  407cd8:	9802      	ldr	r0, [sp, #8]
  407cda:	fb80 0102 	smull	r0, r1, r0, r2
  407cde:	17d2      	asrs	r2, r2, #31
  407ce0:	ebc2 1261 	rsb	r2, r2, r1, asr #5
  407ce4:	b290      	uxth	r0, r2
    }

    //========== DELAYS ===============
    uint8_t swTog;
    bool apply_offset = true;
    if (sw) { // switch on?  (if no switch selected => on)
  407ce6:	2b00      	cmp	r3, #0
  407ce8:	d0ac      	beq.n	407c44 <_Z6perOuth+0x250>
      swTog = !swOn[i];
  407cea:	f8df c228 	ldr.w	ip, [pc, #552]	; 407f14 <_Z6perOuth+0x520>
      if (s_perout_mode == e_perout_mode_normal) {
  407cee:	f894 1afc 	ldrb.w	r1, [r4, #2812]	; 0xafc

    //========== DELAYS ===============
    uint8_t swTog;
    bool apply_offset = true;
    if (sw) { // switch on?  (if no switch selected => on)
      swTog = !swOn[i];
  407cf2:	f816 200c 	ldrb.w	r2, [r6, ip]
  407cf6:	9203      	str	r2, [sp, #12]
      if (s_perout_mode == e_perout_mode_normal) {
  407cf8:	2900      	cmp	r1, #0
  407cfa:	d1c4      	bne.n	407c86 <_Z6perOuth+0x292>
        swOn[i] = true;
        if (md->delayUp) {
  407cfc:	79eb      	ldrb	r3, [r5, #7]
    uint8_t swTog;
    bool apply_offset = true;
    if (sw) { // switch on?  (if no switch selected => on)
      swTog = !swOn[i];
      if (s_perout_mode == e_perout_mode_normal) {
        swOn[i] = true;
  407cfe:	2201      	movs	r2, #1
  407d00:	f806 200c 	strb.w	r2, [r6, ip]
        if (md->delayUp) {
  407d04:	b1c3      	cbz	r3, 407d38 <_Z6perOuth+0x344>
          if (swTog) {
  407d06:	9a03      	ldr	r2, [sp, #12]
  407d08:	2a00      	cmp	r2, #0
  407d0a:	f000 80b0 	beq.w	407e6e <_Z6perOuth+0x47a>
  407d0e:	f10c 0340 	add.w	r3, ip, #64	; 0x40
  407d12:	f833 2008 	ldrh.w	r2, [r3, r8]
  407d16:	9203      	str	r2, [sp, #12]
            sDelay[i] = md->delayUp * 100;
          }
          if (sDelay[i]) { // perform delay
  407d18:	9a03      	ldr	r2, [sp, #12]
  407d1a:	b16a      	cbz	r2, 407d38 <_Z6perOuth+0x344>
            if(tick10ms) sDelay[i]--;
  407d1c:	f894 2d78 	ldrb.w	r2, [r4, #3448]	; 0xd78
  407d20:	b11a      	cbz	r2, 407d2a <_Z6perOuth+0x336>
  407d22:	9803      	ldr	r0, [sp, #12]
  407d24:	1e42      	subs	r2, r0, #1
  407d26:	f823 2008 	strh.w	r2, [r3, r8]
            if (!md->swtch) {
  407d2a:	f995 3003 	ldrsb.w	r3, [r5, #3]
  407d2e:	2b00      	cmp	r3, #0
  407d30:	f47f ae9e 	bne.w	407a70 <_Z6perOuth+0x7c>
              v = -1024;
  407d34:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
            else {
              continue;
            }
          }
        }
        if (md->mixWarn) mixWarning |= 1<<(md->mixWarn-1); // Mix warning
  407d38:	79ab      	ldrb	r3, [r5, #6]
  407d3a:	2b00      	cmp	r3, #0
  407d3c:	d0a3      	beq.n	407c86 <_Z6perOuth+0x292>
  407d3e:	3b01      	subs	r3, #1
  407d40:	2201      	movs	r2, #1
  407d42:	409a      	lsls	r2, r3
  407d44:	f894 3b9c 	ldrb.w	r3, [r4, #2972]	; 0xb9c
  407d48:	f895 c004 	ldrb.w	ip, [r5, #4]
  407d4c:	4313      	orrs	r3, r2
  407d4e:	f884 3b9c 	strb.w	r3, [r4, #2972]	; 0xb9c
  407d52:	e6bd      	b.n	407ad0 <_Z6perOuth+0xdc>
    else {
      if (k < NUM_STICKS)
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
      else if (k>=MIXSRC_CH1-1 && k<=MIXSRC_CH16-1 && k-MIXSRC_CH1+1<md->destCh) // if we've already calculated the value - take it instead
        v = chans[k-MIXSRC_CH1+1] / 100;
      else if (k>=MIXSRC_THR-1 && k<=MIXSRC_SWC-1) {
  407d54:	f1a2 010a 	sub.w	r1, r2, #10
  407d58:	b2c9      	uxtb	r1, r1
  407d5a:	2914      	cmp	r1, #20
  407d5c:	f240 80a3 	bls.w	407ea6 <_Z6perOuth+0x4b2>
        v = getSwitch(k-MIXSRC_THR+1+1, 0) ? +1024 : -1024;
        if (v<0 && !md->swtch)
          sw = false;
      }
      else {
        v = getValue(k <= MIXSRC_3POS ? k : k-MAX_SWITCH);
  407d60:	f1ba 0f09 	cmp.w	sl, #9
  407d64:	bf98      	it	ls
  407d66:	46d4      	movls	ip, sl
  407d68:	4660      	mov	r0, ip
  407d6a:	9300      	str	r3, [sp, #0]
  407d6c:	f7f8 ff82 	bl	400c74 <_Z8getValueh>
  407d70:	9b00      	ldr	r3, [sp, #0]
  407d72:	e765      	b.n	407c40 <_Z6perOuth+0x24c>
    switch(md->mltpx){
      case MLTPX_REP:
        *ptr = dv;
        break;
      case MLTPX_MUL:
        dv /= 100;
  407d74:	9a02      	ldr	r2, [sp, #8]
        dv *= *ptr;
  407d76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    switch(md->mltpx){
      case MLTPX_REP:
        *ptr = dv;
        break;
      case MLTPX_MUL:
        dv /= 100;
  407d7a:	fb82 2100 	smull	r2, r1, r2, r0
        dv *= *ptr;
  407d7e:	f8d3 2c38 	ldr.w	r2, [r3, #3128]	; 0xc38
    switch(md->mltpx){
      case MLTPX_REP:
        *ptr = dv;
        break;
      case MLTPX_MUL:
        dv /= 100;
  407d82:	17c0      	asrs	r0, r0, #31
  407d84:	ebc0 1061 	rsb	r0, r0, r1, asr #5
        dv *= *ptr;
  407d88:	fb02 f000 	mul.w	r0, r2, r0
        dv /= RESXl;
  407d8c:	f500 727e 	add.w	r2, r0, #1016	; 0x3f8
  407d90:	3207      	adds	r2, #7
  407d92:	ea12 0220 	ands.w	r2, r2, r0, asr #32
  407d96:	bf38      	it	cc
  407d98:	4602      	movcc	r2, r0
  407d9a:	1292      	asrs	r2, r2, #10
        *ptr = dv;
  407d9c:	f8c3 2c38 	str.w	r2, [r3, #3128]	; 0xc38
        break;
  407da0:	e666      	b.n	407a70 <_Z6perOuth+0x7c>
        if (sDelay[i]) { // perform delay
          if(tick10ms) sDelay[i]--;
          if (!md->swtch) v = +1024;
          has_delay = true;
        }
        else if (!md->swtch) {
  407da2:	f995 3003 	ldrsb.w	r3, [r5, #3]
          v = -1024;
  407da6:	2b00      	cmp	r3, #0
  407da8:	bf08      	it	eq
  407daa:	f44f 407c 	moveq.w	r0, #64512	; 0xfc00
        }
      }
      if (!has_delay) {
        if (md->speedDown) {
  407dae:	7aab      	ldrb	r3, [r5, #10]
  407db0:	b1c3      	cbz	r3, 407de4 <_Z6perOuth+0x3f0>
          if (md->mltpx==MLTPX_REP) continue;
  407db2:	f895 c004 	ldrb.w	ip, [r5, #4]
  407db6:	f1bc 0f02 	cmp.w	ip, #2
  407dba:	f43f ae59 	beq.w	407a70 <_Z6perOuth+0x7c>
          if (md->swtch) { v = 0; apply_offset = false; }
  407dbe:	f995 3003 	ldrsb.w	r3, [r5, #3]
  407dc2:	f894 1afc 	ldrb.w	r1, [r4, #2812]	; 0xafc
  407dc6:	2b00      	cmp	r3, #0
  407dc8:	f43f ae82 	beq.w	407ad0 <_Z6perOuth+0xdc>
  407dcc:	2000      	movs	r0, #0
  407dce:	e683      	b.n	407ad8 <_Z6perOuth+0xe4>
      bool has_delay = false;
      swTog = swOn[i];
      swOn[i] = false;
      if (md->delayDown) {
        if (swTog) {
          sDelay[i] = md->delayDown * 100;
  407dd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  407dd4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  407dd8:	0092      	lsls	r2, r2, #2
  407dda:	b292      	uxth	r2, r2
  407ddc:	3340      	adds	r3, #64	; 0x40
  407dde:	f823 2008 	strh.w	r2, [r3, r8]
  407de2:	e73f      	b.n	407c64 <_Z6perOuth+0x270>
      if (!has_delay) {
        if (md->speedDown) {
          if (md->mltpx==MLTPX_REP) continue;
          if (md->swtch) { v = 0; apply_offset = false; }
        }
        else if (md->swtch) {
  407de4:	f995 3003 	ldrsb.w	r3, [r5, #3]
  407de8:	2b00      	cmp	r3, #0
  407dea:	f47f ae41 	bne.w	407a70 <_Z6perOuth+0x7c>
  407dee:	f894 1afc 	ldrb.w	r1, [r4, #2812]	; 0xafc
  407df2:	f895 c004 	ldrb.w	ip, [r5, #4]
  407df6:	e66b      	b.n	407ad0 <_Z6perOuth+0xdc>
    if (md->curve)
      v = applyCurve(v, md->curve);

    //========== TRIMS ===============
    if (k < NUM_STICKS) {
      if (s_perout_mode < e_perout_mode_zeros && md->carryTrim == TRIM_ON) {
  407df8:	7b69      	ldrb	r1, [r5, #13]
  407dfa:	2900      	cmp	r1, #0
  407dfc:	d044      	beq.n	407e88 <_Z6perOuth+0x494>
        v += trims[k];
      }
      if (s_perout_mode == e_perout_mode_normal && md->carryTrim == TRIM_OFFSET) {
  407dfe:	2b00      	cmp	r3, #0
  407e00:	f47f aecf 	bne.w	407ba2 <_Z6perOuth+0x1ae>
  407e04:	2902      	cmp	r1, #2
  407e06:	f47f aecc 	bne.w	407ba2 <_Z6perOuth+0x1ae>
        v = md->sOffset;
  407e0a:	462b      	mov	r3, r5
        v = calc1000toRESX(v << 3);
  407e0c:	f913 2f0e 	ldrsb.w	r2, [r3, #14]!
        s_trimPtr[k] = &md->sOffset;  // use the value stored here for the trim
  407e10:	f240 1008 	movw	r0, #264	; 0x108
      if (s_perout_mode < e_perout_mode_zeros && md->carryTrim == TRIM_ON) {
        v += trims[k];
      }
      if (s_perout_mode == e_perout_mode_normal && md->carryTrim == TRIM_OFFSET) {
        v = md->sOffset;
        v = calc1000toRESX(v << 3);
  407e14:	00d2      	lsls	r2, r2, #3
        s_trimPtr[k] = &md->sOffset;  // use the value stored here for the trim
  407e16:	f2c2 0000 	movt	r0, #8192	; 0x2000
  407e1a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
}

inline int16_t calc1000toRESX( register int32_t x)  // improve calc time by Pat MacKenzie
{
    register int32_t y = x>>5;
    x+=y;
  407e1e:	eb02 1062 	add.w	r0, r2, r2, asr #5
    y=y>>2;
    x-=y;
  407e22:	eba0 10e2 	sub.w	r0, r0, r2, asr #7
    return x+(y>>2);
  407e26:	eb00 2062 	add.w	r0, r0, r2, asr #9
  407e2a:	b280      	uxth	r0, r0
  407e2c:	f8ca 3998 	str.w	r3, [sl, #2456]	; 0x998
  407e30:	e6b7      	b.n	407ba2 <_Z6perOuth+0x1ae>

      if (diff) {
        //rate = steps/sec => 32*1024/100*md->speedUp/Down
        //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
        //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 since it's asymmetrical
        if (tick10ms) {
  407e32:	b202      	sxth	r2, r0
  407e34:	9804      	ldr	r0, [sp, #16]
            // TODO port optim er9x by Mike
            act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
        }

        if(((diff>0) && (v<(act[i]/DEL_MULT))) || ((diff<0) && (v>(act[i]/DEL_MULT)))) act[i]=(int32_t)v*DEL_MULT; //deal with overflow
  407e36:	ea33 0323 	bics.w	r3, r3, r3, asr #32
  407e3a:	bf28      	it	cs
  407e3c:	460b      	movcs	r3, r1
  407e3e:	b200      	sxth	r0, r0
  407e40:	9004      	str	r0, [sp, #16]
  407e42:	9804      	ldr	r0, [sp, #16]
  407e44:	2800      	cmp	r0, #0
  407e46:	ea4f 2023 	mov.w	r0, r3, asr #8
  407e4a:	f77f ae94 	ble.w	407b76 <_Z6perOuth+0x182>
  407e4e:	4282      	cmp	r2, r0
  407e50:	f6bf ae94 	bge.w	407b7c <_Z6perOuth+0x188>
  407e54:	0212      	lsls	r2, r2, #8
  407e56:	f102 00ff 	add.w	r0, r2, #255	; 0xff
  407e5a:	ea10 0022 	ands.w	r0, r0, r2, asr #32
  407e5e:	bf38      	it	cc
  407e60:	4610      	movcc	r0, r2
  407e62:	492b      	ldr	r1, [pc, #172]	; (407f10 <_Z6perOuth+0x51c>)
  407e64:	1200      	asrs	r0, r0, #8
  407e66:	f841 2009 	str.w	r2, [r1, r9]
        v = act[i]/DEL_MULT;
  407e6a:	b280      	uxth	r0, r0
  407e6c:	e687      	b.n	407b7e <_Z6perOuth+0x18a>
      swTog = !swOn[i];
      if (s_perout_mode == e_perout_mode_normal) {
        swOn[i] = true;
        if (md->delayUp) {
          if (swTog) {
            sDelay[i] = md->delayUp * 100;
  407e6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  407e72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  407e76:	009b      	lsls	r3, r3, #2
  407e78:	b29b      	uxth	r3, r3
  407e7a:	9303      	str	r3, [sp, #12]
  407e7c:	9a03      	ldr	r2, [sp, #12]
  407e7e:	f10c 0340 	add.w	r3, ip, #64	; 0x40
  407e82:	f823 2008 	strh.w	r2, [r3, r8]
  407e86:	e747      	b.n	407d18 <_Z6perOuth+0x324>
      v = applyCurve(v, md->curve);

    //========== TRIMS ===============
    if (k < NUM_STICKS) {
      if (s_perout_mode < e_perout_mode_zeros && md->carryTrim == TRIM_ON) {
        v += trims[k];
  407e88:	f241 2200 	movw	r2, #4608	; 0x1200
  407e8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  407e90:	eb02 024a 	add.w	r2, r2, sl, lsl #1
  407e94:	9203      	str	r2, [sp, #12]
  407e96:	f8b2 2b0c 	ldrh.w	r2, [r2, #2828]	; 0xb0c
  407e9a:	1880      	adds	r0, r0, r2
  407e9c:	b280      	uxth	r0, r0
  407e9e:	e7ae      	b.n	407dfe <_Z6perOuth+0x40a>
        if (tick10ms) {
            int32_t rate = (int32_t)DEL_MULT*2048*100;
            if(md->weight) rate /= abs(md->weight);
            // TODO port optim er9x by Mike
            act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
  407ea0:	b202      	sxth	r2, r0
  407ea2:	0213      	lsls	r3, r2, #8
  407ea4:	e658      	b.n	407b58 <_Z6perOuth+0x164>
      if (k < NUM_STICKS)
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
      else if (k>=MIXSRC_CH1-1 && k<=MIXSRC_CH16-1 && k-MIXSRC_CH1+1<md->destCh) // if we've already calculated the value - take it instead
        v = chans[k-MIXSRC_CH1+1] / 100;
      else if (k>=MIXSRC_THR-1 && k<=MIXSRC_SWC-1) {
        v = getSwitch(k-MIXSRC_THR+1+1, 0) ? +1024 : -1024;
  407ea6:	3a09      	subs	r2, #9
  407ea8:	b250      	sxtb	r0, r2
  407eaa:	2100      	movs	r1, #0
  407eac:	9300      	str	r3, [sp, #0]
  407eae:	f7fc fecf 	bl	404c50 <_Z9getSwitchab>
  407eb2:	9b00      	ldr	r3, [sp, #0]
  407eb4:	b188      	cbz	r0, 407eda <_Z6perOuth+0x4e6>
  407eb6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  407eba:	e6c1      	b.n	407c40 <_Z6perOuth+0x24c>
    //========== VALUE ===============
    //Notice 0 = NC switch means not used -> always on line
    uint8_t k = md->srcRaw-1;
    int16_t v = 0;
    if (s_perout_mode != e_perout_mode_normal) {
      if (!sw || k >= NUM_STICKS || (k == THR_STICK && g_model.thrTrim))
  407ebc:	f240 1208 	movw	r2, #264	; 0x108
  407ec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  407ec4:	f892 014c 	ldrb.w	r0, [r2, #332]	; 0x14c
  407ec8:	f000 0008 	and.w	r0, r0, #8
  407ecc:	b2c0      	uxtb	r0, r0
  407ece:	2800      	cmp	r0, #0
  407ed0:	f47f adce 	bne.w	407a70 <_Z6perOuth+0x7c>
  407ed4:	f895 c004 	ldrb.w	ip, [r5, #4]
  407ed8:	e5fa      	b.n	407ad0 <_Z6perOuth+0xdc>
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
      else if (k>=MIXSRC_CH1-1 && k<=MIXSRC_CH16-1 && k-MIXSRC_CH1+1<md->destCh) // if we've already calculated the value - take it instead
        v = chans[k-MIXSRC_CH1+1] / 100;
      else if (k>=MIXSRC_THR-1 && k<=MIXSRC_SWC-1) {
        v = getSwitch(k-MIXSRC_THR+1+1, 0) ? +1024 : -1024;
        if (v<0 && !md->swtch)
  407eda:	f995 2003 	ldrsb.w	r2, [r5, #3]
      if (k < NUM_STICKS)
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
      else if (k>=MIXSRC_CH1-1 && k<=MIXSRC_CH16-1 && k-MIXSRC_CH1+1<md->destCh) // if we've already calculated the value - take it instead
        v = chans[k-MIXSRC_CH1+1] / 100;
      else if (k>=MIXSRC_THR-1 && k<=MIXSRC_SWC-1) {
        v = getSwitch(k-MIXSRC_THR+1+1, 0) ? +1024 : -1024;
  407ede:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
        if (v<0 && !md->swtch)
  407ee2:	2a00      	cmp	r2, #0
  407ee4:	f43f aeae 	beq.w	407c44 <_Z6perOuth+0x250>
  407ee8:	e6aa      	b.n	407c40 <_Z6perOuth+0x24c>
        if (tick10ms) {
            int32_t rate = (int32_t)DEL_MULT*2048*100;
            if(md->weight) rate /= abs(md->weight);
            // TODO port optim er9x by Mike
            act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
  407eea:	9a04      	ldr	r2, [sp, #16]
      if (diff) {
        //rate = steps/sec => 32*1024/100*md->speedUp/Down
        //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
        //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 since it's asymmetrical
        if (tick10ms) {
            int32_t rate = (int32_t)DEL_MULT*2048*100;
  407eec:	f04f 7148 	mov.w	r1, #52428800	; 0x3200000
            if(md->weight) rate /= abs(md->weight);
            // TODO port optim er9x by Mike
            act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
  407ef0:	b212      	sxth	r2, r2
  407ef2:	2a00      	cmp	r2, #0
      if (diff) {
        //rate = steps/sec => 32*1024/100*md->speedUp/Down
        //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
        //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 since it's asymmetrical
        if (tick10ms) {
            int32_t rate = (int32_t)DEL_MULT*2048*100;
  407ef4:	9105      	str	r1, [sp, #20]
            if(md->weight) rate /= abs(md->weight);
            // TODO port optim er9x by Mike
            act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
  407ef6:	9204      	str	r2, [sp, #16]
  407ef8:	f73f ae22 	bgt.w	407b40 <_Z6perOuth+0x14c>
  407efc:	7aaa      	ldrb	r2, [r5, #10]
  407efe:	2a00      	cmp	r2, #0
  407f00:	d0ce      	beq.n	407ea0 <_Z6perOuth+0x4ac>
  407f02:	f06f 0163 	mvn.w	r1, #99	; 0x63
  407f06:	e620      	b.n	407b4a <_Z6perOuth+0x156>
  BeepANACenter anaCenter = evalSticks(phase);

  if (s_perout_mode == e_perout_mode_normal) {
    //===========BEEP CENTER================
    anaCenter &= g_model.beepANACenter;
    if(((bpanaCenter ^ anaCenter) & anaCenter)) AUDIO_POT_STICK_MIDDLE();
  407f08:	200c      	movs	r0, #12
  407f0a:	f7fe faff 	bl	40650c <_Z13audioDefeventh>
  407f0e:	e589      	b.n	407a24 <_Z6perOuth+0x30>
  407f10:	20001f7c 	.word	0x20001f7c
  407f14:	20001eb8 	.word	0x20001eb8

00407f18 <_Z5checkhhPKPFvhEhPKhhh>:
#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)
#endif
#define INC(val,max) if(val<max) {val++;} else {val=0;}
#define DEC(val,max) if(val>0  ) {val--;} else {val=max;}
bool check(uint8_t event, uint8_t curr, const MenuFuncP *menuTab, uint8_t menuTabSize, const pm_uint8_t *horTab, uint8_t horTabMax, uint8_t maxrow)
{
  407f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407f1c:	9c08      	ldr	r4, [sp, #32]
  407f1e:	4605      	mov	r5, r0
  407f20:	4616      	mov	r6, r2
  407f22:	4608      	mov	r0, r1
  407f24:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
  407f28:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  int8_t maxcol = MAXCOL(m_posVert);
  407f2c:	4fa7      	ldr	r7, [pc, #668]	; (4081cc <_Z5checkhhPKPFvhEhPKhhh+0x2b4>)
  407f2e:	46a2      	mov	sl, r4
  407f30:	b134      	cbz	r4, 407f40 <_Z5checkhhPKPFvhEhPKhhh+0x28>
  407f32:	f897 2c34 	ldrb.w	r2, [r7, #3124]	; 0xc34
  407f36:	4590      	cmp	r8, r2
  407f38:	bf38      	it	cc
  407f3a:	4642      	movcc	r2, r8
  407f3c:	f814 a002 	ldrb.w	sl, [r4, r2]
#define scrollUD 0
#endif

  if(scrollLR || scrollUD || p1valdiff) g_LightOffCounter = g_eeGeneral.lightAutoOff*500; // on keypress turn the light on 5*100

  if (menuTab) {
  407f40:	b176      	cbz	r6, 407f60 <_Z5checkhhPKPFvhEhPKhhh+0x48>
    uint8_t attr = 0;

    if (m_posVert==0 && !s_noScroll) {
  407f42:	f897 2c34 	ldrb.w	r2, [r7, #3124]	; 0xc34
  407f46:	2a00      	cmp	r2, #0
  407f48:	d15c      	bne.n	408004 <_Z5checkhhPKPFvhEhPKhhh+0xec>
  407f4a:	49a0      	ldr	r1, [pc, #640]	; (4081cc <_Z5checkhhPKPFvhEhPKhhh+0x2b4>)
  407f4c:	f891 1e7c 	ldrb.w	r1, [r1, #3708]	; 0xe7c
  407f50:	2900      	cmp	r1, #0
  407f52:	d04b      	beq.n	407fec <_Z5checkhhPKPFvhEhPKhhh+0xd4>
      if (cc != curr) {
        chainMenu((MenuFuncP)pgm_read_adr(&menuTab[cc]));
        return false;
      }
    }
    s_noScroll = 0;
  407f54:	2100      	movs	r1, #0
  407f56:	f887 1e7c 	strb.w	r1, [r7, #3708]	; 0xe7c
    DisplayScreenIndex(curr, menuTabSize, attr);
  407f5a:	4619      	mov	r1, r3
  407f5c:	f7fa ff76 	bl	402e4c <_Z18DisplayScreenIndexhhh>
    }
#endif

  }

  switch(event)
  407f60:	2d60      	cmp	r5, #96	; 0x60
  407f62:	f000 8106 	beq.w	408172 <_Z5checkhhPKPFvhEhPKhhh+0x25a>
  407f66:	d920      	bls.n	407faa <_Z5checkhhPKPFvhEhPKhhh+0x92>
  407f68:	2d64      	cmp	r5, #100	; 0x64
  407f6a:	f000 80b5 	beq.w	4080d8 <_Z5checkhhPKPFvhEhPKhhh+0x1c0>
  407f6e:	d953      	bls.n	408018 <_Z5checkhhPKPFvhEhPKhhh+0x100>
  407f70:	2d81      	cmp	r5, #129	; 0x81
  407f72:	f000 80e7 	beq.w	408144 <_Z5checkhhPKPFvhEhPKhhh+0x22c>
  407f76:	2dbf      	cmp	r5, #191	; 0xbf
  407f78:	f000 80db 	beq.w	408132 <_Z5checkhhPKPFvhEhPKhhh+0x21a>
  407f7c:	2d65      	cmp	r5, #101	; 0x65
  407f7e:	d020      	beq.n	407fc2 <_Z5checkhhPKPFvhEhPKhhh+0xaa>
      if (maxcol > 0)
        s_editMode = (s_editMode<=0);
      break;
    case EVT_KEY_LONG(KEY_EXIT):
      s_editMode = 0;
      popMenu();
  407f80:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
      BLINK_SYNC;
      break;
  }

  uint8_t max = menuTab ? 7 : 6;
  407f84:	2e00      	cmp	r6, #0
  407f86:	bf0c      	ite	eq
  407f88:	2606      	moveq	r6, #6
  407f8a:	2607      	movne	r6, #7
  if(m_posVert<1) s_pgOfs=0;
  407f8c:	2b00      	cmp	r3, #0
  407f8e:	d028      	beq.n	407fe2 <_Z5checkhhPKPFvhEhPKhhh+0xca>
  else if(m_posVert-s_pgOfs>max) s_pgOfs = m_posVert-max;
  407f90:	f897 2e7d 	ldrb.w	r2, [r7, #3709]	; 0xe7d
  407f94:	498d      	ldr	r1, [pc, #564]	; (4081cc <_Z5checkhhPKPFvhEhPKhhh+0x2b4>)
  407f96:	1a9a      	subs	r2, r3, r2
  407f98:	42b2      	cmp	r2, r6
  407f9a:	f300 8091 	bgt.w	4080c0 <_Z5checkhhPKPFvhEhPKhhh+0x1a8>
  else if(m_posVert-s_pgOfs<1) s_pgOfs = m_posVert-1;
  407f9e:	2a00      	cmp	r2, #0
  407fa0:	f340 8094 	ble.w	4080cc <_Z5checkhhPKPFvhEhPKhhh+0x1b4>
  return true;
  407fa4:	2001      	movs	r0, #1
}
  407fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
#endif

  }

  switch(event)
  407faa:	2d43      	cmp	r5, #67	; 0x43
  407fac:	f000 80db 	beq.w	408166 <_Z5checkhhPKPFvhEhPKhhh+0x24e>
  407fb0:	d956      	bls.n	408060 <_Z5checkhhPKPFvhEhPKhhh+0x148>
  407fb2:	2d44      	cmp	r5, #68	; 0x44
  407fb4:	d07a      	beq.n	4080ac <_Z5checkhhPKPFvhEhPKhhh+0x194>
  407fb6:	2d45      	cmp	r5, #69	; 0x45
  407fb8:	d1e2      	bne.n	407f80 <_Z5checkhhPKPFvhEhPKhhh+0x68>
      INC(m_posHorz,maxcol);
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_LEFT):  //dec
      if(m_posHorz==0) break;
  407fba:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
  407fbe:	2b00      	cmp	r3, #0
  407fc0:	d07a      	beq.n	4080b8 <_Z5checkhhPKPFvhEhPKhhh+0x1a0>
    case EVT_KEY_FIRST(KEY_LEFT)://dec
      if(!horTab || s_editMode>0)break;
  407fc2:	2c00      	cmp	r4, #0
  407fc4:	d0dc      	beq.n	407f80 <_Z5checkhhPKPFvhEhPKhhh+0x68>
  407fc6:	f997 2c2c 	ldrsb.w	r2, [r7, #3116]	; 0xc2c
  407fca:	4b80      	ldr	r3, [pc, #512]	; (4081cc <_Z5checkhhPKPFvhEhPKhhh+0x2b4>)
  407fcc:	2a00      	cmp	r2, #0
  407fce:	f340 80e1 	ble.w	408194 <_Z5checkhhPKPFvhEhPKhhh+0x27c>
      INC(m_posHorz,maxcol);
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_LEFT):  //dec
      if(m_posHorz==0) break;
  407fd2:	f893 3c34 	ldrb.w	r3, [r3, #3124]	; 0xc34
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
      BLINK_SYNC;
      break;
  }

  uint8_t max = menuTab ? 7 : 6;
  407fd6:	2e00      	cmp	r6, #0
  407fd8:	bf0c      	ite	eq
  407fda:	2606      	moveq	r6, #6
  407fdc:	2607      	movne	r6, #7
  if(m_posVert<1) s_pgOfs=0;
  407fde:	2b00      	cmp	r3, #0
  407fe0:	d1d6      	bne.n	407f90 <_Z5checkhhPKPFvhEhPKhhh+0x78>
  407fe2:	f887 3e7d 	strb.w	r3, [r7, #3709]	; 0xe7d
  else if(m_posVert-s_pgOfs>max) s_pgOfs = m_posVert-max;
  else if(m_posVert-s_pgOfs<1) s_pgOfs = m_posVert-1;
  return true;
  407fe6:	2001      	movs	r0, #1
  407fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

      if (scrollLR || (scrollRE && s_editMode < 0)) {
        cc = limit((int8_t)0, (int8_t)(curr - scrollLR + scrollRE), (int8_t)(menuTabSize-1));
      }

      switch(event) {
  407fec:	2d64      	cmp	r5, #100	; 0x64
  407fee:	f000 808f 	beq.w	408110 <_Z5checkhhPKPFvhEhPKhhh+0x1f8>
  407ff2:	2d65      	cmp	r5, #101	; 0x65
    uint8_t attr = 0;

    if (m_posVert==0 && !s_noScroll) {
      attr = INVERS;

      int8_t cc = curr;
  407ff4:	bf1c      	itt	ne
  407ff6:	b2c2      	uxtbne	r2, r0
  407ff8:	b251      	sxtbne	r1, r2

      if (scrollLR || (scrollRE && s_editMode < 0)) {
        cc = limit((int8_t)0, (int8_t)(curr - scrollLR + scrollRE), (int8_t)(menuTabSize-1));
      }

      switch(event) {
  407ffa:	d04e      	beq.n	40809a <_Z5checkhhPKPFvhEhPKhhh+0x182>
          else
            cc = 0;
          break;
      }

      if (cc != curr) {
  407ffc:	4281      	cmp	r1, r0
  407ffe:	d103      	bne.n	408008 <_Z5checkhhPKPFvhEhPKhhh+0xf0>

  if (menuTab) {
    uint8_t attr = 0;

    if (m_posVert==0 && !s_noScroll) {
      attr = INVERS;
  408000:	2202      	movs	r2, #2
  408002:	e7a7      	b.n	407f54 <_Z5checkhhPKPFvhEhPKhhh+0x3c>
#endif

  if(scrollLR || scrollUD || p1valdiff) g_LightOffCounter = g_eeGeneral.lightAutoOff*500; // on keypress turn the light on 5*100

  if (menuTab) {
    uint8_t attr = 0;
  408004:	2200      	movs	r2, #0
  408006:	e7a5      	b.n	407f54 <_Z5checkhhPKPFvhEhPKhhh+0x3c>
            cc = 0;
          break;
      }

      if (cc != curr) {
        chainMenu((MenuFuncP)pgm_read_adr(&menuTab[cc]));
  408008:	b252      	sxtb	r2, r2
  40800a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
  40800e:	f7fe fb17 	bl	406640 <_Z9chainMenuPFvhE>
        return false;
  408012:	2000      	movs	r0, #0
  408014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
#endif

  }

  switch(event)
  408018:	2d62      	cmp	r5, #98	; 0x62
  40801a:	f000 8087 	beq.w	40812c <_Z5checkhhPKPFvhEhPKhhh+0x214>
  40801e:	2d63      	cmp	r5, #99	; 0x63
  408020:	d1ae      	bne.n	407f80 <_Z5checkhhPKPFvhEhPKhhh+0x68>
  408022:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
      break;

    case EVT_KEY_REPT(KEY_UP):  //dec
      if(m_posVert==0) break;
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode>0)break;
  408026:	f997 2c2c 	ldrsb.w	r2, [r7, #3116]	; 0xc2c
  40802a:	2a00      	cmp	r2, #0
  40802c:	dcaa      	bgt.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
      do {
        DEC(m_posVert,maxrow);
  40802e:	1e5a      	subs	r2, r3, #1
  408030:	2b00      	cmp	r3, #0
  408032:	d077      	beq.n	408124 <_Z5checkhhPKPFvhEhPKhhh+0x20c>
  408034:	b2d3      	uxtb	r3, r2
  408036:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34

    case EVT_KEY_REPT(KEY_UP):  //dec
      if(m_posVert==0) break;
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode>0)break;
      do {
  40803a:	4543      	cmp	r3, r8
  40803c:	bf34      	ite	cc
  40803e:	461a      	movcc	r2, r3
  408040:	4642      	movcs	r2, r8
  408042:	b13c      	cbz	r4, 408054 <_Z5checkhhPKPFvhEhPKhhh+0x13c>
  408044:	5ca2      	ldrb	r2, [r4, r2]
  408046:	2aff      	cmp	r2, #255	; 0xff
  408048:	d0f1      	beq.n	40802e <_Z5checkhhPKPFvhEhPKhhh+0x116>
        DEC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
  40804a:	f897 4c35 	ldrb.w	r4, [r7, #3125]	; 0xc35
  40804e:	42a2      	cmp	r2, r4
  408050:	bf38      	it	cc
  408052:	4614      	movcc	r4, r2
      BLINK_SYNC;
  408054:	2260      	movs	r2, #96	; 0x60
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode>0)break;
      do {
        DEC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
  408056:	f887 4c35 	strb.w	r4, [r7, #3125]	; 0xc35
      BLINK_SYNC;
  40805a:	f887 2a84 	strb.w	r2, [r7, #2692]	; 0xa84
      break;
  40805e:	e791      	b.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
    }
#endif

  }

  switch(event)
  408060:	2d21      	cmp	r5, #33	; 0x21
  408062:	d075      	beq.n	408150 <_Z5checkhhPKPFvhEhPKhhh+0x238>
  408064:	2d42      	cmp	r5, #66	; 0x42
  408066:	d18b      	bne.n	407f80 <_Z5checkhhPKPFvhEhPKhhh+0x68>
      DEC(m_posHorz,maxcol);
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_DOWN):  //inc
      if(m_posVert==maxrow) break;
  408068:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
  40806c:	454b      	cmp	r3, r9
  40806e:	d089      	beq.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
    case EVT_KEY_FIRST(KEY_DOWN): //inc
      if(s_editMode>0)break;
  408070:	f997 2c2c 	ldrsb.w	r2, [r7, #3116]	; 0xc2c
  408074:	2a00      	cmp	r2, #0
  408076:	dc85      	bgt.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
      do {
        INC(m_posVert, maxrow);
  408078:	2100      	movs	r1, #0
  40807a:	4599      	cmp	r9, r3
  40807c:	d944      	bls.n	408108 <_Z5checkhhPKPFvhEhPKhhh+0x1f0>
  40807e:	3301      	adds	r3, #1
  408080:	b2db      	uxtb	r3, r3
  408082:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34

    case EVT_KEY_REPT(KEY_DOWN):  //inc
      if(m_posVert==maxrow) break;
    case EVT_KEY_FIRST(KEY_DOWN): //inc
      if(s_editMode>0)break;
      do {
  408086:	4543      	cmp	r3, r8
  408088:	bf34      	ite	cc
  40808a:	461a      	movcc	r2, r3
  40808c:	4642      	movcs	r2, r8
  40808e:	2c00      	cmp	r4, #0
  408090:	d0e0      	beq.n	408054 <_Z5checkhhPKPFvhEhPKhhh+0x13c>
  408092:	5ca2      	ldrb	r2, [r4, r2]
  408094:	2aff      	cmp	r2, #255	; 0xff
  408096:	d1d8      	bne.n	40804a <_Z5checkhhPKPFvhEhPKhhh+0x132>
  408098:	e7ef      	b.n	40807a <_Z5checkhhPKPFvhEhPKhhh+0x162>
      }

      switch(event) {
        case EVT_KEY_FIRST(KEY_LEFT):
          if (curr > 0)
            cc = curr - 1;
  40809a:	1e42      	subs	r2, r0, #1
  40809c:	b2d2      	uxtb	r2, r2
  40809e:	b251      	sxtb	r1, r2
        cc = limit((int8_t)0, (int8_t)(curr - scrollLR + scrollRE), (int8_t)(menuTabSize-1));
      }

      switch(event) {
        case EVT_KEY_FIRST(KEY_LEFT):
          if (curr > 0)
  4080a0:	2800      	cmp	r0, #0
  4080a2:	d1ab      	bne.n	407ffc <_Z5checkhhPKPFvhEhPKhhh+0xe4>
            cc = curr - 1;
          else
            cc = menuTabSize-1;
  4080a4:	1e5a      	subs	r2, r3, #1
  4080a6:	b2d2      	uxtb	r2, r2
  4080a8:	b251      	sxtb	r1, r2
  4080aa:	e7a7      	b.n	407ffc <_Z5checkhhPKPFvhEhPKhhh+0xe4>
        BLINK_SYNC;
      }
      break;

    case EVT_KEY_REPT(KEY_RIGHT):  //inc
      if(m_posHorz==maxcol) break;
  4080ac:	f897 2c35 	ldrb.w	r2, [r7, #3125]	; 0xc35
  4080b0:	fa4f f38a 	sxtb.w	r3, sl
  4080b4:	429a      	cmp	r2, r3
  4080b6:	d10f      	bne.n	4080d8 <_Z5checkhhPKPFvhEhPKhhh+0x1c0>
      INC(m_posHorz,maxcol);
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_LEFT):  //dec
      if(m_posHorz==0) break;
  4080b8:	4b44      	ldr	r3, [pc, #272]	; (4081cc <_Z5checkhhPKPFvhEhPKhhh+0x2b4>)
  4080ba:	f893 3c34 	ldrb.w	r3, [r3, #3124]	; 0xc34
  4080be:	e78a      	b.n	407fd6 <_Z5checkhhPKPFvhEhPKhhh+0xbe>
      break;
  }

  uint8_t max = menuTab ? 7 : 6;
  if(m_posVert<1) s_pgOfs=0;
  else if(m_posVert-s_pgOfs>max) s_pgOfs = m_posVert-max;
  4080c0:	1b9e      	subs	r6, r3, r6
  4080c2:	f881 6e7d 	strb.w	r6, [r1, #3709]	; 0xe7d
  else if(m_posVert-s_pgOfs<1) s_pgOfs = m_posVert-1;
  return true;
  4080c6:	2001      	movs	r0, #1
  4080c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }

  uint8_t max = menuTab ? 7 : 6;
  if(m_posVert<1) s_pgOfs=0;
  else if(m_posVert-s_pgOfs>max) s_pgOfs = m_posVert-max;
  else if(m_posVert-s_pgOfs<1) s_pgOfs = m_posVert-1;
  4080cc:	3b01      	subs	r3, #1
  4080ce:	f881 3e7d 	strb.w	r3, [r1, #3709]	; 0xe7d
  return true;
  4080d2:	2001      	movs	r0, #1
  4080d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;

    case EVT_KEY_REPT(KEY_RIGHT):  //inc
      if(m_posHorz==maxcol) break;
    case EVT_KEY_FIRST(KEY_RIGHT)://inc
      if(!horTab || s_editMode>0)break;
  4080d8:	2c00      	cmp	r4, #0
  4080da:	f43f af51 	beq.w	407f80 <_Z5checkhhPKPFvhEhPKhhh+0x68>
  4080de:	f997 2c2c 	ldrsb.w	r2, [r7, #3116]	; 0xc2c
  4080e2:	4b3a      	ldr	r3, [pc, #232]	; (4081cc <_Z5checkhhPKPFvhEhPKhhh+0x2b4>)
  4080e4:	2a00      	cmp	r2, #0
  4080e6:	f73f af74 	bgt.w	407fd2 <_Z5checkhhPKPFvhEhPKhhh+0xba>
      INC(m_posHorz,maxcol);
  4080ea:	f893 2c35 	ldrb.w	r2, [r3, #3125]	; 0xc35
  4080ee:	fa4f fa8a 	sxtb.w	sl, sl
  4080f2:	4552      	cmp	r2, sl
  4080f4:	da66      	bge.n	4081c4 <_Z5checkhhPKPFvhEhPKhhh+0x2ac>
  4080f6:	3201      	adds	r2, #1
  4080f8:	f883 2c35 	strb.w	r2, [r3, #3125]	; 0xc35
    case EVT_KEY_REPT(KEY_LEFT):  //dec
      if(m_posHorz==0) break;
    case EVT_KEY_FIRST(KEY_LEFT)://dec
      if(!horTab || s_editMode>0)break;
      DEC(m_posHorz,maxcol);
      BLINK_SYNC;
  4080fc:	2360      	movs	r3, #96	; 0x60
  4080fe:	f887 3a84 	strb.w	r3, [r7, #2692]	; 0xa84
  408102:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
      break;
  408106:	e73d      	b.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
    case EVT_KEY_REPT(KEY_DOWN):  //inc
      if(m_posVert==maxrow) break;
    case EVT_KEY_FIRST(KEY_DOWN): //inc
      if(s_editMode>0)break;
      do {
        INC(m_posVert, maxrow);
  408108:	f887 1c34 	strb.w	r1, [r7, #3124]	; 0xc34
  40810c:	2300      	movs	r3, #0
  40810e:	e7ba      	b.n	408086 <_Z5checkhhPKPFvhEhPKhhh+0x16e>
          else
            cc = menuTabSize-1;
          break;

        case EVT_KEY_FIRST(KEY_RIGHT):
          if (curr < (menuTabSize-1))
  408110:	1e5a      	subs	r2, r3, #1
  408112:	4290      	cmp	r0, r2
            cc = curr + 1;
          else
            cc = 0;
  408114:	bfa8      	it	ge
  408116:	460a      	movge	r2, r1
          else
            cc = menuTabSize-1;
          break;

        case EVT_KEY_FIRST(KEY_RIGHT):
          if (curr < (menuTabSize-1))
  408118:	f6bf af70 	bge.w	407ffc <_Z5checkhhPKPFvhEhPKhhh+0xe4>
            cc = curr + 1;
  40811c:	1c42      	adds	r2, r0, #1
  40811e:	b2d2      	uxtb	r2, r2
  408120:	b251      	sxtb	r1, r2
  408122:	e76b      	b.n	407ffc <_Z5checkhhPKPFvhEhPKhhh+0xe4>
    case EVT_KEY_REPT(KEY_UP):  //dec
      if(m_posVert==0) break;
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode>0)break;
      do {
        DEC(m_posVert,maxrow);
  408124:	f887 9c34 	strb.w	r9, [r7, #3124]	; 0xc34
  408128:	464b      	mov	r3, r9
  40812a:	e786      	b.n	40803a <_Z5checkhhPKPFvhEhPKhhh+0x122>
    }
#endif

  }

  switch(event)
  40812c:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
  408130:	e79e      	b.n	408070 <_Z5checkhhPKPFvhEhPKhhh+0x158>
extern int8_t m_posVert;
#else
extern uint8_t m_posVert;
#endif
extern uint8_t m_posHorz;
inline void minit(){m_posVert=m_posHorz=0;}
  408132:	2300      	movs	r3, #0
        s_editMode = -1;
        break;
      }
      // no break
#else
      s_editMode = -1;
  408134:	22ff      	movs	r2, #255	; 0xff
  408136:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
  40813a:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
  40813e:	f887 2c2c 	strb.w	r2, [r7, #3116]	; 0xc2c
      break;
  408142:	e71f      	b.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
    case EVT_KEY_FIRST(KEY_MENU):
      if (maxcol > 0)
        s_editMode = (s_editMode<=0);
      break;
    case EVT_KEY_LONG(KEY_EXIT):
      s_editMode = 0;
  408144:	2300      	movs	r3, #0
  408146:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
      popMenu();
  40814a:	f7ff fa55 	bl	4075f8 <_Z7popMenuv>
  40814e:	e717      	b.n	407f80 <_Z5checkhhPKPFvhEhPKhhh+0x68>
      break;
    case EVT_KEY_BREAK(KEY_EXIT):
      if(s_editMode>0) {
  408150:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
  408154:	4c1d      	ldr	r4, [pc, #116]	; (4081cc <_Z5checkhhPKPFvhEhPKhhh+0x2b4>)
  408156:	2b00      	cmp	r3, #0
  408158:	dd23      	ble.n	4081a2 <_Z5checkhhPKPFvhEhPKhhh+0x28a>
        s_editMode = 0;
  40815a:	2300      	movs	r3, #0
  40815c:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
  408160:	f894 3c34 	ldrb.w	r3, [r4, #3124]	; 0xc34
        break;
  408164:	e70e      	b.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_UP):  //dec
      if(m_posVert==0) break;
  408166:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
  40816a:	2b00      	cmp	r3, #0
  40816c:	f43f af0a 	beq.w	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
  408170:	e759      	b.n	408026 <_Z5checkhhPKPFvhEhPKhhh+0x10e>
    case EVT_ENTRY_UP:
      s_editMode = 0;
      break;
#endif
    case EVT_KEY_FIRST(KEY_MENU):
      if (maxcol > 0)
  408172:	fa4f fa8a 	sxtb.w	sl, sl
  408176:	f1ba 0f00 	cmp.w	sl, #0
  40817a:	f77f af01 	ble.w	407f80 <_Z5checkhhPKPFvhEhPKhhh+0x68>
        s_editMode = (s_editMode<=0);
  40817e:	f997 2c2c 	ldrsb.w	r2, [r7, #3116]	; 0xc2c
  408182:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
  408186:	2a00      	cmp	r2, #0
  408188:	bfcc      	ite	gt
  40818a:	2200      	movgt	r2, #0
  40818c:	2201      	movle	r2, #1
  40818e:	f887 2c2c 	strb.w	r2, [r7, #3116]	; 0xc2c
  408192:	e6f7      	b.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>

    case EVT_KEY_REPT(KEY_LEFT):  //dec
      if(m_posHorz==0) break;
    case EVT_KEY_FIRST(KEY_LEFT)://dec
      if(!horTab || s_editMode>0)break;
      DEC(m_posHorz,maxcol);
  408194:	f893 2c35 	ldrb.w	r2, [r3, #3125]	; 0xc35
  408198:	b1d2      	cbz	r2, 4081d0 <_Z5checkhhPKPFvhEhPKhhh+0x2b8>
  40819a:	3a01      	subs	r2, #1
  40819c:	f883 2c35 	strb.w	r2, [r3, #3125]	; 0xc35
  4081a0:	e7ac      	b.n	4080fc <_Z5checkhhPKPFvhEhPKhhh+0x1e4>
    case EVT_KEY_BREAK(KEY_EXIT):
      if(s_editMode>0) {
        s_editMode = 0;
        break;
      }
      if (m_posVert==0 || !menuTab) {
  4081a2:	f894 5c34 	ldrb.w	r5, [r4, #3124]	; 0xc34
  4081a6:	f1d5 0501 	rsbs	r5, r5, #1
  4081aa:	bf38      	it	cc
  4081ac:	2500      	movcc	r5, #0
  4081ae:	2e00      	cmp	r6, #0
  4081b0:	bf08      	it	eq
  4081b2:	f045 0501 	orreq.w	r5, r5, #1
  4081b6:	46a8      	mov	r8, r5
  4081b8:	b16d      	cbz	r5, 4081d6 <_Z5checkhhPKPFvhEhPKhhh+0x2be>
        popMenu();  //beeps itself
  4081ba:	f7ff fa1d 	bl	4075f8 <_Z7popMenuv>
  4081be:	f894 3c34 	ldrb.w	r3, [r4, #3124]	; 0xc34
  4081c2:	e6df      	b.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>

    case EVT_KEY_REPT(KEY_RIGHT):  //inc
      if(m_posHorz==maxcol) break;
    case EVT_KEY_FIRST(KEY_RIGHT)://inc
      if(!horTab || s_editMode>0)break;
      INC(m_posHorz,maxcol);
  4081c4:	2200      	movs	r2, #0
  4081c6:	f883 2c35 	strb.w	r2, [r3, #3125]	; 0xc35
  4081ca:	e797      	b.n	4080fc <_Z5checkhhPKPFvhEhPKhhh+0x1e4>
  4081cc:	20001200 	.word	0x20001200

    case EVT_KEY_REPT(KEY_LEFT):  //dec
      if(m_posHorz==0) break;
    case EVT_KEY_FIRST(KEY_LEFT)://dec
      if(!horTab || s_editMode>0)break;
      DEC(m_posHorz,maxcol);
  4081d0:	f883 ac35 	strb.w	sl, [r3, #3125]	; 0xc35
  4081d4:	e792      	b.n	4080fc <_Z5checkhhPKPFvhEhPKhhh+0x1e4>
      }
      if (m_posVert==0 || !menuTab) {
        popMenu();  //beeps itself
      }
      else {
        AUDIO_MENUS();
  4081d6:	2005      	movs	r0, #5
  4081d8:	f7fe f998 	bl	40650c <_Z13audioDefeventh>
        minit();
        BLINK_SYNC;
  4081dc:	2360      	movs	r3, #96	; 0x60
  4081de:	f884 3a84 	strb.w	r3, [r4, #2692]	; 0xa84
  4081e2:	f884 5c35 	strb.w	r5, [r4, #3125]	; 0xc35
  4081e6:	f884 5c34 	strb.w	r5, [r4, #3124]	; 0xc34
  4081ea:	462b      	mov	r3, r5
  4081ec:	e6ca      	b.n	407f84 <_Z5checkhhPKPFvhEhPKhhh+0x6c>
  4081ee:	bf00      	nop

004081f0 <_Z13menuProcSetuph>:
  ITEM_SETUP_STICK_MODE,
  ITEM_SETUP_MAX
};

void menuProcSetup(uint8_t event)
{
  4081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#define ROTARY_ENCODERS_ZEROS 0,
#else
#define ROTARY_ENCODERS_ZEROS
#endif

  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});
  4081f4:	f8df a34c 	ldr.w	sl, [pc, #844]	; 408544 <_Z13menuProcSetuph+0x354>
  ITEM_SETUP_STICK_MODE,
  ITEM_SETUP_MAX
};

void menuProcSetup(uint8_t event)
{
  4081f8:	b089      	sub	sp, #36	; 0x24
#define ROTARY_ENCODERS_ZEROS 0,
#else
#define ROTARY_ENCODERS_ZEROS
#endif

  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});
  4081fa:	241e      	movs	r4, #30
  4081fc:	f50a 7582 	add.w	r5, sl, #260	; 0x104
  408200:	2100      	movs	r1, #0
  408202:	f10a 02ec 	add.w	r2, sl, #236	; 0xec
  408206:	2306      	movs	r3, #6
  ITEM_SETUP_STICK_MODE,
  ITEM_SETUP_MAX
};

void menuProcSetup(uint8_t event)
{
  408208:	4681      	mov	r9, r0
#define ROTARY_ENCODERS_ZEROS 0,
#else
#define ROTARY_ENCODERS_ZEROS
#endif

  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});
  40820a:	9500      	str	r5, [sp, #0]
  40820c:	9401      	str	r4, [sp, #4]
  40820e:	9402      	str	r4, [sp, #8]
  408210:	f7ff fe82 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  408214:	b910      	cbnz	r0, 40821c <_Z13menuProcSetuph+0x2c>
        else
          stickMode = g_eeGeneral.stickMode;
        break;
    }
  }
}
  408216:	b009      	add	sp, #36	; 0x24
  408218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#define ROTARY_ENCODERS_ZEROS 0,
#else
#define ROTARY_ENCODERS_ZEROS
#endif

  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});
  40821c:	2000      	movs	r0, #0

  uint8_t sub = m_posVert - 1;
  40821e:	f8df b328 	ldr.w	fp, [pc, #808]	; 408548 <_Z13menuProcSetuph+0x358>
#define ROTARY_ENCODERS_ZEROS 0,
#else
#define ROTARY_ENCODERS_ZEROS
#endif

  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});
  408222:	2302      	movs	r3, #2
  408224:	4601      	mov	r1, r0
  408226:	f50a 7292 	add.w	r2, sl, #292	; 0x124
  40822a:	f7fa fb45 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  uint8_t sub = m_posVert - 1;
  40822e:	f89b 3c34 	ldrb.w	r3, [fp, #3124]	; 0xc34

      case ITEM_SETUP_STICK_MODE:
        lcd_puts( 1*FW, y, STR_MODE);
        for(uint8_t i=0; i<4; i++) lcd_img((6+4*i)*FW, y, sticks,i,0);
        if((y+=FH)>7*FH) return;
        lcd_putcAtt( 3*FW, y, '1'+g_eeGeneral.stickMode,(sub==k+1) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0);
  408232:	4eb7      	ldr	r6, [pc, #732]	; (408510 <_Z13menuProcSetuph+0x320>)
#define ROTARY_ENCODERS_ZEROS
#endif

  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});

  uint8_t sub = m_posVert - 1;
  408234:	3b01      	subs	r3, #1
  408236:	b2db      	uxtb	r3, r3
  408238:	9305      	str	r3, [sp, #20]
  40823a:	2510      	movs	r5, #16

  for (uint8_t i=0; i<7; i++) {
  40823c:	2400      	movs	r4, #0
      case ITEM_SETUP_STICK_MODE:
        lcd_puts( 1*FW, y, STR_MODE);
        for(uint8_t i=0; i<4; i++) lcd_img((6+4*i)*FW, y, sticks,i,0);
        if((y+=FH)>7*FH) return;
        lcd_putcAtt( 3*FW, y, '1'+g_eeGeneral.stickMode,(sub==k+1) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0);
        for(uint8_t i=0; i<4; i++) putsChnRaw( (6+4*i)*FW, y, pgm_read_byte(modn12x3 + 4*g_eeGeneral.stickMode + i), 0);
  40823e:	f8cd 9018 	str.w	r9, [sp, #24]

  uint8_t sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i+s_pgOfs;
  408242:	f89b 3e7d 	ldrb.w	r3, [fp, #3709]	; 0xe7d
    uint8_t attr = (sub == k ? INVERS : 0);
  408246:	9905      	ldr	r1, [sp, #20]

  uint8_t sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i+s_pgOfs;
  408248:	18e3      	adds	r3, r4, r3
  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});

  uint8_t sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
  40824a:	f1a5 0708 	sub.w	r7, r5, #8
    uint8_t k = i+s_pgOfs;
  40824e:	b2db      	uxtb	r3, r3
  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});

  uint8_t sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
  408250:	b2ff      	uxtb	r7, r7
    uint8_t k = i+s_pgOfs;
    uint8_t attr = (sub == k ? INVERS : 0);
  408252:	4299      	cmp	r1, r3
  408254:	bf0c      	ite	eq
  408256:	f04f 0802 	moveq.w	r8, #2
  40825a:	f04f 0800 	movne.w	r8, #0

    switch(k) {
  40825e:	2b1c      	cmp	r3, #28
  408260:	d86e      	bhi.n	408340 <_Z13menuProcSetuph+0x150>
  408262:	e8df f013 	tbh	[pc, r3, lsl #1]
  408266:	038b      	.short	0x038b
  408268:	034c0366 	.word	0x034c0366
  40826c:	02f10331 	.word	0x02f10331
  408270:	02ba02dd 	.word	0x02ba02dd
  408274:	028102a9 	.word	0x028102a9
  408278:	02480263 	.word	0x02480263
  40827c:	02120225 	.word	0x02120225
  408280:	01ee0200 	.word	0x01ee0200
  408284:	01ca01dc 	.word	0x01ca01dc
  408288:	018901af 	.word	0x018901af
  40828c:	01400173 	.word	0x01400173
  408290:	01100126 	.word	0x01100126
  408294:	00d000fb 	.word	0x00d000fb
  408298:	00e200ad 	.word	0x00e200ad
  40829c:	001d0075 	.word	0x001d0075
          putsChnLetter(GENERAL_PARAM_OFS - FW + i*FW, y, channel_order(i), attr);
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.templateSetup, 0, 23);
        break;

      case ITEM_SETUP_STICK_MODE:
        lcd_puts( 1*FW, y, STR_MODE);
  4082a0:	2006      	movs	r0, #6
  4082a2:	4639      	mov	r1, r7
  4082a4:	4a9b      	ldr	r2, [pc, #620]	; (408514 <_Z13menuProcSetuph+0x324>)
  4082a6:	f7fa fb0f 	bl	4028c8 <_Z8lcd_putshhPKc>
        for(uint8_t i=0; i<4; i++) lcd_img((6+4*i)*FW, y, sticks,i,0);
  4082aa:	f04f 0800 	mov.w	r8, #0
          putsChnLetter(GENERAL_PARAM_OFS - FW + i*FW, y, channel_order(i), attr);
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.templateSetup, 0, 23);
        break;

      case ITEM_SETUP_STICK_MODE:
        lcd_puts( 1*FW, y, STR_MODE);
  4082ae:	f04f 0924 	mov.w	r9, #36	; 0x24
        for(uint8_t i=0; i<4; i++) lcd_img((6+4*i)*FW, y, sticks,i,0);
  4082b2:	9407      	str	r4, [sp, #28]
  4082b4:	4643      	mov	r3, r8
  4082b6:	f108 0801 	add.w	r8, r8, #1
  4082ba:	4648      	mov	r0, r9
  4082bc:	2400      	movs	r4, #0
  4082be:	4639      	mov	r1, r7
  4082c0:	4a95      	ldr	r2, [pc, #596]	; (408518 <_Z13menuProcSetuph+0x328>)
  4082c2:	fa5f f888 	uxtb.w	r8, r8
  4082c6:	9400      	str	r4, [sp, #0]
  4082c8:	f109 0918 	add.w	r9, r9, #24
  4082cc:	f7fa f988 	bl	4025e0 <_Z7lcd_imghhPKhhh>
  4082d0:	f1b8 0f04 	cmp.w	r8, #4
  4082d4:	fa5f f989 	uxtb.w	r9, r9
  4082d8:	d1ec      	bne.n	4082b4 <_Z13menuProcSetuph+0xc4>
        if((y+=FH)>7*FH) return;
  4082da:	2d38      	cmp	r5, #56	; 0x38
  4082dc:	9c07      	ldr	r4, [sp, #28]
  4082de:	d89a      	bhi.n	408216 <_Z13menuProcSetuph+0x26>
        lcd_putcAtt( 3*FW, y, '1'+g_eeGeneral.stickMode,(sub==k+1) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0);
  4082e0:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
  4082e4:	9f05      	ldr	r7, [sp, #20]
  4082e6:	f002 0203 	and.w	r2, r2, #3
  4082ea:	3231      	adds	r2, #49	; 0x31
  4082ec:	2300      	movs	r3, #0
  4082ee:	2f1d      	cmp	r7, #29
  4082f0:	f000 8376 	beq.w	4089e0 <_Z13menuProcSetuph+0x7f0>
  4082f4:	2012      	movs	r0, #18
  4082f6:	4629      	mov	r1, r5
  4082f8:	f7fa f9b8 	bl	40266c <_Z11lcd_putcAtthhhh>
  4082fc:	f04f 0824 	mov.w	r8, #36	; 0x24
  408300:	2700      	movs	r7, #0
        for(uint8_t i=0; i<4; i++) putsChnRaw( (6+4*i)*FW, y, pgm_read_byte(modn12x3 + 4*g_eeGeneral.stickMode + i), 0);
  408302:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
  408306:	4640      	mov	r0, r8
  408308:	f003 0303 	and.w	r3, r3, #3
  40830c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  408310:	19db      	adds	r3, r3, r7
  408312:	f813 2c9c 	ldrb.w	r2, [r3, #-156]
  408316:	4629      	mov	r1, r5
  408318:	2300      	movs	r3, #0
  40831a:	3701      	adds	r7, #1
  40831c:	f7fb f872 	bl	403404 <_Z10putsChnRawhhhh>
  408320:	f108 0818 	add.w	r8, r8, #24
  408324:	2f04      	cmp	r7, #4
  408326:	fa5f f888 	uxtb.w	r8, r8
  40832a:	d1ea      	bne.n	408302 <_Z13menuProcSetuph+0x112>

        if (sub==k+1 && s_editMode>0)
  40832c:	9f05      	ldr	r7, [sp, #20]
  40832e:	2f1d      	cmp	r7, #29
  408330:	f000 835d 	beq.w	4089ee <_Z13menuProcSetuph+0x7fe>
          CHECK_INCDEC_GENVAR(event, g_eeGeneral.stickMode, 0, 3);
        else
          stickMode = g_eeGeneral.stickMode;
  408334:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
  408338:	f3c3 0301 	ubfx	r3, r3, #0, #2
  40833c:	f88b 3a86 	strb.w	r3, [fp, #2694]	; 0xa86

  MENU(STR_MENURADIOSETUP, menuTabDiag, e_Setup, ITEM_SETUP_MAX+2, {0, 0, 0, AUDIO_ZEROS HAPTIC_ZEROS ARM_ZEROS ROTARY_ENCODERS_ZEROS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, SPLASH_ZEROS 0, 0, 0, 0, FRSKY_ZEROS 0, (uint8_t)-1, 1});

  uint8_t sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  408340:	3401      	adds	r4, #1
  408342:	b2e4      	uxtb	r4, r4
  408344:	3508      	adds	r5, #8
  408346:	2c07      	cmp	r4, #7
  408348:	b2ed      	uxtb	r5, r5
  40834a:	f47f af7a 	bne.w	408242 <_Z13menuProcSetuph+0x52>
  40834e:	e762      	b.n	408216 <_Z13menuProcSetuph+0x26>
        g_eeGeneral.gpsFormat = selectMenuItem(y, STR_GPSCOORD, STR_GPSFORMAT, g_eeGeneral.gpsFormat, 0, 1, attr, event);
        break;
#endif

      case ITEM_SETUP_RX_CHANNEL_ORD:
        lcd_putsLeft( y,STR_RXCHANNELORD);//   RAET->AETR
  408350:	4638      	mov	r0, r7
  408352:	4972      	ldr	r1, [pc, #456]	; (40851c <_Z13menuProcSetuph+0x32c>)
  408354:	f7fa faba 	bl	4028cc <_Z12lcd_putsLefthPKc>
  408358:	f04f 0c62 	mov.w	ip, #98	; 0x62
  40835c:	9407      	str	r4, [sp, #28]
  40835e:	f04f 0906 	mov.w	r9, #6
  408362:	4664      	mov	r4, ip
    0x87, 0x8D, 0x93, 0x9C, 0xB1, 0xB4,
    0xC6, 0xC9, 0xD2, 0xD8, 0xE1, 0xE4 };

uint8_t channel_order(uint8_t x)
{
  return ( ((pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup) >> (6-(x-1) * 2)) & 3 ) + 1 );
  408364:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
  408368:	f24f 7130 	movw	r1, #63280	; 0xf730
  40836c:	f2c0 0140 	movt	r1, #64	; 0x40
  408370:	5cca      	ldrb	r2, [r1, r3]
        for (uint8_t i=1; i<=4; i++)
          putsChnLetter(GENERAL_PARAM_OFS - FW + i*FW, y, channel_order(i), attr);
  408372:	4620      	mov	r0, r4
  408374:	fa42 f209 	asr.w	r2, r2, r9
  408378:	f002 0203 	and.w	r2, r2, #3
  40837c:	3201      	adds	r2, #1
  40837e:	4639      	mov	r1, r7
  408380:	4643      	mov	r3, r8
  408382:	f1a9 0902 	sub.w	r9, r9, #2
  408386:	3406      	adds	r4, #6
  408388:	f7fb f884 	bl	403494 <_Z13putsChnLetterhhhh>
        break;
#endif

      case ITEM_SETUP_RX_CHANNEL_ORD:
        lcd_putsLeft( y,STR_RXCHANNELORD);//   RAET->AETR
        for (uint8_t i=1; i<=4; i++)
  40838c:	f119 0f02 	cmn.w	r9, #2
          putsChnLetter(GENERAL_PARAM_OFS - FW + i*FW, y, channel_order(i), attr);
  408390:	b2e4      	uxtb	r4, r4
        break;
#endif

      case ITEM_SETUP_RX_CHANNEL_ORD:
        lcd_putsLeft( y,STR_RXCHANNELORD);//   RAET->AETR
        for (uint8_t i=1; i<=4; i++)
  408392:	d1e7      	bne.n	408364 <_Z13menuProcSetuph+0x174>
  408394:	9c07      	ldr	r4, [sp, #28]
          putsChnLetter(GENERAL_PARAM_OFS - FW + i*FW, y, channel_order(i), attr);
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.templateSetup, 0, 23);
  408396:	f1b8 0f00 	cmp.w	r8, #0
  40839a:	d0d1      	beq.n	408340 <_Z13menuProcSetuph+0x150>
  40839c:	f240 1208 	movw	r2, #264	; 0x108
  4083a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4083a4:	f992 106d 	ldrsb.w	r1, [r2, #109]	; 0x6d
  4083a8:	2317      	movs	r3, #23
  4083aa:	9806      	ldr	r0, [sp, #24]
  4083ac:	2200      	movs	r2, #0
  4083ae:	f7fe ff13 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  4083b2:	f240 1308 	movw	r3, #264	; 0x108
  4083b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4083ba:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
  4083be:	e7bf      	b.n	408340 <_Z13menuProcSetuph+0x150>
        g_eeGeneral.enableTelemetryAlarm = onoffMenuItem( b, y, STR_NODATAALARM, attr, event ) ;
        break;
      }

      case ITEM_SETUP_TIMEZONE:
        lcd_putsLeft(y, STR_TIMEZONE);
  4083c0:	4957      	ldr	r1, [pc, #348]	; (408520 <_Z13menuProcSetuph+0x330>)
  4083c2:	4638      	mov	r0, r7
  4083c4:	f7fa fa82 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, g_eeGeneral.timezone, attr|LEFT);
  4083c8:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
  4083cc:	f068 037f 	orn	r3, r8, #127	; 0x7f
  4083d0:	f342 0284 	sbfx	r2, r2, #2, #5
  4083d4:	b2db      	uxtb	r3, r3
  4083d6:	2062      	movs	r0, #98	; 0x62
  4083d8:	4639      	mov	r1, r7
  4083da:	f7fa fd2d 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.timezone, -12, 12);
  4083de:	f1b8 0f00 	cmp.w	r8, #0
  4083e2:	d0ad      	beq.n	408340 <_Z13menuProcSetuph+0x150>
  4083e4:	f896 1068 	ldrb.w	r1, [r6, #104]	; 0x68
  4083e8:	230c      	movs	r3, #12
  4083ea:	9806      	ldr	r0, [sp, #24]
  4083ec:	f341 0184 	sbfx	r1, r1, #2, #5
  4083f0:	f06f 020b 	mvn.w	r2, #11
  4083f4:	f7fe fef0 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  4083f8:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
  4083fc:	f360 0386 	bfi	r3, r0, #2, #5
  408400:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
  408404:	e79c      	b.n	408340 <_Z13menuProcSetuph+0x150>
      }

#if defined(FRSKY)
      case ITEM_SETUP_TELEMETRY_ALARM:
      {
        uint8_t b = g_eeGeneral.enableTelemetryAlarm;
  408406:	f896 006a 	ldrb.w	r0, [r6, #106]	; 0x6a
        g_eeGeneral.enableTelemetryAlarm = onoffMenuItem( b, y, STR_NODATAALARM, attr, event ) ;
  40840a:	4639      	mov	r1, r7
  40840c:	9f06      	ldr	r7, [sp, #24]
  40840e:	4643      	mov	r3, r8
  408410:	f3c0 1040 	ubfx	r0, r0, #5, #1
  408414:	4a43      	ldr	r2, [pc, #268]	; (408524 <_Z13menuProcSetuph+0x334>)
  408416:	9700      	str	r7, [sp, #0]
  408418:	f7fe ff0e 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  40841c:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  408420:	f360 1345 	bfi	r3, r0, #5, #1
  408424:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  408428:	e78a      	b.n	408340 <_Z13menuProcSetuph+0x150>
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, g_eeGeneral.timezone, attr|LEFT);
        if (attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.timezone, -12, 12);
        break;

      case ITEM_SETUP_GPSFORMAT:
        g_eeGeneral.gpsFormat = selectMenuItem(y, STR_GPSCOORD, STR_GPSFORMAT, g_eeGeneral.gpsFormat, 0, 1, attr, event);
  40842a:	f896 3071 	ldrb.w	r3, [r6, #113]	; 0x71
  40842e:	4638      	mov	r0, r7
  408430:	f04f 0e01 	mov.w	lr, #1
  408434:	2700      	movs	r7, #0
  408436:	e88d 4080 	stmia.w	sp, {r7, lr}
  40843a:	9f06      	ldr	r7, [sp, #24]
  40843c:	f3c3 1380 	ubfx	r3, r3, #6, #1
  408440:	4939      	ldr	r1, [pc, #228]	; (408528 <_Z13menuProcSetuph+0x338>)
  408442:	4a3a      	ldr	r2, [pc, #232]	; (40852c <_Z13menuProcSetuph+0x33c>)
  408444:	f8cd 8008 	str.w	r8, [sp, #8]
  408448:	9703      	str	r7, [sp, #12]
  40844a:	f7fe fecf 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  40844e:	f896 3071 	ldrb.w	r3, [r6, #113]	; 0x71
  408452:	f360 1386 	bfi	r3, r0, #6, #1
  408456:	f886 3071 	strb.w	r3, [r6, #113]	; 0x71
  40845a:	e771      	b.n	408340 <_Z13menuProcSetuph+0x150>
        break;
      }

      case ITEM_SETUP_ALARM_WARNING:
      {
        uint8_t b = 1-g_eeGeneral.disableAlarmWarning;
  40845c:	f896 0067 	ldrb.w	r0, [r6, #103]	; 0x67
        g_eeGeneral.disableAlarmWarning = 1 - onoffMenuItem( b, y, STR_ALARMWARNING, attr, event ) ;
  408460:	4639      	mov	r1, r7
        break;
      }

      case ITEM_SETUP_ALARM_WARNING:
      {
        uint8_t b = 1-g_eeGeneral.disableAlarmWarning;
  408462:	f080 0080 	eor.w	r0, r0, #128	; 0x80
        g_eeGeneral.disableAlarmWarning = 1 - onoffMenuItem( b, y, STR_ALARMWARNING, attr, event ) ;
  408466:	9f06      	ldr	r7, [sp, #24]
  408468:	4643      	mov	r3, r8
  40846a:	09c0      	lsrs	r0, r0, #7
  40846c:	4a30      	ldr	r2, [pc, #192]	; (408530 <_Z13menuProcSetuph+0x340>)
  40846e:	9700      	str	r7, [sp, #0]
  408470:	f7fe fee2 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  408474:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
  408478:	f1c0 0001 	rsb	r0, r0, #1
  40847c:	f360 13c7 	bfi	r3, r0, #7, #1
  408480:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
  408484:	e75c      	b.n	408340 <_Z13menuProcSetuph+0x150>
        g_eeGeneral.switchWarning = selectMenuItem(y, STR_SWITCHWARNING, STR_WARNSW, g_eeGeneral.switchWarning, -1, 1, attr, event);
        break;

      case ITEM_SETUP_MEMORY_WARNING:
      {
        uint8_t b = 1-g_eeGeneral.disableMemoryWarning;
  408486:	f896 0067 	ldrb.w	r0, [r6, #103]	; 0x67
        g_eeGeneral.disableMemoryWarning = 1 - onoffMenuItem( b, y, STR_MEMORYWARNING, attr, event ) ;
  40848a:	4639      	mov	r1, r7
        g_eeGeneral.switchWarning = selectMenuItem(y, STR_SWITCHWARNING, STR_WARNSW, g_eeGeneral.switchWarning, -1, 1, attr, event);
        break;

      case ITEM_SETUP_MEMORY_WARNING:
      {
        uint8_t b = 1-g_eeGeneral.disableMemoryWarning;
  40848c:	f080 0040 	eor.w	r0, r0, #64	; 0x40
        g_eeGeneral.disableMemoryWarning = 1 - onoffMenuItem( b, y, STR_MEMORYWARNING, attr, event ) ;
  408490:	9f06      	ldr	r7, [sp, #24]
  408492:	4643      	mov	r3, r8
  408494:	f3c0 1080 	ubfx	r0, r0, #6, #1
  408498:	4a26      	ldr	r2, [pc, #152]	; (408534 <_Z13menuProcSetuph+0x344>)
  40849a:	9700      	str	r7, [sp, #0]
  40849c:	f7fe fecc 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  4084a0:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
  4084a4:	f1c0 0001 	rsb	r0, r0, #1
  4084a8:	f360 1386 	bfi	r3, r0, #6, #1
  4084ac:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
  4084b0:	e746      	b.n	408340 <_Z13menuProcSetuph+0x150>
        g_eeGeneral.disableThrottleWarning = 1-onoffMenuItem( b, y, STR_THROTTLEWARNING, attr, event ) ;
        break;
      }

      case ITEM_SETUP_SWITCH_WARNING:
        g_eeGeneral.switchWarning = selectMenuItem(y, STR_SWITCHWARNING, STR_WARNSW, g_eeGeneral.switchWarning, -1, 1, attr, event);
  4084b2:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
  4084b6:	4638      	mov	r0, r7
  4084b8:	f04f 0c01 	mov.w	ip, #1
  4084bc:	f04f 37ff 	mov.w	r7, #4294967295
  4084c0:	e88d 1080 	stmia.w	sp, {r7, ip}
  4084c4:	9f06      	ldr	r7, [sp, #24]
  4084c6:	f343 0341 	sbfx	r3, r3, #1, #2
  4084ca:	491b      	ldr	r1, [pc, #108]	; (408538 <_Z13menuProcSetuph+0x348>)
  4084cc:	4a1b      	ldr	r2, [pc, #108]	; (40853c <_Z13menuProcSetuph+0x34c>)
  4084ce:	f8cd 8008 	str.w	r8, [sp, #8]
  4084d2:	9703      	str	r7, [sp, #12]
  4084d4:	f7fe fe8a 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  4084d8:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
  4084dc:	f360 0342 	bfi	r3, r0, #1, #2
  4084e0:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
  4084e4:	e72c      	b.n	408340 <_Z13menuProcSetuph+0x150>
      }
#endif

      case ITEM_SETUP_THROTTLE_WARNING:
      {
        uint8_t b = 1-g_eeGeneral.disableThrottleWarning;
  4084e6:	f896 0067 	ldrb.w	r0, [r6, #103]	; 0x67
        g_eeGeneral.disableThrottleWarning = 1-onoffMenuItem( b, y, STR_THROTTLEWARNING, attr, event ) ;
  4084ea:	4639      	mov	r1, r7
      }
#endif

      case ITEM_SETUP_THROTTLE_WARNING:
      {
        uint8_t b = 1-g_eeGeneral.disableThrottleWarning;
  4084ec:	43c0      	mvns	r0, r0
        g_eeGeneral.disableThrottleWarning = 1-onoffMenuItem( b, y, STR_THROTTLEWARNING, attr, event ) ;
  4084ee:	9f06      	ldr	r7, [sp, #24]
  4084f0:	4643      	mov	r3, r8
  4084f2:	f000 0001 	and.w	r0, r0, #1
  4084f6:	4a12      	ldr	r2, [pc, #72]	; (408540 <_Z13menuProcSetuph+0x350>)
  4084f8:	9700      	str	r7, [sp, #0]
  4084fa:	f7fe fe9d 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  4084fe:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
  408502:	f1c0 0001 	rsb	r0, r0, #1
  408506:	f360 0300 	bfi	r3, r0, #0, #1
  40850a:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
  40850e:	e717      	b.n	408340 <_Z13menuProcSetuph+0x150>
  408510:	20000108 	.word	0x20000108
  408514:	0041090c 	.word	0x0041090c
  408518:	00410ac8 	.word	0x00410ac8
  40851c:	00410ab8 	.word	0x00410ab8
  408520:	00410aa0 	.word	0x00410aa0
  408524:	00410a90 	.word	0x00410a90
  408528:	00410aac 	.word	0x00410aac
  40852c:	0041062a 	.word	0x0041062a
  408530:	00410a80 	.word	0x00410a80
  408534:	00410a70 	.word	0x00410a70
  408538:	00410a60 	.word	0x00410a60
  40853c:	00410343 	.word	0x00410343
  408540:	00410a54 	.word	0x00410a54
  408544:	00410828 	.word	0x00410828
  408548:	20001200 	.word	0x20001200
        break;

#ifdef SPLASH
      case ITEM_SETUP_DISABLE_SPLASH:
      {
        uint8_t b = 1-g_eeGeneral.disableSplashScreen;
  40854c:	f896 006a 	ldrb.w	r0, [r6, #106]	; 0x6a
        g_eeGeneral.disableSplashScreen = 1 - onoffMenuItem( b, y, STR_SPLASHSCREEN, attr, event ) ;
  408550:	4639      	mov	r1, r7
        break;

#ifdef SPLASH
      case ITEM_SETUP_DISABLE_SPLASH:
      {
        uint8_t b = 1-g_eeGeneral.disableSplashScreen;
  408552:	f080 0010 	eor.w	r0, r0, #16
        g_eeGeneral.disableSplashScreen = 1 - onoffMenuItem( b, y, STR_SPLASHSCREEN, attr, event ) ;
  408556:	9f06      	ldr	r7, [sp, #24]
  408558:	4643      	mov	r3, r8
  40855a:	f3c0 1000 	ubfx	r0, r0, #4, #1
  40855e:	4ac7      	ldr	r2, [pc, #796]	; (40887c <_Z13menuProcSetuph+0x68c>)
  408560:	9700      	str	r7, [sp, #0]
  408562:	f7fe fe69 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  408566:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  40856a:	f1c0 0001 	rsb	r0, r0, #1
  40856e:	f360 1304 	bfi	r3, r0, #4, #1
  408572:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  408576:	e6e3      	b.n	408340 <_Z13menuProcSetuph+0x150>
        putsSwitches(GENERAL_PARAM_OFS,y,g_eeGeneral.lightSw,attr ? INVERS : 0);
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.lightSw, SWITCH_OFF, SWITCH_ON);
        break;

      case ITEM_SETUP_LIGHT_OFF_AFTER:
        lcd_putsLeft( y, STR_LIGHTOFFAFTER);
  408578:	4638      	mov	r0, r7
  40857a:	49c1      	ldr	r1, [pc, #772]	; (408880 <_Z13menuProcSetuph+0x690>)
  40857c:	f7fa f9a6 	bl	4028cc <_Z12lcd_putsLefthPKc>
        if(g_eeGeneral.lightAutoOff) {
  408580:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
  408584:	2b00      	cmp	r3, #0
  408586:	f000 8223 	beq.w	4089d0 <_Z13menuProcSetuph+0x7e0>
          lcd_outdezAtt(GENERAL_PARAM_OFS, y, g_eeGeneral.lightAutoOff*5, attr|LEFT);
  40858a:	f068 017f 	orn	r1, r8, #127	; 0x7f
  40858e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  408592:	2062      	movs	r0, #98	; 0x62
  408594:	b2cb      	uxtb	r3, r1
  408596:	4639      	mov	r1, r7
  408598:	f7fa fc4e 	bl	402e38 <_Z13lcd_outdezAtthhsh>
          lcd_putc(lcd_lastPos, y, 's');
  40859c:	f89b 0a85 	ldrb.w	r0, [fp, #2693]	; 0xa85
  4085a0:	4639      	mov	r1, r7
  4085a2:	2273      	movs	r2, #115	; 0x73
  4085a4:	f7fa f91e 	bl	4027e4 <_Z8lcd_putchhh>
        }
        else {
          lcd_putsiAtt(GENERAL_PARAM_OFS, y, STR_OFFON, 0, attr);
        }
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.lightAutoOff, 0, 600/5);
  4085a8:	f1b8 0f00 	cmp.w	r8, #0
  4085ac:	f43f aec8 	beq.w	408340 <_Z13menuProcSetuph+0x150>
  4085b0:	f996 106c 	ldrsb.w	r1, [r6, #108]	; 0x6c
  4085b4:	9806      	ldr	r0, [sp, #24]
  4085b6:	2200      	movs	r2, #0
  4085b8:	2378      	movs	r3, #120	; 0x78
  4085ba:	f7fe fe0d 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  4085be:	f886 006c 	strb.w	r0, [r6, #108]	; 0x6c
  4085c2:	e6bd      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_FLASH_BEEP:
        g_eeGeneral.flashBeep = onoffMenuItem( g_eeGeneral.flashBeep, y, STR_FLASHONBEEP, attr, event ) ;
        break;

      case ITEM_SETUP_LIGHT_SWITCH:
        lcd_putsLeft( y, STR_LIGHTSWITCH);
  4085c4:	4638      	mov	r0, r7
  4085c6:	49af      	ldr	r1, [pc, #700]	; (408884 <_Z13menuProcSetuph+0x694>)
  4085c8:	f7fa f980 	bl	4028cc <_Z12lcd_putsLefthPKc>
        putsSwitches(GENERAL_PARAM_OFS,y,g_eeGeneral.lightSw,attr ? INVERS : 0);
  4085cc:	f896 2055 	ldrb.w	r2, [r6, #85]	; 0x55
  4085d0:	2062      	movs	r0, #98	; 0x62
  4085d2:	b252      	sxtb	r2, r2
  4085d4:	4639      	mov	r1, r7
  4085d6:	f1b8 0f00 	cmp.w	r8, #0
  4085da:	f000 81f5 	beq.w	4089c8 <_Z13menuProcSetuph+0x7d8>
  4085de:	2302      	movs	r3, #2
  4085e0:	f7fa ff88 	bl	4034f4 <_Z12putsSwitcheshhah>
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.lightSw, SWITCH_OFF, SWITCH_ON);
  4085e4:	f996 1055 	ldrsb.w	r1, [r6, #85]	; 0x55
  4085e8:	9806      	ldr	r0, [sp, #24]
  4085ea:	f06f 0229 	mvn.w	r2, #41	; 0x29
  4085ee:	232a      	movs	r3, #42	; 0x2a
  4085f0:	f7fe fdf2 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  4085f4:	f886 0055 	strb.w	r0, [r6, #85]	; 0x55
  4085f8:	e6a2      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_COUNTDOWN_BEEP:
        g_eeGeneral.preBeep = onoffMenuItem( g_eeGeneral.preBeep, y, STR_BEEPCOUNTDOWN, attr, event ) ;
        break;

      case ITEM_SETUP_FLASH_BEEP:
        g_eeGeneral.flashBeep = onoffMenuItem( g_eeGeneral.flashBeep, y, STR_FLASHONBEEP, attr, event ) ;
  4085fa:	f896 006a 	ldrb.w	r0, [r6, #106]	; 0x6a
  4085fe:	4639      	mov	r1, r7
  408600:	9f06      	ldr	r7, [sp, #24]
  408602:	4643      	mov	r3, r8
  408604:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  408608:	4a9f      	ldr	r2, [pc, #636]	; (408888 <_Z13menuProcSetuph+0x698>)
  40860a:	9700      	str	r7, [sp, #0]
  40860c:	f7fe fe14 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  408610:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  408614:	f360 03c3 	bfi	r3, r0, #3, #1
  408618:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  40861c:	e690      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_MINUTE_BEEP:
        g_eeGeneral.minuteBeep = onoffMenuItem( g_eeGeneral.minuteBeep, y, STR_MINUTEBEEP, attr, event ) ;
        break;

      case ITEM_SETUP_COUNTDOWN_BEEP:
        g_eeGeneral.preBeep = onoffMenuItem( g_eeGeneral.preBeep, y, STR_BEEPCOUNTDOWN, attr, event ) ;
  40861e:	f896 006a 	ldrb.w	r0, [r6, #106]	; 0x6a
  408622:	4639      	mov	r1, r7
  408624:	9f06      	ldr	r7, [sp, #24]
  408626:	4643      	mov	r3, r8
  408628:	f3c0 0080 	ubfx	r0, r0, #2, #1
  40862c:	4a97      	ldr	r2, [pc, #604]	; (40888c <_Z13menuProcSetuph+0x69c>)
  40862e:	9700      	str	r7, [sp, #0]
  408630:	f7fe fe02 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  408634:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  408638:	f360 0382 	bfi	r3, r0, #2, #1
  40863c:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  408640:	e67e      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_THROTTLE_REVERSED:
        g_eeGeneral.throttleReversed = onoffMenuItem( g_eeGeneral.throttleReversed, y, STR_THROTTLEREVERSE, attr, event ) ;
        break;

      case ITEM_SETUP_MINUTE_BEEP:
        g_eeGeneral.minuteBeep = onoffMenuItem( g_eeGeneral.minuteBeep, y, STR_MINUTEBEEP, attr, event ) ;
  408642:	f896 006a 	ldrb.w	r0, [r6, #106]	; 0x6a
  408646:	4639      	mov	r1, r7
  408648:	9f06      	ldr	r7, [sp, #24]
  40864a:	4643      	mov	r3, r8
  40864c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  408650:	4a8f      	ldr	r2, [pc, #572]	; (408890 <_Z13menuProcSetuph+0x6a0>)
  408652:	9700      	str	r7, [sp, #0]
  408654:	f7fe fdf0 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  408658:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  40865c:	f360 0341 	bfi	r3, r0, #1, #1
  408660:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  408664:	e66c      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_FILTER_ADC:
        g_eeGeneral.filterInput = selectMenuItem(y, STR_FILTERADC, STR_VFILTERADC, g_eeGeneral.filterInput, 0, 2, attr, event);
        break;

      case ITEM_SETUP_THROTTLE_REVERSED:
        g_eeGeneral.throttleReversed = onoffMenuItem( g_eeGeneral.throttleReversed, y, STR_THROTTLEREVERSE, attr, event ) ;
  408666:	f896 006a 	ldrb.w	r0, [r6, #106]	; 0x6a
  40866a:	4639      	mov	r1, r7
  40866c:	9f06      	ldr	r7, [sp, #24]
  40866e:	4643      	mov	r3, r8
  408670:	f000 0001 	and.w	r0, r0, #1
  408674:	4a87      	ldr	r2, [pc, #540]	; (408894 <_Z13menuProcSetuph+0x6a4>)
  408676:	9700      	str	r7, [sp, #0]
  408678:	f7fe fdde 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  40867c:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  408680:	f360 0300 	bfi	r3, r0, #0, #1
  408684:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  408688:	e65a      	b.n	408340 <_Z13menuProcSetuph+0x150>
        }
        break;
#endif

      case ITEM_SETUP_FILTER_ADC:
        g_eeGeneral.filterInput = selectMenuItem(y, STR_FILTERADC, STR_VFILTERADC, g_eeGeneral.filterInput, 0, 2, attr, event);
  40868a:	4638      	mov	r0, r7
  40868c:	f04f 0e02 	mov.w	lr, #2
  408690:	2700      	movs	r7, #0
  408692:	e88d 4080 	stmia.w	sp, {r7, lr}
  408696:	9f06      	ldr	r7, [sp, #24]
  408698:	f996 306b 	ldrsb.w	r3, [r6, #107]	; 0x6b
  40869c:	497e      	ldr	r1, [pc, #504]	; (408898 <_Z13menuProcSetuph+0x6a8>)
  40869e:	4a7f      	ldr	r2, [pc, #508]	; (40889c <_Z13menuProcSetuph+0x6ac>)
  4086a0:	f8cd 8008 	str.w	r8, [sp, #8]
  4086a4:	9703      	str	r7, [sp, #12]
  4086a6:	f7fe fda1 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  4086aa:	f886 006b 	strb.w	r0, [r6, #107]	; 0x6b
  4086ae:	e647      	b.n	408340 <_Z13menuProcSetuph+0x150>
        putsVolts(GENERAL_PARAM_OFS, y, g_eeGeneral.vBatWarn, attr|LEFT);
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.vBatWarn, 40, 120); //4-12V
        break;

      case ITEM_SETUP_INACTIVITY_ALARM:
        lcd_putsLeft( y,STR_INACTIVITYALARM);
  4086b0:	4638      	mov	r0, r7
  4086b2:	497b      	ldr	r1, [pc, #492]	; (4088a0 <_Z13menuProcSetuph+0x6b0>)
  4086b4:	f7fa f90a 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, g_eeGeneral.inactivityTimer, attr|LEFT);
  4086b8:	f068 037f 	orn	r3, r8, #127	; 0x7f
  4086bc:	f896 2069 	ldrb.w	r2, [r6, #105]	; 0x69
  4086c0:	4639      	mov	r1, r7
  4086c2:	2062      	movs	r0, #98	; 0x62
  4086c4:	b2db      	uxtb	r3, r3
  4086c6:	f7fa fbb7 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        lcd_putc(lcd_lastPos, y, 'm');
  4086ca:	f89b 0a85 	ldrb.w	r0, [fp, #2693]	; 0xa85
  4086ce:	4639      	mov	r1, r7
  4086d0:	226d      	movs	r2, #109	; 0x6d
  4086d2:	f7fa f887 	bl	4027e4 <_Z8lcd_putchhh>
        if(attr) g_eeGeneral.inactivityTimer = checkIncDec(event, g_eeGeneral.inactivityTimer, 0, 250, EE_GENERAL); //0..250minutes
  4086d6:	f1b8 0f00 	cmp.w	r8, #0
  4086da:	f43f ae31 	beq.w	408340 <_Z13menuProcSetuph+0x150>
  4086de:	f896 1069 	ldrb.w	r1, [r6, #105]	; 0x69
  4086e2:	9806      	ldr	r0, [sp, #24]
  4086e4:	2200      	movs	r2, #0
  4086e6:	23fa      	movs	r3, #250	; 0xfa
  4086e8:	2701      	movs	r7, #1
  4086ea:	9700      	str	r7, [sp, #0]
  4086ec:	f7fe fc48 	bl	406f80 <_Z11checkIncDechsssh>
  4086f0:	f886 0069 	strb.w	r0, [r6, #105]	; 0x69
  4086f4:	e624      	b.n	408340 <_Z13menuProcSetuph+0x150>
          lcdSetRefVolt(g_eeGeneral.contrast);
        }
        break;

      case ITEM_SETUP_BATTERY_WARNING:
        lcd_putsLeft( y,STR_BATTERYWARNING);
  4086f6:	496b      	ldr	r1, [pc, #428]	; (4088a4 <_Z13menuProcSetuph+0x6b4>)
  4086f8:	4638      	mov	r0, r7
  4086fa:	f7fa f8e7 	bl	4028cc <_Z12lcd_putsLefthPKc>
        putsVolts(GENERAL_PARAM_OFS, y, g_eeGeneral.vBatWarn, attr|LEFT);
  4086fe:	f068 037f 	orn	r3, r8, #127	; 0x7f
  408702:	f896 2053 	ldrb.w	r2, [r6, #83]	; 0x53
  408706:	b2db      	uxtb	r3, r3
  408708:	2062      	movs	r0, #98	; 0x62
  40870a:	4639      	mov	r1, r7
  40870c:	f7fa fe28 	bl	403360 <_Z9putsVoltshhth>
        if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.vBatWarn, 40, 120); //4-12V
  408710:	f1b8 0f00 	cmp.w	r8, #0
  408714:	f43f ae14 	beq.w	408340 <_Z13menuProcSetuph+0x150>
  408718:	f996 1053 	ldrsb.w	r1, [r6, #83]	; 0x53
  40871c:	9806      	ldr	r0, [sp, #24]
  40871e:	2228      	movs	r2, #40	; 0x28
  408720:	2378      	movs	r3, #120	; 0x78
  408722:	f7fe fd59 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  408726:	f886 0053 	strb.w	r0, [r6, #83]	; 0x53
  40872a:	e609      	b.n	408340 <_Z13menuProcSetuph+0x150>
        }
        break;
#endif

      case ITEM_SETUP_CONTRAST:
        lcd_putsLeft( y, STR_CONTRAST);
  40872c:	495e      	ldr	r1, [pc, #376]	; (4088a8 <_Z13menuProcSetuph+0x6b8>)
  40872e:	4638      	mov	r0, r7
  408730:	f7fa f8cc 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(GENERAL_PARAM_OFS,y,g_eeGeneral.contrast, attr|LEFT);
  408734:	f068 037f 	orn	r3, r8, #127	; 0x7f
  408738:	f896 2052 	ldrb.w	r2, [r6, #82]	; 0x52
  40873c:	b2db      	uxtb	r3, r3
  40873e:	2062      	movs	r0, #98	; 0x62
  408740:	4639      	mov	r1, r7
  408742:	f7fa fb79 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr) {
  408746:	f1b8 0f00 	cmp.w	r8, #0
  40874a:	f43f adf9 	beq.w	408340 <_Z13menuProcSetuph+0x150>
          CHECK_INCDEC_GENVAR(event, g_eeGeneral.contrast, 10, 45);
  40874e:	f996 1052 	ldrsb.w	r1, [r6, #82]	; 0x52
  408752:	220a      	movs	r2, #10
  408754:	232d      	movs	r3, #45	; 0x2d
  408756:	9806      	ldr	r0, [sp, #24]
  408758:	f7fe fd3e 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  40875c:	b2c0      	uxtb	r0, r0
  40875e:	f886 0052 	strb.w	r0, [r6, #82]	; 0x52
          lcdSetRefVolt(g_eeGeneral.contrast);
  408762:	f7fb f9e5 	bl	403b30 <_Z13lcdSetRefVolth>
  408766:	e5eb      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_OPTREX_DISPLAY:
        g_eeGeneral.optrexDisplay = onoffMenuItem( g_eeGeneral.optrexDisplay, y, PSTR("Optrex Display"), attr, event ) ;
        break;

      case ITEM_SETUP_BRIGHTNESS:
        lcd_putsLeft(y, PSTR("Brightness")); // TODO translations in the whole file ...
  408768:	4950      	ldr	r1, [pc, #320]	; (4088ac <_Z13menuProcSetuph+0x6bc>)
  40876a:	4638      	mov	r0, r7
  40876c:	f7fa f8ae 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, 100-g_eeGeneral.backlightBright, attr|LEFT) ;
  408770:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
  408774:	f068 037f 	orn	r3, r8, #127	; 0x7f
  408778:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
  40877c:	b2db      	uxtb	r3, r3
  40877e:	2062      	movs	r0, #98	; 0x62
  408780:	4639      	mov	r1, r7
  408782:	f7fa fb59 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr) {
  408786:	f1b8 0f00 	cmp.w	r8, #0
  40878a:	f43f add9 	beq.w	408340 <_Z13menuProcSetuph+0x150>
          uint8_t b ;
          b = 100 - g_eeGeneral.backlightBright;
  40878e:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
          CHECK_INCDEC_GENVAR(event, b, 0, 100);
  408792:	2200      	movs	r2, #0
      case ITEM_SETUP_BRIGHTNESS:
        lcd_putsLeft(y, PSTR("Brightness")); // TODO translations in the whole file ...
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, 100-g_eeGeneral.backlightBright, attr|LEFT) ;
        if(attr) {
          uint8_t b ;
          b = 100 - g_eeGeneral.backlightBright;
  408794:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
          CHECK_INCDEC_GENVAR(event, b, 0, 100);
  408798:	2364      	movs	r3, #100	; 0x64
  40879a:	9806      	ldr	r0, [sp, #24]
  40879c:	b249      	sxtb	r1, r1
  40879e:	f7fe fd1b 	bl	4071d8 <_Z14checkIncDecGenhaaa>
          g_eeGeneral.backlightBright = 100 - b;
#ifndef SIMU
          PWM->PWM_CH_NUM[0].PWM_CDTYUPD = g_eeGeneral.backlightBright ;
  4087a2:	2300      	movs	r3, #0
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, 100-g_eeGeneral.backlightBright, attr|LEFT) ;
        if(attr) {
          uint8_t b ;
          b = 100 - g_eeGeneral.backlightBright;
          CHECK_INCDEC_GENVAR(event, b, 0, 100);
          g_eeGeneral.backlightBright = 100 - b;
  4087a4:	f1c0 0264 	rsb	r2, r0, #100	; 0x64
  4087a8:	b2d2      	uxtb	r2, r2
#ifndef SIMU
          PWM->PWM_CH_NUM[0].PWM_CDTYUPD = g_eeGeneral.backlightBright ;
  4087aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, 100-g_eeGeneral.backlightBright, attr|LEFT) ;
        if(attr) {
          uint8_t b ;
          b = 100 - g_eeGeneral.backlightBright;
          CHECK_INCDEC_GENVAR(event, b, 0, 100);
          g_eeGeneral.backlightBright = 100 - b;
  4087ae:	f886 2074 	strb.w	r2, [r6, #116]	; 0x74
#ifndef SIMU
          PWM->PWM_CH_NUM[0].PWM_CDTYUPD = g_eeGeneral.backlightBright ;
  4087b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  4087b6:	e5c3      	b.n	408340 <_Z13menuProcSetuph+0x150>
        break;
#endif

#if defined(PCBARM)
      case ITEM_SETUP_OPTREX_DISPLAY:
        g_eeGeneral.optrexDisplay = onoffMenuItem( g_eeGeneral.optrexDisplay, y, PSTR("Optrex Display"), attr, event ) ;
  4087b8:	f896 0068 	ldrb.w	r0, [r6, #104]	; 0x68
  4087bc:	4639      	mov	r1, r7
  4087be:	9f06      	ldr	r7, [sp, #24]
  4087c0:	4643      	mov	r3, r8
  4087c2:	09c0      	lsrs	r0, r0, #7
  4087c4:	4a3a      	ldr	r2, [pc, #232]	; (4088b0 <_Z13menuProcSetuph+0x6c0>)
  4087c6:	9700      	str	r7, [sp, #0]
  4087c8:	f7fe fd36 	bl	407238 <_Z13onoffMenuItemhhPKchh>
  4087cc:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
  4087d0:	f360 13c7 	bfi	r3, r0, #7, #1
  4087d4:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
  4087d8:	e5b2      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_HAPTIC_LENGTH:
        g_eeGeneral.hapticLength = selectMenuItem(y, STR_HAPTICLENGTH, STR_VBEEPLEN, g_eeGeneral.hapticLength, -2, 2, attr, event);
        break;

      case ITEM_SETUP_HAPTIC_STRENGTH:
        lcd_putsLeft( y, STR_HAPTICSTRENGTH);
  4087da:	4936      	ldr	r1, [pc, #216]	; (4088b4 <_Z13menuProcSetuph+0x6c4>)
  4087dc:	4638      	mov	r0, r7
  4087de:	f7fa f875 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, g_eeGeneral.hapticStrength, attr|LEFT);
  4087e2:	f896 2071 	ldrb.w	r2, [r6, #113]	; 0x71
  4087e6:	f068 037f 	orn	r3, r8, #127	; 0x7f
  4087ea:	f3c2 02c2 	ubfx	r2, r2, #3, #3
  4087ee:	b2db      	uxtb	r3, r3
  4087f0:	2062      	movs	r0, #98	; 0x62
  4087f2:	4639      	mov	r1, r7
  4087f4:	f7fa fb20 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (attr) {
  4087f8:	f1b8 0f00 	cmp.w	r8, #0
  4087fc:	f43f ada0 	beq.w	408340 <_Z13menuProcSetuph+0x150>
          CHECK_INCDEC_GENVAR(event, g_eeGeneral.hapticStrength, 0, 5);
  408800:	f896 1071 	ldrb.w	r1, [r6, #113]	; 0x71
  408804:	2305      	movs	r3, #5
  408806:	9806      	ldr	r0, [sp, #24]
  408808:	f3c1 01c2 	ubfx	r1, r1, #3, #3
  40880c:	2200      	movs	r2, #0
  40880e:	f7fe fce3 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  408812:	f896 3071 	ldrb.w	r3, [r6, #113]	; 0x71
  408816:	f360 03c5 	bfi	r3, r0, #3, #3
  40881a:	f886 3071 	strb.w	r3, [r6, #113]	; 0x71
  40881e:	e58f      	b.n	408340 <_Z13menuProcSetuph+0x150>
      case ITEM_SETUP_HAPTIC_MODE:
        g_eeGeneral.hapticMode = selectMenuItem(y, STR_HAPTICMODE, STR_VBEEPMODE, g_eeGeneral.hapticMode, -2, 1, attr, event);
        break;

      case ITEM_SETUP_HAPTIC_LENGTH:
        g_eeGeneral.hapticLength = selectMenuItem(y, STR_HAPTICLENGTH, STR_VBEEPLEN, g_eeGeneral.hapticLength, -2, 2, attr, event);
  408820:	4638      	mov	r0, r7
  408822:	f04f 0c02 	mov.w	ip, #2
  408826:	f06f 0701 	mvn.w	r7, #1
  40882a:	e88d 1080 	stmia.w	sp, {r7, ip}
  40882e:	9f06      	ldr	r7, [sp, #24]
  408830:	f996 306f 	ldrsb.w	r3, [r6, #111]	; 0x6f
  408834:	4920      	ldr	r1, [pc, #128]	; (4088b8 <_Z13menuProcSetuph+0x6c8>)
  408836:	4a21      	ldr	r2, [pc, #132]	; (4088bc <_Z13menuProcSetuph+0x6cc>)
  408838:	f8cd 8008 	str.w	r8, [sp, #8]
  40883c:	9703      	str	r7, [sp, #12]
  40883e:	f7fe fcd5 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  408842:	f886 006f 	strb.w	r0, [r6, #111]	; 0x6f
  408846:	e57b      	b.n	408340 <_Z13menuProcSetuph+0x150>
        break;
#endif

#ifdef HAPTIC
      case ITEM_SETUP_HAPTIC_MODE:
        g_eeGeneral.hapticMode = selectMenuItem(y, STR_HAPTICMODE, STR_VBEEPMODE, g_eeGeneral.hapticMode, -2, 1, attr, event);
  408848:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  40884c:	4638      	mov	r0, r7
  40884e:	f04f 0e01 	mov.w	lr, #1
  408852:	f06f 0701 	mvn.w	r7, #1
  408856:	e88d 4080 	stmia.w	sp, {r7, lr}
  40885a:	9f06      	ldr	r7, [sp, #24]
  40885c:	f343 1381 	sbfx	r3, r3, #6, #2
  408860:	4917      	ldr	r1, [pc, #92]	; (4088c0 <_Z13menuProcSetuph+0x6d0>)
  408862:	4a18      	ldr	r2, [pc, #96]	; (4088c4 <_Z13menuProcSetuph+0x6d4>)
  408864:	f8cd 8008 	str.w	r8, [sp, #8]
  408868:	9703      	str	r7, [sp, #12]
  40886a:	f7fe fcbf 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  40886e:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
  408872:	f360 1387 	bfi	r3, r0, #6, #2
  408876:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  40887a:	e561      	b.n	408340 <_Z13menuProcSetuph+0x150>
  40887c:	00410a44 	.word	0x00410a44
  408880:	00410a34 	.word	0x00410a34
  408884:	00410a24 	.word	0x00410a24
  408888:	00410a14 	.word	0x00410a14
  40888c:	00410a04 	.word	0x00410a04
  408890:	004109f8 	.word	0x004109f8
  408894:	004109ec 	.word	0x004109ec
  408898:	004109e0 	.word	0x004109e0
  40889c:	00410336 	.word	0x00410336
  4088a0:	004109d0 	.word	0x004109d0
  4088a4:	004109c0 	.word	0x004109c0
  4088a8:	004109b4 	.word	0x004109b4
  4088ac:	00411440 	.word	0x00411440
  4088b0:	00411430 	.word	0x00411430
  4088b4:	004109a4 	.word	0x004109a4
  4088b8:	00410994 	.word	0x00410994
  4088bc:	0041031c 	.word	0x0041031c
  4088c0:	00410988 	.word	0x00410988
  4088c4:	00410307 	.word	0x00410307
        g_eeGeneral.beeperLength = selectMenuItem(y, STR_BEEPERLEN, STR_VBEEPLEN, g_eeGeneral.beeperLength, -2, 2, attr, event);
        break;

#if defined(AUDIO)
      case ITEM_SETUP_SPEAKER_PITCH:
        lcd_putsLeft( y, STR_SPKRPITCH);
  4088c8:	4957      	ldr	r1, [pc, #348]	; (408a28 <_Z13menuProcSetuph+0x838>)
  4088ca:	4638      	mov	r0, r7
  4088cc:	f7f9 fffe 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, g_eeGeneral.speakerPitch, attr|LEFT);
  4088d0:	f068 037f 	orn	r3, r8, #127	; 0x7f
  4088d4:	f896 2072 	ldrb.w	r2, [r6, #114]	; 0x72
  4088d8:	b2db      	uxtb	r3, r3
  4088da:	2062      	movs	r0, #98	; 0x62
  4088dc:	4639      	mov	r1, r7
  4088de:	f7fa faab 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (attr) {
  4088e2:	f1b8 0f00 	cmp.w	r8, #0
  4088e6:	f43f ad2b 	beq.w	408340 <_Z13menuProcSetuph+0x150>
          CHECK_INCDEC_GENVAR(event, g_eeGeneral.speakerPitch, 0, 100);
  4088ea:	f996 1072 	ldrsb.w	r1, [r6, #114]	; 0x72
  4088ee:	9806      	ldr	r0, [sp, #24]
  4088f0:	2200      	movs	r2, #0
  4088f2:	2364      	movs	r3, #100	; 0x64
  4088f4:	f7fe fc70 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  4088f8:	f886 0072 	strb.w	r0, [r6, #114]	; 0x72
  4088fc:	e520      	b.n	408340 <_Z13menuProcSetuph+0x150>
        break;
      }
#endif

      case ITEM_SETUP_BEEPER_LENGTH:
        g_eeGeneral.beeperLength = selectMenuItem(y, STR_BEEPERLEN, STR_VBEEPLEN, g_eeGeneral.beeperLength, -2, 2, attr, event);
  4088fe:	f896 3071 	ldrb.w	r3, [r6, #113]	; 0x71
  408902:	4638      	mov	r0, r7
  408904:	f04f 0c02 	mov.w	ip, #2
  408908:	f06f 0701 	mvn.w	r7, #1
  40890c:	e88d 1080 	stmia.w	sp, {r7, ip}
  408910:	9f06      	ldr	r7, [sp, #24]
  408912:	f343 0302 	sbfx	r3, r3, #0, #3
  408916:	4945      	ldr	r1, [pc, #276]	; (408a2c <_Z13menuProcSetuph+0x83c>)
  408918:	4a45      	ldr	r2, [pc, #276]	; (408a30 <_Z13menuProcSetuph+0x840>)
  40891a:	f8cd 8008 	str.w	r8, [sp, #8]
  40891e:	9703      	str	r7, [sp, #12]
  408920:	f7fe fc64 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  408924:	f896 3071 	ldrb.w	r3, [r6, #113]	; 0x71
  408928:	f360 0302 	bfi	r3, r0, #0, #3
  40892c:	f886 3071 	strb.w	r3, [r6, #113]	; 0x71
  408930:	e506      	b.n	408340 <_Z13menuProcSetuph+0x150>
        break;

#if defined(PCBARM)
      case ITEM_SETUP_SPEAKER_VOLUME:
      {
        uint8_t current_volume = g_eeGeneral.speakerVolume;
  408932:	f896 9073 	ldrb.w	r9, [r6, #115]	; 0x73
        lcd_putsLeft(y, PSTR("Speaker Volume")); // TODO translations
  408936:	493f      	ldr	r1, [pc, #252]	; (408a34 <_Z13menuProcSetuph+0x844>)
  408938:	4638      	mov	r0, r7
  40893a:	f7f9 ffc7 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, current_volume, attr|LEFT);
  40893e:	f068 037f 	orn	r3, r8, #127	; 0x7f
  408942:	b2db      	uxtb	r3, r3
  408944:	fa0f f289 	sxth.w	r2, r9
  408948:	2062      	movs	r0, #98	; 0x62
  40894a:	4639      	mov	r1, r7
  40894c:	f7fa fa74 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr) {
  408950:	f1b8 0f00 	cmp.w	r8, #0
  408954:	f43f acf4 	beq.w	408340 <_Z13menuProcSetuph+0x150>
          CHECK_INCDEC_GENVAR(event, current_volume, 0, NUM_VOL_LEVELS-1);
  408958:	2317      	movs	r3, #23
  40895a:	2200      	movs	r2, #0
  40895c:	fa4f f189 	sxtb.w	r1, r9
  408960:	9806      	ldr	r0, [sp, #24]
  408962:	f7fe fc39 	bl	4071d8 <_Z14checkIncDecGenhaaa>
          if (current_volume != g_eeGeneral.speakerVolume) {
  408966:	f896 3073 	ldrb.w	r3, [r6, #115]	; 0x73
      {
        uint8_t current_volume = g_eeGeneral.speakerVolume;
        lcd_putsLeft(y, PSTR("Speaker Volume")); // TODO translations
        lcd_outdezAtt(GENERAL_PARAM_OFS, y, current_volume, attr|LEFT);
        if(attr) {
          CHECK_INCDEC_GENVAR(event, current_volume, 0, NUM_VOL_LEVELS-1);
  40896a:	b2c0      	uxtb	r0, r0
          if (current_volume != g_eeGeneral.speakerVolume) {
  40896c:	4283      	cmp	r3, r0
  40896e:	f43f ace7 	beq.w	408340 <_Z13menuProcSetuph+0x150>
            set_volume(g_eeGeneral.speakerVolume = current_volume);
  408972:	f886 0073 	strb.w	r0, [r6, #115]	; 0x73
  408976:	f7fd f81f 	bl	4059b8 <_Z10set_volumeh>
  40897a:	e4e1      	b.n	408340 <_Z13menuProcSetuph+0x150>
    uint8_t k = i+s_pgOfs;
    uint8_t attr = (sub == k ? INVERS : 0);

    switch(k) {
      case ITEM_SETUP_BEEPER_MODE:
        g_eeGeneral.beeperMode = selectMenuItem(y, STR_BEEPERMODE, STR_VBEEPMODE, g_eeGeneral.beeperMode, -2, 1, attr, event);
  40897c:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
  408980:	4638      	mov	r0, r7
  408982:	f04f 0e01 	mov.w	lr, #1
  408986:	f06f 0701 	mvn.w	r7, #1
  40898a:	e88d 4080 	stmia.w	sp, {r7, lr}
  40898e:	9f06      	ldr	r7, [sp, #24]
  408990:	f343 03c1 	sbfx	r3, r3, #3, #2
  408994:	4928      	ldr	r1, [pc, #160]	; (408a38 <_Z13menuProcSetuph+0x848>)
  408996:	4a29      	ldr	r2, [pc, #164]	; (408a3c <_Z13menuProcSetuph+0x84c>)
  408998:	f8cd 8008 	str.w	r8, [sp, #8]
  40899c:	9703      	str	r7, [sp, #12]
  40899e:	f7fe fc25 	bl	4071ec <_Z14selectMenuItemhPKcS0_aaahh>
  4089a2:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
  4089a6:	f360 03c4 	bfi	r3, r0, #3, #2
  4089aa:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
#if defined(FRSKY)
        if (attr && checkIncDec_Ret) FRSKY_setModelAlarms();
  4089ae:	f1b8 0f00 	cmp.w	r8, #0
  4089b2:	f43f acc5 	beq.w	408340 <_Z13menuProcSetuph+0x150>
  4089b6:	f99b 3c2d 	ldrsb.w	r3, [fp, #3117]	; 0xc2d
  4089ba:	2b00      	cmp	r3, #0
  4089bc:	f43f acc0 	beq.w	408340 <_Z13menuProcSetuph+0x150>
  4089c0:	2306      	movs	r3, #6
  4089c2:	f886 3896 	strb.w	r3, [r6, #2198]	; 0x896
  4089c6:	e4bb      	b.n	408340 <_Z13menuProcSetuph+0x150>
        g_eeGeneral.flashBeep = onoffMenuItem( g_eeGeneral.flashBeep, y, STR_FLASHONBEEP, attr, event ) ;
        break;

      case ITEM_SETUP_LIGHT_SWITCH:
        lcd_putsLeft( y, STR_LIGHTSWITCH);
        putsSwitches(GENERAL_PARAM_OFS,y,g_eeGeneral.lightSw,attr ? INVERS : 0);
  4089c8:	4643      	mov	r3, r8
  4089ca:	f7fa fd93 	bl	4034f4 <_Z12putsSwitcheshhah>
  4089ce:	e4b7      	b.n	408340 <_Z13menuProcSetuph+0x150>
        if(g_eeGeneral.lightAutoOff) {
          lcd_outdezAtt(GENERAL_PARAM_OFS, y, g_eeGeneral.lightAutoOff*5, attr|LEFT);
          lcd_putc(lcd_lastPos, y, 's');
        }
        else {
          lcd_putsiAtt(GENERAL_PARAM_OFS, y, STR_OFFON, 0, attr);
  4089d0:	2062      	movs	r0, #98	; 0x62
  4089d2:	4639      	mov	r1, r7
  4089d4:	4a1a      	ldr	r2, [pc, #104]	; (408a40 <_Z13menuProcSetuph+0x850>)
  4089d6:	f8cd 8000 	str.w	r8, [sp]
  4089da:	f7f9 ff49 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  4089de:	e5e3      	b.n	4085a8 <_Z13menuProcSetuph+0x3b8>

      case ITEM_SETUP_STICK_MODE:
        lcd_puts( 1*FW, y, STR_MODE);
        for(uint8_t i=0; i<4; i++) lcd_img((6+4*i)*FW, y, sticks,i,0);
        if((y+=FH)>7*FH) return;
        lcd_putcAtt( 3*FW, y, '1'+g_eeGeneral.stickMode,(sub==k+1) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0);
  4089e0:	f99b 3c2c 	ldrsb.w	r3, [fp, #3116]	; 0xc2c
  4089e4:	2b00      	cmp	r3, #0
  4089e6:	bfd4      	ite	le
  4089e8:	2302      	movle	r3, #2
  4089ea:	2303      	movgt	r3, #3
  4089ec:	e482      	b.n	4082f4 <_Z13menuProcSetuph+0x104>
        for(uint8_t i=0; i<4; i++) putsChnRaw( (6+4*i)*FW, y, pgm_read_byte(modn12x3 + 4*g_eeGeneral.stickMode + i), 0);

        if (sub==k+1 && s_editMode>0)
  4089ee:	f99b 3c2c 	ldrsb.w	r3, [fp, #3116]	; 0xc2c
  4089f2:	2b00      	cmp	r3, #0
  4089f4:	f77f ac9e 	ble.w	408334 <_Z13menuProcSetuph+0x144>
          CHECK_INCDEC_GENVAR(event, g_eeGeneral.stickMode, 0, 3);
  4089f8:	f240 1208 	movw	r2, #264	; 0x108
  4089fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  408a00:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
  408a04:	2303      	movs	r3, #3
  408a06:	9806      	ldr	r0, [sp, #24]
  408a08:	f001 0103 	and.w	r1, r1, #3
  408a0c:	2200      	movs	r2, #0
  408a0e:	f7fe fbe3 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  408a12:	f240 1708 	movw	r7, #264	; 0x108
  408a16:	f2c2 0700 	movt	r7, #8192	; 0x2000
  408a1a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
  408a1e:	f360 0301 	bfi	r3, r0, #0, #2
  408a22:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  408a26:	e48b      	b.n	408340 <_Z13menuProcSetuph+0x150>
  408a28:	00410978 	.word	0x00410978
  408a2c:	00410968 	.word	0x00410968
  408a30:	0041031c 	.word	0x0041031c
  408a34:	00411420 	.word	0x00411420
  408a38:	00410958 	.word	0x00410958
  408a3c:	00410307 	.word	0x00410307
  408a40:	004102dc 	.word	0x004102dc

00408a44 <_Z17menuProcTelemetryh>:
};

#ifdef FRSKY
#define TELEM_COL2 (8*FW-2)
void menuProcTelemetry(uint8_t event)
{
  408a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
  408a48:	4c8b      	ldr	r4, [pc, #556]	; (408c78 <_Z17menuProcTelemetryh+0x234>)
};

#ifdef FRSKY
#define TELEM_COL2 (8*FW-2)
void menuProcTelemetry(uint8_t event)
{
  408a4a:	b08b      	sub	sp, #44	; 0x2c
#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
  408a4c:	251d      	movs	r5, #29
  408a4e:	2109      	movs	r1, #9
  408a50:	f1a4 022c 	sub.w	r2, r4, #44	; 0x2c
  408a54:	230b      	movs	r3, #11
};

#ifdef FRSKY
#define TELEM_COL2 (8*FW-2)
void menuProcTelemetry(uint8_t event)
{
  408a56:	9007      	str	r0, [sp, #28]
#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
  408a58:	e88d 0030 	stmia.w	sp, {r4, r5}
  408a5c:	9502      	str	r5, [sp, #8]
  408a5e:	f7ff fa5b 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  408a62:	b910      	cbnz	r0, 408a6a <_Z17menuProcTelemetryh+0x26>
        }
        break;
      }
    }
  }
}
  408a64:	b00b      	add	sp, #44	; 0x2c
  408a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#ifdef FRSKY
#define TELEM_COL2 (8*FW-2)
void menuProcTelemetry(uint8_t event)
{
#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
  408a6a:	2000      	movs	r0, #0
#else
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 24, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#endif

  uint8_t sub = m_posVert - 1;
  408a6c:	4f83      	ldr	r7, [pc, #524]	; (408c7c <_Z17menuProcTelemetryh+0x238>)
#ifdef FRSKY
#define TELEM_COL2 (8*FW-2)
void menuProcTelemetry(uint8_t event)
{
#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
  408a6e:	2302      	movs	r3, #2
  408a70:	f104 0220 	add.w	r2, r4, #32
  408a74:	4601      	mov	r1, r0
  408a76:	f7f9 ff1f 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
#else
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 24, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#endif

  uint8_t sub = m_posVert - 1;
  408a7a:	f897 2c34 	ldrb.w	r2, [r7, #3124]	; 0xc34

  switch (event) {
  408a7e:	9e07      	ldr	r6, [sp, #28]
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#else
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 24, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#endif

  uint8_t sub = m_posVert - 1;
  408a80:	3a01      	subs	r2, #1

  switch (event) {
  408a82:	f1a6 0322 	sub.w	r3, r6, #34	; 0x22
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#else
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 24, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#endif

  uint8_t sub = m_posVert - 1;
  408a86:	b2d2      	uxtb	r2, r2

  switch (event) {
  408a88:	2b03      	cmp	r3, #3
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 30, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 0, 0, (uint8_t)-1, 0, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#else
  MENU(STR_MENUTELEMETRY, menuTabModel, e_Telemetry, 24, {0, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 0, 2, 2, (uint8_t)-1, 1, 1, (uint8_t)-1, 1, 1, 1, 1, (uint8_t)-1, 2, 2, 2, 2});
#endif

  uint8_t sub = m_posVert - 1;
  408a8a:	9206      	str	r2, [sp, #24]
  408a8c:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c

  switch (event) {
  408a90:	f240 80a4 	bls.w	408bdc <_Z17menuProcTelemetryh+0x198>
};

#ifdef FRSKY
#define TELEM_COL2 (8*FW-2)
void menuProcTelemetry(uint8_t event)
{
  408a94:	2508      	movs	r5, #8
  408a96:	2400      	movs	r4, #0
      break;
  }

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i + s_pgOfs;
  408a98:	f897 9e7d 	ldrb.w	r9, [r7, #3709]	; 0xe7d
    uint8_t attr = (sub == k ? INVERS : 0);
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
  408a9c:	2b00      	cmp	r3, #0
  408a9e:	bfd4      	ite	le
  408aa0:	2302      	movle	r3, #2
  408aa2:	2303      	movgt	r3, #3
      break;
  }

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i + s_pgOfs;
  408aa4:	44a1      	add	r9, r4
  408aa6:	fa5f f989 	uxtb.w	r9, r9
    uint8_t attr = (sub == k ? INVERS : 0);
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
    uint8_t ch = (k >= ITEM_TELEMETRY_A2_LABEL) ? 1 : 0;
  408aaa:	f1b9 0f04 	cmp.w	r9, #4
  408aae:	bf94      	ite	ls
  408ab0:	2600      	movls	r6, #0
  408ab2:	2601      	movhi	r6, #1
    FrSkyChannelData & channel = g_model.frsky.channels[ch];
  408ab4:	ea4f 0a46 	mov.w	sl, r6, lsl #1
  408ab8:	eb0a 0b06 	add.w	fp, sl, r6
  408abc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
  }

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i + s_pgOfs;
    uint8_t attr = (sub == k ? INVERS : 0);
  408ac0:	9906      	ldr	r1, [sp, #24]
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
    uint8_t ch = (k >= ITEM_TELEMETRY_A2_LABEL) ? 1 : 0;
    FrSkyChannelData & channel = g_model.frsky.channels[ch];
  408ac2:	4a6f      	ldr	r2, [pc, #444]	; (408c80 <_Z17menuProcTelemetryh+0x23c>)
  408ac4:	f50b 6be3 	add.w	fp, fp, #1816	; 0x718

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i + s_pgOfs;
    uint8_t attr = (sub == k ? INVERS : 0);
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
  408ac8:	9305      	str	r3, [sp, #20]
  }

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i + s_pgOfs;
    uint8_t attr = (sub == k ? INVERS : 0);
  408aca:	4549      	cmp	r1, r9
  408acc:	bf0c      	ite	eq
  408ace:	f04f 0802 	moveq.w	r8, #2
  408ad2:	f04f 0800 	movne.w	r8, #0
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
    uint8_t ch = (k >= ITEM_TELEMETRY_A2_LABEL) ? 1 : 0;
    FrSkyChannelData & channel = g_model.frsky.channels[ch];
  408ad6:	eb02 0c0b 	add.w	ip, r2, fp

    switch(k) {
  408ada:	f1b9 0f1c 	cmp.w	r9, #28
  408ade:	d873      	bhi.n	408bc8 <_Z17menuProcTelemetryh+0x184>
  408ae0:	e8df f019 	tbh	[pc, r9, lsl #1]
  408ae4:	034103b0 	.word	0x034103b0
  408ae8:	02560307 	.word	0x02560307
  408aec:	03b00256 	.word	0x03b00256
  408af0:	03070341 	.word	0x03070341
  408af4:	02560256 	.word	0x02560256
  408af8:	01d40237 	.word	0x01d40237
  408afc:	01cf01d4 	.word	0x01cf01d4
  408b00:	017801a7 	.word	0x017801a7
  408b04:	01430173 	.word	0x01430173
  408b08:	00c4001d 	.word	0x00c4001d
  408b0c:	008e008e 	.word	0x008e008e
  408b10:	008e008e 	.word	0x008e008e
  408b14:	00d8013e 	.word	0x00d8013e
  408b18:	00d800d8 	.word	0x00d800d8
  408b1c:	00d8      	.short	0x00d8
        lcd_putsiAtt(TELEM_COL2, y, STR_VARIOSRC, g_model.varioSource, attr);
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.varioSource, VARIO_SOURCE_NONE, VARIO_SOURCE_LAST-1);
        break;

      case ITEM_TELEMETRY_VARIO_SPEED:
        lcd_puts(4, y, STR_LIMIT);
  408b1e:	4629      	mov	r1, r5
  408b20:	4a58      	ldr	r2, [pc, #352]	; (408c84 <_Z17menuProcTelemetryh+0x240>)
  408b22:	2004      	movs	r0, #4
  408b24:	f7f9 fed0 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(TELEM_COL2, y, -VARIO_SPEED_LIMIT_MUL*(255 - g_model.varioSpeedDownMin), ((attr && m_posHorz==0) ? blink : 0)|PREC2|LEFT);
  408b28:	f240 1108 	movw	r1, #264	; 0x108
  408b2c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  408b30:	f891 3895 	ldrb.w	r3, [r1, #2197]	; 0x895
  408b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  408b38:	009a      	lsls	r2, r3, #2
  408b3a:	f5a2 529e 	sub.w	r2, r2, #5056	; 0x13c0
  408b3e:	3a2c      	subs	r2, #44	; 0x2c
  408b40:	b292      	uxth	r2, r2
  408b42:	f1b8 0f00 	cmp.w	r8, #0
  408b46:	f000 842b 	beq.w	4093a0 <_Z17menuProcTelemetryh+0x95c>
  408b4a:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
  408b4e:	2b00      	cmp	r3, #0
  408b50:	f000 8452 	beq.w	4093f8 <_Z17menuProcTelemetryh+0x9b4>
  408b54:	23b0      	movs	r3, #176	; 0xb0
  408b56:	b212      	sxth	r2, r2
  408b58:	202e      	movs	r0, #46	; 0x2e
  408b5a:	4629      	mov	r1, r5
  408b5c:	f7fa f96c 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        lcd_outdezAtt(TELEM_COL2+6*FW, y, VARIO_SPEED_LIMIT_MUL*g_model.varioSpeedUpMin, ((attr && m_posHorz==1) ? blink : 0)|PREC2|LEFT);
  408b60:	f240 1108 	movw	r1, #264	; 0x108
  408b64:	f2c2 0100 	movt	r1, #8192	; 0x2000
  408b68:	f891 3894 	ldrb.w	r3, [r1, #2196]	; 0x894
  408b6c:	f897 1c35 	ldrb.w	r1, [r7, #3125]	; 0xc35
  408b70:	091b      	lsrs	r3, r3, #4
  408b72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  408b76:	009a      	lsls	r2, r3, #2
  408b78:	2901      	cmp	r1, #1
  408b7a:	f000 8537 	beq.w	4095ec <_Z17menuProcTelemetryh+0xba8>
  408b7e:	23b0      	movs	r3, #176	; 0xb0
  408b80:	2052      	movs	r0, #82	; 0x52
  408b82:	b212      	sxth	r2, r2
  408b84:	4629      	mov	r1, r5
  408b86:	f7fa f957 	bl	402e38 <_Z13lcd_outdezAtthhsh>

        if (attr && (s_editMode>0 || p1valdiff)) {
  408b8a:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
  408b8e:	2b00      	cmp	r3, #0
  408b90:	dd1a      	ble.n	408bc8 <_Z17menuProcTelemetryh+0x184>
          switch (m_posHorz) {
  408b92:	f241 2100 	movw	r1, #4608	; 0x1200
  408b96:	f2c2 0100 	movt	r1, #8192	; 0x2000
  408b9a:	f891 2c35 	ldrb.w	r2, [r1, #3125]	; 0xc35
  408b9e:	2a00      	cmp	r2, #0
  408ba0:	f040 8503 	bne.w	4095aa <_Z17menuProcTelemetryh+0xb66>
            case 0:
              g_model.varioSpeedDownMin = checkIncDec(event, g_model.varioSpeedDownMin, 0, 255, EE_MODEL);
  408ba4:	f240 1308 	movw	r3, #264	; 0x108
  408ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  408bac:	f893 1895 	ldrb.w	r1, [r3, #2197]	; 0x895
  408bb0:	2602      	movs	r6, #2
  408bb2:	9807      	ldr	r0, [sp, #28]
  408bb4:	23ff      	movs	r3, #255	; 0xff
  408bb6:	9600      	str	r6, [sp, #0]
  408bb8:	f7fe f9e2 	bl	406f80 <_Z11checkIncDechsssh>
  408bbc:	f240 1608 	movw	r6, #264	; 0x108
  408bc0:	f2c2 0600 	movt	r6, #8192	; 0x2000
  408bc4:	f886 0895 	strb.w	r0, [r6, #2197]	; 0x895
      if (s_editMode>0 && sub<=13)
        FRSKY_setModelAlarms(); // update Fr-Sky module when edit mode exited
      break;
  }

  for (uint8_t i=0; i<7; i++) {
  408bc8:	3401      	adds	r4, #1
  408bca:	b2e4      	uxtb	r4, r4
  408bcc:	3508      	adds	r5, #8
  408bce:	2c07      	cmp	r4, #7
  408bd0:	b2ed      	uxtb	r5, r5
  408bd2:	f43f af47 	beq.w	408a64 <_Z17menuProcTelemetryh+0x20>
  408bd6:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
  408bda:	e75d      	b.n	408a98 <_Z17menuProcTelemetryh+0x54>
  switch (event) {
    case EVT_KEY_BREAK(KEY_DOWN):
    case EVT_KEY_BREAK(KEY_UP):
    case EVT_KEY_BREAK(KEY_LEFT):
    case EVT_KEY_BREAK(KEY_RIGHT):
      if (s_editMode>0 && sub<=13)
  408bdc:	2b00      	cmp	r3, #0
  408bde:	9e06      	ldr	r6, [sp, #24]
  408be0:	bfd4      	ite	le
  408be2:	2200      	movle	r2, #0
  408be4:	2201      	movgt	r2, #1
  408be6:	2e0d      	cmp	r6, #13
  408be8:	bf8c      	ite	hi
  408bea:	2200      	movhi	r2, #0
  408bec:	f002 0201 	andls.w	r2, r2, #1
  408bf0:	2a00      	cmp	r2, #0
  408bf2:	f43f af4f 	beq.w	408a94 <_Z17menuProcTelemetryh+0x50>
  408bf6:	4a24      	ldr	r2, [pc, #144]	; (408c88 <_Z17menuProcTelemetryh+0x244>)
  408bf8:	2106      	movs	r1, #6
  408bfa:	f882 1896 	strb.w	r1, [r2, #2198]	; 0x896
  408bfe:	e749      	b.n	408a94 <_Z17menuProcTelemetryh+0x50>
          }
        }
        break;

      case ITEM_TELEMETRY_CUSTOM_SCREEN_LABEL:
        lcd_putsLeft(y, STR_DISPLAY);
  408c00:	f1a9 0914 	sub.w	r9, r9, #20
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
            CHECK_INCDEC_MODELVAR(event, value, 0, (j==3 && c==0) ? TELEM_STATUS_MAX : TELEM_DISPLAY_MAX);
            if (checkIncDec_Ret) {
              g_model.frskyLines[j] = (c==0 ? ((g_model.frskyLines[j] & 0xf0) + (value & 0x0f)) : (g_model.frskyLines[j] & 0x0f) + ((value & 0x0f) << 4));
  408c04:	f240 1608 	movw	r6, #264	; 0x108
          }
        }
        break;

      case ITEM_TELEMETRY_CUSTOM_SCREEN_LABEL:
        lcd_putsLeft(y, STR_DISPLAY);
  408c08:	fa5f fb89 	uxtb.w	fp, r9
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
            CHECK_INCDEC_MODELVAR(event, value, 0, (j==3 && c==0) ? TELEM_STATUS_MAX : TELEM_DISPLAY_MAX);
            if (checkIncDec_Ret) {
              g_model.frskyLines[j] = (c==0 ? ((g_model.frskyLines[j] & 0xf0) + (value & 0x0f)) : (g_model.frskyLines[j] & 0x0f) + ((value & 0x0f) << 4));
  408c0c:	f2c2 0600 	movt	r6, #8192	; 0x2000
  408c10:	445e      	add	r6, fp
  408c12:	9608      	str	r6, [sp, #32]
    uint8_t attr = (sub == k ? INVERS : 0);
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
    uint8_t ch = (k >= ITEM_TELEMETRY_A2_LABEL) ? 1 : 0;
    FrSkyChannelData & channel = g_model.frsky.channels[ch];

    switch(k) {
  408c14:	f04f 0900 	mov.w	r9, #0
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
            CHECK_INCDEC_MODELVAR(event, value, 0, (j==3 && c==0) ? TELEM_STATUS_MAX : TELEM_DISPLAY_MAX);
            if (checkIncDec_Ret) {
              g_model.frskyLines[j] = (c==0 ? ((g_model.frskyLines[j] & 0xf0) + (value & 0x0f)) : (g_model.frskyLines[j] & 0x0f) + ((value & 0x0f) << 4));
  408c18:	4646      	mov	r6, r8
  408c1a:	46a2      	mov	sl, r4
          }
        }
        break;

      case ITEM_TELEMETRY_CUSTOM_SCREEN_LABEL:
        lcd_putsLeft(y, STR_DISPLAY);
  408c1c:	fa5f f489 	uxtb.w	r4, r9
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE2:
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE3:
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE4:
        for (uint8_t c=0; c<2; c++) {
          uint8_t j = k - ITEM_TELEMETRY_CUSTOM_SCREEN_LINE1;
          uint8_t value = getTelemCustomField(j, c);
  408c20:	4658      	mov	r0, fp
  408c22:	4621      	mov	r1, r4
  408c24:	f7fc fc4e 	bl	4054c4 <_Z19getTelemCustomFieldhh>
  408c28:	4680      	mov	r8, r0
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
  408c2a:	2c00      	cmp	r4, #0
  408c2c:	bf0c      	ite	eq
  408c2e:	2004      	moveq	r0, #4
  408c30:	202e      	movne	r0, #46	; 0x2e
  408c32:	2e00      	cmp	r6, #0
  408c34:	f000 8312 	beq.w	40925c <_Z17menuProcTelemetryh+0x818>
  408c38:	f897 ec35 	ldrb.w	lr, [r7, #3125]	; 0xc35
  408c3c:	9905      	ldr	r1, [sp, #20]
  408c3e:	4643      	mov	r3, r8
  408c40:	45a6      	cmp	lr, r4
  408c42:	bf18      	it	ne
  408c44:	2100      	movne	r1, #0
  408c46:	468e      	mov	lr, r1
  408c48:	4a10      	ldr	r2, [pc, #64]	; (408c8c <_Z17menuProcTelemetryh+0x248>)
  408c4a:	4629      	mov	r1, r5
  408c4c:	f8cd e000 	str.w	lr, [sp]
  408c50:	f7f9 fe0e 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
  408c54:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
  408c58:	42a3      	cmp	r3, r4
  408c5a:	f000 8460 	beq.w	40951e <_Z17menuProcTelemetryh+0xada>
            if (checkIncDec_Ret) {
              g_model.frskyLines[j] = (c==0 ? ((g_model.frskyLines[j] & 0xf0) + (value & 0x0f)) : (g_model.frskyLines[j] & 0x0f) + ((value & 0x0f) << 4));
              uint16_t mask = 0x3 << (4*j+2*c);
              g_model.frskyLinesXtra &= ~mask;
              mask = (value / 16) << (4*j+2*c);
              g_model.frskyLinesXtra |= mask;
  408c5e:	f109 0901 	add.w	r9, r9, #1

      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE1:
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE2:
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE3:
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE4:
        for (uint8_t c=0; c<2; c++) {
  408c62:	f1b9 0f02 	cmp.w	r9, #2
  408c66:	d1d9      	bne.n	408c1c <_Z17menuProcTelemetryh+0x1d8>
  408c68:	4654      	mov	r4, sl
  408c6a:	e7ad      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
          }
        }
        break;

      case ITEM_TELEMETRY_CUSTOM_SCREEN_LABEL:
        lcd_putsLeft(y, STR_DISPLAY);
  408c6c:	4628      	mov	r0, r5
  408c6e:	4908      	ldr	r1, [pc, #32]	; (408c90 <_Z17menuProcTelemetryh+0x24c>)
  408c70:	f7f9 fe2c 	bl	4028cc <_Z12lcd_putsLefthPKc>
  408c74:	e7a8      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
  408c76:	bf00      	nop
  408c78:	00410b40 	.word	0x00410b40
  408c7c:	20001200 	.word	0x20001200
  408c80:	20000244 	.word	0x20000244
  408c84:	00410bbc 	.word	0x00410bbc
  408c88:	20000108 	.word	0x20000108
  408c8c:	00410570 	.word	0x00410570
  408c90:	00410bc4 	.word	0x00410bc4
      case ITEM_TELEMETRY_GAUGES_LINE1:
      case ITEM_TELEMETRY_GAUGES_LINE2:
      case ITEM_TELEMETRY_GAUGES_LINE3:
      case ITEM_TELEMETRY_GAUGES_LINE4:
      {
        FrSkyBarData & bar = g_model.frsky.bars[k-ITEM_TELEMETRY_GAUGES_LINE1];
  408c94:	f509 795c 	add.w	r9, r9, #880	; 0x370
  408c98:	4eb0      	ldr	r6, [pc, #704]	; (408f5c <_Z17menuProcTelemetryh+0x518>)
  408c9a:	f109 0907 	add.w	r9, r9, #7
  408c9e:	eb06 0a49 	add.w	sl, r6, r9, lsl #1
        uint8_t barSource = bar.source;
  408ca2:	f89a 3005 	ldrb.w	r3, [sl, #5]
      case ITEM_TELEMETRY_GAUGES_LINE1:
      case ITEM_TELEMETRY_GAUGES_LINE2:
      case ITEM_TELEMETRY_GAUGES_LINE3:
      case ITEM_TELEMETRY_GAUGES_LINE4:
      {
        FrSkyBarData & bar = g_model.frsky.bars[k-ITEM_TELEMETRY_GAUGES_LINE1];
  408ca6:	f10a 0b05 	add.w	fp, sl, #5
        uint8_t barSource = bar.source;
  408caa:	f3c3 0303 	ubfx	r3, r3, #0, #4
  408cae:	f88d 3020 	strb.w	r3, [sp, #32]
  408cb2:	fa5f f983 	uxtb.w	r9, r3
        lcd_putsiAtt(4, y, STR_VTELEMCHNS, barSource, (attr && m_posHorz==0) ? blink : 0);
  408cb6:	4643      	mov	r3, r8
  408cb8:	f1b8 0f00 	cmp.w	r8, #0
  408cbc:	d006      	beq.n	408ccc <_Z17menuProcTelemetryh+0x288>
  408cbe:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
  408cc2:	9e05      	ldr	r6, [sp, #20]
  408cc4:	2b00      	cmp	r3, #0
  408cc6:	bf18      	it	ne
  408cc8:	2600      	movne	r6, #0
  408cca:	4633      	mov	r3, r6
  408ccc:	9300      	str	r3, [sp, #0]
  408cce:	2004      	movs	r0, #4
  408cd0:	4629      	mov	r1, r5
  408cd2:	4aa3      	ldr	r2, [pc, #652]	; (408f60 <_Z17menuProcTelemetryh+0x51c>)
  408cd4:	464b      	mov	r3, r9
  408cd6:	f7f9 fdcb 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if (barSource) {
  408cda:	f1b9 0f00 	cmp.w	r9, #0
  408cde:	f000 82d7 	beq.w	409290 <_Z17menuProcTelemetryh+0x84c>
          putsTelemetryChannel(56-3*FW, y, barSource-1, convertTelemValue(barSource, bar.barMin*5), (attr && m_posHorz==1 ? blink : 0) | LEFT);
  408ce2:	f89b 3001 	ldrb.w	r3, [fp, #1]
  408ce6:	f89a 1005 	ldrb.w	r1, [sl, #5]
  408cea:	f003 0303 	and.w	r3, r3, #3
  408cee:	011b      	lsls	r3, r3, #4
  408cf0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  408cf4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  408cf8:	f109 33ff 	add.w	r3, r9, #4294967295
  408cfc:	b2db      	uxtb	r3, r3
  408cfe:	b2c9      	uxtb	r1, r1
  408d00:	4648      	mov	r0, r9
  408d02:	9309      	str	r3, [sp, #36]	; 0x24
  408d04:	f7fb fe78 	bl	4049f8 <_Z17convertTelemValuehh>
  408d08:	4603      	mov	r3, r0
  408d0a:	f1b8 0f00 	cmp.w	r8, #0
  408d0e:	f000 8379 	beq.w	409404 <_Z17menuProcTelemetryh+0x9c0>
  408d12:	f897 2c35 	ldrb.w	r2, [r7, #3125]	; 0xc35
  408d16:	2680      	movs	r6, #128	; 0x80
  408d18:	2a01      	cmp	r2, #1
  408d1a:	f000 84e7 	beq.w	4096ec <_Z17menuProcTelemetryh+0xca8>
  408d1e:	2026      	movs	r0, #38	; 0x26
  408d20:	4629      	mov	r1, r5
  408d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408d24:	9600      	str	r6, [sp, #0]
  408d26:	f7fc fa43 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
          putsTelemetryChannel(14*FW-3, y, barSource-1, convertTelemValue(barSource, (51-bar.barMax)*5), (attr && m_posHorz==2 ? blink : 0) | LEFT);
  408d2a:	f89b 3001 	ldrb.w	r3, [fp, #1]
  408d2e:	4648      	mov	r0, r9
  408d30:	f3c3 0385 	ubfx	r3, r3, #2, #6
  408d34:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
  408d38:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
  408d3c:	1e59      	subs	r1, r3, #1
  408d3e:	b2c9      	uxtb	r1, r1
  408d40:	f7fb fe5a 	bl	4049f8 <_Z17convertTelemValuehh>
  408d44:	f897 2c35 	ldrb.w	r2, [r7, #3125]	; 0xc35
  408d48:	4603      	mov	r3, r0
  408d4a:	2a02      	cmp	r2, #2
  408d4c:	f000 84c8 	beq.w	4096e0 <_Z17menuProcTelemetryh+0xc9c>
  408d50:	2280      	movs	r2, #128	; 0x80
  408d52:	9200      	str	r2, [sp, #0]
  408d54:	2051      	movs	r0, #81	; 0x51
  408d56:	4629      	mov	r1, r5
  408d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408d5a:	f7fc fa29 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
  408d5e:	e29f      	b.n	4092a0 <_Z17menuProcTelemetryh+0x85c>
          }
        }
        break;

      case ITEM_TELEMETRY_GAUGES_LABEL:
        lcd_putsLeft(y, STR_BARS);
  408d60:	4628      	mov	r0, r5
  408d62:	4980      	ldr	r1, [pc, #512]	; (408f64 <_Z17menuProcTelemetryh+0x520>)
  408d64:	f7f9 fdb2 	bl	4028cc <_Z12lcd_putsLefthPKc>
  408d68:	e72e      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
      case ITEM_TELEMETRY_VARIO_LABEL:
        lcd_putsLeft(y, STR_VARIO);
        break;

      case ITEM_TELEMETRY_VARIO_SOURCE:
        lcd_puts(4, y, STR_SOURCE);
  408d6a:	4629      	mov	r1, r5
  408d6c:	4a7e      	ldr	r2, [pc, #504]	; (408f68 <_Z17menuProcTelemetryh+0x524>)
  408d6e:	2004      	movs	r0, #4
  408d70:	f7f9 fdaa 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_putsiAtt(TELEM_COL2, y, STR_VARIOSRC, g_model.varioSource, attr);
  408d74:	f240 1108 	movw	r1, #264	; 0x108
  408d78:	f2c2 0100 	movt	r1, #8192	; 0x2000
  408d7c:	f891 3894 	ldrb.w	r3, [r1, #2196]	; 0x894
  408d80:	202e      	movs	r0, #46	; 0x2e
  408d82:	f003 030f 	and.w	r3, r3, #15
  408d86:	4629      	mov	r1, r5
  408d88:	4a78      	ldr	r2, [pc, #480]	; (408f6c <_Z17menuProcTelemetryh+0x528>)
  408d8a:	f8cd 8000 	str.w	r8, [sp]
  408d8e:	f7f9 fd6f 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.varioSource, VARIO_SOURCE_NONE, VARIO_SOURCE_LAST-1);
  408d92:	f1b8 0f00 	cmp.w	r8, #0
  408d96:	f43f af17 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  408d9a:	f240 1208 	movw	r2, #264	; 0x108
  408d9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  408da2:	f892 1894 	ldrb.w	r1, [r2, #2196]	; 0x894
  408da6:	2303      	movs	r3, #3
  408da8:	9807      	ldr	r0, [sp, #28]
  408daa:	f001 010f 	and.w	r1, r1, #15
  408dae:	2200      	movs	r2, #0
  408db0:	f7fe fa5a 	bl	407268 <_Z16checkIncDecModelhaaa>
  408db4:	f240 1608 	movw	r6, #264	; 0x108
  408db8:	f2c2 0600 	movt	r6, #8192	; 0x2000
  408dbc:	f896 3894 	ldrb.w	r3, [r6, #2196]	; 0x894
  408dc0:	f360 0303 	bfi	r3, r0, #0, #4
  408dc4:	f886 3894 	strb.w	r3, [r6, #2196]	; 0x894
  408dc8:	e6fe      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.frsky.blades, 0, 2);
        break;
#endif

      case ITEM_TELEMETRY_VARIO_LABEL:
        lcd_putsLeft(y, STR_VARIO);
  408dca:	4628      	mov	r0, r5
  408dcc:	4968      	ldr	r1, [pc, #416]	; (408f70 <_Z17menuProcTelemetryh+0x52c>)
  408dce:	f7f9 fd7d 	bl	4028cc <_Z12lcd_putsLefthPKc>
  408dd2:	e6f9      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        lcd_putsiAtt(TELEM_COL2, y, STR_VTELPROTO, g_model.frsky.usrProto, attr);
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.frsky.usrProto, 0, 2);
        break;

      case ITEM_TELEMETRY_USR_BLADES:
        lcd_puts(4, y, STR_BLADES);
  408dd4:	4629      	mov	r1, r5
  408dd6:	4a67      	ldr	r2, [pc, #412]	; (408f74 <_Z17menuProcTelemetryh+0x530>)
  408dd8:	2004      	movs	r0, #4
  408dda:	f7f9 fd75 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(TELEM_COL2+FWNUM, y, 2+g_model.frsky.blades, attr);
  408dde:	f240 1108 	movw	r1, #264	; 0x108
  408de2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  408de6:	f891 2860 	ldrb.w	r2, [r1, #2144]	; 0x860
  408dea:	2033      	movs	r0, #51	; 0x33
  408dec:	f3c2 1201 	ubfx	r2, r2, #4, #2
  408df0:	3202      	adds	r2, #2
  408df2:	4629      	mov	r1, r5
  408df4:	4643      	mov	r3, r8
  408df6:	f7fa f81f 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.frsky.blades, 0, 2);
  408dfa:	f1b8 0f00 	cmp.w	r8, #0
  408dfe:	f43f aee3 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  408e02:	f240 1208 	movw	r2, #264	; 0x108
  408e06:	f2c2 0200 	movt	r2, #8192	; 0x2000
  408e0a:	f892 1860 	ldrb.w	r1, [r2, #2144]	; 0x860
  408e0e:	2302      	movs	r3, #2
  408e10:	9807      	ldr	r0, [sp, #28]
  408e12:	f3c1 1101 	ubfx	r1, r1, #4, #2
  408e16:	2200      	movs	r2, #0
  408e18:	f7fe fa26 	bl	407268 <_Z16checkIncDecModelhaaa>
  408e1c:	f240 1608 	movw	r6, #264	; 0x108
  408e20:	f2c2 0600 	movt	r6, #8192	; 0x2000
  408e24:	f896 3860 	ldrb.w	r3, [r6, #2144]	; 0x860
  408e28:	f360 1305 	bfi	r3, r0, #4, #2
  408e2c:	f886 3860 	strb.w	r3, [r6, #2144]	; 0x860
  408e30:	e6ca      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        lcd_putsLeft(y, STR_USRDATA);
        break;

      case ITEM_TELEMETRY_USR_PROTO:
        lcd_puts(4, y, STR_PROTO);
        lcd_putsiAtt(TELEM_COL2, y, STR_VTELPROTO, g_model.frsky.usrProto, attr);
  408e32:	f240 1608 	movw	r6, #264	; 0x108
      case ITEM_TELEMETRY_USR_LABEL:
        lcd_putsLeft(y, STR_USRDATA);
        break;

      case ITEM_TELEMETRY_USR_PROTO:
        lcd_puts(4, y, STR_PROTO);
  408e36:	4629      	mov	r1, r5
  408e38:	4a4f      	ldr	r2, [pc, #316]	; (408f78 <_Z17menuProcTelemetryh+0x534>)
  408e3a:	2004      	movs	r0, #4
        lcd_putsiAtt(TELEM_COL2, y, STR_VTELPROTO, g_model.frsky.usrProto, attr);
  408e3c:	f2c2 0600 	movt	r6, #8192	; 0x2000
      case ITEM_TELEMETRY_USR_LABEL:
        lcd_putsLeft(y, STR_USRDATA);
        break;

      case ITEM_TELEMETRY_USR_PROTO:
        lcd_puts(4, y, STR_PROTO);
  408e40:	f7f9 fd42 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_putsiAtt(TELEM_COL2, y, STR_VTELPROTO, g_model.frsky.usrProto, attr);
  408e44:	f896 3860 	ldrb.w	r3, [r6, #2144]	; 0x860
  408e48:	202e      	movs	r0, #46	; 0x2e
  408e4a:	f003 0307 	and.w	r3, r3, #7
  408e4e:	4629      	mov	r1, r5
  408e50:	4a4a      	ldr	r2, [pc, #296]	; (408f7c <_Z17menuProcTelemetryh+0x538>)
  408e52:	f8cd 8000 	str.w	r8, [sp]
  408e56:	f7f9 fd0b 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.frsky.usrProto, 0, 2);
  408e5a:	f1b8 0f00 	cmp.w	r8, #0
  408e5e:	f43f aeb3 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  408e62:	f896 1860 	ldrb.w	r1, [r6, #2144]	; 0x860
  408e66:	2302      	movs	r3, #2
  408e68:	9807      	ldr	r0, [sp, #28]
  408e6a:	f001 0107 	and.w	r1, r1, #7
  408e6e:	2200      	movs	r2, #0
  408e70:	f7fe f9fa 	bl	407268 <_Z16checkIncDecModelhaaa>
  408e74:	f896 3860 	ldrb.w	r3, [r6, #2144]	; 0x860
  408e78:	f360 0302 	bfi	r3, r0, #0, #3
  408e7c:	f886 3860 	strb.w	r3, [r6, #2144]	; 0x860
  408e80:	e6a2      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        break;
      }

#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
      case ITEM_TELEMETRY_USR_LABEL:
        lcd_putsLeft(y, STR_USRDATA);
  408e82:	4628      	mov	r0, r5
  408e84:	493e      	ldr	r1, [pc, #248]	; (408f80 <_Z17menuProcTelemetryh+0x53c>)
  408e86:	f7f9 fd21 	bl	4028cc <_Z12lcd_putsLefthPKc>
  408e8a:	e69d      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        break;

      case ITEM_TELEMETRY_RSSI_ALARM1:
      case ITEM_TELEMETRY_RSSI_ALARM2: {
        uint8_t j = k-ITEM_TELEMETRY_RSSI_ALARM1;
        lcd_puts(4, y, STR_ALARM);
  408e8c:	4a3d      	ldr	r2, [pc, #244]	; (408f84 <_Z17menuProcTelemetryh+0x540>)
  408e8e:	2004      	movs	r0, #4
  408e90:	4629      	mov	r1, r5
  408e92:	f7f9 fd19 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_putsLeft(y, PSTR("RSSI"));
        break;

      case ITEM_TELEMETRY_RSSI_ALARM1:
      case ITEM_TELEMETRY_RSSI_ALARM2: {
        uint8_t j = k-ITEM_TELEMETRY_RSSI_ALARM1;
  408e96:	f1a9 090b 	sub.w	r9, r9, #11
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ((2+j+g_model.frsky.rssiAlarms[j].level)%4), (attr && m_posHorz==0) ? blink : 0);
  408e9a:	f240 1208 	movw	r2, #264	; 0x108
        lcd_putsLeft(y, PSTR("RSSI"));
        break;

      case ITEM_TELEMETRY_RSSI_ALARM1:
      case ITEM_TELEMETRY_RSSI_ALARM2: {
        uint8_t j = k-ITEM_TELEMETRY_RSSI_ALARM1;
  408e9e:	fa5f f989 	uxtb.w	r9, r9
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ((2+j+g_model.frsky.rssiAlarms[j].level)%4), (attr && m_posHorz==0) ? blink : 0);
  408ea2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  408ea6:	eb02 0309 	add.w	r3, r2, r9
  408eaa:	f893 2869 	ldrb.w	r2, [r3, #2153]	; 0x869
  408eae:	f109 0302 	add.w	r3, r9, #2
  408eb2:	18d3      	adds	r3, r2, r3
  408eb4:	f003 0303 	and.w	r3, r3, #3
  408eb8:	f1b8 0f00 	cmp.w	r8, #0
  408ebc:	f000 8283 	beq.w	4093c6 <_Z17menuProcTelemetryh+0x982>
  408ec0:	f897 6c35 	ldrb.w	r6, [r7, #3125]	; 0xc35
  408ec4:	9905      	ldr	r1, [sp, #20]
  408ec6:	202e      	movs	r0, #46	; 0x2e
  408ec8:	2e00      	cmp	r6, #0
  408eca:	bf18      	it	ne
  408ecc:	2100      	movne	r1, #0
  408ece:	460e      	mov	r6, r1
  408ed0:	4a2d      	ldr	r2, [pc, #180]	; (408f88 <_Z17menuProcTelemetryh+0x544>)
  408ed2:	4629      	mov	r1, r5
  408ed4:	9600      	str	r6, [sp, #0]
  408ed6:	f7f9 fccb 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        lcd_putc(TELEM_COL2+4*FW, y, '<');
  408eda:	223c      	movs	r2, #60	; 0x3c
  408edc:	2046      	movs	r0, #70	; 0x46
  408ede:	4629      	mov	r1, r5
  408ee0:	f7f9 fc80 	bl	4027e4 <_Z8lcd_putchhh>
        lcd_outdezNAtt(TELEM_COL2+6*FW, y, getRssiAlarmValue(j), LEFT|((attr && m_posHorz==1) ? blink : 0), 3);
  408ee4:	4648      	mov	r0, r9
  408ee6:	f7fc fb0f 	bl	405508 <_Z17getRssiAlarmValueh>
  408eea:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
  408eee:	2b01      	cmp	r3, #1
  408ef0:	f000 8382 	beq.w	4095f8 <_Z17menuProcTelemetryh+0xbb4>
  408ef4:	2380      	movs	r3, #128	; 0x80
  408ef6:	b202      	sxth	r2, r0
  408ef8:	2603      	movs	r6, #3
  408efa:	2052      	movs	r0, #82	; 0x52
  408efc:	4629      	mov	r1, r5
  408efe:	9600      	str	r6, [sp, #0]
  408f00:	f7f9 fe28 	bl	402b54 <_Z14lcd_outdezNAtthhshh>

        if (attr && (s_editMode>0 || p1valdiff)) {
  408f04:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
  408f08:	2b00      	cmp	r3, #0
  408f0a:	f77f ae5d 	ble.w	408bc8 <_Z17menuProcTelemetryh+0x184>
          switch (m_posHorz) {
  408f0e:	f241 2100 	movw	r1, #4608	; 0x1200
  408f12:	f2c2 0100 	movt	r1, #8192	; 0x2000
  408f16:	f891 3c35 	ldrb.w	r3, [r1, #3125]	; 0xc35
  408f1a:	2b00      	cmp	r3, #0
  408f1c:	f000 82a8 	beq.w	409470 <_Z17menuProcTelemetryh+0xa2c>
  408f20:	2b01      	cmp	r3, #1
  408f22:	f47f ae51 	bne.w	408bc8 <_Z17menuProcTelemetryh+0x184>
            case 0:
              CHECK_INCDEC_MODELVAR(event, g_model.frsky.rssiAlarms[j].level, -3, 2); // circular (saves flash)
              break;
            case 1:
              CHECK_INCDEC_MODELVAR(event, g_model.frsky.rssiAlarms[j].value, -30, 30);
  408f26:	f240 1308 	movw	r3, #264	; 0x108
  408f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  408f2e:	4499      	add	r9, r3
  408f30:	f899 1869 	ldrb.w	r1, [r9, #2153]	; 0x869
  408f34:	231e      	movs	r3, #30
  408f36:	9807      	ldr	r0, [sp, #28]
  408f38:	f341 0185 	sbfx	r1, r1, #2, #6
  408f3c:	f06f 021d 	mvn.w	r2, #29
  408f40:	f7fe f992 	bl	407268 <_Z16checkIncDecModelhaaa>
  408f44:	f899 3869 	ldrb.w	r3, [r9, #2153]	; 0x869
  408f48:	f360 0387 	bfi	r3, r0, #2, #6
  408f4c:	f889 3869 	strb.w	r3, [r9, #2153]	; 0x869
  408f50:	e63a      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        }
        break;
      }

      case ITEM_TELEMETRY_RSSI_LABEL:
        lcd_putsLeft(y, PSTR("RSSI"));
  408f52:	4628      	mov	r0, r5
  408f54:	490d      	ldr	r1, [pc, #52]	; (408f8c <_Z17menuProcTelemetryh+0x548>)
  408f56:	f7f9 fcb9 	bl	4028cc <_Z12lcd_putsLefthPKc>
  408f5a:	e635      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
  408f5c:	20000244 	.word	0x20000244
  408f60:	00410570 	.word	0x00410570
  408f64:	00410bcc 	.word	0x00410bcc
  408f68:	00410bb0 	.word	0x00410bb0
  408f6c:	00410633 	.word	0x00410633
  408f70:	00410ba8 	.word	0x00410ba8
  408f74:	00410ba0 	.word	0x00410ba0
  408f78:	00410b98 	.word	0x00410b98
  408f7c:	0041061d 	.word	0x0041061d
  408f80:	00410b90 	.word	0x00410b90
  408f84:	00410b88 	.word	0x00410b88
  408f88:	0041060d 	.word	0x0041060d
  408f8c:	0041144c 	.word	0x0041144c
      case ITEM_TELEMETRY_A1_ALARM2:
      case ITEM_TELEMETRY_A2_ALARM1:
      case ITEM_TELEMETRY_A2_ALARM2:
      {
        uint8_t j = ((k==ITEM_TELEMETRY_A1_ALARM1 || k==ITEM_TELEMETRY_A2_ALARM1) ? 0 : 1);
        lcd_puts(4, y, STR_ALARM);
  408f90:	2004      	movs	r0, #4
  408f92:	4629      	mov	r1, r5
  408f94:	4ab5      	ldr	r2, [pc, #724]	; (40926c <_Z17menuProcTelemetryh+0x828>)
  408f96:	f8cd c010 	str.w	ip, [sp, #16]
  408f9a:	f7f9 fc95 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ALARM_LEVEL(ch, j), (attr && m_posHorz==0) ? blink : 0);
  408f9e:	f240 1208 	movw	r2, #264	; 0x108
  408fa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  408fa6:	eb0a 0b06 	add.w	fp, sl, r6
  408faa:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
  408fae:	f50b 6b04 	add.w	fp, fp, #2112	; 0x840
      case ITEM_TELEMETRY_A1_ALARM1:
      case ITEM_TELEMETRY_A1_ALARM2:
      case ITEM_TELEMETRY_A2_ALARM1:
      case ITEM_TELEMETRY_A2_ALARM2:
      {
        uint8_t j = ((k==ITEM_TELEMETRY_A1_ALARM1 || k==ITEM_TELEMETRY_A2_ALARM1) ? 0 : 1);
  408fb2:	f1b9 0203 	subs.w	r2, r9, #3
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ALARM_LEVEL(ch, j), (attr && m_posHorz==0) ? blink : 0);
  408fb6:	f10b 0b14 	add.w	fp, fp, #20
      case ITEM_TELEMETRY_A1_ALARM1:
      case ITEM_TELEMETRY_A1_ALARM2:
      case ITEM_TELEMETRY_A2_ALARM1:
      case ITEM_TELEMETRY_A2_ALARM2:
      {
        uint8_t j = ((k==ITEM_TELEMETRY_A1_ALARM1 || k==ITEM_TELEMETRY_A2_ALARM1) ? 0 : 1);
  408fba:	bf18      	it	ne
  408fbc:	2201      	movne	r2, #1
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ALARM_LEVEL(ch, j), (attr && m_posHorz==0) ? blink : 0);
  408fbe:	f89b 3005 	ldrb.w	r3, [fp, #5]
  408fc2:	f1b9 0f08 	cmp.w	r9, #8
  408fc6:	bf0c      	ite	eq
  408fc8:	f04f 0900 	moveq.w	r9, #0
  408fcc:	f002 0901 	andne.w	r9, r2, #1
  408fd0:	ea4f 0149 	mov.w	r1, r9, lsl #1
  408fd4:	f003 030f 	and.w	r3, r3, #15
  408fd8:	410b      	asrs	r3, r1
  408fda:	9108      	str	r1, [sp, #32]
  408fdc:	f003 0303 	and.w	r3, r3, #3
  408fe0:	f8dd c010 	ldr.w	ip, [sp, #16]
  408fe4:	f1b8 0f00 	cmp.w	r8, #0
  408fe8:	f000 819d 	beq.w	409326 <_Z17menuProcTelemetryh+0x8e2>
  408fec:	f897 ec35 	ldrb.w	lr, [r7, #3125]	; 0xc35
  408ff0:	9a05      	ldr	r2, [sp, #20]
  408ff2:	202e      	movs	r0, #46	; 0x2e
  408ff4:	f1be 0f00 	cmp.w	lr, #0
  408ff8:	bf18      	it	ne
  408ffa:	2200      	movne	r2, #0
  408ffc:	4696      	mov	lr, r2
  408ffe:	4629      	mov	r1, r5
  409000:	4a9b      	ldr	r2, [pc, #620]	; (409270 <_Z17menuProcTelemetryh+0x82c>)
  409002:	f8cd e000 	str.w	lr, [sp]
  409006:	f7f9 fc33 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        lcd_putsiAtt(TELEM_COL2+4*FW, y, STR_VALARMFN, ALARM_GREATER(ch, j), (attr && m_posHorz==1) ? blink : 0);
  40900a:	f89b 3005 	ldrb.w	r3, [fp, #5]
  40900e:	f897 ec35 	ldrb.w	lr, [r7, #3125]	; 0xc35
  409012:	f3c3 1301 	ubfx	r3, r3, #4, #2
  409016:	fa43 f309 	asr.w	r3, r3, r9
  40901a:	9905      	ldr	r1, [sp, #20]
        putsTelemetryChannel(TELEM_COL2+6*FW, y, ch+MAX_TIMERS, channel.alarms_value[j], (attr && m_posHorz==2 ? blink : 0) | LEFT);
  40901c:	f8dd c010 	ldr.w	ip, [sp, #16]
      case ITEM_TELEMETRY_A2_ALARM2:
      {
        uint8_t j = ((k==ITEM_TELEMETRY_A1_ALARM1 || k==ITEM_TELEMETRY_A2_ALARM1) ? 0 : 1);
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ALARM_LEVEL(ch, j), (attr && m_posHorz==0) ? blink : 0);
        lcd_putsiAtt(TELEM_COL2+4*FW, y, STR_VALARMFN, ALARM_GREATER(ch, j), (attr && m_posHorz==1) ? blink : 0);
  409020:	f1be 0f01 	cmp.w	lr, #1
  409024:	bf18      	it	ne
  409026:	2100      	movne	r1, #0
  409028:	468e      	mov	lr, r1
  40902a:	f003 0301 	and.w	r3, r3, #1
  40902e:	2046      	movs	r0, #70	; 0x46
  409030:	4629      	mov	r1, r5
  409032:	4a90      	ldr	r2, [pc, #576]	; (409274 <_Z17menuProcTelemetryh+0x830>)
        putsTelemetryChannel(TELEM_COL2+6*FW, y, ch+MAX_TIMERS, channel.alarms_value[j], (attr && m_posHorz==2 ? blink : 0) | LEFT);
  409034:	eb0c 0b09 	add.w	fp, ip, r9
      case ITEM_TELEMETRY_A2_ALARM2:
      {
        uint8_t j = ((k==ITEM_TELEMETRY_A1_ALARM1 || k==ITEM_TELEMETRY_A2_ALARM1) ? 0 : 1);
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ALARM_LEVEL(ch, j), (attr && m_posHorz==0) ? blink : 0);
        lcd_putsiAtt(TELEM_COL2+4*FW, y, STR_VALARMFN, ALARM_GREATER(ch, j), (attr && m_posHorz==1) ? blink : 0);
  409038:	f8cd e000 	str.w	lr, [sp]
  40903c:	f7f9 fc18 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        putsTelemetryChannel(TELEM_COL2+6*FW, y, ch+MAX_TIMERS, channel.alarms_value[j], (attr && m_posHorz==2 ? blink : 0) | LEFT);
  409040:	f897 1c35 	ldrb.w	r1, [r7, #3125]	; 0xc35
  409044:	1cb2      	adds	r2, r6, #2
  409046:	2902      	cmp	r1, #2
  409048:	f89b 3003 	ldrb.w	r3, [fp, #3]
  40904c:	b2d2      	uxtb	r2, r2
  40904e:	f8dd c010 	ldr.w	ip, [sp, #16]
  409052:	bf18      	it	ne
  409054:	f04f 0e80 	movne.w	lr, #128	; 0x80
  409058:	f000 82c2 	beq.w	4095e0 <_Z17menuProcTelemetryh+0xb9c>
  40905c:	b21b      	sxth	r3, r3
  40905e:	2052      	movs	r0, #82	; 0x52
  409060:	4629      	mov	r1, r5
  409062:	f8cd c010 	str.w	ip, [sp, #16]
  409066:	f8cd e000 	str.w	lr, [sp]
  40906a:	f7fc f8a1 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>

        if (attr && (s_editMode>0 || p1valdiff)) {
  40906e:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
  409072:	f8dd c010 	ldr.w	ip, [sp, #16]
  409076:	2b00      	cmp	r3, #0
  409078:	f77f ada6 	ble.w	408bc8 <_Z17menuProcTelemetryh+0x184>
          uint8_t t;
          switch (m_posHorz) {
  40907c:	f241 2200 	movw	r2, #4608	; 0x1200
  409080:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409084:	f892 8c35 	ldrb.w	r8, [r2, #3125]	; 0xc35
  409088:	f1b8 0f01 	cmp.w	r8, #1
  40908c:	f000 8207 	beq.w	40949e <_Z17menuProcTelemetryh+0xa5a>
  409090:	f080 82b7 	bcs.w	409602 <_Z17menuProcTelemetryh+0xbbe>
           case 0:
             t = ALARM_LEVEL(ch, j);
  409094:	eb0a 0306 	add.w	r3, sl, r6
  409098:	f240 1608 	movw	r6, #264	; 0x108
  40909c:	f2c2 0600 	movt	r6, #8192	; 0x2000
  4090a0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  4090a4:	f893 1859 	ldrb.w	r1, [r3, #2137]	; 0x859
  4090a8:	9e08      	ldr	r6, [sp, #32]
             channel.alarms_level = (channel.alarms_level & ~(3<<(2*j))) + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
  4090aa:	2303      	movs	r3, #3

        if (attr && (s_editMode>0 || p1valdiff)) {
          uint8_t t;
          switch (m_posHorz) {
           case 0:
             t = ALARM_LEVEL(ch, j);
  4090ac:	f001 010f 	and.w	r1, r1, #15
  4090b0:	4131      	asrs	r1, r6
             channel.alarms_level = (channel.alarms_level & ~(3<<(2*j))) + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
  4090b2:	fa13 f606 	lsls.w	r6, r3, r6
  4090b6:	f89c 2005 	ldrb.w	r2, [ip, #5]
  4090ba:	4019      	ands	r1, r3
  4090bc:	f3c2 0203 	ubfx	r2, r2, #0, #4
  4090c0:	ea22 0606 	bic.w	r6, r2, r6
  4090c4:	fa5f f886 	uxtb.w	r8, r6
  4090c8:	2200      	movs	r2, #0
  4090ca:	2602      	movs	r6, #2
  4090cc:	9807      	ldr	r0, [sp, #28]
  4090ce:	9600      	str	r6, [sp, #0]
  4090d0:	f8cd c010 	str.w	ip, [sp, #16]
  4090d4:	f7fd ff54 	bl	406f80 <_Z11checkIncDechsssh>
  4090d8:	9e08      	ldr	r6, [sp, #32]
  4090da:	f8dd c010 	ldr.w	ip, [sp, #16]
  4090de:	fa10 f206 	lsls.w	r2, r0, r6
  4090e2:	f89c 3005 	ldrb.w	r3, [ip, #5]
  4090e6:	4490      	add	r8, r2
  4090e8:	f368 0303 	bfi	r3, r8, #0, #4
  4090ec:	f88c 3005 	strb.w	r3, [ip, #5]
  4090f0:	e56a      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        }
        break;

      case ITEM_TELEMETRY_A1_OFFSET:
      case ITEM_TELEMETRY_A2_OFFSET:
        lcd_puts(4, y, STR_OFFSET);
  4090f2:	4629      	mov	r1, r5
  4090f4:	4a60      	ldr	r2, [pc, #384]	; (409278 <_Z17menuProcTelemetryh+0x834>)
  4090f6:	2004      	movs	r0, #4
  4090f8:	f8cd c010 	str.w	ip, [sp, #16]
  4090fc:	f7f9 fbe4 	bl	4028c8 <_Z8lcd_putshhPKc>
        putsTelemetryChannel(TELEM_COL2, y, ch+MAX_TIMERS, 0, LEFT|attr);
  409100:	f068 037f 	orn	r3, r8, #127	; 0x7f
  409104:	b2db      	uxtb	r3, r3
  409106:	1cb2      	adds	r2, r6, #2
  409108:	9300      	str	r3, [sp, #0]
  40910a:	b2d2      	uxtb	r2, r2
  40910c:	202e      	movs	r0, #46	; 0x2e
  40910e:	4629      	mov	r1, r5
  409110:	2300      	movs	r3, #0
  409112:	f7fc f84d 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
        if (attr) channel.offset = checkIncDec(event, channel.offset, -256, 256, EE_MODEL);
  409116:	f8dd c010 	ldr.w	ip, [sp, #16]
  40911a:	f1b8 0f00 	cmp.w	r8, #0
  40911e:	f43f ad53 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  409122:	f89c 1002 	ldrb.w	r1, [ip, #2]
  409126:	f89c 3001 	ldrb.w	r3, [ip, #1]
  40912a:	f001 010f 	and.w	r1, r1, #15
  40912e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  409132:	f341 010b 	sbfx	r1, r1, #0, #12
  409136:	f06f 02ff 	mvn.w	r2, #255	; 0xff
  40913a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40913e:	9807      	ldr	r0, [sp, #28]
  409140:	2602      	movs	r6, #2
  409142:	9600      	str	r6, [sp, #0]
  409144:	f7fd ff1c 	bl	406f80 <_Z11checkIncDechsssh>
  409148:	f8dd c010 	ldr.w	ip, [sp, #16]
  40914c:	b283      	uxth	r3, r0
  40914e:	f89c 1002 	ldrb.w	r1, [ip, #2]
  409152:	f3c3 2203 	ubfx	r2, r3, #8, #4
  409156:	f021 010f 	bic.w	r1, r1, #15
  40915a:	430a      	orrs	r2, r1
  40915c:	f88c 3001 	strb.w	r3, [ip, #1]
  409160:	f88c 2002 	strb.w	r2, [ip, #2]
  409164:	e530      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        lcd_outdezAtt(2*FW, y, ch+1, 0);
        break;

      case ITEM_TELEMETRY_A1_RANGE:
      case ITEM_TELEMETRY_A2_RANGE:
        lcd_puts(4, y, STR_RANGE);
  409166:	4a45      	ldr	r2, [pc, #276]	; (40927c <_Z17menuProcTelemetryh+0x838>)
  409168:	2004      	movs	r0, #4
  40916a:	4629      	mov	r1, r5
  40916c:	f8cd c010 	str.w	ip, [sp, #16]
  409170:	f7f9 fbaa 	bl	4028c8 <_Z8lcd_putshhPKc>
        putsTelemetryChannel(TELEM_COL2, y, ch+MAX_TIMERS, 255-channel.offset, ((attr && m_posHorz==0) ? blink : 0)|NO_UNIT|LEFT);
  409174:	f8dd c010 	ldr.w	ip, [sp, #16]
  409178:	f89c 3002 	ldrb.w	r3, [ip, #2]
  40917c:	f89c 2001 	ldrb.w	r2, [ip, #1]
  409180:	f003 030f 	and.w	r3, r3, #15
  409184:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  409188:	f343 030b 	sbfx	r3, r3, #0, #12
  40918c:	1cb2      	adds	r2, r6, #2
  40918e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  409192:	b2d2      	uxtb	r2, r2
  409194:	b29b      	uxth	r3, r3
  409196:	f1b8 0f00 	cmp.w	r8, #0
  40919a:	f000 80ea 	beq.w	409372 <_Z17menuProcTelemetryh+0x92e>
  40919e:	f897 1c35 	ldrb.w	r1, [r7, #3125]	; 0xc35
  4091a2:	26c0      	movs	r6, #192	; 0xc0
  4091a4:	2900      	cmp	r1, #0
  4091a6:	f000 814a 	beq.w	40943e <_Z17menuProcTelemetryh+0x9fa>
  4091aa:	202e      	movs	r0, #46	; 0x2e
  4091ac:	b21b      	sxth	r3, r3
  4091ae:	4629      	mov	r1, r5
  4091b0:	9600      	str	r6, [sp, #0]
  4091b2:	f8cd c010 	str.w	ip, [sp, #16]
  4091b6:	f7fb fffb 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
        lcd_putsiAtt(lcd_lastPos, y, STR_VTELEMUNIT, channel.type, (attr && m_posHorz==1 ? blink : 0));
  4091ba:	f8dd c010 	ldr.w	ip, [sp, #16]
  4091be:	f897 2c35 	ldrb.w	r2, [r7, #3125]	; 0xc35
  4091c2:	f89c 3002 	ldrb.w	r3, [ip, #2]
  4091c6:	9e05      	ldr	r6, [sp, #20]
  4091c8:	091b      	lsrs	r3, r3, #4
  4091ca:	2a01      	cmp	r2, #1
  4091cc:	bf18      	it	ne
  4091ce:	2600      	movne	r6, #0
  4091d0:	f897 0a85 	ldrb.w	r0, [r7, #2693]	; 0xa85
  4091d4:	4629      	mov	r1, r5
  4091d6:	4a2a      	ldr	r2, [pc, #168]	; (409280 <_Z17menuProcTelemetryh+0x83c>)
  4091d8:	9600      	str	r6, [sp, #0]
  4091da:	f7f9 fb49 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if (attr && (s_editMode>0 || p1valdiff)) {
  4091de:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
  4091e2:	f8dd c010 	ldr.w	ip, [sp, #16]
  4091e6:	2b00      	cmp	r3, #0
  4091e8:	f77f acee 	ble.w	408bc8 <_Z17menuProcTelemetryh+0x184>
          if (m_posHorz == 0) {
  4091ec:	f241 2300 	movw	r3, #4608	; 0x1200
  4091f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4091f4:	f893 2c35 	ldrb.w	r2, [r3, #3125]	; 0xc35
  4091f8:	2a00      	cmp	r2, #0
  4091fa:	f040 8125 	bne.w	409448 <_Z17menuProcTelemetryh+0xa04>
            uint16_t ratio = checkIncDec(event, channel.ratio, 0, 256, EE_MODEL);
  4091fe:	4e21      	ldr	r6, [pc, #132]	; (409284 <_Z17menuProcTelemetryh+0x840>)
  409200:	f44f 7380 	mov.w	r3, #256	; 0x100
  409204:	f816 100b 	ldrb.w	r1, [r6, fp]
  409208:	9807      	ldr	r0, [sp, #28]
  40920a:	2602      	movs	r6, #2
  40920c:	f8cd c010 	str.w	ip, [sp, #16]
  409210:	9600      	str	r6, [sp, #0]
  409212:	f7fd feb5 	bl	406f80 <_Z11checkIncDechsssh>
            if (checkIncDec_Ret) {
  409216:	f241 2100 	movw	r1, #4608	; 0x1200
  40921a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40921e:	f991 3c2d 	ldrsb.w	r3, [r1, #3117]	; 0xc2d
  409222:	f8dd c010 	ldr.w	ip, [sp, #16]
  409226:	2b00      	cmp	r3, #0
  409228:	f43f acce 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
        lcd_puts(4, y, STR_RANGE);
        putsTelemetryChannel(TELEM_COL2, y, ch+MAX_TIMERS, 255-channel.offset, ((attr && m_posHorz==0) ? blink : 0)|NO_UNIT|LEFT);
        lcd_putsiAtt(lcd_lastPos, y, STR_VTELEMUNIT, channel.type, (attr && m_posHorz==1 ? blink : 0));
        if (attr && (s_editMode>0 || p1valdiff)) {
          if (m_posHorz == 0) {
            uint16_t ratio = checkIncDec(event, channel.ratio, 0, 256, EE_MODEL);
  40922c:	b283      	uxth	r3, r0
            if (checkIncDec_Ret) {
              if (ratio == 127 && channel.multiplier > 0) {
  40922e:	2b7f      	cmp	r3, #127	; 0x7f
  409230:	f000 826e 	beq.w	409710 <_Z17menuProcTelemetryh+0xccc>
                channel.multiplier--; channel.ratio = 255;
              }
              else if (ratio == 256) {
  409234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  409238:	f000 827a 	beq.w	409730 <_Z17menuProcTelemetryh+0xcec>
                if (channel.multiplier < 3) { channel.multiplier++; channel.ratio = 128; }
              }
              else {
                channel.ratio = ratio;
  40923c:	4911      	ldr	r1, [pc, #68]	; (409284 <_Z17menuProcTelemetryh+0x840>)
  40923e:	f801 300b 	strb.w	r3, [r1, fp]
  409242:	e4c1      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
    FrSkyChannelData & channel = g_model.frsky.channels[ch];

    switch(k) {
      case ITEM_TELEMETRY_A1_LABEL:
      case ITEM_TELEMETRY_A2_LABEL:
        lcd_putsLeft(y, STR_ACHANNEL);
  409244:	4628      	mov	r0, r5
  409246:	4910      	ldr	r1, [pc, #64]	; (409288 <_Z17menuProcTelemetryh+0x844>)
  409248:	f7f9 fb40 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(2*FW, y, ch+1, 0);
  40924c:	1c72      	adds	r2, r6, #1
  40924e:	b212      	sxth	r2, r2
  409250:	200c      	movs	r0, #12
  409252:	4629      	mov	r1, r5
  409254:	2300      	movs	r3, #0
  409256:	f7f9 fdef 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  40925a:	e4b5      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE3:
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE4:
        for (uint8_t c=0; c<2; c++) {
          uint8_t j = k - ITEM_TELEMETRY_CUSTOM_SCREEN_LINE1;
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
  40925c:	4629      	mov	r1, r5
  40925e:	4a0b      	ldr	r2, [pc, #44]	; (40928c <_Z17menuProcTelemetryh+0x848>)
  409260:	4643      	mov	r3, r8
  409262:	9600      	str	r6, [sp, #0]
  409264:	f7f9 fb04 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  409268:	e4f9      	b.n	408c5e <_Z17menuProcTelemetryh+0x21a>
  40926a:	bf00      	nop
  40926c:	00410b88 	.word	0x00410b88
  409270:	0041060d 	.word	0x0041060d
  409274:	0041061a 	.word	0x0041061a
  409278:	00410b80 	.word	0x00410b80
  40927c:	00410b78 	.word	0x00410b78
  409280:	004105f1 	.word	0x004105f1
  409284:	20000244 	.word	0x20000244
  409288:	00410b6c 	.word	0x00410b6c
  40928c:	00410570 	.word	0x00410570
        if (barSource) {
          putsTelemetryChannel(56-3*FW, y, barSource-1, convertTelemValue(barSource, bar.barMin*5), (attr && m_posHorz==1 ? blink : 0) | LEFT);
          putsTelemetryChannel(14*FW-3, y, barSource-1, convertTelemValue(barSource, (51-bar.barMax)*5), (attr && m_posHorz==2 ? blink : 0) | LEFT);
        }
        else {
          if (attr) m_posHorz = 0;
  409290:	f1b8 0f00 	cmp.w	r8, #0
  409294:	f43f ac98 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  409298:	f89d 6020 	ldrb.w	r6, [sp, #32]
  40929c:	f887 6c35 	strb.w	r6, [r7, #3125]	; 0xc35
        }
        if (attr && (s_editMode>0 || p1valdiff)) {
  4092a0:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
  4092a4:	2b00      	cmp	r3, #0
  4092a6:	f77f ac8f 	ble.w	408bc8 <_Z17menuProcTelemetryh+0x184>
          switch (m_posHorz) {
  4092aa:	f241 2100 	movw	r1, #4608	; 0x1200
  4092ae:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4092b2:	f891 3c35 	ldrb.w	r3, [r1, #3125]	; 0xc35
  4092b6:	2b01      	cmp	r3, #1
  4092b8:	f000 81ec 	beq.w	409694 <_Z17menuProcTelemetryh+0xc50>
  4092bc:	f080 81b2 	bcs.w	409624 <_Z17menuProcTelemetryh+0xbe0>
            case 0:
              CHECK_INCDEC_MODELVAR(event, barSource, 0, g_model.frsky.usrProto ? TELEM_BAR_MAX : TELEM_NOUSR_BAR_MAX);
  4092c0:	f240 1208 	movw	r2, #264	; 0x108
  4092c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4092c8:	f892 3860 	ldrb.w	r3, [r2, #2144]	; 0x860
  4092cc:	fa4f f189 	sxtb.w	r1, r9
  4092d0:	f013 0f07 	tst.w	r3, #7
  4092d4:	bf14      	ite	ne
  4092d6:	230f      	movne	r3, #15
  4092d8:	2306      	moveq	r3, #6
  4092da:	9807      	ldr	r0, [sp, #28]
  4092dc:	2200      	movs	r2, #0
  4092de:	f7fd ffc3 	bl	407268 <_Z16checkIncDecModelhaaa>
              if (checkIncDec_Ret) {
  4092e2:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	; 0xc2d
  4092e6:	2b00      	cmp	r3, #0
  4092e8:	f43f ac6e 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
          if (attr) m_posHorz = 0;
        }
        if (attr && (s_editMode>0 || p1valdiff)) {
          switch (m_posHorz) {
            case 0:
              CHECK_INCDEC_MODELVAR(event, barSource, 0, g_model.frsky.usrProto ? TELEM_BAR_MAX : TELEM_NOUSR_BAR_MAX);
  4092ec:	b2c3      	uxtb	r3, r0
              if (checkIncDec_Ret) {
                bar.source = barSource;
                bar.barMin = 0;
  4092ee:	f003 020f 	and.w	r2, r3, #15
  4092f2:	f88a 2005 	strb.w	r2, [sl, #5]
  4092f6:	f89b 2001 	ldrb.w	r2, [fp, #1]
#endif
}

uint8_t maxTelemValue(uint8_t channel)
{
  switch (channel) {
  4092fa:	2b09      	cmp	r3, #9
  4092fc:	f022 0203 	bic.w	r2, r2, #3
  409300:	f88b 2001 	strb.w	r2, [fp, #1]
  409304:	d807      	bhi.n	409316 <_Z17menuProcTelemetryh+0x8d2>
  409306:	2201      	movs	r2, #1
  409308:	b25b      	sxtb	r3, r3
  40930a:	fa12 f303 	lsls.w	r3, r2, r3
  40930e:	221f      	movs	r2, #31
  409310:	f413 7f18 	tst.w	r3, #608	; 0x260
  409314:	d100      	bne.n	409318 <_Z17menuProcTelemetryh+0x8d4>
  409316:	2200      	movs	r2, #0
                bar.barMax = 51 - (maxTelemValue(barSource) / 5);
  409318:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40931c:	f362 0387 	bfi	r3, r2, #2, #6
  409320:	f88b 3001 	strb.w	r3, [fp, #1]
  409324:	e450      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
      case ITEM_TELEMETRY_A2_ALARM1:
      case ITEM_TELEMETRY_A2_ALARM2:
      {
        uint8_t j = ((k==ITEM_TELEMETRY_A1_ALARM1 || k==ITEM_TELEMETRY_A2_ALARM1) ? 0 : 1);
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ALARM_LEVEL(ch, j), (attr && m_posHorz==0) ? blink : 0);
  409326:	4629      	mov	r1, r5
  409328:	202e      	movs	r0, #46	; 0x2e
  40932a:	4ad6      	ldr	r2, [pc, #856]	; (409684 <_Z17menuProcTelemetryh+0xc40>)
  40932c:	f8cd c010 	str.w	ip, [sp, #16]
  409330:	f8cd 8000 	str.w	r8, [sp]
  409334:	f7f9 fa9c 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        lcd_putsiAtt(TELEM_COL2+4*FW, y, STR_VALARMFN, ALARM_GREATER(ch, j), (attr && m_posHorz==1) ? blink : 0);
  409338:	f89b 3005 	ldrb.w	r3, [fp, #5]
  40933c:	4629      	mov	r1, r5
  40933e:	f3c3 1301 	ubfx	r3, r3, #4, #2
  409342:	fa43 f309 	asr.w	r3, r3, r9
  409346:	2046      	movs	r0, #70	; 0x46
  409348:	f003 0301 	and.w	r3, r3, #1
  40934c:	4ace      	ldr	r2, [pc, #824]	; (409688 <_Z17menuProcTelemetryh+0xc44>)
  40934e:	f8cd 8000 	str.w	r8, [sp]
  409352:	f7f9 fa8d 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        putsTelemetryChannel(TELEM_COL2+6*FW, y, ch+MAX_TIMERS, channel.alarms_value[j], (attr && m_posHorz==2 ? blink : 0) | LEFT);
  409356:	f8dd c010 	ldr.w	ip, [sp, #16]
  40935a:	2180      	movs	r1, #128	; 0x80
  40935c:	44e1      	add	r9, ip
  40935e:	1cb2      	adds	r2, r6, #2
  409360:	f899 3003 	ldrb.w	r3, [r9, #3]
  409364:	b2d2      	uxtb	r2, r2
  409366:	9100      	str	r1, [sp, #0]
  409368:	2052      	movs	r0, #82	; 0x52
  40936a:	4629      	mov	r1, r5
  40936c:	f7fb ff20 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
  409370:	e42a      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        break;

      case ITEM_TELEMETRY_A1_RANGE:
      case ITEM_TELEMETRY_A2_RANGE:
        lcd_puts(4, y, STR_RANGE);
        putsTelemetryChannel(TELEM_COL2, y, ch+MAX_TIMERS, 255-channel.offset, ((attr && m_posHorz==0) ? blink : 0)|NO_UNIT|LEFT);
  409372:	4629      	mov	r1, r5
  409374:	202e      	movs	r0, #46	; 0x2e
  409376:	b21b      	sxth	r3, r3
  409378:	26c0      	movs	r6, #192	; 0xc0
  40937a:	f8cd c010 	str.w	ip, [sp, #16]
  40937e:	9600      	str	r6, [sp, #0]
  409380:	f7fb ff16 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
        lcd_putsiAtt(lcd_lastPos, y, STR_VTELEMUNIT, channel.type, (attr && m_posHorz==1 ? blink : 0));
  409384:	f8dd c010 	ldr.w	ip, [sp, #16]
  409388:	f897 0a85 	ldrb.w	r0, [r7, #2693]	; 0xa85
  40938c:	f89c 3002 	ldrb.w	r3, [ip, #2]
  409390:	4629      	mov	r1, r5
  409392:	091b      	lsrs	r3, r3, #4
  409394:	4abd      	ldr	r2, [pc, #756]	; (40968c <_Z17menuProcTelemetryh+0xc48>)
  409396:	f8cd 8000 	str.w	r8, [sp]
  40939a:	f7f9 fa69 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  40939e:	e413      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.varioSource, VARIO_SOURCE_NONE, VARIO_SOURCE_LAST-1);
        break;

      case ITEM_TELEMETRY_VARIO_SPEED:
        lcd_puts(4, y, STR_LIMIT);
        lcd_outdezAtt(TELEM_COL2, y, -VARIO_SPEED_LIMIT_MUL*(255 - g_model.varioSpeedDownMin), ((attr && m_posHorz==0) ? blink : 0)|PREC2|LEFT);
  4093a0:	4629      	mov	r1, r5
  4093a2:	23b0      	movs	r3, #176	; 0xb0
  4093a4:	202e      	movs	r0, #46	; 0x2e
  4093a6:	b212      	sxth	r2, r2
  4093a8:	f7f9 fd46 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        lcd_outdezAtt(TELEM_COL2+6*FW, y, VARIO_SPEED_LIMIT_MUL*g_model.varioSpeedUpMin, ((attr && m_posHorz==1) ? blink : 0)|PREC2|LEFT);
  4093ac:	4bb8      	ldr	r3, [pc, #736]	; (409690 <_Z17menuProcTelemetryh+0xc4c>)
  4093ae:	2052      	movs	r0, #82	; 0x52
  4093b0:	f893 2894 	ldrb.w	r2, [r3, #2196]	; 0x894
  4093b4:	4629      	mov	r1, r5
  4093b6:	0912      	lsrs	r2, r2, #4
  4093b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4093bc:	0092      	lsls	r2, r2, #2
  4093be:	23b0      	movs	r3, #176	; 0xb0
  4093c0:	f7f9 fd3a 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  4093c4:	e400      	b.n	408bc8 <_Z17menuProcTelemetryh+0x184>

      case ITEM_TELEMETRY_RSSI_ALARM1:
      case ITEM_TELEMETRY_RSSI_ALARM2: {
        uint8_t j = k-ITEM_TELEMETRY_RSSI_ALARM1;
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ((2+j+g_model.frsky.rssiAlarms[j].level)%4), (attr && m_posHorz==0) ? blink : 0);
  4093c6:	4629      	mov	r1, r5
  4093c8:	202e      	movs	r0, #46	; 0x2e
  4093ca:	4aae      	ldr	r2, [pc, #696]	; (409684 <_Z17menuProcTelemetryh+0xc40>)
  4093cc:	f8cd 8000 	str.w	r8, [sp]
  4093d0:	f7f9 fa4e 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        lcd_putc(TELEM_COL2+4*FW, y, '<');
  4093d4:	4629      	mov	r1, r5
  4093d6:	223c      	movs	r2, #60	; 0x3c
  4093d8:	2046      	movs	r0, #70	; 0x46
  4093da:	f7f9 fa03 	bl	4027e4 <_Z8lcd_putchhh>
        lcd_outdezNAtt(TELEM_COL2+6*FW, y, getRssiAlarmValue(j), LEFT|((attr && m_posHorz==1) ? blink : 0), 3);
  4093de:	4648      	mov	r0, r9
  4093e0:	f7fc f892 	bl	405508 <_Z17getRssiAlarmValueh>
  4093e4:	2303      	movs	r3, #3
  4093e6:	b202      	sxth	r2, r0
  4093e8:	9300      	str	r3, [sp, #0]
  4093ea:	2052      	movs	r0, #82	; 0x52
  4093ec:	4629      	mov	r1, r5
  4093ee:	2380      	movs	r3, #128	; 0x80
  4093f0:	f7f9 fbb0 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  4093f4:	f7ff bbe8 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.varioSource, VARIO_SOURCE_NONE, VARIO_SOURCE_LAST-1);
        break;

      case ITEM_TELEMETRY_VARIO_SPEED:
        lcd_puts(4, y, STR_LIMIT);
        lcd_outdezAtt(TELEM_COL2, y, -VARIO_SPEED_LIMIT_MUL*(255 - g_model.varioSpeedDownMin), ((attr && m_posHorz==0) ? blink : 0)|PREC2|LEFT);
  4093f8:	9e05      	ldr	r6, [sp, #20]
  4093fa:	f066 034f 	orn	r3, r6, #79	; 0x4f
  4093fe:	b2db      	uxtb	r3, r3
  409400:	f7ff bba9 	b.w	408b56 <_Z17menuProcTelemetryh+0x112>
      {
        FrSkyBarData & bar = g_model.frsky.bars[k-ITEM_TELEMETRY_GAUGES_LINE1];
        uint8_t barSource = bar.source;
        lcd_putsiAtt(4, y, STR_VTELEMCHNS, barSource, (attr && m_posHorz==0) ? blink : 0);
        if (barSource) {
          putsTelemetryChannel(56-3*FW, y, barSource-1, convertTelemValue(barSource, bar.barMin*5), (attr && m_posHorz==1 ? blink : 0) | LEFT);
  409404:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409406:	2680      	movs	r6, #128	; 0x80
  409408:	4629      	mov	r1, r5
  40940a:	2026      	movs	r0, #38	; 0x26
  40940c:	9600      	str	r6, [sp, #0]
  40940e:	f7fb fecf 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
          putsTelemetryChannel(14*FW-3, y, barSource-1, convertTelemValue(barSource, (51-bar.barMax)*5), (attr && m_posHorz==2 ? blink : 0) | LEFT);
  409412:	f89b 3001 	ldrb.w	r3, [fp, #1]
  409416:	4648      	mov	r0, r9
  409418:	f3c3 0385 	ubfx	r3, r3, #2, #6
  40941c:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
  409420:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
  409424:	1e59      	subs	r1, r3, #1
  409426:	b2c9      	uxtb	r1, r1
  409428:	f7fb fae6 	bl	4049f8 <_Z17convertTelemValuehh>
  40942c:	4629      	mov	r1, r5
  40942e:	4603      	mov	r3, r0
  409430:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409432:	2051      	movs	r0, #81	; 0x51
  409434:	9600      	str	r6, [sp, #0]
  409436:	f7fb febb 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
  40943a:	f7ff bbc5 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
        break;

      case ITEM_TELEMETRY_A1_RANGE:
      case ITEM_TELEMETRY_A2_RANGE:
        lcd_puts(4, y, STR_RANGE);
        putsTelemetryChannel(TELEM_COL2, y, ch+MAX_TIMERS, 255-channel.offset, ((attr && m_posHorz==0) ? blink : 0)|NO_UNIT|LEFT);
  40943e:	9905      	ldr	r1, [sp, #20]
  409440:	f061 063f 	orn	r6, r1, #63	; 0x3f
  409444:	b2f6      	uxtb	r6, r6
  409446:	e6b0      	b.n	4091aa <_Z17menuProcTelemetryh+0x766>
                channel.ratio = ratio;
              }
            }
          }
          else {
            CHECK_INCDEC_MODELVAR(event, channel.type, 0, UNIT_MAX-1);
  409448:	f89c 1002 	ldrb.w	r1, [ip, #2]
  40944c:	2308      	movs	r3, #8
  40944e:	9807      	ldr	r0, [sp, #28]
  409450:	0909      	lsrs	r1, r1, #4
  409452:	2200      	movs	r2, #0
  409454:	f8cd c010 	str.w	ip, [sp, #16]
  409458:	f7fd ff06 	bl	407268 <_Z16checkIncDecModelhaaa>
  40945c:	f8dd c010 	ldr.w	ip, [sp, #16]
  409460:	f89c 3002 	ldrb.w	r3, [ip, #2]
  409464:	f360 1307 	bfi	r3, r0, #4, #4
  409468:	f88c 3002 	strb.w	r3, [ip, #2]
  40946c:	f7ff bbac 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
        lcd_outdezNAtt(TELEM_COL2+6*FW, y, getRssiAlarmValue(j), LEFT|((attr && m_posHorz==1) ? blink : 0), 3);

        if (attr && (s_editMode>0 || p1valdiff)) {
          switch (m_posHorz) {
            case 0:
              CHECK_INCDEC_MODELVAR(event, g_model.frsky.rssiAlarms[j].level, -3, 2); // circular (saves flash)
  409470:	f240 1208 	movw	r2, #264	; 0x108
  409474:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409478:	4491      	add	r9, r2
  40947a:	f899 1869 	ldrb.w	r1, [r9, #2153]	; 0x869
  40947e:	2302      	movs	r3, #2
  409480:	9807      	ldr	r0, [sp, #28]
  409482:	f341 0101 	sbfx	r1, r1, #0, #2
  409486:	f06f 0202 	mvn.w	r2, #2
  40948a:	f7fd feed 	bl	407268 <_Z16checkIncDecModelhaaa>
  40948e:	f899 3869 	ldrb.w	r3, [r9, #2153]	; 0x869
  409492:	f360 0301 	bfi	r3, r0, #0, #2
  409496:	f889 3869 	strb.w	r3, [r9, #2153]	; 0x869
  40949a:	f7ff bb95 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
           case 0:
             t = ALARM_LEVEL(ch, j);
             channel.alarms_level = (channel.alarms_level & ~(3<<(2*j))) + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
             break;
           case 1:
             t = ALARM_GREATER(ch, j);
  40949e:	f240 1108 	movw	r1, #264	; 0x108
  4094a2:	eb0a 0306 	add.w	r3, sl, r6
  4094a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4094aa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  4094ae:	f893 1859 	ldrb.w	r1, [r3, #2137]	; 0x859
             channel.alarms_greater = (channel.alarms_greater & ~(1<<j)) + (checkIncDec(event, t, 0, 1, EE_MODEL) << j);
  4094b2:	fa08 f609 	lsl.w	r6, r8, r9
           case 0:
             t = ALARM_LEVEL(ch, j);
             channel.alarms_level = (channel.alarms_level & ~(3<<(2*j))) + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
             break;
           case 1:
             t = ALARM_GREATER(ch, j);
  4094b6:	f3c1 1101 	ubfx	r1, r1, #4, #2
  4094ba:	fa41 f109 	asr.w	r1, r1, r9
             channel.alarms_greater = (channel.alarms_greater & ~(1<<j)) + (checkIncDec(event, t, 0, 1, EE_MODEL) << j);
  4094be:	f89c 3005 	ldrb.w	r3, [ip, #5]
  4094c2:	2200      	movs	r2, #0
  4094c4:	f3c3 1301 	ubfx	r3, r3, #4, #2
  4094c8:	ea23 0606 	bic.w	r6, r3, r6
  4094cc:	f001 0101 	and.w	r1, r1, #1
  4094d0:	4643      	mov	r3, r8
  4094d2:	9807      	ldr	r0, [sp, #28]
  4094d4:	fa5f f886 	uxtb.w	r8, r6
  4094d8:	2602      	movs	r6, #2
  4094da:	9600      	str	r6, [sp, #0]
  4094dc:	f8cd c010 	str.w	ip, [sp, #16]
  4094e0:	f7fd fd4e 	bl	406f80 <_Z11checkIncDechsssh>
  4094e4:	fa00 f909 	lsl.w	r9, r0, r9
  4094e8:	f8dd c010 	ldr.w	ip, [sp, #16]
             if(checkIncDec_Ret)
  4094ec:	f241 2600 	movw	r6, #4608	; 0x1200
             t = ALARM_LEVEL(ch, j);
             channel.alarms_level = (channel.alarms_level & ~(3<<(2*j))) + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
             break;
           case 1:
             t = ALARM_GREATER(ch, j);
             channel.alarms_greater = (channel.alarms_greater & ~(1<<j)) + (checkIncDec(event, t, 0, 1, EE_MODEL) << j);
  4094f0:	f89c 3005 	ldrb.w	r3, [ip, #5]
             if(checkIncDec_Ret)
  4094f4:	f2c2 0600 	movt	r6, #8192	; 0x2000
             t = ALARM_LEVEL(ch, j);
             channel.alarms_level = (channel.alarms_level & ~(3<<(2*j))) + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
             break;
           case 1:
             t = ALARM_GREATER(ch, j);
             channel.alarms_greater = (channel.alarms_greater & ~(1<<j)) + (checkIncDec(event, t, 0, 1, EE_MODEL) << j);
  4094f8:	44c8      	add	r8, r9
             if(checkIncDec_Ret)
  4094fa:	f996 2c2d 	ldrsb.w	r2, [r6, #3117]	; 0xc2d
             t = ALARM_LEVEL(ch, j);
             channel.alarms_level = (channel.alarms_level & ~(3<<(2*j))) + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
             break;
           case 1:
             t = ALARM_GREATER(ch, j);
             channel.alarms_greater = (channel.alarms_greater & ~(1<<j)) + (checkIncDec(event, t, 0, 1, EE_MODEL) << j);
  4094fe:	f368 1305 	bfi	r3, r8, #4, #2
  409502:	f88c 3005 	strb.w	r3, [ip, #5]
             if(checkIncDec_Ret)
  409506:	2a00      	cmp	r2, #0
  409508:	f43f ab5e 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  40950c:	f240 1108 	movw	r1, #264	; 0x108
  409510:	2306      	movs	r3, #6
  409512:	f2c2 0100 	movt	r1, #8192	; 0x2000
  409516:	f881 3896 	strb.w	r3, [r1, #2198]	; 0x896
  40951a:	f7ff bb55 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
      case ITEM_TELEMETRY_CUSTOM_SCREEN_LINE4:
        for (uint8_t c=0; c<2; c++) {
          uint8_t j = k - ITEM_TELEMETRY_CUSTOM_SCREEN_LINE1;
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
  40951e:	f241 2100 	movw	r1, #4608	; 0x1200
  409522:	f2c2 0100 	movt	r1, #8192	; 0x2000
  409526:	f991 2c2c 	ldrsb.w	r2, [r1, #3116]	; 0xc2c
  40952a:	2a00      	cmp	r2, #0
  40952c:	f77f ab97 	ble.w	408c5e <_Z17menuProcTelemetryh+0x21a>
            CHECK_INCDEC_MODELVAR(event, value, 0, (j==3 && c==0) ? TELEM_STATUS_MAX : TELEM_DISPLAY_MAX);
  409530:	f1d3 0401 	rsbs	r4, r3, #1
  409534:	bf38      	it	cc
  409536:	2400      	movcc	r4, #0
  409538:	f1bb 0f03 	cmp.w	fp, #3
  40953c:	bf14      	ite	ne
  40953e:	2300      	movne	r3, #0
  409540:	f004 0301 	andeq.w	r3, r4, #1
  409544:	2b00      	cmp	r3, #0
  409546:	bf0c      	ite	eq
  409548:	231d      	moveq	r3, #29
  40954a:	231f      	movne	r3, #31
  40954c:	b25b      	sxtb	r3, r3
  40954e:	fa4f f188 	sxtb.w	r1, r8
  409552:	9807      	ldr	r0, [sp, #28]
  409554:	2200      	movs	r2, #0
  409556:	f7fd fe87 	bl	407268 <_Z16checkIncDecModelhaaa>
            if (checkIncDec_Ret) {
  40955a:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	; 0xc2d
  40955e:	2b00      	cmp	r3, #0
  409560:	f43f ab7d 	beq.w	408c5e <_Z17menuProcTelemetryh+0x21a>
        for (uint8_t c=0; c<2; c++) {
          uint8_t j = k - ITEM_TELEMETRY_CUSTOM_SCREEN_LINE1;
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
            CHECK_INCDEC_MODELVAR(event, value, 0, (j==3 && c==0) ? TELEM_STATUS_MAX : TELEM_DISPLAY_MAX);
  409564:	b2c1      	uxtb	r1, r0
            if (checkIncDec_Ret) {
              g_model.frskyLines[j] = (c==0 ? ((g_model.frskyLines[j] & 0xf0) + (value & 0x0f)) : (g_model.frskyLines[j] & 0x0f) + ((value & 0x0f) << 4));
  409566:	2c00      	cmp	r4, #0
  409568:	f000 80c6 	beq.w	4096f8 <_Z17menuProcTelemetryh+0xcb4>
  40956c:	9a08      	ldr	r2, [sp, #32]
  40956e:	f001 040f 	and.w	r4, r1, #15
  409572:	f892 386e 	ldrb.w	r3, [r2, #2158]	; 0x86e
  409576:	f023 030f 	bic.w	r3, r3, #15
  40957a:	18e4      	adds	r4, r4, r3
  40957c:	4b44      	ldr	r3, [pc, #272]	; (409690 <_Z17menuProcTelemetryh+0xc4c>)
  40957e:	b2e4      	uxtb	r4, r4
              uint16_t mask = 0x3 << (4*j+2*c);
  409580:	eb09 024b 	add.w	r2, r9, fp, lsl #1
  409584:	0052      	lsls	r2, r2, #1
  409586:	2003      	movs	r0, #3
  409588:	4090      	lsls	r0, r2
              g_model.frskyLinesXtra &= ~mask;
              mask = (value / 16) << (4*j+2*c);
  40958a:	0909      	lsrs	r1, r1, #4
  40958c:	fa11 f202 	lsls.w	r2, r1, r2
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
            CHECK_INCDEC_MODELVAR(event, value, 0, (j==3 && c==0) ? TELEM_STATUS_MAX : TELEM_DISPLAY_MAX);
            if (checkIncDec_Ret) {
              g_model.frskyLines[j] = (c==0 ? ((g_model.frskyLines[j] & 0xf0) + (value & 0x0f)) : (g_model.frskyLines[j] & 0x0f) + ((value & 0x0f) << 4));
  409590:	eb03 010b 	add.w	r1, r3, fp
  409594:	f881 486e 	strb.w	r4, [r1, #2158]	; 0x86e
              uint16_t mask = 0x3 << (4*j+2*c);
              g_model.frskyLinesXtra &= ~mask;
  409598:	f8b3 1872 	ldrh.w	r1, [r3, #2162]	; 0x872
  40959c:	ea21 0100 	bic.w	r1, r1, r0
              mask = (value / 16) << (4*j+2*c);
              g_model.frskyLinesXtra |= mask;
  4095a0:	430a      	orrs	r2, r1
  4095a2:	f8a3 2872 	strh.w	r2, [r3, #2162]	; 0x872
  4095a6:	f7ff bb5a 	b.w	408c5e <_Z17menuProcTelemetryh+0x21a>
        lcd_puts(4, y, STR_LIMIT);
        lcd_outdezAtt(TELEM_COL2, y, -VARIO_SPEED_LIMIT_MUL*(255 - g_model.varioSpeedDownMin), ((attr && m_posHorz==0) ? blink : 0)|PREC2|LEFT);
        lcd_outdezAtt(TELEM_COL2+6*FW, y, VARIO_SPEED_LIMIT_MUL*g_model.varioSpeedUpMin, ((attr && m_posHorz==1) ? blink : 0)|PREC2|LEFT);

        if (attr && (s_editMode>0 || p1valdiff)) {
          switch (m_posHorz) {
  4095aa:	2a01      	cmp	r2, #1
  4095ac:	f47f ab0c 	bne.w	408bc8 <_Z17menuProcTelemetryh+0x184>
            case 0:
              g_model.varioSpeedDownMin = checkIncDec(event, g_model.varioSpeedDownMin, 0, 255, EE_MODEL);
              break;
            case 1:
              CHECK_INCDEC_MODELVAR(event, g_model.varioSpeedUpMin, 0, 15);
  4095b0:	f240 1208 	movw	r2, #264	; 0x108
  4095b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4095b8:	f892 1894 	ldrb.w	r1, [r2, #2196]	; 0x894
  4095bc:	230f      	movs	r3, #15
  4095be:	9807      	ldr	r0, [sp, #28]
  4095c0:	0909      	lsrs	r1, r1, #4
  4095c2:	2200      	movs	r2, #0
  4095c4:	f7fd fe50 	bl	407268 <_Z16checkIncDecModelhaaa>
  4095c8:	f240 1608 	movw	r6, #264	; 0x108
  4095cc:	f2c2 0600 	movt	r6, #8192	; 0x2000
  4095d0:	f896 3894 	ldrb.w	r3, [r6, #2196]	; 0x894
  4095d4:	f360 1307 	bfi	r3, r0, #4, #4
  4095d8:	f886 3894 	strb.w	r3, [r6, #2196]	; 0x894
  4095dc:	f7ff baf4 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
      {
        uint8_t j = ((k==ITEM_TELEMETRY_A1_ALARM1 || k==ITEM_TELEMETRY_A2_ALARM1) ? 0 : 1);
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ALARM_LEVEL(ch, j), (attr && m_posHorz==0) ? blink : 0);
        lcd_putsiAtt(TELEM_COL2+4*FW, y, STR_VALARMFN, ALARM_GREATER(ch, j), (attr && m_posHorz==1) ? blink : 0);
        putsTelemetryChannel(TELEM_COL2+6*FW, y, ch+MAX_TIMERS, channel.alarms_value[j], (attr && m_posHorz==2 ? blink : 0) | LEFT);
  4095e0:	9905      	ldr	r1, [sp, #20]
  4095e2:	f061 0e7f 	orn	lr, r1, #127	; 0x7f
  4095e6:	fa5f fe8e 	uxtb.w	lr, lr
  4095ea:	e537      	b.n	40905c <_Z17menuProcTelemetryh+0x618>
        break;

      case ITEM_TELEMETRY_VARIO_SPEED:
        lcd_puts(4, y, STR_LIMIT);
        lcd_outdezAtt(TELEM_COL2, y, -VARIO_SPEED_LIMIT_MUL*(255 - g_model.varioSpeedDownMin), ((attr && m_posHorz==0) ? blink : 0)|PREC2|LEFT);
        lcd_outdezAtt(TELEM_COL2+6*FW, y, VARIO_SPEED_LIMIT_MUL*g_model.varioSpeedUpMin, ((attr && m_posHorz==1) ? blink : 0)|PREC2|LEFT);
  4095ec:	9e05      	ldr	r6, [sp, #20]
  4095ee:	f066 034f 	orn	r3, r6, #79	; 0x4f
  4095f2:	b2db      	uxtb	r3, r3
  4095f4:	f7ff bac4 	b.w	408b80 <_Z17menuProcTelemetryh+0x13c>
      case ITEM_TELEMETRY_RSSI_ALARM2: {
        uint8_t j = k-ITEM_TELEMETRY_RSSI_ALARM1;
        lcd_puts(4, y, STR_ALARM);
        lcd_putsiAtt(TELEM_COL2, y, STR_VALARM, ((2+j+g_model.frsky.rssiAlarms[j].level)%4), (attr && m_posHorz==0) ? blink : 0);
        lcd_putc(TELEM_COL2+4*FW, y, '<');
        lcd_outdezNAtt(TELEM_COL2+6*FW, y, getRssiAlarmValue(j), LEFT|((attr && m_posHorz==1) ? blink : 0), 3);
  4095f8:	9e05      	ldr	r6, [sp, #20]
  4095fa:	f066 037f 	orn	r3, r6, #127	; 0x7f
  4095fe:	b2db      	uxtb	r3, r3
  409600:	e479      	b.n	408ef6 <_Z17menuProcTelemetryh+0x4b2>
        lcd_putsiAtt(TELEM_COL2+4*FW, y, STR_VALARMFN, ALARM_GREATER(ch, j), (attr && m_posHorz==1) ? blink : 0);
        putsTelemetryChannel(TELEM_COL2+6*FW, y, ch+MAX_TIMERS, channel.alarms_value[j], (attr && m_posHorz==2 ? blink : 0) | LEFT);

        if (attr && (s_editMode>0 || p1valdiff)) {
          uint8_t t;
          switch (m_posHorz) {
  409602:	f1b8 0f02 	cmp.w	r8, #2
  409606:	f47f aadf 	bne.w	408bc8 <_Z17menuProcTelemetryh+0x184>
             channel.alarms_greater = (channel.alarms_greater & ~(1<<j)) + (checkIncDec(event, t, 0, 1, EE_MODEL) << j);
             if(checkIncDec_Ret)
               FRSKY_setModelAlarms();
             break;
           case 2:
             channel.alarms_value[j] = checkIncDec(event, channel.alarms_value[j], 0, 255, EE_MODEL);
  40960a:	f89b 1003 	ldrb.w	r1, [fp, #3]
  40960e:	9807      	ldr	r0, [sp, #28]
  409610:	2200      	movs	r2, #0
  409612:	23ff      	movs	r3, #255	; 0xff
  409614:	f8cd 8000 	str.w	r8, [sp]
  409618:	f7fd fcb2 	bl	406f80 <_Z11checkIncDechsssh>
  40961c:	f88b 0003 	strb.w	r0, [fp, #3]
  409620:	f7ff bad2 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
        }
        else {
          if (attr) m_posHorz = 0;
        }
        if (attr && (s_editMode>0 || p1valdiff)) {
          switch (m_posHorz) {
  409624:	2b02      	cmp	r3, #2
  409626:	f47f aacf 	bne.w	408bc8 <_Z17menuProcTelemetryh+0x184>
              break;
            case 1:
              CHECK_INCDEC_MODELVAR(event, bar.barMin, 0, 50-bar.barMax);
              break;
            case 2:
              bar.barMax = 51 - checkIncDec(event, 51 - bar.barMax, bar.barMin+1, maxTelemValue(barSource) / 5, EE_MODEL);
  40962a:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40962e:	f89a 0005 	ldrb.w	r0, [sl, #5]
  409632:	f003 0203 	and.w	r2, r3, #3
  409636:	0112      	lsls	r2, r2, #4
  409638:	089b      	lsrs	r3, r3, #2
  40963a:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
  40963e:	f1c3 0133 	rsb	r1, r3, #51	; 0x33
  409642:	3201      	adds	r2, #1
  409644:	f1b9 0f09 	cmp.w	r9, #9
  409648:	b289      	uxth	r1, r1
  40964a:	d85f      	bhi.n	40970c <_Z17menuProcTelemetryh+0xcc8>
  40964c:	f99d 3020 	ldrsb.w	r3, [sp, #32]
  409650:	2001      	movs	r0, #1
  409652:	fa10 f303 	lsls.w	r3, r0, r3
  409656:	f413 7f18 	tst.w	r3, #608	; 0x260
  40965a:	d057      	beq.n	40970c <_Z17menuProcTelemetryh+0xcc8>
  40965c:	2314      	movs	r3, #20
  40965e:	b212      	sxth	r2, r2
  409660:	b21b      	sxth	r3, r3
  409662:	b209      	sxth	r1, r1
  409664:	9807      	ldr	r0, [sp, #28]
  409666:	2602      	movs	r6, #2
  409668:	9600      	str	r6, [sp, #0]
  40966a:	f7fd fc89 	bl	406f80 <_Z11checkIncDechsssh>
  40966e:	f89b 3001 	ldrb.w	r3, [fp, #1]
  409672:	f1c0 0233 	rsb	r2, r0, #51	; 0x33
  409676:	f362 0387 	bfi	r3, r2, #2, #6
  40967a:	f88b 3001 	strb.w	r3, [fp, #1]
  40967e:	f7ff baa3 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  409682:	bf00      	nop
  409684:	0041060d 	.word	0x0041060d
  409688:	0041061a 	.word	0x0041061a
  40968c:	004105f1 	.word	0x004105f1
  409690:	20000108 	.word	0x20000108
                bar.barMin = 0;
                bar.barMax = 51 - (maxTelemValue(barSource) / 5);
              }
              break;
            case 1:
              CHECK_INCDEC_MODELVAR(event, bar.barMin, 0, 50-bar.barMax);
  409694:	f89b 3001 	ldrb.w	r3, [fp, #1]
  409698:	f89a 1005 	ldrb.w	r1, [sl, #5]
  40969c:	f003 0203 	and.w	r2, r3, #3
  4096a0:	0112      	lsls	r2, r2, #4
  4096a2:	089b      	lsrs	r3, r3, #2
  4096a4:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
  4096a8:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
  4096ac:	2200      	movs	r2, #0
  4096ae:	9807      	ldr	r0, [sp, #28]
  4096b0:	f7fd fdda 	bl	407268 <_Z16checkIncDecModelhaaa>
  4096b4:	f89a 2005 	ldrb.w	r2, [sl, #5]
  4096b8:	b2c3      	uxtb	r3, r0
  4096ba:	f003 010f 	and.w	r1, r3, #15
  4096be:	f002 020f 	and.w	r2, r2, #15
  4096c2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  4096c6:	f88a 2005 	strb.w	r2, [sl, #5]
  4096ca:	f89b 2001 	ldrb.w	r2, [fp, #1]
  4096ce:	f3c3 1301 	ubfx	r3, r3, #4, #2
  4096d2:	f022 0203 	bic.w	r2, r2, #3
  4096d6:	4313      	orrs	r3, r2
  4096d8:	f88b 3001 	strb.w	r3, [fp, #1]
  4096dc:	f7ff ba74 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
        FrSkyBarData & bar = g_model.frsky.bars[k-ITEM_TELEMETRY_GAUGES_LINE1];
        uint8_t barSource = bar.source;
        lcd_putsiAtt(4, y, STR_VTELEMCHNS, barSource, (attr && m_posHorz==0) ? blink : 0);
        if (barSource) {
          putsTelemetryChannel(56-3*FW, y, barSource-1, convertTelemValue(barSource, bar.barMin*5), (attr && m_posHorz==1 ? blink : 0) | LEFT);
          putsTelemetryChannel(14*FW-3, y, barSource-1, convertTelemValue(barSource, (51-bar.barMax)*5), (attr && m_posHorz==2 ? blink : 0) | LEFT);
  4096e0:	9e05      	ldr	r6, [sp, #20]
  4096e2:	f066 027f 	orn	r2, r6, #127	; 0x7f
  4096e6:	b2d2      	uxtb	r2, r2
  4096e8:	f7ff bb33 	b.w	408d52 <_Z17menuProcTelemetryh+0x30e>
      {
        FrSkyBarData & bar = g_model.frsky.bars[k-ITEM_TELEMETRY_GAUGES_LINE1];
        uint8_t barSource = bar.source;
        lcd_putsiAtt(4, y, STR_VTELEMCHNS, barSource, (attr && m_posHorz==0) ? blink : 0);
        if (barSource) {
          putsTelemetryChannel(56-3*FW, y, barSource-1, convertTelemValue(barSource, bar.barMin*5), (attr && m_posHorz==1 ? blink : 0) | LEFT);
  4096ec:	9905      	ldr	r1, [sp, #20]
  4096ee:	f061 067f 	orn	r6, r1, #127	; 0x7f
  4096f2:	b2f6      	uxtb	r6, r6
  4096f4:	f7ff bb13 	b.w	408d1e <_Z17menuProcTelemetryh+0x2da>
          uint8_t value = getTelemCustomField(j, c);
          lcd_putsiAtt(c==0?4:TELEM_COL2, y, STR_VTELEMCHNS, value, (attr && m_posHorz==c) ? blink : 0);
          if (attr && m_posHorz==c && (s_editMode>0 || p1valdiff)) {
            CHECK_INCDEC_MODELVAR(event, value, 0, (j==3 && c==0) ? TELEM_STATUS_MAX : TELEM_DISPLAY_MAX);
            if (checkIncDec_Ret) {
              g_model.frskyLines[j] = (c==0 ? ((g_model.frskyLines[j] & 0xf0) + (value & 0x0f)) : (g_model.frskyLines[j] & 0x0f) + ((value & 0x0f) << 4));
  4096f8:	9b08      	ldr	r3, [sp, #32]
  4096fa:	f893 486e 	ldrb.w	r4, [r3, #2158]	; 0x86e
  4096fe:	4b15      	ldr	r3, [pc, #84]	; (409754 <_Z17menuProcTelemetryh+0xd10>)
  409700:	f004 040f 	and.w	r4, r4, #15
  409704:	eb04 1401 	add.w	r4, r4, r1, lsl #4
  409708:	b2e4      	uxtb	r4, r4
  40970a:	e739      	b.n	409580 <_Z17menuProcTelemetryh+0xb3c>
  40970c:	2333      	movs	r3, #51	; 0x33
  40970e:	e7a6      	b.n	40965e <_Z17menuProcTelemetryh+0xc1a>
        lcd_putsiAtt(lcd_lastPos, y, STR_VTELEMUNIT, channel.type, (attr && m_posHorz==1 ? blink : 0));
        if (attr && (s_editMode>0 || p1valdiff)) {
          if (m_posHorz == 0) {
            uint16_t ratio = checkIncDec(event, channel.ratio, 0, 256, EE_MODEL);
            if (checkIncDec_Ret) {
              if (ratio == 127 && channel.multiplier > 0) {
  409710:	f89c 2005 	ldrb.w	r2, [ip, #5]
  409714:	0991      	lsrs	r1, r2, #6
  409716:	f43f ad91 	beq.w	40923c <_Z17menuProcTelemetryh+0x7f8>
                channel.multiplier--; channel.ratio = 255;
  40971a:	1ccb      	adds	r3, r1, #3
  40971c:	f363 1287 	bfi	r2, r3, #6, #2
  409720:	f88c 2005 	strb.w	r2, [ip, #5]
  409724:	4a0c      	ldr	r2, [pc, #48]	; (409758 <_Z17menuProcTelemetryh+0xd14>)
  409726:	23ff      	movs	r3, #255	; 0xff
  409728:	f802 300b 	strb.w	r3, [r2, fp]
  40972c:	f7ff ba4c 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
              }
              else if (ratio == 256) {
                if (channel.multiplier < 3) { channel.multiplier++; channel.ratio = 128; }
  409730:	f89c 3005 	ldrb.w	r3, [ip, #5]
  409734:	099a      	lsrs	r2, r3, #6
  409736:	2a03      	cmp	r2, #3
  409738:	f43f aa46 	beq.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  40973c:	3201      	adds	r2, #1
  40973e:	f362 1387 	bfi	r3, r2, #6, #2
  409742:	4e05      	ldr	r6, [pc, #20]	; (409758 <_Z17menuProcTelemetryh+0xd14>)
  409744:	f88c 3005 	strb.w	r3, [ip, #5]
  409748:	2380      	movs	r3, #128	; 0x80
  40974a:	f806 300b 	strb.w	r3, [r6, fp]
  40974e:	f7ff ba3b 	b.w	408bc8 <_Z17menuProcTelemetryh+0x184>
  409752:	bf00      	nop
  409754:	20000108 	.word	0x20000108
  409758:	20000244 	.word	0x20000244

0040975c <_Z24menuProcFunctionSwitchesh>:
    }
  }
}

void menuProcFunctionSwitches(uint8_t event)
{
  40975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MENU(STR_MENUFUNCSWITCHES, menuTabModel, e_FunctionSwitches, NUM_FSW+1, {0, 2/*repeated*/});
  409760:	4c89      	ldr	r4, [pc, #548]	; (409988 <_Z24menuProcFunctionSwitchesh+0x22c>)
    }
  }
}

void menuProcFunctionSwitches(uint8_t event)
{
  409762:	b089      	sub	sp, #36	; 0x24
  MENU(STR_MENUFUNCSWITCHES, menuTabModel, e_FunctionSwitches, NUM_FSW+1, {0, 2/*repeated*/});
  409764:	2501      	movs	r5, #1
  409766:	9501      	str	r5, [sp, #4]
  409768:	2108      	movs	r1, #8
  40976a:	2520      	movs	r5, #32
  40976c:	f1a4 02c0 	sub.w	r2, r4, #192	; 0xc0
  409770:	230b      	movs	r3, #11
    }
  }
}

void menuProcFunctionSwitches(uint8_t event)
{
  409772:	9006      	str	r0, [sp, #24]
  MENU(STR_MENUFUNCSWITCHES, menuTabModel, e_FunctionSwitches, NUM_FSW+1, {0, 2/*repeated*/});
  409774:	9400      	str	r4, [sp, #0]
  409776:	9502      	str	r5, [sp, #8]
  409778:	f7fe fbce 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  40977c:	b910      	cbnz	r0, 409784 <_Z24menuProcFunctionSwitchesh+0x28>
          }
          break;
      }
    }
  }
}
  40977e:	b009      	add	sp, #36	; 0x24
  409780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
}

void menuProcFunctionSwitches(uint8_t event)
{
  MENU(STR_MENUFUNCSWITCHES, menuTabModel, e_FunctionSwitches, NUM_FSW+1, {0, 2/*repeated*/});
  409784:	2000      	movs	r0, #0
  409786:	1d22      	adds	r2, r4, #4
  409788:	2302      	movs	r3, #2
  40978a:	4601      	mov	r1, r0
  40978c:	f7f9 f894 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;
  409790:	f241 2200 	movw	r2, #4608	; 0x1200
  409794:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409798:	f892 3c34 	ldrb.w	r3, [r2, #3124]	; 0xc34
  40979c:	f04f 0a08 	mov.w	sl, #8
  4097a0:	3b01      	subs	r3, #1
  4097a2:	b2db      	uxtb	r3, r3
  4097a4:	9307      	str	r3, [sp, #28]

  for (uint8_t i=0; i<7; i++) {
  4097a6:	f04f 0800 	mov.w	r8, #0
    y=(i+1)*FH;
    k=i+s_pgOfs;
  4097aa:	f241 2300 	movw	r3, #4608	; 0x1200
  4097ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4097b2:	f893 5e7d 	ldrb.w	r5, [r3, #3709]	; 0xe7d
  4097b6:	4445      	add	r5, r8
  4097b8:	b2ed      	uxtb	r5, r5
    if(k==NUM_CHNOUT) break;
  4097ba:	2d20      	cmp	r5, #32
  4097bc:	d0df      	beq.n	40977e <_Z24menuProcFunctionSwitchesh+0x22>
    FuncSwData *sd = &g_model.funcSw[k];
  4097be:	4a73      	ldr	r2, [pc, #460]	; (40998c <_Z24menuProcFunctionSwitchesh+0x230>)
  4097c0:	eb05 0645 	add.w	r6, r5, r5, lsl #1
  4097c4:	1996      	adds	r6, r2, r6
  4097c6:	9b07      	ldr	r3, [sp, #28]
  4097c8:	f506 66c4 	add.w	r6, r6, #1568	; 0x620
  4097cc:	3605      	adds	r6, #5
  4097ce:	fa4f f983 	sxtb.w	r9, r3
    for (uint8_t j=0; j<3; j++) {
  4097d2:	2400      	movs	r4, #0
  4097d4:	462f      	mov	r7, r5
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  4097d6:	454f      	cmp	r7, r9
  4097d8:	d021      	beq.n	40981e <_Z24menuProcFunctionSwitchesh+0xc2>
  4097da:	2500      	movs	r5, #0
      uint8_t active = (attr && (s_editMode>0 || p1valdiff));
      switch (j) {
  4097dc:	2c01      	cmp	r4, #1
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<3; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  4097de:	f04f 0b00 	mov.w	fp, #0
      uint8_t active = (attr && (s_editMode>0 || p1valdiff));
      switch (j) {
  4097e2:	d032      	beq.n	40984a <_Z24menuProcFunctionSwitchesh+0xee>
  4097e4:	2c02      	cmp	r4, #2
  4097e6:	d057      	beq.n	409898 <_Z24menuProcFunctionSwitchesh+0x13c>
        case 0:
          putsSwitches(3, y, sd->swtch, attr);
  4097e8:	f996 2000 	ldrsb.w	r2, [r6]
  4097ec:	2003      	movs	r0, #3
  4097ee:	4651      	mov	r1, sl
  4097f0:	462b      	mov	r3, r5
  4097f2:	f7f9 fe7f 	bl	4034f4 <_Z12putsSwitcheshhah>
          if (active) {
  4097f6:	f1bb 0f00 	cmp.w	fp, #0
  4097fa:	f040 8084 	bne.w	409906 <_Z24menuProcFunctionSwitchesh+0x1aa>
  for (uint8_t i=0; i<7; i++) {
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<3; j++) {
  4097fe:	3401      	adds	r4, #1
  409800:	b2e4      	uxtb	r4, r4
  409802:	2c03      	cmp	r4, #3
  409804:	d1e7      	bne.n	4097d6 <_Z24menuProcFunctionSwitchesh+0x7a>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  409806:	f108 0801 	add.w	r8, r8, #1
  40980a:	fa5f f888 	uxtb.w	r8, r8
  40980e:	f10a 0a08 	add.w	sl, sl, #8
  409812:	f1b8 0f07 	cmp.w	r8, #7
  409816:	fa5f fa8a 	uxtb.w	sl, sl
  40981a:	d1c6      	bne.n	4097aa <_Z24menuProcFunctionSwitchesh+0x4e>
  40981c:	e7af      	b.n	40977e <_Z24menuProcFunctionSwitchesh+0x22>
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<3; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40981e:	f241 2200 	movw	r2, #4608	; 0x1200
  409822:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409826:	f892 3c35 	ldrb.w	r3, [r2, #3125]	; 0xc35
  40982a:	42a3      	cmp	r3, r4
  40982c:	d1d5      	bne.n	4097da <_Z24menuProcFunctionSwitchesh+0x7e>
  40982e:	f241 2200 	movw	r2, #4608	; 0x1200
  409832:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409836:	f992 3c2c 	ldrsb.w	r3, [r2, #3116]	; 0xc2c
  40983a:	2502      	movs	r5, #2
  40983c:	2b00      	cmp	r3, #0
  40983e:	ddcd      	ble.n	4097dc <_Z24menuProcFunctionSwitchesh+0x80>
  409840:	2503      	movs	r5, #3
      uint8_t active = (attr && (s_editMode>0 || p1valdiff));
      switch (j) {
  409842:	2c01      	cmp	r4, #1
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<3; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  409844:	f04f 0b01 	mov.w	fp, #1
      uint8_t active = (attr && (s_editMode>0 || p1valdiff));
      switch (j) {
  409848:	d1cc      	bne.n	4097e4 <_Z24menuProcFunctionSwitchesh+0x88>
          if (active) {
            CHECK_INCDEC_MODELVAR( event, sd->swtch, SWITCH_OFF-MAX_SWITCH, SWITCH_ON+MAX_SWITCH);
          }
          break;
        case 1:
          if (sd->swtch) {
  40984a:	f996 3000 	ldrsb.w	r3, [r6]
  40984e:	2b00      	cmp	r3, #0
  409850:	d050      	beq.n	4098f4 <_Z24menuProcFunctionSwitchesh+0x198>
            uint8_t func_displayed;
            if (sd->func < 16) {
  409852:	7873      	ldrb	r3, [r6, #1]
  409854:	2b0f      	cmp	r3, #15
  409856:	d963      	bls.n	409920 <_Z24menuProcFunctionSwitchesh+0x1c4>
              func_displayed = 0;
              putsChnRaw(14*FW-2, y, NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+sd->func+1, attr);
            }
            else if (sd->func < 16 + NUM_STICKS + 1) {
  409858:	2b14      	cmp	r3, #20
  40985a:	d85e      	bhi.n	40991a <_Z24menuProcFunctionSwitchesh+0x1be>
              func_displayed = 1;
              if (sd->func != FUNC_TRAINER)
  40985c:	2b10      	cmp	r3, #16
            if (sd->func < 16) {
              func_displayed = 0;
              putsChnRaw(14*FW-2, y, NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+sd->func+1, attr);
            }
            else if (sd->func < 16 + NUM_STICKS + 1) {
              func_displayed = 1;
  40985e:	bf08      	it	eq
  409860:	4623      	moveq	r3, r4
              if (sd->func != FUNC_TRAINER)
  409862:	d007      	beq.n	409874 <_Z24menuProcFunctionSwitchesh+0x118>
                putsChnRaw(13*FW-2, y, sd->func-FUNC_TRAINER, attr);
  409864:	3b10      	subs	r3, #16
  409866:	b2da      	uxtb	r2, r3
  409868:	204c      	movs	r0, #76	; 0x4c
  40986a:	462b      	mov	r3, r5
  40986c:	4651      	mov	r1, sl
  40986e:	f7f9 fdc9 	bl	403404 <_Z10putsChnRawhhhh>
            if (sd->func < 16) {
              func_displayed = 0;
              putsChnRaw(14*FW-2, y, NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+sd->func+1, attr);
            }
            else if (sd->func < 16 + NUM_STICKS + 1) {
              func_displayed = 1;
  409872:	4623      	mov	r3, r4
              if (sd->func != FUNC_TRAINER)
                putsChnRaw(13*FW-2, y, sd->func-FUNC_TRAINER, attr);
            }
            else
              func_displayed = 2 + sd->func - 16 - NUM_STICKS - 1;
            lcd_putsiAtt(5*FW-2, y, STR_VFSWFUNC, func_displayed, attr);
  409874:	201c      	movs	r0, #28
  409876:	4651      	mov	r1, sl
  409878:	4a45      	ldr	r2, [pc, #276]	; (409990 <_Z24menuProcFunctionSwitchesh+0x234>)
  40987a:	9500      	str	r5, [sp, #0]
  40987c:	f7f8 fff8 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
            if (active) {
  409880:	f1bb 0f00 	cmp.w	fp, #0
  409884:	d0bb      	beq.n	4097fe <_Z24menuProcFunctionSwitchesh+0xa2>
              CHECK_INCDEC_MODELVAR( event, sd->func, 0, FUNC_MAX-1);
  409886:	f996 1001 	ldrsb.w	r1, [r6, #1]
  40988a:	9806      	ldr	r0, [sp, #24]
  40988c:	2200      	movs	r2, #0
  40988e:	2319      	movs	r3, #25
  409890:	f7fd fcea 	bl	407268 <_Z16checkIncDecModelhaaa>
  409894:	7070      	strb	r0, [r6, #1]
  409896:	e7b2      	b.n	4097fe <_Z24menuProcFunctionSwitchesh+0xa2>
          else if (attr) {
            m_posHorz = 0;
          }
          break;
        case 2:
          if (sd->swtch) {
  409898:	f996 3000 	ldrsb.w	r3, [r6]
  40989c:	b353      	cbz	r3, 4098f4 <_Z24menuProcFunctionSwitchesh+0x198>
            int16_t val_displayed = sd->param;
            int16_t val_min = 0;
            int16_t val_max = 255;
            if (sd->func == FUNC_PLAY_SOUND) {
  40989e:	7873      	ldrb	r3, [r6, #1]
            m_posHorz = 0;
          }
          break;
        case 2:
          if (sd->swtch) {
            int16_t val_displayed = sd->param;
  4098a0:	f896 c002 	ldrb.w	ip, [r6, #2]
            int16_t val_min = 0;
            int16_t val_max = 255;
            if (sd->func == FUNC_PLAY_SOUND) {
  4098a4:	2b16      	cmp	r3, #22
  4098a6:	d044      	beq.n	409932 <_Z24menuProcFunctionSwitchesh+0x1d6>
#else
              break;
#endif
            }
#if defined(HAPTIC)
            else if (sd->func == FUNC_HAPTIC) {
  4098a8:	2b17      	cmp	r3, #23
  4098aa:	d050      	beq.n	40994e <_Z24menuProcFunctionSwitchesh+0x1f2>
#if defined(SOMO)
            else if (sd->func == FUNC_PLAY_SOMO) {
              lcd_outdezAtt(21*FW, y, val_displayed, attr);
            }
#endif
            else if (sd->func == FUNC_RESET) {
  4098ac:	2b18      	cmp	r3, #24
  4098ae:	d05c      	beq.n	40996a <_Z24menuProcFunctionSwitchesh+0x20e>
              val_max = 3;
              lcd_putsiAtt(15*FW, y, STR_VFSWRESET, sd->param, attr);
            }
            else if (sd->func <= FUNC_SAFETY_CH16) {
  4098b0:	2b0f      	cmp	r3, #15
  4098b2:	d8a8      	bhi.n	409806 <_Z24menuProcFunctionSwitchesh+0xaa>
              val_displayed = (int16_t)(int8_t)sd->param;
  4098b4:	fa4f fc8c 	sxtb.w	ip, ip
              val_min = -125;
              val_max = 125;
              lcd_outdezAtt(21*FW, y, val_displayed, attr);
  4098b8:	fa0f f28c 	sxth.w	r2, ip
  4098bc:	462b      	mov	r3, r5
            else if (sd->func == FUNC_RESET) {
              val_max = 3;
              lcd_putsiAtt(15*FW, y, STR_VFSWRESET, sd->param, attr);
            }
            else if (sd->func <= FUNC_SAFETY_CH16) {
              val_displayed = (int16_t)(int8_t)sd->param;
  4098be:	fa1f fc8c 	uxth.w	ip, ip
              val_min = -125;
              val_max = 125;
              lcd_outdezAtt(21*FW, y, val_displayed, attr);
  4098c2:	207e      	movs	r0, #126	; 0x7e
  4098c4:	4651      	mov	r1, sl
  4098c6:	f8cd c014 	str.w	ip, [sp, #20]
  4098ca:	f7f9 fab5 	bl	402e38 <_Z13lcd_outdezAtthhsh>
              val_max = 3;
              lcd_putsiAtt(15*FW, y, STR_VFSWRESET, sd->param, attr);
            }
            else if (sd->func <= FUNC_SAFETY_CH16) {
              val_displayed = (int16_t)(int8_t)sd->param;
              val_min = -125;
  4098ce:	f8dd c014 	ldr.w	ip, [sp, #20]
              val_max = 125;
  4098d2:	237d      	movs	r3, #125	; 0x7d
              val_max = 3;
              lcd_putsiAtt(15*FW, y, STR_VFSWRESET, sd->param, attr);
            }
            else if (sd->func <= FUNC_SAFETY_CH16) {
              val_displayed = (int16_t)(int8_t)sd->param;
              val_min = -125;
  4098d4:	f64f 7283 	movw	r2, #65411	; 0xff83
            }
            else {
              break;
            }

            if (active) {
  4098d8:	f1bb 0f00 	cmp.w	fp, #0
  4098dc:	d08f      	beq.n	4097fe <_Z24menuProcFunctionSwitchesh+0xa2>
              sd->param = checkIncDec(event, val_displayed, val_min, val_max, EE_MODEL);
  4098de:	b212      	sxth	r2, r2
  4098e0:	b21b      	sxth	r3, r3
  4098e2:	fa0f f18c 	sxth.w	r1, ip
  4098e6:	9806      	ldr	r0, [sp, #24]
  4098e8:	2502      	movs	r5, #2
  4098ea:	9500      	str	r5, [sp, #0]
  4098ec:	f7fd fb48 	bl	406f80 <_Z11checkIncDechsssh>
  4098f0:	70b0      	strb	r0, [r6, #2]
  4098f2:	e784      	b.n	4097fe <_Z24menuProcFunctionSwitchesh+0xa2>
            }
          }
          else if (attr) {
  4098f4:	2d00      	cmp	r5, #0
  4098f6:	d082      	beq.n	4097fe <_Z24menuProcFunctionSwitchesh+0xa2>
            m_posHorz = 0;
  4098f8:	f241 2200 	movw	r2, #4608	; 0x1200
  4098fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409900:	f882 3c35 	strb.w	r3, [r2, #3125]	; 0xc35
  409904:	e77b      	b.n	4097fe <_Z24menuProcFunctionSwitchesh+0xa2>
      uint8_t active = (attr && (s_editMode>0 || p1valdiff));
      switch (j) {
        case 0:
          putsSwitches(3, y, sd->swtch, attr);
          if (active) {
            CHECK_INCDEC_MODELVAR( event, sd->swtch, SWITCH_OFF-MAX_SWITCH, SWITCH_ON+MAX_SWITCH);
  409906:	f996 1000 	ldrsb.w	r1, [r6]
  40990a:	9806      	ldr	r0, [sp, #24]
  40990c:	f06f 0252 	mvn.w	r2, #82	; 0x52
  409910:	2353      	movs	r3, #83	; 0x53
  409912:	f7fd fca9 	bl	407268 <_Z16checkIncDecModelhaaa>
  409916:	7030      	strb	r0, [r6, #0]
  409918:	e771      	b.n	4097fe <_Z24menuProcFunctionSwitchesh+0xa2>
              func_displayed = 1;
              if (sd->func != FUNC_TRAINER)
                putsChnRaw(13*FW-2, y, sd->func-FUNC_TRAINER, attr);
            }
            else
              func_displayed = 2 + sd->func - 16 - NUM_STICKS - 1;
  40991a:	3b13      	subs	r3, #19
  40991c:	b2db      	uxtb	r3, r3
  40991e:	e7a9      	b.n	409874 <_Z24menuProcFunctionSwitchesh+0x118>
        case 1:
          if (sd->swtch) {
            uint8_t func_displayed;
            if (sd->func < 16) {
              func_displayed = 0;
              putsChnRaw(14*FW-2, y, NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+sd->func+1, attr);
  409920:	3315      	adds	r3, #21
  409922:	b2da      	uxtb	r2, r3
  409924:	2052      	movs	r0, #82	; 0x52
  409926:	462b      	mov	r3, r5
  409928:	4651      	mov	r1, sl
  40992a:	f7f9 fd6b 	bl	403404 <_Z10putsChnRawhhhh>
          break;
        case 1:
          if (sd->swtch) {
            uint8_t func_displayed;
            if (sd->func < 16) {
              func_displayed = 0;
  40992e:	2300      	movs	r3, #0
  409930:	e7a0      	b.n	409874 <_Z24menuProcFunctionSwitchesh+0x118>
            int16_t val_min = 0;
            int16_t val_max = 255;
            if (sd->func == FUNC_PLAY_SOUND) {
#if defined(AUDIO)
              val_max = AU_FRSKY_LAST-AU_FRSKY_FIRST-1;
              lcd_putsiAtt(15*FW, y, STR_FUNCSOUNDS, val_displayed, attr);
  409932:	4663      	mov	r3, ip
  409934:	4a17      	ldr	r2, [pc, #92]	; (409994 <_Z24menuProcFunctionSwitchesh+0x238>)
  409936:	205a      	movs	r0, #90	; 0x5a
  409938:	4651      	mov	r1, sl
  40993a:	f8cd c014 	str.w	ip, [sp, #20]
  40993e:	9500      	str	r5, [sp, #0]
  409940:	f7f8 ff96 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
            int16_t val_displayed = sd->param;
            int16_t val_min = 0;
            int16_t val_max = 255;
            if (sd->func == FUNC_PLAY_SOUND) {
#if defined(AUDIO)
              val_max = AU_FRSKY_LAST-AU_FRSKY_FIRST-1;
  409944:	230c      	movs	r3, #12
          }
          break;
        case 2:
          if (sd->swtch) {
            int16_t val_displayed = sd->param;
            int16_t val_min = 0;
  409946:	2200      	movs	r2, #0
  409948:	f8dd c014 	ldr.w	ip, [sp, #20]
  40994c:	e7c4      	b.n	4098d8 <_Z24menuProcFunctionSwitchesh+0x17c>
#endif
            }
#if defined(HAPTIC)
            else if (sd->func == FUNC_HAPTIC) {
              val_max = 3;
              lcd_outdezAtt(21*FW, y, val_displayed, attr);
  40994e:	fa0f f28c 	sxth.w	r2, ip
  409952:	462b      	mov	r3, r5
  409954:	207e      	movs	r0, #126	; 0x7e
  409956:	4651      	mov	r1, sl
  409958:	f8cd c014 	str.w	ip, [sp, #20]
  40995c:	f7f9 fa6c 	bl	402e38 <_Z13lcd_outdezAtthhsh>
              break;
#endif
            }
#if defined(HAPTIC)
            else if (sd->func == FUNC_HAPTIC) {
              val_max = 3;
  409960:	2303      	movs	r3, #3
          }
          break;
        case 2:
          if (sd->swtch) {
            int16_t val_displayed = sd->param;
            int16_t val_min = 0;
  409962:	2200      	movs	r2, #0
  409964:	f8dd c014 	ldr.w	ip, [sp, #20]
  409968:	e7b6      	b.n	4098d8 <_Z24menuProcFunctionSwitchesh+0x17c>
              lcd_outdezAtt(21*FW, y, val_displayed, attr);
            }
#endif
            else if (sd->func == FUNC_RESET) {
              val_max = 3;
              lcd_putsiAtt(15*FW, y, STR_VFSWRESET, sd->param, attr);
  40996a:	4663      	mov	r3, ip
  40996c:	4a0a      	ldr	r2, [pc, #40]	; (409998 <_Z24menuProcFunctionSwitchesh+0x23c>)
  40996e:	205a      	movs	r0, #90	; 0x5a
  409970:	4651      	mov	r1, sl
  409972:	f8cd c014 	str.w	ip, [sp, #20]
  409976:	9500      	str	r5, [sp, #0]
  409978:	f7f8 ff7a 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
            else if (sd->func == FUNC_PLAY_SOMO) {
              lcd_outdezAtt(21*FW, y, val_displayed, attr);
            }
#endif
            else if (sd->func == FUNC_RESET) {
              val_max = 3;
  40997c:	2303      	movs	r3, #3
          }
          break;
        case 2:
          if (sd->swtch) {
            int16_t val_displayed = sd->param;
            int16_t val_min = 0;
  40997e:	2200      	movs	r2, #0
  409980:	f8dd c014 	ldr.w	ip, [sp, #20]
  409984:	e7a8      	b.n	4098d8 <_Z24menuProcFunctionSwitchesh+0x17c>
  409986:	bf00      	nop
  409988:	00410bd4 	.word	0x00410bd4
  40998c:	20000244 	.word	0x20000244
  409990:	0041049a 	.word	0x0041049a
  409994:	0041050f 	.word	0x0041050f
  409998:	004104f6 	.word	0x004104f6

0040999c <_Z22menuProcCustomSwitchesh>:

  if(!m) s_pgOfs++;
}

void menuProcCustomSwitches(uint8_t event)
{
  40999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MENU(STR_MENUCUSTOMSWITCHES, menuTabModel, e_CustomSwitches, NUM_CSW+1, {0, 2/*repeated...*/});
  4099a0:	4cb6      	ldr	r4, [pc, #728]	; (409c7c <_Z22menuProcCustomSwitchesh+0x2e0>)

  if(!m) s_pgOfs++;
}

void menuProcCustomSwitches(uint8_t event)
{
  4099a2:	b087      	sub	sp, #28
  MENU(STR_MENUCUSTOMSWITCHES, menuTabModel, e_CustomSwitches, NUM_CSW+1, {0, 2/*repeated...*/});
  4099a4:	2501      	movs	r5, #1
  4099a6:	9501      	str	r5, [sp, #4]
  4099a8:	2107      	movs	r1, #7
  4099aa:	2520      	movs	r5, #32
  4099ac:	f1a4 02d4 	sub.w	r2, r4, #212	; 0xd4
  4099b0:	230b      	movs	r3, #11

  if(!m) s_pgOfs++;
}

void menuProcCustomSwitches(uint8_t event)
{
  4099b2:	9004      	str	r0, [sp, #16]
  MENU(STR_MENUCUSTOMSWITCHES, menuTabModel, e_CustomSwitches, NUM_CSW+1, {0, 2/*repeated...*/});
  4099b4:	9400      	str	r4, [sp, #0]
  4099b6:	9502      	str	r5, [sp, #8]
  4099b8:	f7fe faae 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  4099bc:	b910      	cbnz	r0, 4099c4 <_Z22menuProcCustomSwitchesh+0x28>
          CHECK_INCDEC_MODELVAR(event, cs.v2, v2_min, v2_max);
          break;
      }
    }
  }
}
  4099be:	b007      	add	sp, #28
  4099c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(!m) s_pgOfs++;
}

void menuProcCustomSwitches(uint8_t event)
{
  MENU(STR_MENUCUSTOMSWITCHES, menuTabModel, e_CustomSwitches, NUM_CSW+1, {0, 2/*repeated...*/});
  4099c4:	2000      	movs	r0, #0

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;
  4099c6:	4eae      	ldr	r6, [pc, #696]	; (409c80 <_Z22menuProcCustomSwitchesh+0x2e4>)
  if(!m) s_pgOfs++;
}

void menuProcCustomSwitches(uint8_t event)
{
  MENU(STR_MENUCUSTOMSWITCHES, menuTabModel, e_CustomSwitches, NUM_CSW+1, {0, 2/*repeated...*/});
  4099c8:	1d22      	adds	r2, r4, #4
  4099ca:	2302      	movs	r3, #2
  4099cc:	4601      	mov	r1, r0
  4099ce:	f7f8 ff73 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;
  4099d2:	f896 3c34 	ldrb.w	r3, [r6, #3124]	; 0xc34

  for(uint8_t i=0; i<7; i++) {
  4099d6:	f04f 0800 	mov.w	r8, #0
{
  MENU(STR_MENUCUSTOMSWITCHES, menuTabModel, e_CustomSwitches, NUM_CSW+1, {0, 2/*repeated...*/});

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;
  4099da:	3b01      	subs	r3, #1
  4099dc:	b2db      	uxtb	r3, r3
  4099de:	9305      	str	r3, [sp, #20]
  4099e0:	2408      	movs	r4, #8

  for(uint8_t i=0; i<7; i++) {
    y=(i+1)*FH;
    k=i+s_pgOfs;
  4099e2:	f896 7e7d 	ldrb.w	r7, [r6, #3709]	; 0xe7d
  4099e6:	4447      	add	r7, r8
  4099e8:	b2ff      	uxtb	r7, r7
    if(k==NUM_CSW) break;
  4099ea:	2f20      	cmp	r7, #32
  4099ec:	d0e7      	beq.n	4099be <_Z22menuProcCustomSwitchesh+0x22>
    uint8_t attr = (sub==k ? ((s_editMode>0) ? BLINK|INVERS : INVERS)  : 0);
  4099ee:	f8dd a014 	ldr.w	sl, [sp, #20]
  4099f2:	fa4f f38a 	sxtb.w	r3, sl
  4099f6:	42bb      	cmp	r3, r7
  4099f8:	bf1c      	itt	ne
  4099fa:	f04f 0a00 	movne.w	sl, #0
  4099fe:	4655      	movne	r5, sl
  409a00:	f000 80d4 	beq.w	409bac <_Z22menuProcCustomSwitchesh+0x210>
    CustomSwData &cs = g_model.customSw[k];
  409a04:	4b9f      	ldr	r3, [pc, #636]	; (409c84 <_Z22menuProcCustomSwitchesh+0x2e8>)
  409a06:	eb07 0947 	add.w	r9, r7, r7, lsl #1

    //write SW names here
    lcd_putsLeft(y, STR_SW);
  409a0a:	4620      	mov	r0, r4
  409a0c:	499e      	ldr	r1, [pc, #632]	; (409c88 <_Z22menuProcCustomSwitchesh+0x2ec>)
  for(uint8_t i=0; i<7; i++) {
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CSW) break;
    uint8_t attr = (sub==k ? ((s_editMode>0) ? BLINK|INVERS : INVERS)  : 0);
    CustomSwData &cs = g_model.customSw[k];
  409a0e:	f509 69b8 	add.w	r9, r9, #1472	; 0x5c0
  409a12:	4499      	add	r9, r3

    //write SW names here
    lcd_putsLeft(y, STR_SW);
  409a14:	f7f8 ff5a 	bl	4028cc <_Z12lcd_putsLefthPKc>
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
  409a18:	2f08      	cmp	r7, #8
  409a1a:	bf94      	ite	ls
  409a1c:	2231      	movls	r2, #49	; 0x31
  409a1e:	2238      	movhi	r2, #56	; 0x38
  409a20:	19d7      	adds	r7, r2, r7
  409a22:	b2fa      	uxtb	r2, r7
  409a24:	200c      	movs	r0, #12
  409a26:	4621      	mov	r1, r4
  409a28:	f7f8 fedc 	bl	4027e4 <_Z8lcd_putchhh>
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);
  409a2c:	f896 ec35 	ldrb.w	lr, [r6, #3125]	; 0xc35
  for(uint8_t i=0; i<7; i++) {
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CSW) break;
    uint8_t attr = (sub==k ? ((s_editMode>0) ? BLINK|INVERS : INVERS)  : 0);
    CustomSwData &cs = g_model.customSw[k];
  409a30:	f109 0705 	add.w	r7, r9, #5

    //write SW names here
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);
  409a34:	78bb      	ldrb	r3, [r7, #2]
  409a36:	f1be 0f00 	cmp.w	lr, #0
  409a3a:	bf0c      	ite	eq
  409a3c:	46ae      	moveq	lr, r5
  409a3e:	f04f 0e00 	movne.w	lr, #0
  409a42:	2017      	movs	r0, #23
  409a44:	4621      	mov	r1, r4
  409a46:	4a91      	ldr	r2, [pc, #580]	; (409c8c <_Z22menuProcCustomSwitchesh+0x2f0>)
  409a48:	f8cd e000 	str.w	lr, [sp]
  409a4c:	f7f8 ff10 	bl	402870 <_Z12lcd_putsiAtthhPKchh>

    uint8_t cstate = CS_STATE(cs.func);
  409a50:	78bb      	ldrb	r3, [r7, #2]
  409a52:	2b04      	cmp	r3, #4
  409a54:	d950      	bls.n	409af8 <_Z22menuProcCustomSwitchesh+0x15c>
  409a56:	2b07      	cmp	r3, #7
  409a58:	f200 80c8 	bhi.w	409bec <_Z22menuProcCustomSwitchesh+0x250>
          v2_min = -125; v2_max = 125;
        }
    }
    else if (cstate == CS_VBOOL)
    {
        putsSwitches(12*FW-2, y, cs.v1, m_posHorz==1 ? attr : 0);
  409a5c:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  409a60:	f999 2005 	ldrsb.w	r2, [r9, #5]
  409a64:	2b01      	cmp	r3, #1
  409a66:	bf0c      	ite	eq
  409a68:	462b      	moveq	r3, r5
  409a6a:	2300      	movne	r3, #0
  409a6c:	2046      	movs	r0, #70	; 0x46
  409a6e:	4621      	mov	r1, r4
  409a70:	f7f9 fd40 	bl	4034f4 <_Z12putsSwitcheshhah>
        putsSwitches(17*FW, y, cs.v2, m_posHorz==2 ? attr : 0);
  409a74:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  409a78:	f997 2001 	ldrsb.w	r2, [r7, #1]
  409a7c:	2b02      	cmp	r3, #2
  409a7e:	bf18      	it	ne
  409a80:	2500      	movne	r5, #0
  409a82:	462b      	mov	r3, r5
  409a84:	2066      	movs	r0, #102	; 0x66
  409a86:	4621      	mov	r1, r4
  409a88:	f7f9 fd34 	bl	4034f4 <_Z12putsSwitcheshhah>
        v1_min = SWITCH_OFF; v1_max = SWITCH_ON;
        v2_min = SWITCH_OFF; v2_max = SWITCH_ON;
  409a8c:	232a      	movs	r3, #42	; 0x2a
  409a8e:	22d6      	movs	r2, #214	; 0xd6
    //write SW names here
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
  409a90:	2501      	movs	r5, #1
    }
    else if (cstate == CS_VBOOL)
    {
        putsSwitches(12*FW-2, y, cs.v1, m_posHorz==1 ? attr : 0);
        putsSwitches(17*FW, y, cs.v2, m_posHorz==2 ? attr : 0);
        v1_min = SWITCH_OFF; v1_max = SWITCH_ON;
  409a92:	469c      	mov	ip, r3
  409a94:	4610      	mov	r0, r2
    {
        putsChnRaw(12*FW-2, y, cs.v1, m_posHorz==1 ? attr : 0);
        putsChnRaw(17*FW, y, cs.v2, m_posHorz==2 ? attr : 0);
    }

    if ((s_editMode>0 || p1valdiff) && attr) {
  409a96:	f996 1c2c 	ldrsb.w	r1, [r6, #3116]	; 0xc2c
  409a9a:	2900      	cmp	r1, #0
  409a9c:	bfd4      	ite	le
  409a9e:	2100      	movle	r1, #0
  409aa0:	f00a 0101 	andgt.w	r1, sl, #1
  409aa4:	b1e9      	cbz	r1, 409ae2 <_Z22menuProcCustomSwitchesh+0x146>
      switch (m_posHorz) {
  409aa6:	f241 2a00 	movw	sl, #4608	; 0x1200
  409aaa:	f2c2 0a00 	movt	sl, #8192	; 0x2000
  409aae:	f89a 1c35 	ldrb.w	r1, [sl, #3125]	; 0xc35
  409ab2:	2901      	cmp	r1, #1
  409ab4:	f000 80cd 	beq.w	409c52 <_Z22menuProcCustomSwitchesh+0x2b6>
  409ab8:	f080 80b5 	bcs.w	409c26 <_Z22menuProcCustomSwitchesh+0x28a>
        case 0:
          CHECK_INCDEC_MODELVAR(event, cs.func, 0,CS_MAXF);
  409abc:	2200      	movs	r2, #0
  409abe:	230d      	movs	r3, #13
  409ac0:	f997 1002 	ldrsb.w	r1, [r7, #2]
  409ac4:	9804      	ldr	r0, [sp, #16]
  409ac6:	f7fd fbcf 	bl	407268 <_Z16checkIncDecModelhaaa>
  409aca:	b2c0      	uxtb	r0, r0
          if (cstate != CS_STATE(cs.func)) {
  409acc:	2804      	cmp	r0, #4
    }

    if ((s_editMode>0 || p1valdiff) && attr) {
      switch (m_posHorz) {
        case 0:
          CHECK_INCDEC_MODELVAR(event, cs.func, 0,CS_MAXF);
  409ace:	70b8      	strb	r0, [r7, #2]
          if (cstate != CS_STATE(cs.func)) {
  409ad0:	f200 80de 	bhi.w	409c90 <_Z22menuProcCustomSwitchesh+0x2f4>
  409ad4:	2000      	movs	r0, #0
  409ad6:	4285      	cmp	r5, r0
  409ad8:	d003      	beq.n	409ae2 <_Z22menuProcCustomSwitchesh+0x146>
            cs.v1 = 0;
  409ada:	2200      	movs	r2, #0
  409adc:	f889 2005 	strb.w	r2, [r9, #5]
            cs.v2 = 0;
  409ae0:	707a      	strb	r2, [r7, #1]

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++) {
  409ae2:	f108 0801 	add.w	r8, r8, #1
  409ae6:	fa5f f888 	uxtb.w	r8, r8
  409aea:	3408      	adds	r4, #8
  409aec:	f1b8 0f07 	cmp.w	r8, #7
  409af0:	b2e4      	uxtb	r4, r4
  409af2:	f47f af76 	bne.w	4099e2 <_Z22menuProcCustomSwitchesh+0x46>
  409af6:	e762      	b.n	4099be <_Z22menuProcCustomSwitchesh+0x22>
    uint8_t cstate = CS_STATE(cs.func);
    int8_t v1_min=0, v1_max=NUM_XCHNCSW, v2_min=0, v2_max=NUM_XCHNCSW;

    if (cstate == CS_VOFS)
    {
        putsChnRaw(12*FW-2, y, cs.v1, (m_posHorz==1 ? attr : 0));
  409af8:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  409afc:	2046      	movs	r0, #70	; 0x46
  409afe:	2b01      	cmp	r3, #1
  409b00:	bf0c      	ite	eq
  409b02:	462b      	moveq	r3, r5
  409b04:	2300      	movne	r3, #0
  409b06:	f899 2005 	ldrb.w	r2, [r9, #5]
  409b0a:	4621      	mov	r1, r4
  409b0c:	f7f9 fc7a 	bl	403404 <_Z10putsChnRawhhhh>

#if defined(FRSKY)
        if (cs.v1 > NUM_XCHNCSW-NUM_TELEMETRY) {
  409b10:	f899 b005 	ldrb.w	fp, [r9, #5]
  409b14:	fa4f f38b 	sxtb.w	r3, fp
  409b18:	2b34      	cmp	r3, #52	; 0x34
  409b1a:	dd54      	ble.n	409bc6 <_Z22menuProcCustomSwitchesh+0x22a>
          putsTelemetryChannel(20*FW, y, cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY+1), convertTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY), 128+cs.v2), m_posHorz==2 ? attr : 0);
  409b1c:	7879      	ldrb	r1, [r7, #1]
  409b1e:	fa5f fb8b 	uxtb.w	fp, fp
  409b22:	f1ab 0034 	sub.w	r0, fp, #52	; 0x34
  409b26:	f081 0180 	eor.w	r1, r1, #128	; 0x80
  409b2a:	b2c0      	uxtb	r0, r0
  409b2c:	f7fa ff64 	bl	4049f8 <_Z17convertTelemValuehh>
  409b30:	f1ab 0b35 	sub.w	fp, fp, #53	; 0x35
  409b34:	f896 2c35 	ldrb.w	r2, [r6, #3125]	; 0xc35
  409b38:	fa5f fb8b 	uxtb.w	fp, fp
  409b3c:	4603      	mov	r3, r0
  409b3e:	2a02      	cmp	r2, #2
  409b40:	bf18      	it	ne
  409b42:	2500      	movne	r5, #0
  409b44:	2078      	movs	r0, #120	; 0x78
  409b46:	465a      	mov	r2, fp
  409b48:	4621      	mov	r1, r4
  409b4a:	9500      	str	r5, [sp, #0]
  409b4c:	f7fb fb30 	bl	4051b0 <_Z20putsTelemetryChannelhhhsh>
          v2_min = -128; v2_max = maxTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY)) - 128;
  409b50:	f899 3005 	ldrb.w	r3, [r9, #5]
  409b54:	3b34      	subs	r3, #52	; 0x34
  409b56:	b2da      	uxtb	r2, r3
  409b58:	2a09      	cmp	r2, #9
  409b5a:	d820      	bhi.n	409b9e <_Z22menuProcCustomSwitchesh+0x202>
  409b5c:	2201      	movs	r2, #1
  409b5e:	b25b      	sxtb	r3, r3
  409b60:	fa12 f303 	lsls.w	r3, r2, r3
  409b64:	f413 7f18 	tst.w	r3, #608	; 0x260
  409b68:	d019      	beq.n	409b9e <_Z22menuProcCustomSwitchesh+0x202>
          if (cs.v2 > v2_max) {
  409b6a:	f997 3001 	ldrsb.w	r3, [r7, #1]
  409b6e:	331b      	adds	r3, #27
  409b70:	f2c0 8093 	blt.w	409c9a <_Z22menuProcCustomSwitchesh+0x2fe>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  409b74:	4b43      	ldr	r3, [pc, #268]	; (409c84 <_Z22menuProcCustomSwitchesh+0x2e8>)
    //write SW names here
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
  409b76:	2500      	movs	r5, #0
  409b78:	f893 086c 	ldrb.w	r0, [r3, #2156]	; 0x86c
  s_eeDirtyTime10ms = get_tmr10ms() ;
  409b7c:	f8b3 186e 	ldrh.w	r1, [r3, #2158]	; 0x86e
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  409b80:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
  409b84:	f040 0002 	orr.w	r0, r0, #2
#if defined(FRSKY)
        if (cs.v1 > NUM_XCHNCSW-NUM_TELEMETRY) {
          putsTelemetryChannel(20*FW, y, cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY+1), convertTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY), 128+cs.v2), m_posHorz==2 ? attr : 0);
          v2_min = -128; v2_max = maxTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY)) - 128;
          if (cs.v2 > v2_max) {
            cs.v2 = v2_max;
  409b88:	23e4      	movs	r3, #228	; 0xe4
  409b8a:	f882 09a8 	strb.w	r0, [r2, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  409b8e:	f8a2 19ac 	strh.w	r1, [r2, #2476]	; 0x9ac
  409b92:	707b      	strb	r3, [r7, #1]
        putsChnRaw(12*FW-2, y, cs.v1, (m_posHorz==1 ? attr : 0));

#if defined(FRSKY)
        if (cs.v1 > NUM_XCHNCSW-NUM_TELEMETRY) {
          putsTelemetryChannel(20*FW, y, cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY+1), convertTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY), 128+cs.v2), m_posHorz==2 ? attr : 0);
          v2_min = -128; v2_max = maxTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY)) - 128;
  409b94:	2280      	movs	r2, #128	; 0x80
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    int8_t v1_min=0, v1_max=NUM_XCHNCSW, v2_min=0, v2_max=NUM_XCHNCSW;
  409b96:	f04f 0c43 	mov.w	ip, #67	; 0x43
  409b9a:	4628      	mov	r0, r5
  409b9c:	e77b      	b.n	409a96 <_Z22menuProcCustomSwitchesh+0xfa>
    //write SW names here
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
  409b9e:	2500      	movs	r5, #0
        putsChnRaw(12*FW-2, y, cs.v1, (m_posHorz==1 ? attr : 0));

#if defined(FRSKY)
        if (cs.v1 > NUM_XCHNCSW-NUM_TELEMETRY) {
          putsTelemetryChannel(20*FW, y, cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY+1), convertTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY), 128+cs.v2), m_posHorz==2 ? attr : 0);
          v2_min = -128; v2_max = maxTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY)) - 128;
  409ba0:	237f      	movs	r3, #127	; 0x7f
  409ba2:	2280      	movs	r2, #128	; 0x80
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    int8_t v1_min=0, v1_max=NUM_XCHNCSW, v2_min=0, v2_max=NUM_XCHNCSW;
  409ba4:	f04f 0c43 	mov.w	ip, #67	; 0x43
  409ba8:	4628      	mov	r0, r5
  409baa:	e774      	b.n	409a96 <_Z22menuProcCustomSwitchesh+0xfa>

  for(uint8_t i=0; i<7; i++) {
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CSW) break;
    uint8_t attr = (sub==k ? ((s_editMode>0) ? BLINK|INVERS : INVERS)  : 0);
  409bac:	f241 2200 	movw	r2, #4608	; 0x1200
  409bb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409bb4:	f992 5c2c 	ldrsb.w	r5, [r2, #3116]	; 0xc2c
  409bb8:	f04f 0a01 	mov.w	sl, #1
  409bbc:	2d00      	cmp	r5, #0
  409bbe:	bfd4      	ite	le
  409bc0:	2502      	movle	r5, #2
  409bc2:	2503      	movgt	r5, #3
  409bc4:	e71e      	b.n	409a04 <_Z22menuProcCustomSwitchesh+0x68>
          }
        }
        else
#endif
        {
          lcd_outdezAtt(20*FW, y, cs.v2, m_posHorz==2 ? attr : 0);
  409bc6:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  409bca:	f997 2001 	ldrsb.w	r2, [r7, #1]
  409bce:	2b02      	cmp	r3, #2
  409bd0:	bf18      	it	ne
  409bd2:	2500      	movne	r5, #0
  409bd4:	462b      	mov	r3, r5
  409bd6:	2078      	movs	r0, #120	; 0x78
  409bd8:	4621      	mov	r1, r4
    //write SW names here
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
  409bda:	2500      	movs	r5, #0
          }
        }
        else
#endif
        {
          lcd_outdezAtt(20*FW, y, cs.v2, m_posHorz==2 ? attr : 0);
  409bdc:	f7f9 f92c 	bl	402e38 <_Z13lcd_outdezAtthhsh>
          v2_min = -125; v2_max = 125;
  409be0:	237d      	movs	r3, #125	; 0x7d
  409be2:	2283      	movs	r2, #131	; 0x83
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    int8_t v1_min=0, v1_max=NUM_XCHNCSW, v2_min=0, v2_max=NUM_XCHNCSW;
  409be4:	f04f 0c43 	mov.w	ip, #67	; 0x43
  409be8:	4628      	mov	r0, r5
  409bea:	e754      	b.n	409a96 <_Z22menuProcCustomSwitchesh+0xfa>
        v1_min = SWITCH_OFF; v1_max = SWITCH_ON;
        v2_min = SWITCH_OFF; v2_max = SWITCH_ON;
    }
    else // cstate == CS_COMP
    {
        putsChnRaw(12*FW-2, y, cs.v1, m_posHorz==1 ? attr : 0);
  409bec:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  409bf0:	f899 2005 	ldrb.w	r2, [r9, #5]
  409bf4:	2b01      	cmp	r3, #1
  409bf6:	bf0c      	ite	eq
  409bf8:	462b      	moveq	r3, r5
  409bfa:	2300      	movne	r3, #0
  409bfc:	2046      	movs	r0, #70	; 0x46
  409bfe:	4621      	mov	r1, r4
  409c00:	f7f9 fc00 	bl	403404 <_Z10putsChnRawhhhh>
        putsChnRaw(17*FW, y, cs.v2, m_posHorz==2 ? attr : 0);
  409c04:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  409c08:	787a      	ldrb	r2, [r7, #1]
  409c0a:	2b02      	cmp	r3, #2
  409c0c:	bf18      	it	ne
  409c0e:	2500      	movne	r5, #0
  409c10:	462b      	mov	r3, r5
  409c12:	2066      	movs	r0, #102	; 0x66
  409c14:	4621      	mov	r1, r4
  409c16:	f7f9 fbf5 	bl	403404 <_Z10putsChnRawhhhh>
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    int8_t v1_min=0, v1_max=NUM_XCHNCSW, v2_min=0, v2_max=NUM_XCHNCSW;
  409c1a:	2343      	movs	r3, #67	; 0x43
  409c1c:	2200      	movs	r2, #0
    //write SW names here
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
  409c1e:	2502      	movs	r5, #2
    int8_t v1_min=0, v1_max=NUM_XCHNCSW, v2_min=0, v2_max=NUM_XCHNCSW;
  409c20:	469c      	mov	ip, r3
  409c22:	4610      	mov	r0, r2
  409c24:	e737      	b.n	409a96 <_Z22menuProcCustomSwitchesh+0xfa>
        putsChnRaw(12*FW-2, y, cs.v1, m_posHorz==1 ? attr : 0);
        putsChnRaw(17*FW, y, cs.v2, m_posHorz==2 ? attr : 0);
    }

    if ((s_editMode>0 || p1valdiff) && attr) {
      switch (m_posHorz) {
  409c26:	2902      	cmp	r1, #2
  409c28:	f47f af5b 	bne.w	409ae2 <_Z22menuProcCustomSwitchesh+0x146>
        {
          CHECK_INCDEC_MODELVAR(event, cs.v1, v1_min, v1_max);
          break;
        }
        case 2:
          CHECK_INCDEC_MODELVAR(event, cs.v2, v2_min, v2_max);
  409c2c:	f997 1001 	ldrsb.w	r1, [r7, #1]
  409c30:	b252      	sxtb	r2, r2
  409c32:	b25b      	sxtb	r3, r3
  409c34:	9804      	ldr	r0, [sp, #16]
  409c36:	f7fd fb17 	bl	407268 <_Z16checkIncDecModelhaaa>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++) {
  409c3a:	f108 0801 	add.w	r8, r8, #1
  409c3e:	fa5f f888 	uxtb.w	r8, r8
  409c42:	3408      	adds	r4, #8
  409c44:	f1b8 0f07 	cmp.w	r8, #7
        {
          CHECK_INCDEC_MODELVAR(event, cs.v1, v1_min, v1_max);
          break;
        }
        case 2:
          CHECK_INCDEC_MODELVAR(event, cs.v2, v2_min, v2_max);
  409c48:	7078      	strb	r0, [r7, #1]

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++) {
  409c4a:	b2e4      	uxtb	r4, r4
  409c4c:	f47f aec9 	bne.w	4099e2 <_Z22menuProcCustomSwitchesh+0x46>
  409c50:	e6b5      	b.n	4099be <_Z22menuProcCustomSwitchesh+0x22>
            cs.v2 = 0;
          }
          break;
        case 1:
        {
          CHECK_INCDEC_MODELVAR(event, cs.v1, v1_min, v1_max);
  409c52:	b242      	sxtb	r2, r0
  409c54:	f999 1005 	ldrsb.w	r1, [r9, #5]
  409c58:	fa4f f38c 	sxtb.w	r3, ip
  409c5c:	9804      	ldr	r0, [sp, #16]
  409c5e:	f7fd fb03 	bl	407268 <_Z16checkIncDecModelhaaa>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++) {
  409c62:	f108 0801 	add.w	r8, r8, #1
  409c66:	fa5f f888 	uxtb.w	r8, r8
  409c6a:	3408      	adds	r4, #8
  409c6c:	f1b8 0f07 	cmp.w	r8, #7
            cs.v2 = 0;
          }
          break;
        case 1:
        {
          CHECK_INCDEC_MODELVAR(event, cs.v1, v1_min, v1_max);
  409c70:	f889 0005 	strb.w	r0, [r9, #5]

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++) {
  409c74:	b2e4      	uxtb	r4, r4
  409c76:	f47f aeb4 	bne.w	4099e2 <_Z22menuProcCustomSwitchesh+0x46>
  409c7a:	e6a0      	b.n	4099be <_Z22menuProcCustomSwitchesh+0x22>
  409c7c:	00410be8 	.word	0x00410be8
  409c80:	20001200 	.word	0x20001200
  409c84:	20000244 	.word	0x20000244
  409c88:	00410bfc 	.word	0x00410bfc
  409c8c:	00410437 	.word	0x00410437

    if ((s_editMode>0 || p1valdiff) && attr) {
      switch (m_posHorz) {
        case 0:
          CHECK_INCDEC_MODELVAR(event, cs.func, 0,CS_MAXF);
          if (cstate != CS_STATE(cs.func)) {
  409c90:	2807      	cmp	r0, #7
  409c92:	bf8c      	ite	hi
  409c94:	2002      	movhi	r0, #2
  409c96:	2001      	movls	r0, #1
  409c98:	e71d      	b.n	409ad6 <_Z22menuProcCustomSwitchesh+0x13a>
    //write SW names here
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
  409c9a:	2500      	movs	r5, #0
        putsChnRaw(12*FW-2, y, cs.v1, (m_posHorz==1 ? attr : 0));

#if defined(FRSKY)
        if (cs.v1 > NUM_XCHNCSW-NUM_TELEMETRY) {
          putsTelemetryChannel(20*FW, y, cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY+1), convertTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY), 128+cs.v2), m_posHorz==2 ? attr : 0);
          v2_min = -128; v2_max = maxTelemValue(cs.v1 - (NUM_XCHNCSW-NUM_TELEMETRY)) - 128;
  409c9c:	23e4      	movs	r3, #228	; 0xe4
  409c9e:	2280      	movs	r2, #128	; 0x80
    lcd_putsLeft(y, STR_SW);
    lcd_putc(2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsiAtt(4*FW - 1, y, STR_VCSWFUNC, cs.func, m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    int8_t v1_min=0, v1_max=NUM_XCHNCSW, v2_min=0, v2_max=NUM_XCHNCSW;
  409ca0:	f04f 0c43 	mov.w	ip, #67	; 0x43
  409ca4:	4628      	mov	r0, r5
  409ca6:	e6f6      	b.n	409a96 <_Z22menuProcCustomSwitchesh+0xfa>

00409ca8 <_Z12check_simplehhPKPFvhEhh>:
{
  return checkIncDec(event,i_val,i_min,i_max,EE_GENERAL);
}

bool check_simple(uint8_t event, uint8_t curr, const MenuFuncP *menuTab, uint8_t menuTabSize, uint8_t maxrow)
{
  409ca8:	b510      	push	{r4, lr}
  return check(event, curr, menuTab, menuTabSize, 0, 0, maxrow);
  409caa:	2400      	movs	r4, #0
{
  return checkIncDec(event,i_val,i_min,i_max,EE_GENERAL);
}

bool check_simple(uint8_t event, uint8_t curr, const MenuFuncP *menuTab, uint8_t menuTabSize, uint8_t maxrow)
{
  409cac:	b084      	sub	sp, #16
  return check(event, curr, menuTab, menuTabSize, 0, 0, maxrow);
  409cae:	9400      	str	r4, [sp, #0]
  409cb0:	9401      	str	r4, [sp, #4]
  409cb2:	f89d 4018 	ldrb.w	r4, [sp, #24]
  409cb6:	9402      	str	r4, [sp, #8]
  409cb8:	f7fe f92e 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
}
  409cbc:	b004      	add	sp, #16
  409cbe:	bd10      	pop	{r4, pc}

00409cc0 <_Z15menuProcDiagAnah>:
    lcd_putcAtt(20*FW, y, tp+'0', tp ? INVERS : 0);
  }
}

void menuProcDiagAna(uint8_t event)
{
  409cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#define ANAS_ITEMS_COUNT 3
#else
#define ANAS_ITEMS_COUNT 2
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);
  409cc4:	f8df b17c 	ldr.w	fp, [pc, #380]	; 409e44 <_Z15menuProcDiagAnah+0x184>
    lcd_putcAtt(20*FW, y, tp+'0', tp ? INVERS : 0);
  }
}

void menuProcDiagAna(uint8_t event)
{
  409cc8:	b085      	sub	sp, #20
#define ANAS_ITEMS_COUNT 3
#else
#define ANAS_ITEMS_COUNT 2
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);
  409cca:	2402      	movs	r4, #2
  409ccc:	2104      	movs	r1, #4
  409cce:	f10b 02ec 	add.w	r2, fp, #236	; 0xec
  409cd2:	2306      	movs	r3, #6
    lcd_putcAtt(20*FW, y, tp+'0', tp ? INVERS : 0);
  }
}

void menuProcDiagAna(uint8_t event)
{
  409cd4:	9003      	str	r0, [sp, #12]
#define ANAS_ITEMS_COUNT 3
#else
#define ANAS_ITEMS_COUNT 2
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);
  409cd6:	9400      	str	r4, [sp, #0]
  409cd8:	f7ff ffe6 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  409cdc:	b910      	cbnz	r0, 409ce4 <_Z15menuProcDiagAnah+0x24>
  lcd_putsLeft(7*FH-2, STR_CURRENT_CALIB);
  putsTelemetryValue(LEN_CALIB_FIELDS*FW+4*FW, 7*FH-2, getCurrent(), UNIT_MILLIAMPS, (m_posVert==2 ? INVERS : 0)) ;
  if (m_posVert==2) CHECK_INCDEC_GENVAR(event, g_eeGeneral.currentCalib, -49, 49);
#endif

}
  409cde:	b005      	add	sp, #20
  409ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#define ANAS_ITEMS_COUNT 3
#else
#define ANAS_ITEMS_COUNT 2
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);
  409ce4:	2000      	movs	r0, #0

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1+FH+(i/2)*FH;
    uint8_t x = i&1 ? 64+5 : 0;
  409ce6:	4607      	mov	r7, r0
#define ANAS_ITEMS_COUNT 3
#else
#define ANAS_ITEMS_COUNT 2
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);
  409ce8:	4623      	mov	r3, r4
  409cea:	4601      	mov	r1, r0
  409cec:	f50b 7276 	add.w	r2, fp, #984	; 0x3d8
  409cf0:	f7f8 fde2 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  409cf4:	f8df a150 	ldr.w	sl, [pc, #336]	; 409e48 <_Z15menuProcDiagAnah+0x188>
  409cf8:	2401      	movs	r4, #1

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1+FH+(i/2)*FH;
  409cfa:	2609      	movs	r6, #9
    uint8_t x = i&1 ? 64+5 : 0;
  409cfc:	463d      	mov	r5, r7
  409cfe:	f8df 914c 	ldr.w	r9, [pc, #332]	; 409e4c <_Z15menuProcDiagAnah+0x18c>
  409d02:	9702      	str	r7, [sp, #8]
  409d04:	e00a      	b.n	409d1c <_Z15menuProcDiagAnah+0x5c>
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1+FH+(i/2)*FH;
  409d06:	ea4f 0658 	mov.w	r6, r8, lsr #1
  409d0a:	00f6      	lsls	r6, r6, #3
  409d0c:	f106 0609 	add.w	r6, r6, #9
    uint8_t x = i&1 ? 64+5 : 0;
  409d10:	f014 0501 	ands.w	r5, r4, #1
  409d14:	bf18      	it	ne
  409d16:	2545      	movne	r5, #69	; 0x45
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1+FH+(i/2)*FH;
  409d18:	b2f6      	uxtb	r6, r6
    uint8_t x = i&1 ? 64+5 : 0;
  409d1a:	3401      	adds	r4, #1
    putsStrIdx(x, y, PSTR("A"), i+1, TWO_DOTS);
  409d1c:	fa5f f884 	uxtb.w	r8, r4
  409d20:	4628      	mov	r0, r5
  409d22:	4631      	mov	r1, r6
  409d24:	4643      	mov	r3, r8
  409d26:	4a44      	ldr	r2, [pc, #272]	; (409e38 <_Z15menuProcDiagAnah+0x178>)
  409d28:	2780      	movs	r7, #128	; 0x80
  409d2a:	9700      	str	r7, [sp, #0]
  409d2c:	f7f9 fb44 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  409d30:	f81a 3b01 	ldrb.w	r3, [sl], #1
    lcd_outhex4(x+3*FW-1, y, anaIn(i));
  409d34:	f105 0011 	add.w	r0, r5, #17
  return *p;
  409d38:	eb09 0343 	add.w	r3, r9, r3, lsl #1
  409d3c:	f8b3 29b0 	ldrh.w	r2, [r3, #2480]	; 0x9b0
  409d40:	4631      	mov	r1, r6
  409d42:	f7f8 fdc9 	bl	4028d8 <_Z11lcd_outhex4hht>
    lcd_outdez8(x+10*FW-1, y, (int16_t)calibratedStick[CONVERT_MODE(i+1)-1]*25/256);
  409d46:	9902      	ldr	r1, [sp, #8]
    lcd_putcAtt(18*FW, y, tm+'0', tm ? INVERS : 0);
    lcd_putcAtt(20*FW, y, tp+'0', tp ? INVERS : 0);
  }
}

void menuProcDiagAna(uint8_t event)
  409d48:	1e63      	subs	r3, r4, #1
  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1+FH+(i/2)*FH;
    uint8_t x = i&1 ? 64+5 : 0;
    putsStrIdx(x, y, PSTR("A"), i+1, TWO_DOTS);
    lcd_outhex4(x+3*FW-1, y, anaIn(i));
    lcd_outdez8(x+10*FW-1, y, (int16_t)calibratedStick[CONVERT_MODE(i+1)-1]*25/256);
  409d4a:	2903      	cmp	r1, #3
  409d4c:	f105 003b 	add.w	r0, r5, #59	; 0x3b
  409d50:	dc0c      	bgt.n	409d6c <_Z15menuProcDiagAnah+0xac>
  409d52:	f241 2700 	movw	r7, #4608	; 0x1200
  409d56:	f2c2 0700 	movt	r7, #8192	; 0x2000
  409d5a:	f897 2a86 	ldrb.w	r2, [r7, #2694]	; 0xa86
  409d5e:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
  409d62:	18d3      	adds	r3, r2, r3
  409d64:	f813 7c9c 	ldrb.w	r7, [r3, #-156]
  409d68:	3f01      	subs	r7, #1
  409d6a:	9702      	str	r7, [sp, #8]
  409d6c:	9902      	ldr	r1, [sp, #8]

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1+FH+(i/2)*FH;
    uint8_t x = i&1 ? 64+5 : 0;
  409d6e:	9402      	str	r4, [sp, #8]
    putsStrIdx(x, y, PSTR("A"), i+1, TWO_DOTS);
    lcd_outhex4(x+3*FW-1, y, anaIn(i));
    lcd_outdez8(x+10*FW-1, y, (int16_t)calibratedStick[CONVERT_MODE(i+1)-1]*25/256);
  409d70:	eb09 0741 	add.w	r7, r9, r1, lsl #1
  409d74:	f9b7 28b8 	ldrsh.w	r2, [r7, #2232]	; 0x8b8
  409d78:	4631      	mov	r1, r6
  409d7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  409d7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  409d82:	f102 03ff 	add.w	r3, r2, #255	; 0xff
  409d86:	ea32 0222 	bics.w	r2, r2, r2, asr #32
  409d8a:	bf28      	it	cs
  409d8c:	461a      	movcs	r2, r3
  409d8e:	f342 2207 	sbfx	r2, r2, #8, #8
  409d92:	f7f9 f859 	bl	402e48 <_Z11lcd_outdez8hha>
#define ANAS_ITEMS_COUNT 2
#endif

  SIMPLE_MENU(STR_MENUANA, menuTabDiag, e_Ana, ANAS_ITEMS_COUNT);

  for (uint8_t i=0; i<7; i++) {
  409d96:	2c07      	cmp	r4, #7
  409d98:	d1b5      	bne.n	409d06 <_Z15menuProcDiagAnah+0x46>
  lcd_puts(64+5, 1+4*FH, STR_BG);
  lcd_outdezAtt(64+5+6*FW-3, 1+4*FH, BandGap, 0);
#endif

  // Voltage calibration
  lcd_putsLeft(6*FH-2, STR_BATT_CALIB);
  409d9a:	202e      	movs	r0, #46	; 0x2e
  409d9c:	4927      	ldr	r1, [pc, #156]	; (409e3c <_Z15menuProcDiagAnah+0x17c>)
  409d9e:	f7f8 fd95 	bl	4028cc <_Z12lcd_putsLefthPKc>
  putsVolts(LEN_CALIB_FIELDS*FW+4*FW, 6*FH-2, g_vbat100mV, (m_posVert==1 ? INVERS : 0));
  409da2:	f241 2200 	movw	r2, #4608	; 0x1200
  409da6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409daa:	f892 3c34 	ldrb.w	r3, [r2, #3124]	; 0xc34
  409dae:	4617      	mov	r7, r2
  409db0:	2b01      	cmp	r3, #1
  409db2:	bf0c      	ite	eq
  409db4:	2302      	moveq	r3, #2
  409db6:	2300      	movne	r3, #0
  409db8:	2066      	movs	r0, #102	; 0x66
  409dba:	212e      	movs	r1, #46	; 0x2e
  409dbc:	f8b2 2a8e 	ldrh.w	r2, [r2, #2702]	; 0xa8e
  409dc0:	f7f9 face 	bl	403360 <_Z9putsVoltshhth>
  if (m_posVert==1) CHECK_INCDEC_GENVAR(event, g_eeGeneral.vBatCalib, -127, 127);
  409dc4:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
  409dc8:	2b01      	cmp	r3, #1
  409dca:	d029      	beq.n	409e20 <_Z15menuProcDiagAnah+0x160>

#if defined(PCBARM) && defined(REVB)
  lcd_putsLeft(7*FH-2, STR_CURRENT_CALIB);
  409dcc:	491c      	ldr	r1, [pc, #112]	; (409e40 <_Z15menuProcDiagAnah+0x180>)
  409dce:	2036      	movs	r0, #54	; 0x36
  409dd0:	f7f8 fd7c 	bl	4028cc <_Z12lcd_putsLefthPKc>
  putsTelemetryValue(LEN_CALIB_FIELDS*FW+4*FW, 7*FH-2, getCurrent(), UNIT_MILLIAMPS, (m_posVert==2 ? INVERS : 0)) ;
  409dd4:	f7f6 fd18 	bl	400808 <_Z10getCurrentv>
  409dd8:	f241 2100 	movw	r1, #4608	; 0x1200
  409ddc:	f2c2 0100 	movt	r1, #8192	; 0x2000
  409de0:	f891 4c34 	ldrb.w	r4, [r1, #3124]	; 0xc34
  409de4:	b202      	sxth	r2, r0
  409de6:	2c02      	cmp	r4, #2
  409de8:	bf18      	it	ne
  409dea:	2400      	movne	r4, #0
  409dec:	2308      	movs	r3, #8
  409dee:	2066      	movs	r0, #102	; 0x66
  409df0:	2136      	movs	r1, #54	; 0x36
  409df2:	9400      	str	r4, [sp, #0]
  409df4:	f7f9 f84c 	bl	402e90 <_Z18putsTelemetryValuehhshh>
  if (m_posVert==2) CHECK_INCDEC_GENVAR(event, g_eeGeneral.currentCalib, -49, 49);
  409df8:	f241 2200 	movw	r2, #4608	; 0x1200
  409dfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  409e00:	f892 3c34 	ldrb.w	r3, [r2, #3124]	; 0xc34
  409e04:	2b02      	cmp	r3, #2
  409e06:	f47f af6a 	bne.w	409cde <_Z15menuProcDiagAnah+0x1e>
  409e0a:	f999 1075 	ldrsb.w	r1, [r9, #117]	; 0x75
  409e0e:	9803      	ldr	r0, [sp, #12]
  409e10:	f06f 0230 	mvn.w	r2, #48	; 0x30
  409e14:	2331      	movs	r3, #49	; 0x31
  409e16:	f7fd f9df 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  409e1a:	f889 0075 	strb.w	r0, [r9, #117]	; 0x75
  409e1e:	e75e      	b.n	409cde <_Z15menuProcDiagAnah+0x1e>
#endif

  // Voltage calibration
  lcd_putsLeft(6*FH-2, STR_BATT_CALIB);
  putsVolts(LEN_CALIB_FIELDS*FW+4*FW, 6*FH-2, g_vbat100mV, (m_posVert==1 ? INVERS : 0));
  if (m_posVert==1) CHECK_INCDEC_GENVAR(event, g_eeGeneral.vBatCalib, -127, 127);
  409e20:	f999 1054 	ldrsb.w	r1, [r9, #84]	; 0x54
  409e24:	9803      	ldr	r0, [sp, #12]
  409e26:	f06f 027e 	mvn.w	r2, #126	; 0x7e
  409e2a:	237f      	movs	r3, #127	; 0x7f
  409e2c:	f7fd f9d4 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  409e30:	f889 0054 	strb.w	r0, [r9, #84]	; 0x54
  409e34:	e7ca      	b.n	409dcc <_Z15menuProcDiagAnah+0x10c>
  409e36:	bf00      	nop
  409e38:	00411454 	.word	0x00411454
  409e3c:	00410c08 	.word	0x00410c08
  409e40:	00410c18 	.word	0x00410c18
  409e44:	00410828 	.word	0x00410828
  409e48:	0040f750 	.word	0x0040f750
  409e4c:	20000108 	.word	0x20000108

00409e50 <_Z16menuProcDiagKeysh>:
  lcd_putsLeft(7*FH, STR_EEPROMV);
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
}

void menuProcDiagKeys(uint8_t event)
{
  409e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SIMPLE_MENU(STR_MENUDIAG, menuTabDiag, e_Keys, 1);
  409e54:	2103      	movs	r1, #3
  lcd_putsLeft(7*FH, STR_EEPROMV);
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
}

void menuProcDiagKeys(uint8_t event)
{
  409e56:	b083      	sub	sp, #12
  SIMPLE_MENU(STR_MENUDIAG, menuTabDiag, e_Keys, 1);
  409e58:	2400      	movs	r4, #0
  409e5a:	4a46      	ldr	r2, [pc, #280]	; (409f74 <_Z16menuProcDiagKeysh+0x124>)
  409e5c:	2306      	movs	r3, #6
  409e5e:	9400      	str	r4, [sp, #0]
  409e60:	f7ff ff22 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  409e64:	b910      	cbnz	r0, 409e6c <_Z16menuProcDiagKeysh+0x1c>
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
    lcd_putcAtt(18*FW, y, tm+'0', tm ? INVERS : 0);
    lcd_putcAtt(20*FW, y, tp+'0', tp ? INVERS : 0);
  }
}
  409e66:	b003      	add	sp, #12
  409e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
}

void menuProcDiagKeys(uint8_t event)
{
  SIMPLE_MENU(STR_MENUDIAG, menuTabDiag, e_Keys, 1);
  409e6c:	4620      	mov	r0, r4
  409e6e:	4621      	mov	r1, r4
  409e70:	4a41      	ldr	r2, [pc, #260]	; (409f78 <_Z16menuProcDiagKeysh+0x128>)
  409e72:	2302      	movs	r3, #2
  409e74:	4626      	mov	r6, r4
  409e76:	f7f8 fd1f 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  for(uint8_t i=0; i<9; i++) {
    uint8_t y=i*FH; //+FH;
  409e7a:	4625      	mov	r5, r4
  409e7c:	e007      	b.n	409e8e <_Z16menuProcDiagKeysh+0x3e>
  409e7e:	00e5      	lsls	r5, r4, #3
  409e80:	b2ed      	uxtb	r5, r5
    if(i>(SW_ID0-SW_BASE_DIAG)) y-=FH; //overwrite ID0
  409e82:	f106 0308 	add.w	r3, r6, #8
  409e86:	2c03      	cmp	r4, #3
  409e88:	bf88      	it	hi
  409e8a:	4635      	movhi	r5, r6
  409e8c:	b2de      	uxtb	r6, r3
  lcd_putsLeft(5*FH, stamp4);
  lcd_putsLeft(7*FH, STR_EEPROMV);
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
}

void menuProcDiagKeys(uint8_t event)
  409e8e:	f104 000e 	add.w	r0, r4, #14
  SIMPLE_MENU(STR_MENUDIAG, menuTabDiag, e_Keys, 1);

  for(uint8_t i=0; i<9; i++) {
    uint8_t y=i*FH; //+FH;
    if(i>(SW_ID0-SW_BASE_DIAG)) y-=FH; //overwrite ID0
    bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
  409e92:	b2c0      	uxtb	r0, r0
  409e94:	f7f6 fb80 	bl	400598 <_Z8keyState8EnumKeys>
    putsSwitches(8*FW, y, i+1, 0); //ohne off,on
  409e98:	3401      	adds	r4, #1
  409e9a:	b2e4      	uxtb	r4, r4
  SIMPLE_MENU(STR_MENUDIAG, menuTabDiag, e_Keys, 1);

  for(uint8_t i=0; i<9; i++) {
    uint8_t y=i*FH; //+FH;
    if(i>(SW_ID0-SW_BASE_DIAG)) y-=FH; //overwrite ID0
    bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
  409e9c:	1c07      	adds	r7, r0, #0
  409e9e:	bf18      	it	ne
  409ea0:	2701      	movne	r7, #1
    putsSwitches(8*FW, y, i+1, 0); //ohne off,on
  409ea2:	b262      	sxtb	r2, r4
  409ea4:	2300      	movs	r3, #0
  409ea6:	2030      	movs	r0, #48	; 0x30
  409ea8:	4629      	mov	r1, r5
  409eaa:	f7f9 fb23 	bl	4034f4 <_Z12putsSwitcheshhah>
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
  409eae:	f107 0230 	add.w	r2, r7, #48	; 0x30
  409eb2:	007b      	lsls	r3, r7, #1
  409eb4:	2044      	movs	r0, #68	; 0x44
  409eb6:	b2d2      	uxtb	r2, r2
  409eb8:	4629      	mov	r1, r5
  409eba:	f7f8 fbd7 	bl	40266c <_Z11lcd_putcAtthhhh>

void menuProcDiagKeys(uint8_t event)
{
  SIMPLE_MENU(STR_MENUDIAG, menuTabDiag, e_Keys, 1);

  for(uint8_t i=0; i<9; i++) {
  409ebe:	2c09      	cmp	r4, #9
  409ec0:	d1dd      	bne.n	409e7e <_Z16menuProcDiagKeysh+0x2e>
  409ec2:	2600      	movs	r6, #0
  409ec4:	2438      	movs	r4, #56	; 0x38
  }

  for(uint8_t i=0; i<6; i++) {
    uint8_t y=(5-i)*FH+2*FH;
    bool t=keyState((EnumKeys)(KEY_MENU+i));
    lcd_putsiAtt(0, y, STR_VKEYS, i, 0);
  409ec6:	4637      	mov	r7, r6
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
  }

  for(uint8_t i=0; i<6; i++) {
    uint8_t y=(5-i)*FH+2*FH;
    bool t=keyState((EnumKeys)(KEY_MENU+i));
  409ec8:	4630      	mov	r0, r6
  409eca:	f7f6 fb65 	bl	400598 <_Z8keyState8EnumKeys>
    lcd_putsiAtt(0, y, STR_VKEYS, i, 0);
  409ece:	4621      	mov	r1, r4
  409ed0:	4633      	mov	r3, r6
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
  }

  for(uint8_t i=0; i<6; i++) {
    uint8_t y=(5-i)*FH+2*FH;
    bool t=keyState((EnumKeys)(KEY_MENU+i));
  409ed2:	4605      	mov	r5, r0
    lcd_putsiAtt(0, y, STR_VKEYS, i, 0);
  409ed4:	4a29      	ldr	r2, [pc, #164]	; (409f7c <_Z16menuProcDiagKeysh+0x12c>)
  409ed6:	2000      	movs	r0, #0
  409ed8:	9700      	str	r7, [sp, #0]
  409eda:	f7f8 fcc9 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
    lcd_putcAtt(5*FW+2, y, t+'0', t);
  409ede:	1c2b      	adds	r3, r5, #0
  409ee0:	bf18      	it	ne
  409ee2:	2301      	movne	r3, #1
  409ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
    bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
    putsSwitches(8*FW, y, i+1, 0); //ohne off,on
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
  }

  for(uint8_t i=0; i<6; i++) {
  409ee8:	3601      	adds	r6, #1
    uint8_t y=(5-i)*FH+2*FH;
    bool t=keyState((EnumKeys)(KEY_MENU+i));
    lcd_putsiAtt(0, y, STR_VKEYS, i, 0);
    lcd_putcAtt(5*FW+2, y, t+'0', t);
  409eea:	4621      	mov	r1, r4
  409eec:	2020      	movs	r0, #32
  409eee:	b2d2      	uxtb	r2, r2
    bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
    putsSwitches(8*FW, y, i+1, 0); //ohne off,on
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
  }

  for(uint8_t i=0; i<6; i++) {
  409ef0:	b2f6      	uxtb	r6, r6
  409ef2:	3c08      	subs	r4, #8
    uint8_t y=(5-i)*FH+2*FH;
    bool t=keyState((EnumKeys)(KEY_MENU+i));
    lcd_putsiAtt(0, y, STR_VKEYS, i, 0);
    lcd_putcAtt(5*FW+2, y, t+'0', t);
  409ef4:	f7f8 fbba 	bl	40266c <_Z11lcd_putcAtthhhh>
    bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
    putsSwitches(8*FW, y, i+1, 0); //ohne off,on
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
  }

  for(uint8_t i=0; i<6; i++) {
  409ef8:	2e06      	cmp	r6, #6
  409efa:	b2e4      	uxtb	r4, r4
  409efc:	d1e4      	bne.n	409ec8 <_Z16menuProcDiagKeysh+0x78>
    lcd_putsiAtt(14*FW, y, STR_RE1RE2, i, 0);
    lcd_outdezNAtt(18*FW, y, g_rotenc[i], LEFT|(keyState((EnumKeys)(BTN_REa+i)) ? INVERS : 0));
  }
#endif

  lcd_puts(14*FW, 3*FH, STR_VTRIM);
  409efe:	2054      	movs	r0, #84	; 0x54
  409f00:	2118      	movs	r1, #24
  409f02:	4a1f      	ldr	r2, [pc, #124]	; (409f80 <_Z16menuProcDiagKeysh+0x130>)
  409f04:	f7f8 fce0 	bl	4028c8 <_Z8lcd_putshhPKc>
  for(uint8_t i=0; i<4; i++) {
  409f08:	2500      	movs	r5, #0
    lcd_putsiAtt(14*FW, y, STR_RE1RE2, i, 0);
    lcd_outdezNAtt(18*FW, y, g_rotenc[i], LEFT|(keyState((EnumKeys)(BTN_REa+i)) ? INVERS : 0));
  }
#endif

  lcd_puts(14*FW, 3*FH, STR_VTRIM);
  409f0a:	2420      	movs	r4, #32
  for(uint8_t i=0; i<4; i++) {
    uint8_t y=i*FH+FH*4;
    lcd_img(14*FW, y, sticks,i,0);
  409f0c:	46a8      	mov	r8, r5
  409f0e:	4621      	mov	r1, r4
  409f10:	462b      	mov	r3, r5
  409f12:	4a1c      	ldr	r2, [pc, #112]	; (409f84 <_Z16menuProcDiagKeysh+0x134>)
  409f14:	2054      	movs	r0, #84	; 0x54
  409f16:	f8cd 8000 	str.w	r8, [sp]
  409f1a:	f7f8 fb61 	bl	4025e0 <_Z7lcd_imghhPKhhh>
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
  409f1e:	4630      	mov	r0, r6
  409f20:	f7f6 fb3a 	bl	400598 <_Z8keyState8EnumKeys>
  409f24:	4681      	mov	r9, r0
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
  409f26:	1c70      	adds	r0, r6, #1
  409f28:	b2c0      	uxtb	r0, r0

  lcd_puts(14*FW, 3*FH, STR_VTRIM);
  for(uint8_t i=0; i<4; i++) {
    uint8_t y=i*FH+FH*4;
    lcd_img(14*FW, y, sticks,i,0);
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
  409f2a:	f119 0900 	adds.w	r9, r9, #0
  409f2e:	bf18      	it	ne
  409f30:	f04f 0901 	movne.w	r9, #1
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
  409f34:	f7f6 fb30 	bl	400598 <_Z8keyState8EnumKeys>
    lcd_putcAtt(18*FW, y, tm+'0', tm ? INVERS : 0);
  409f38:	f109 0230 	add.w	r2, r9, #48	; 0x30
  lcd_puts(14*FW, 3*FH, STR_VTRIM);
  for(uint8_t i=0; i<4; i++) {
    uint8_t y=i*FH+FH*4;
    lcd_img(14*FW, y, sticks,i,0);
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
  409f3c:	1c07      	adds	r7, r0, #0
  409f3e:	bf18      	it	ne
  409f40:	2701      	movne	r7, #1
    lcd_putcAtt(18*FW, y, tm+'0', tm ? INVERS : 0);
  409f42:	4621      	mov	r1, r4
  409f44:	206c      	movs	r0, #108	; 0x6c
  409f46:	b2d2      	uxtb	r2, r2
  409f48:	ea4f 0349 	mov.w	r3, r9, lsl #1
  409f4c:	f7f8 fb8e 	bl	40266c <_Z11lcd_putcAtthhhh>
    lcd_outdezNAtt(18*FW, y, g_rotenc[i], LEFT|(keyState((EnumKeys)(BTN_REa+i)) ? INVERS : 0));
  }
#endif

  lcd_puts(14*FW, 3*FH, STR_VTRIM);
  for(uint8_t i=0; i<4; i++) {
  409f50:	3501      	adds	r5, #1
    uint8_t y=i*FH+FH*4;
    lcd_img(14*FW, y, sticks,i,0);
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
    lcd_putcAtt(18*FW, y, tm+'0', tm ? INVERS : 0);
    lcd_putcAtt(20*FW, y, tp+'0', tp ? INVERS : 0);
  409f52:	f107 0230 	add.w	r2, r7, #48	; 0x30
  409f56:	007b      	lsls	r3, r7, #1
  409f58:	4621      	mov	r1, r4
  409f5a:	2078      	movs	r0, #120	; 0x78
  409f5c:	b2d2      	uxtb	r2, r2
    lcd_outdezNAtt(18*FW, y, g_rotenc[i], LEFT|(keyState((EnumKeys)(BTN_REa+i)) ? INVERS : 0));
  }
#endif

  lcd_puts(14*FW, 3*FH, STR_VTRIM);
  for(uint8_t i=0; i<4; i++) {
  409f5e:	b2ed      	uxtb	r5, r5
  409f60:	3408      	adds	r4, #8
  409f62:	3602      	adds	r6, #2
    uint8_t y=i*FH+FH*4;
    lcd_img(14*FW, y, sticks,i,0);
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
    lcd_putcAtt(18*FW, y, tm+'0', tm ? INVERS : 0);
    lcd_putcAtt(20*FW, y, tp+'0', tp ? INVERS : 0);
  409f64:	f7f8 fb82 	bl	40266c <_Z11lcd_putcAtthhhh>
    lcd_outdezNAtt(18*FW, y, g_rotenc[i], LEFT|(keyState((EnumKeys)(BTN_REa+i)) ? INVERS : 0));
  }
#endif

  lcd_puts(14*FW, 3*FH, STR_VTRIM);
  for(uint8_t i=0; i<4; i++) {
  409f68:	2d04      	cmp	r5, #4
  409f6a:	b2e4      	uxtb	r4, r4
  409f6c:	b2f6      	uxtb	r6, r6
  409f6e:	d1ce      	bne.n	409f0e <_Z16menuProcDiagKeysh+0xbe>
  409f70:	e779      	b.n	409e66 <_Z16menuProcDiagKeysh+0x16>
  409f72:	bf00      	nop
  409f74:	00410914 	.word	0x00410914
  409f78:	00410c28 	.word	0x00410c28
  409f7c:	004106ad 	.word	0x004106ad
  409f80:	00410c30 	.word	0x00410c30
  409f84:	00410ac8 	.word	0x00410ac8

00409f88 <_Z16menuProcDiagVersh>:
    }
  }
}

void menuProcDiagVers(uint8_t event)
{
  409f88:	b510      	push	{r4, lr}
  SIMPLE_MENU(STR_MENUVERSION, menuTabDiag, e_Vers, 1);
  409f8a:	2102      	movs	r1, #2
    }
  }
}

void menuProcDiagVers(uint8_t event)
{
  409f8c:	b082      	sub	sp, #8
  SIMPLE_MENU(STR_MENUVERSION, menuTabDiag, e_Vers, 1);
  409f8e:	2400      	movs	r4, #0
  409f90:	4a16      	ldr	r2, [pc, #88]	; (409fec <_Z16menuProcDiagVersh+0x64>)
  409f92:	2306      	movs	r3, #6
  409f94:	9400      	str	r4, [sp, #0]
  409f96:	f7ff fe87 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  409f9a:	b908      	cbnz	r0, 409fa0 <_Z16menuProcDiagVersh+0x18>
  lcd_putsLeft(3*FH, stamp2);
  lcd_putsLeft(4*FH, stamp3);
  lcd_putsLeft(5*FH, stamp4);
  lcd_putsLeft(7*FH, STR_EEPROMV);
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
}
  409f9c:	b002      	add	sp, #8
  409f9e:	bd10      	pop	{r4, pc}
  }
}

void menuProcDiagVers(uint8_t event)
{
  SIMPLE_MENU(STR_MENUVERSION, menuTabDiag, e_Vers, 1);
  409fa0:	2302      	movs	r3, #2
  409fa2:	4a13      	ldr	r2, [pc, #76]	; (409ff0 <_Z16menuProcDiagVersh+0x68>)
  409fa4:	4620      	mov	r0, r4
  409fa6:	4621      	mov	r1, r4
  409fa8:	f7f8 fc86 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  lcd_putsLeft(2*FH, stamp1);
  409fac:	2010      	movs	r0, #16
  409fae:	4911      	ldr	r1, [pc, #68]	; (409ff4 <_Z16menuProcDiagVersh+0x6c>)
  409fb0:	f7f8 fc8c 	bl	4028cc <_Z12lcd_putsLefthPKc>
  lcd_putsLeft(3*FH, stamp2);
  409fb4:	2018      	movs	r0, #24
  409fb6:	4910      	ldr	r1, [pc, #64]	; (409ff8 <_Z16menuProcDiagVersh+0x70>)
  409fb8:	f7f8 fc88 	bl	4028cc <_Z12lcd_putsLefthPKc>
  lcd_putsLeft(4*FH, stamp3);
  409fbc:	2020      	movs	r0, #32
  409fbe:	490f      	ldr	r1, [pc, #60]	; (409ffc <_Z16menuProcDiagVersh+0x74>)
  409fc0:	f7f8 fc84 	bl	4028cc <_Z12lcd_putsLefthPKc>
  lcd_putsLeft(5*FH, stamp4);
  409fc4:	2028      	movs	r0, #40	; 0x28
  409fc6:	490e      	ldr	r1, [pc, #56]	; (40a000 <_Z16menuProcDiagVersh+0x78>)
  409fc8:	f7f8 fc80 	bl	4028cc <_Z12lcd_putsLefthPKc>
  lcd_putsLeft(7*FH, STR_EEPROMV);
  409fcc:	2038      	movs	r0, #56	; 0x38
  409fce:	490d      	ldr	r1, [pc, #52]	; (40a004 <_Z16menuProcDiagVersh+0x7c>)
  409fd0:	f7f8 fc7c 	bl	4028cc <_Z12lcd_putsLefthPKc>
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
  409fd4:	4b0c      	ldr	r3, [pc, #48]	; (40a008 <_Z16menuProcDiagVersh+0x80>)
  409fd6:	2030      	movs	r0, #48	; 0x30
  409fd8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
  409fdc:	2138      	movs	r1, #56	; 0x38
  409fde:	2380      	movs	r3, #128	; 0x80
}
  409fe0:	b002      	add	sp, #8
  409fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  lcd_putsLeft(2*FH, stamp1);
  lcd_putsLeft(3*FH, stamp2);
  lcd_putsLeft(4*FH, stamp3);
  lcd_putsLeft(5*FH, stamp4);
  lcd_putsLeft(7*FH, STR_EEPROMV);
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
  409fe6:	f7f8 bf27 	b.w	402e38 <_Z13lcd_outdezAtthhsh>
  409fea:	bf00      	nop
  409fec:	00410914 	.word	0x00410914
  409ff0:	00410c38 	.word	0x00410c38
  409ff4:	00410c40 	.word	0x00410c40
  409ff8:	00410c50 	.word	0x00410c50
  409ffc:	00410c60 	.word	0x00410c60
  40a000:	00410c74 	.word	0x00410c74
  40a004:	00410c84 	.word	0x00410c84
  40a008:	20000108 	.word	0x20000108

0040a00c <_Z17menuProcCurvesAllh>:
    }
  }
}

void menuProcCurvesAll(uint8_t event)
{
  40a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SIMPLE_MENU(STR_MENUCURVES, menuTabModel, e_CurvesAll, 1+MAX_CURVE5+MAX_CURVE9);
  40a010:	2106      	movs	r1, #6
    }
  }
}

void menuProcCurvesAll(uint8_t event)
{
  40a012:	b085      	sub	sp, #20
  SIMPLE_MENU(STR_MENUCURVES, menuTabModel, e_CurvesAll, 1+MAX_CURVE5+MAX_CURVE9);
  40a014:	2510      	movs	r5, #16
  40a016:	4a56      	ldr	r2, [pc, #344]	; (40a170 <_Z17menuProcCurvesAllh+0x164>)
  40a018:	230b      	movs	r3, #11
    }
  }
}

void menuProcCurvesAll(uint8_t event)
{
  40a01a:	4604      	mov	r4, r0
  SIMPLE_MENU(STR_MENUCURVES, menuTabModel, e_CurvesAll, 1+MAX_CURVE5+MAX_CURVE9);
  40a01c:	9500      	str	r5, [sp, #0]
  40a01e:	f7ff fe43 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  40a022:	b910      	cbnz	r0, 40a02a <_Z17menuProcCurvesAllh+0x1e>
      y += FH;yd++;
    }
  }

  if(!m) s_pgOfs++;
}
  40a024:	b005      	add	sp, #20
  40a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
}

void menuProcCurvesAll(uint8_t event)
{
  SIMPLE_MENU(STR_MENUCURVES, menuTabModel, e_CurvesAll, 1+MAX_CURVE5+MAX_CURVE9);
  40a02a:	2000      	movs	r0, #0
  40a02c:	2302      	movs	r3, #2
  40a02e:	4a51      	ldr	r2, [pc, #324]	; (40a174 <_Z17menuProcCurvesAllh+0x168>)
  40a030:	4601      	mov	r1, r0
  40a032:	f7f8 fc41 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  int8_t  sub    = m_posVert - 1;
  40a036:	f241 2200 	movw	r2, #4608	; 0x1200
  40a03a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40a03e:	f892 3c34 	ldrb.w	r3, [r2, #3124]	; 0xc34
  40a042:	3b01      	subs	r3, #1
  40a044:	b2db      	uxtb	r3, r3
  40a046:	b2da      	uxtb	r2, r3
      if (!navigationRotaryEncoder(event))
        break;
#endif
    case EVT_KEY_FIRST(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub >= 0) {
  40a048:	b252      	sxtb	r2, r2
{
  SIMPLE_MENU(STR_MENUCURVES, menuTabModel, e_CurvesAll, 1+MAX_CURVE5+MAX_CURVE9);

  int8_t  sub    = m_posVert - 1;

  switch (event) {
  40a04a:	2c60      	cmp	r4, #96	; 0x60
      if (!navigationRotaryEncoder(event))
        break;
#endif
    case EVT_KEY_FIRST(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub >= 0) {
  40a04c:	9203      	str	r2, [sp, #12]
{
  SIMPLE_MENU(STR_MENUCURVES, menuTabModel, e_CurvesAll, 1+MAX_CURVE5+MAX_CURVE9);

  int8_t  sub    = m_posVert - 1;

  switch (event) {
  40a04e:	f000 8084 	beq.w	40a15a <_Z17menuProcCurvesAllh+0x14e>
  40a052:	2c64      	cmp	r4, #100	; 0x64
  40a054:	f000 8081 	beq.w	40a15a <_Z17menuProcCurvesAllh+0x14e>
    }
  }
}

void menuProcCurvesAll(uint8_t event)
{
  40a058:	f04f 0a00 	mov.w	sl, #0
  40a05c:	2608      	movs	r6, #8
  40a05e:	f04f 0b01 	mov.w	fp, #1
  40a062:	46d0      	mov	r8, sl

  uint8_t y    = 1*FH;
  uint8_t yd   = 1;
  uint8_t m    = 0;
  for (uint8_t i = 0; i < 7; i++) {
    uint8_t k = i + s_pgOfs;
  40a064:	f241 2300 	movw	r3, #4608	; 0x1200
  40a068:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40a06c:	f893 7e7d 	ldrb.w	r7, [r3, #3709]	; 0xe7d
    uint8_t attr = sub == k ? INVERS : 0;
  40a070:	9b03      	ldr	r3, [sp, #12]

  uint8_t y    = 1*FH;
  uint8_t yd   = 1;
  uint8_t m    = 0;
  for (uint8_t i = 0; i < 7; i++) {
    uint8_t k = i + s_pgOfs;
  40a072:	4447      	add	r7, r8
  40a074:	b2ff      	uxtb	r7, r7
    uint8_t attr = sub == k ? INVERS : 0;
    bool    cv9 = k >= MAX_CURVE5;
  40a076:	2f07      	cmp	r7, #7
  40a078:	bf94      	ite	ls
  40a07a:	f04f 0900 	movls.w	r9, #0
  40a07e:	f04f 0901 	movhi.w	r9, #1
  uint8_t y    = 1*FH;
  uint8_t yd   = 1;
  uint8_t m    = 0;
  for (uint8_t i = 0; i < 7; i++) {
    uint8_t k = i + s_pgOfs;
    uint8_t attr = sub == k ? INVERS : 0;
  40a082:	429f      	cmp	r7, r3
  40a084:	bf0c      	ite	eq
  40a086:	2202      	moveq	r2, #2
  40a088:	2200      	movne	r2, #0
    bool    cv9 = k >= MAX_CURVE5;

    if(cv9 && (yd>6)) break;
  40a08a:	f1b9 0f00 	cmp.w	r9, #0
  40a08e:	d044      	beq.n	40a11a <_Z17menuProcCurvesAllh+0x10e>
  40a090:	f1bb 0f06 	cmp.w	fp, #6
  40a094:	d834      	bhi.n	40a100 <_Z17menuProcCurvesAllh+0xf4>
    if(yd>7) break;
    if(!m) m = attr;
    putsStrIdx(0, y, STR_CV, k+1, attr);
  40a096:	1c7b      	adds	r3, r7, #1
    uint8_t attr = sub == k ? INVERS : 0;
    bool    cv9 = k >= MAX_CURVE5;

    if(cv9 && (yd>6)) break;
    if(yd>7) break;
    if(!m) m = attr;
  40a098:	f1ba 0f00 	cmp.w	sl, #0
  40a09c:	bf08      	it	eq
  40a09e:	4692      	moveq	sl, r2
    putsStrIdx(0, y, STR_CV, k+1, attr);
  40a0a0:	9200      	str	r2, [sp, #0]
  40a0a2:	b2db      	uxtb	r3, r3
  40a0a4:	2000      	movs	r0, #0
  40a0a6:	4631      	mov	r1, r6
  40a0a8:	4a33      	ldr	r2, [pc, #204]	; (40a178 <_Z17menuProcCurvesAllh+0x16c>)
  40a0aa:	f7f9 f985 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
  40a0ae:	f1b9 0f00 	cmp.w	r9, #0
  40a0b2:	d04a      	beq.n	40a14a <_Z17menuProcCurvesAllh+0x13e>
  40a0b4:	4a31      	ldr	r2, [pc, #196]	; (40a17c <_Z17menuProcCurvesAllh+0x170>)
  40a0b6:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
  40a0ba:	19d7      	adds	r7, r2, r7
  40a0bc:	f507 67a6 	add.w	r7, r7, #1328	; 0x530
  40a0c0:	3705      	adds	r7, #5
  40a0c2:	463d      	mov	r5, r7
    uint8_t attr = sub == k ? INVERS : 0;
    bool    cv9 = k >= MAX_CURVE5;

    if(cv9 && (yd>6)) break;
    if(yd>7) break;
    if(!m) m = attr;
  40a0c4:	242c      	movs	r4, #44	; 0x2c
    putsStrIdx(0, y, STR_CV, k+1, attr);
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
    for (uint8_t j = 0; j < (5); j++) {
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
  40a0c6:	4620      	mov	r0, r4
  40a0c8:	3415      	adds	r4, #21
  40a0ca:	2300      	movs	r3, #0
  40a0cc:	f915 2b01 	ldrsb.w	r2, [r5], #1
  40a0d0:	4631      	mov	r1, r6
  40a0d2:	b2e4      	uxtb	r4, r4
  40a0d4:	f7f8 feb0 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    if(cv9 && (yd>6)) break;
    if(yd>7) break;
    if(!m) m = attr;
    putsStrIdx(0, y, STR_CV, k+1, attr);
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
    for (uint8_t j = 0; j < (5); j++) {
  40a0d8:	2c95      	cmp	r4, #149	; 0x95
  40a0da:	d1f4      	bne.n	40a0c6 <_Z17menuProcCurvesAllh+0xba>
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    }
    y += FH;yd++;
  40a0dc:	f106 0508 	add.w	r5, r6, #8
  40a0e0:	b2ed      	uxtb	r5, r5
    if(cv9){
  40a0e2:	f1b9 0f00 	cmp.w	r9, #0
  40a0e6:	d11c      	bne.n	40a122 <_Z17menuProcCurvesAllh+0x116>
    putsStrIdx(0, y, STR_CV, k+1, attr);
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
    for (uint8_t j = 0; j < (5); j++) {
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    }
    y += FH;yd++;
  40a0e8:	f10b 0b01 	add.w	fp, fp, #1
  40a0ec:	fa5f fb8b 	uxtb.w	fp, fp
  40a0f0:	462e      	mov	r6, r5
  }

  uint8_t y    = 1*FH;
  uint8_t yd   = 1;
  uint8_t m    = 0;
  for (uint8_t i = 0; i < 7; i++) {
  40a0f2:	f108 0801 	add.w	r8, r8, #1
  40a0f6:	fa5f f888 	uxtb.w	r8, r8
  40a0fa:	f1b8 0f07 	cmp.w	r8, #7
  40a0fe:	d1b1      	bne.n	40a064 <_Z17menuProcCurvesAllh+0x58>
      }
      y += FH;yd++;
    }
  }

  if(!m) s_pgOfs++;
  40a100:	f1ba 0f00 	cmp.w	sl, #0
  40a104:	d18e      	bne.n	40a024 <_Z17menuProcCurvesAllh+0x18>
  40a106:	f241 2200 	movw	r2, #4608	; 0x1200
  40a10a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40a10e:	f892 3e7d 	ldrb.w	r3, [r2, #3709]	; 0xe7d
  40a112:	3301      	adds	r3, #1
  40a114:	f882 3e7d 	strb.w	r3, [r2, #3709]	; 0xe7d
  40a118:	e784      	b.n	40a024 <_Z17menuProcCurvesAllh+0x18>
    uint8_t k = i + s_pgOfs;
    uint8_t attr = sub == k ? INVERS : 0;
    bool    cv9 = k >= MAX_CURVE5;

    if(cv9 && (yd>6)) break;
    if(yd>7) break;
  40a11a:	f1bb 0f07 	cmp.w	fp, #7
  40a11e:	d9ba      	bls.n	40a096 <_Z17menuProcCurvesAllh+0x8a>
  40a120:	e7ee      	b.n	40a100 <_Z17menuProcCurvesAllh+0xf4>
      }
    }
  }
}

void menuProcCurvesAll(uint8_t event)
  40a122:	3704      	adds	r7, #4
  40a124:	242c      	movs	r4, #44	; 0x2c
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    }
    y += FH;yd++;
    if(cv9){
      for (uint8_t j = 0; j < 4; j++) {
        lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j+5], 0);
  40a126:	4620      	mov	r0, r4
  40a128:	3415      	adds	r4, #21
  40a12a:	2300      	movs	r3, #0
  40a12c:	f917 2f01 	ldrsb.w	r2, [r7, #1]!
  40a130:	4629      	mov	r1, r5
  40a132:	b2e4      	uxtb	r4, r4
  40a134:	f7f8 fe80 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    for (uint8_t j = 0; j < (5); j++) {
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    }
    y += FH;yd++;
    if(cv9){
      for (uint8_t j = 0; j < 4; j++) {
  40a138:	2c80      	cmp	r4, #128	; 0x80
  40a13a:	d1f4      	bne.n	40a126 <_Z17menuProcCurvesAllh+0x11a>
        lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j+5], 0);
      }
      y += FH;yd++;
  40a13c:	3610      	adds	r6, #16
  40a13e:	f10b 0b02 	add.w	fp, fp, #2
  40a142:	b2f6      	uxtb	r6, r6
  40a144:	fa5f fb8b 	uxtb.w	fp, fp
  40a148:	e7d3      	b.n	40a0f2 <_Z17menuProcCurvesAllh+0xe6>

    if(cv9 && (yd>6)) break;
    if(yd>7) break;
    if(!m) m = attr;
    putsStrIdx(0, y, STR_CV, k+1, attr);
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
  40a14a:	4b0c      	ldr	r3, [pc, #48]	; (40a17c <_Z17menuProcCurvesAllh+0x170>)
  40a14c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  40a150:	19df      	adds	r7, r3, r7
  40a152:	f507 67aa 	add.w	r7, r7, #1360	; 0x550
  40a156:	3705      	adds	r7, #5
  40a158:	e7b3      	b.n	40a0c2 <_Z17menuProcCurvesAllh+0xb6>
      if (!navigationRotaryEncoder(event))
        break;
#endif
    case EVT_KEY_FIRST(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub >= 0) {
  40a15a:	2a00      	cmp	r2, #0
  40a15c:	f6ff af7c 	blt.w	40a058 <_Z17menuProcCurvesAllh+0x4c>
        s_curveChan = sub;
  40a160:	4a07      	ldr	r2, [pc, #28]	; (40a180 <_Z17menuProcCurvesAllh+0x174>)
        pushMenu(menuProcCurveOne);
  40a162:	4808      	ldr	r0, [pc, #32]	; (40a184 <_Z17menuProcCurvesAllh+0x178>)
        break;
#endif
    case EVT_KEY_FIRST(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub >= 0) {
        s_curveChan = sub;
  40a164:	f882 3897 	strb.w	r3, [r2, #2199]	; 0x897
        pushMenu(menuProcCurveOne);
  40a168:	f7fd fa20 	bl	4075ac <_Z8pushMenuPFvhE>
  40a16c:	e774      	b.n	40a058 <_Z17menuProcCurvesAllh+0x4c>
  40a16e:	bf00      	nop
  40a170:	00410b14 	.word	0x00410b14
  40a174:	00410c90 	.word	0x00410c90
  40a178:	00410c98 	.word	0x00410c98
  40a17c:	20000244 	.word	0x20000244
  40a180:	20000108 	.word	0x20000108
  40a184:	00407641 	.word	0x00407641

0040a188 <_Z15menuProcExpoMixhh>:

#define _STR_MAX(x) PSTR("/" #x)
#define STR_MAX(x) _STR_MAX(x)

void menuProcExpoMix(uint8_t expo, uint8_t _event_)
{
  40a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a18c:	4681      	mov	r9, r0
  uint8_t _event = (s_warning ? 0 : _event_);
  40a18e:	f240 1008 	movw	r0, #264	; 0x108
  40a192:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40a196:	f8d0 3a88 	ldr.w	r3, [r0, #2696]	; 0xa88

#define _STR_MAX(x) PSTR("/" #x)
#define STR_MAX(x) _STR_MAX(x)

void menuProcExpoMix(uint8_t expo, uint8_t _event_)
{
  40a19a:	b08f      	sub	sp, #60	; 0x3c
  40a19c:	910d      	str	r1, [sp, #52]	; 0x34
  uint8_t _event = (s_warning ? 0 : _event_);
  40a19e:	2b00      	cmp	r3, #0
  40a1a0:	f000 8490 	beq.w	40aac4 <_Z15menuProcExpoMixhh+0x93c>
  40a1a4:	2400      	movs	r4, #0
  40a1a6:	940c      	str	r4, [sp, #48]	; 0x30
  uint8_t event = _event;
  uint8_t key = (event & 0x1f);

  if (s_copyMode) {
  40a1a8:	f8df a324 	ldr.w	sl, [pc, #804]	; 40a4d0 <_Z15menuProcExpoMixhh+0x348>
  40a1ac:	f89a 3e7e 	ldrb.w	r3, [sl, #3710]	; 0xe7e
  40a1b0:	b113      	cbz	r3, 40a1b8 <_Z15menuProcExpoMixhh+0x30>
    if (key == KEY_EXIT)
  40a1b2:	2c01      	cmp	r4, #1
  40a1b4:	f000 829b 	beq.w	40a6ee <_Z15menuProcExpoMixhh+0x566>
  40a1b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
      event -= KEY_EXIT;
  }

  TITLEP(expo ? STR_MENUDREXPO : STR_MIXER);
  40a1ba:	f1b9 0f00 	cmp.w	r9, #0
  40a1be:	f000 818b 	beq.w	40a4d8 <_Z15menuProcExpoMixhh+0x350>
  40a1c2:	2100      	movs	r1, #0
  40a1c4:	4608      	mov	r0, r1
  40a1c6:	4abf      	ldr	r2, [pc, #764]	; (40a4c4 <_Z15menuProcExpoMixhh+0x33c>)
  40a1c8:	2302      	movs	r3, #2
  40a1ca:	f7f8 fb75 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  lcd_outdezAtt(lcd_lastPos+2*FW+FW/2, 0, getExpoMixCount(expo));
  40a1ce:	4648      	mov	r0, r9
  40a1d0:	f7f7 fb2a 	bl	401828 <_Z15getExpoMixCounth>
  40a1d4:	f89a 3a85 	ldrb.w	r3, [sl, #2693]	; 0xa85
  40a1d8:	b202      	sxth	r2, r0
  40a1da:	2100      	movs	r1, #0
  40a1dc:	f103 000f 	add.w	r0, r3, #15
  40a1e0:	b2c0      	uxtb	r0, r0
  40a1e2:	460b      	mov	r3, r1
  40a1e4:	f7f8 fe28 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  lcd_puts(lcd_lastPos, 0, expo ? STR_MAX(MAX_EXPOS) : STR_MAX(MAX_MIXERS));
  40a1e8:	2100      	movs	r1, #0
  40a1ea:	f89a 0a85 	ldrb.w	r0, [sl, #2693]	; 0xa85
  40a1ee:	4ab6      	ldr	r2, [pc, #728]	; (40a4c8 <_Z15menuProcExpoMixhh+0x340>)
  40a1f0:	f7f8 fb6a 	bl	4028c8 <_Z8lcd_putshhPKc>
  SIMPLE_MENU_NOTITLE(menuTabModel, expo ? e_ExposAll : e_MixAll, s_maxLines);
  40a1f4:	2103      	movs	r1, #3
  40a1f6:	f240 0e00 	movw	lr, #0
  40a1fa:	f2c2 0e00 	movt	lr, #8192	; 0x2000
  40a1fe:	4628      	mov	r0, r5
  40a200:	f89e 5100 	ldrb.w	r5, [lr, #256]	; 0x100
  40a204:	4ab1      	ldr	r2, [pc, #708]	; (40a4cc <_Z15menuProcExpoMixhh+0x344>)
  40a206:	3d01      	subs	r5, #1
  40a208:	b2ed      	uxtb	r5, r5
  40a20a:	230b      	movs	r3, #11
  40a20c:	9500      	str	r5, [sp, #0]
  40a20e:	f7ff fd4b 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  40a212:	2800      	cmp	r0, #0
  40a214:	f000 81f7 	beq.w	40a606 <_Z15menuProcExpoMixhh+0x47e>

#if defined(ROTARY_ENCODERS)
  int8_t sub = m_posVert;
#else
  uint8_t sub = m_posVert;
  40a218:	f89a cc34 	ldrb.w	ip, [sl, #3124]	; 0xc34
  40a21c:	4dac      	ldr	r5, [pc, #688]	; (40a4d0 <_Z15menuProcExpoMixhh+0x348>)
  40a21e:	f8cd c014 	str.w	ip, [sp, #20]
#endif

  switch(_event)
  40a222:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40a226:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
  40a22a:	f240 8170 	bls.w	40a50e <_Z15menuProcExpoMixhh+0x386>
  40a22e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a230:	2c85      	cmp	r4, #133	; 0x85
  40a232:	f240 81eb 	bls.w	40a60c <_Z15menuProcExpoMixhh+0x484>
  40a236:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40a23a:	f1ac 03be 	sub.w	r3, ip, #190	; 0xbe
  40a23e:	2b01      	cmp	r3, #1
  40a240:	d804      	bhi.n	40a24c <_Z15menuProcExpoMixhh+0xc4>
  {
    case EVT_ENTRY:
    case EVT_ENTRY_UP:
      s_copyMode = 0;
  40a242:	2300      	movs	r3, #0
  40a244:	f885 3e7e 	strb.w	r3, [r5, #3710]	; 0xe7e
      s_copyTgtOfs = 0;
  40a248:	f885 3e7f 	strb.w	r3, [r5, #3711]	; 0xe7f
        s_copyTgtOfs = next_ofs;
      }
      break;
  }

  s_currCh = 0;
  40a24c:	f240 1c08 	movw	ip, #264	; 0x108
  40a250:	2500      	movs	r5, #0
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
  40a252:	f04f 0b01 	mov.w	fp, #1
        s_copyTgtOfs = next_ofs;
      }
      break;
  }

  s_currCh = 0;
  40a256:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  40a25a:	f88c 5a8c 	strb.w	r5, [ip, #2700]	; 0xa8c
  uint8_t cur = 1;
  40a25e:	465e      	mov	r6, fp
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
  40a260:	e030      	b.n	40a2c4 <_Z15menuProcExpoMixhh+0x13c>
    MixData *md=NULL; ExpoData *ed=NULL;
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
  40a262:	2d1f      	cmp	r5, #31
  40a264:	f240 8336 	bls.w	40a8d4 <_Z15menuProcExpoMixhh+0x74c>
        cur++;
      }
    }
    else {
      uint8_t attr = 0;
      if (sub == cur) {
  40a268:	9c05      	ldr	r4, [sp, #20]
        lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
        cur++;
      }
    }
    else {
      uint8_t attr = 0;
  40a26a:	2300      	movs	r3, #0
      if (sub == cur) {
  40a26c:	42b4      	cmp	r4, r6
  40a26e:	d10d      	bne.n	40a28c <_Z15menuProcExpoMixhh+0x104>
        s_currIdx = i;
        s_currCh = ch;
        if (!s_copyMode) {
  40a270:	f89a 3e7e 	ldrb.w	r3, [sl, #3710]	; 0xe7e
    }
    else {
      uint8_t attr = 0;
      if (sub == cur) {
        s_currIdx = i;
        s_currCh = ch;
  40a274:	f240 1108 	movw	r1, #264	; 0x108
  40a278:	f2c2 0100 	movt	r1, #8192	; 0x2000
      }
    }
    else {
      uint8_t attr = 0;
      if (sub == cur) {
        s_currIdx = i;
  40a27c:	f88a 5af8 	strb.w	r5, [sl, #2808]	; 0xaf8
        s_currCh = ch;
  40a280:	f881 ba8c 	strb.w	fp, [r1, #2700]	; 0xa8c
        lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
        cur++;
      }
    }
    else {
      uint8_t attr = 0;
  40a284:	2b00      	cmp	r3, #0
  40a286:	bf0c      	ite	eq
  40a288:	2302      	moveq	r3, #2
  40a28a:	2300      	movne	r3, #0
        s_currCh = ch;
        if (!s_copyMode) {
          attr = INVERS;
        }
      }
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
  40a28c:	f89a 2e7d 	ldrb.w	r2, [sl, #3709]	; 0xe7d
  40a290:	4296      	cmp	r6, r2
  40a292:	d911      	bls.n	40a2b8 <_Z15menuProcExpoMixhh+0x130>
  40a294:	1ab2      	subs	r2, r6, r2
  40a296:	2a07      	cmp	r2, #7
  40a298:	dc0e      	bgt.n	40a2b8 <_Z15menuProcExpoMixhh+0x130>
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, attr);
  40a29a:	00d2      	lsls	r2, r2, #3
  40a29c:	b2d1      	uxtb	r1, r2
        if (!s_copyMode) {
          attr = INVERS;
        }
      }
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
  40a29e:	f1b9 0f00 	cmp.w	r9, #0
  40a2a2:	f000 8385 	beq.w	40a9b0 <_Z15menuProcExpoMixhh+0x828>
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, attr);
  40a2a6:	2000      	movs	r0, #0
  40a2a8:	465a      	mov	r2, fp
  40a2aa:	f7f9 f8ab 	bl	403404 <_Z10putsChnRawhhhh>
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, attr); // show CHx
        if (s_copyMode == MOVE_MODE && s_copySrcCh == ch) {
  40a2ae:	f89a 3e7e 	ldrb.w	r3, [sl, #3710]	; 0xe7e
  40a2b2:	2b02      	cmp	r3, #2
  40a2b4:	f000 8385 	beq.w	40a9c2 <_Z15menuProcExpoMixhh+0x83a>
          uint8_t y = (cur-s_pgOfs)*FH;
          lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
        }
      }
      cur++;
  40a2b8:	3601      	adds	r6, #1
  40a2ba:	b2f6      	uxtb	r6, r6

  s_currCh = 0;
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
  40a2bc:	f10b 0b01 	add.w	fp, fp, #1
  40a2c0:	fa5f fb8b 	uxtb.w	fp, fp
  40a2c4:	f1b9 0f00 	cmp.w	r9, #0
  40a2c8:	bf0c      	ite	eq
  40a2ca:	2320      	moveq	r3, #32
  40a2cc:	2304      	movne	r3, #4
  40a2ce:	455b      	cmp	r3, fp
  40a2d0:	f2c0 835b 	blt.w	40a98a <_Z15menuProcExpoMixhh+0x802>
    MixData *md=NULL; ExpoData *ed=NULL;
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
  40a2d4:	f1b9 0f00 	cmp.w	r9, #0
  40a2d8:	d1c3      	bne.n	40a262 <_Z15menuProcExpoMixhh+0xda>
  40a2da:	2d3f      	cmp	r5, #63	; 0x3f
  40a2dc:	d8c4      	bhi.n	40a268 <_Z15menuProcExpoMixhh+0xe0>
  40a2de:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 40a4d4 <_Z15menuProcExpoMixhh+0x34c>
  40a2e2:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
  40a2e6:	3310      	adds	r3, #16
  40a2e8:	4463      	add	r3, ip
  40a2ea:	1d5c      	adds	r4, r3, #5
  40a2ec:	7ae2      	ldrb	r2, [r4, #11]
  40a2ee:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  40a2f2:	2a00      	cmp	r2, #0
  40a2f4:	d0b8      	beq.n	40a268 <_Z15menuProcExpoMixhh+0xe0>
  40a2f6:	795b      	ldrb	r3, [r3, #5]
  40a2f8:	3301      	adds	r3, #1
  40a2fa:	459b      	cmp	fp, r3
  40a2fc:	d1b4      	bne.n	40a268 <_Z15menuProcExpoMixhh+0xe0>
  s_currCh = 0;
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    MixData *md=NULL; ExpoData *ed=NULL;
  40a2fe:	46c8      	mov	r8, r9
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
  40a300:	f89a 3e7d 	ldrb.w	r3, [sl, #3709]	; 0xe7d
  40a304:	429e      	cmp	r6, r3
  40a306:	d913      	bls.n	40a330 <_Z15menuProcExpoMixhh+0x1a8>
  40a308:	1af2      	subs	r2, r6, r3
  40a30a:	2a07      	cmp	r2, #7
  40a30c:	dc10      	bgt.n	40a330 <_Z15menuProcExpoMixhh+0x1a8>
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
  40a30e:	00d2      	lsls	r2, r2, #3
  40a310:	b2d1      	uxtb	r1, r2

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    MixData *md=NULL; ExpoData *ed=NULL;
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
  40a312:	f1b9 0f00 	cmp.w	r9, #0
  40a316:	f000 836e 	beq.w	40a9f6 <_Z15menuProcExpoMixhh+0x86e>
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
  40a31a:	2000      	movs	r0, #0
  40a31c:	4603      	mov	r3, r0
  40a31e:	465a      	mov	r2, fp
  40a320:	f7f9 f870 	bl	403404 <_Z10putsChnRawhhhh>
  40a324:	f241 2c00 	movw	ip, #4608	; 0x1200
  40a328:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  40a32c:	f89c 3e7d 	ldrb.w	r3, [ip, #3709]	; 0xe7d
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
  40a330:	3501      	adds	r5, #1
}

#define _STR_MAX(x) PSTR("/" #x)
#define STR_MAX(x) _STR_MAX(x)

void menuProcExpoMix(uint8_t expo, uint8_t _event_)
  40a332:	f108 0807 	add.w	r8, r8, #7
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
  40a336:	b2ed      	uxtb	r5, r5
  40a338:	f89a 7e7e 	ldrb.w	r7, [sl, #3710]	; 0xe7e
}

#define _STR_MAX(x) PSTR("/" #x)
#define STR_MAX(x) _STR_MAX(x)

void menuProcExpoMix(uint8_t expo, uint8_t _event_)
  40a33c:	340f      	adds	r4, #15
  40a33e:	f8cd 8020 	str.w	r8, [sp, #32]
  40a342:	f04f 0c01 	mov.w	ip, #1
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
  40a346:	f105 38ff 	add.w	r8, r5, #4294967295
}

#define _STR_MAX(x) PSTR("/" #x)
#define STR_MAX(x) _STR_MAX(x)

void menuProcExpoMix(uint8_t expo, uint8_t _event_)
  40a34a:	9407      	str	r4, [sp, #28]
  40a34c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a350:	4634      	mov	r4, r6
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
  40a352:	fa5f f888 	uxtb.w	r8, r8
      }
      uint8_t mixCnt = 0;
      do {
        if (s_copyMode) {
  40a356:	2f00      	cmp	r7, #0
  40a358:	f000 8203 	beq.w	40a762 <_Z15menuProcExpoMixhh+0x5da>
          if (s_copyMode == MOVE_MODE && s_pgOfs < cur && cur-s_pgOfs < 8 && s_copySrcCh == ch && s_copyTgtOfs != 0 && i == (s_copySrcIdx + (s_copyTgtOfs<0))) {
  40a35c:	2f02      	cmp	r7, #2
  40a35e:	f000 8227 	beq.w	40a7b0 <_Z15menuProcExpoMixhh+0x628>
            uint8_t y = (cur-s_pgOfs)*FH;
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
            cur++;
          }
          if (s_currIdx == i) {
  40a362:	f89a 2af8 	ldrb.w	r2, [sl, #2808]	; 0xaf8
  40a366:	4542      	cmp	r2, r8
  40a368:	f000 8203 	beq.w	40a772 <_Z15menuProcExpoMixhh+0x5ea>
          }
        }
        else if (sub == cur) {
          s_currIdx = i;
        }
        if (s_pgOfs < cur && cur-s_pgOfs < 8) {
  40a36c:	429c      	cmp	r4, r3
  40a36e:	f240 81c4 	bls.w	40a6fa <_Z15menuProcExpoMixhh+0x572>
  40a372:	1ae3      	subs	r3, r4, r3
  40a374:	2b07      	cmp	r3, #7
  40a376:	f300 81c0 	bgt.w	40a6fa <_Z15menuProcExpoMixhh+0x572>
          if (expo)
  40a37a:	f1b9 0f00 	cmp.w	r9, #0
  40a37e:	f000 8249 	beq.w	40a814 <_Z15menuProcExpoMixhh+0x68c>
inline void displayExpoLine(uint8_t row, uint8_t expo, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  ExpoData *ed = expoaddress(expo);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a382:	f117 0c00 	adds.w	ip, r7, #0
  40a386:	bf18      	it	ne
  40a388:	f04f 0c01 	movne.w	ip, #1
  40a38c:	f8cd c018 	str.w	ip, [sp, #24]
}

inline void displayExpoLine(uint8_t row, uint8_t expo, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  ExpoData *ed = expoaddress(expo);
  40a390:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
  40a394:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40a398:	f502 628e 	add.w	r2, r2, #1136	; 0x470
  40a39c:	4462      	add	r2, ip

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a39e:	f8dd e014 	ldr.w	lr, [sp, #20]
  40a3a2:	f8dd c018 	ldr.w	ip, [sp, #24]
  }
}

inline void displayExpoLine(uint8_t row, uint8_t expo, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  40a3a6:	00db      	lsls	r3, r3, #3
  40a3a8:	b2db      	uxtb	r3, r3
  ExpoData *ed = expoaddress(expo);
  40a3aa:	1d56      	adds	r6, r2, #5

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a3ac:	45a6      	cmp	lr, r4
  40a3ae:	bf18      	it	ne
  40a3b0:	f04c 0c01 	orrne.w	ip, ip, #1
}

inline void displayExpoLine(uint8_t row, uint8_t expo, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  ExpoData *ed = expoaddress(expo);
  40a3b4:	920b      	str	r2, [sp, #44]	; 0x2c
  }
}

inline void displayExpoLine(uint8_t row, uint8_t expo, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  40a3b6:	9304      	str	r3, [sp, #16]
  ExpoData *ed = expoaddress(expo);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  lcd_outdezAtt(6*FW-2, y, ed->weight, attr);
  40a3b8:	7972      	ldrb	r2, [r6, #5]
  40a3ba:	2022      	movs	r0, #34	; 0x22
inline void displayExpoLine(uint8_t row, uint8_t expo, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  ExpoData *ed = expoaddress(expo);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a3bc:	f1bc 0f00 	cmp.w	ip, #0
  40a3c0:	f000 82c2 	beq.w	40a948 <_Z15menuProcExpoMixhh+0x7c0>
  lcd_outdezAtt(6*FW-2, y, ed->weight, attr);
  40a3c4:	4619      	mov	r1, r3
  40a3c6:	2300      	movs	r3, #0
  40a3c8:	f7f8 fd36 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  if (attr != 0)
    CHECK_INCDEC_MODELVAR(event, ed->weight, 0, 100);
  lcd_outdezAtt(9*FW+1, y, ed->expo, 0);
  40a3cc:	2037      	movs	r0, #55	; 0x37
  40a3ce:	2300      	movs	r3, #0
  40a3d0:	f996 2006 	ldrsb.w	r2, [r6, #6]
  40a3d4:	9904      	ldr	r1, [sp, #16]
  40a3d6:	f7f8 fd2f 	bl	402e38 <_Z13lcd_outdezAtthhsh>
#if defined(FLIGHT_PHASES)
#if defined(PCBARM)
  putsFlightPhase(10*FW, y, ed->phase);
  40a3da:	203c      	movs	r0, #60	; 0x3c
  40a3dc:	2300      	movs	r3, #0
  40a3de:	f996 2004 	ldrsb.w	r2, [r6, #4]
  40a3e2:	9904      	ldr	r1, [sp, #16]
  40a3e4:	f7f9 f8e8 	bl	4035b8 <_Z15putsFlightPhasehhah>
#else
  putsFlightPhase(10*FW, y, ed->negPhase ? -ed->phase : +ed->phase);
#endif
#endif
  putsSwitches(13*FW+4, y, ed->swtch, 0); // normal switches
  40a3e8:	f996 2003 	ldrsb.w	r2, [r6, #3]
  40a3ec:	2052      	movs	r0, #82	; 0x52
  40a3ee:	2300      	movs	r3, #0
  40a3f0:	9904      	ldr	r1, [sp, #16]
  40a3f2:	f7f9 f87f 	bl	4034f4 <_Z12putsSwitcheshhah>
  if (ed->mode!=3) lcd_putc(17*FW, y, ed->mode == 2 ? 126 : 127);//'|' : (stkVal[i] ? '<' : '>'),0);*/
  40a3f6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40a3fa:	f89c 2005 	ldrb.w	r2, [ip, #5]
  40a3fe:	2a03      	cmp	r2, #3
  40a400:	d007      	beq.n	40a412 <_Z15menuProcExpoMixhh+0x28a>
  40a402:	2a02      	cmp	r2, #2
  40a404:	bf14      	ite	ne
  40a406:	227f      	movne	r2, #127	; 0x7f
  40a408:	227e      	moveq	r2, #126	; 0x7e
  40a40a:	2066      	movs	r0, #102	; 0x66
  40a40c:	9904      	ldr	r1, [sp, #16]
  40a40e:	f7f8 f9e9 	bl	4027e4 <_Z8lcd_putchhh>
  if (ed->curve) putsCurve(18*FW+2, y, ed->curve+(ed->curve >= CURVE_BASE+4 ? 4 : 0));
  40a412:	78b3      	ldrb	r3, [r6, #2]
  40a414:	b15b      	cbz	r3, 40a42e <_Z15menuProcExpoMixhh+0x2a6>
  40a416:	b25a      	sxtb	r2, r3
  40a418:	2a0a      	cmp	r2, #10
  40a41a:	bfcc      	ite	gt
  40a41c:	2204      	movgt	r2, #4
  40a41e:	2200      	movle	r2, #0
  40a420:	18d2      	adds	r2, r2, r3
  40a422:	b252      	sxtb	r2, r2
  40a424:	206e      	movs	r0, #110	; 0x6e
  40a426:	9904      	ldr	r1, [sp, #16]
  40a428:	2300      	movs	r3, #0
  40a42a:	f7f9 f8fb 	bl	403624 <_Z9putsCurvehhah>

  if (s_copyMode) {
  40a42e:	9806      	ldr	r0, [sp, #24]
  40a430:	b170      	cbz	r0, 40a450 <_Z15menuProcExpoMixhh+0x2c8>
    if ((s_copyMode==COPY_MODE || s_copyTgtOfs == 0) && s_copySrcCh == ch && expo == (s_copySrcIdx + (s_copyTgtOfs<0))) {
  40a432:	2f01      	cmp	r7, #1
  40a434:	d002      	beq.n	40a43c <_Z15menuProcExpoMixhh+0x2b4>
  40a436:	f99a 3e7f 	ldrsb.w	r3, [sl, #3711]	; 0xe7f
  40a43a:	b923      	cbnz	r3, 40a446 <_Z15menuProcExpoMixhh+0x2be>
  40a43c:	f89a 3e82 	ldrb.w	r3, [sl, #3714]	; 0xe82
  40a440:	455b      	cmp	r3, fp
  40a442:	f000 8301 	beq.w	40aa48 <_Z15menuProcExpoMixhh+0x8c0>
      /* draw a border around the raw on selection mode (copy/move) */
      lcd_rect(18, y-1, DISPLAY_W-18, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
    }
    if (row == cur) {
  40a446:	f8dd c014 	ldr.w	ip, [sp, #20]
  40a44a:	45a4      	cmp	ip, r4
  40a44c:	f000 82ee 	beq.w	40aa2c <_Z15menuProcExpoMixhh+0x8a4>
          if (expo)
            displayExpoLine(cur, i, ch, mixCnt, sub, _event);
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
  40a450:	1c66      	adds	r6, r4, #1
  40a452:	b2f6      	uxtb	r6, r6
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
      }
      uint8_t mixCnt = 0;
      do {
  40a454:	2d1f      	cmp	r5, #31
  40a456:	d807      	bhi.n	40a468 <_Z15menuProcExpoMixhh+0x2e0>
  40a458:	f8dd c020 	ldr.w	ip, [sp, #32]
  40a45c:	f89c 3001 	ldrb.w	r3, [ip, #1]
  40a460:	3301      	adds	r3, #1
  40a462:	459b      	cmp	fp, r3
  40a464:	f000 824b 	beq.w	40a8fe <_Z15menuProcExpoMixhh+0x776>
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
      } while (expo ? (i<MAX_EXPOS && ed->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && md->srcRaw && md->destCh+1 == ch));
      if (s_copyMode == MOVE_MODE && s_pgOfs < cur && cur-s_pgOfs < 8 && s_copySrcCh == ch && i == (s_copySrcIdx + (s_copyTgtOfs<0))) {
  40a468:	2f02      	cmp	r7, #2
  40a46a:	f47f af27 	bne.w	40a2bc <_Z15menuProcExpoMixhh+0x134>
  40a46e:	f89a 3e7d 	ldrb.w	r3, [sl, #3709]	; 0xe7d
  40a472:	42b3      	cmp	r3, r6
  40a474:	f4bf af22 	bcs.w	40a2bc <_Z15menuProcExpoMixhh+0x134>
  40a478:	1af3      	subs	r3, r6, r3
  40a47a:	2b07      	cmp	r3, #7
  40a47c:	f73f af1e 	bgt.w	40a2bc <_Z15menuProcExpoMixhh+0x134>
  40a480:	f241 2000 	movw	r0, #4608	; 0x1200
  40a484:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40a488:	f890 2e82 	ldrb.w	r2, [r0, #3714]	; 0xe82
  40a48c:	455a      	cmp	r2, fp
  40a48e:	f47f af15 	bne.w	40a2bc <_Z15menuProcExpoMixhh+0x134>
  40a492:	f890 2e81 	ldrb.w	r2, [r0, #3713]	; 0xe81
  40a496:	f990 1e7f 	ldrsb.w	r1, [r0, #3711]	; 0xe7f
  40a49a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
  40a49e:	4295      	cmp	r5, r2
  40a4a0:	f47f af0c 	bne.w	40a2bc <_Z15menuProcExpoMixhh+0x134>
        uint8_t y = (cur-s_pgOfs)*FH;
  40a4a4:	00db      	lsls	r3, r3, #3
        lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
  40a4a6:	1e59      	subs	r1, r3, #1
  40a4a8:	2655      	movs	r6, #85	; 0x55
  40a4aa:	f04f 0e00 	mov.w	lr, #0
  40a4ae:	b2c9      	uxtb	r1, r1
  40a4b0:	2016      	movs	r0, #22
  40a4b2:	226a      	movs	r2, #106	; 0x6a
  40a4b4:	2309      	movs	r3, #9
        cur++;
  40a4b6:	3402      	adds	r4, #2
        }
        cur++; mixCnt++; i++; md++; ed++;
      } while (expo ? (i<MAX_EXPOS && ed->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && md->srcRaw && md->destCh+1 == ch));
      if (s_copyMode == MOVE_MODE && s_pgOfs < cur && cur-s_pgOfs < 8 && s_copySrcCh == ch && i == (s_copySrcIdx + (s_copyTgtOfs<0))) {
        uint8_t y = (cur-s_pgOfs)*FH;
        lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
  40a4b8:	e88d 4040 	stmia.w	sp, {r6, lr}
  40a4bc:	f7f8 fd24 	bl	402f08 <_Z8lcd_recthhhhhh>
        cur++;
  40a4c0:	b2e6      	uxtb	r6, r4
  40a4c2:	e6fb      	b.n	40a2bc <_Z15menuProcExpoMixhh+0x134>
  40a4c4:	00410c9c 	.word	0x00410c9c
  40a4c8:	00411458 	.word	0x00411458
  40a4cc:	00410b14 	.word	0x00410b14
  40a4d0:	20001200 	.word	0x20001200
  40a4d4:	20000244 	.word	0x20000244
  if (s_copyMode) {
    if (key == KEY_EXIT)
      event -= KEY_EXIT;
  }

  TITLEP(expo ? STR_MENUDREXPO : STR_MIXER);
  40a4d8:	4649      	mov	r1, r9
  40a4da:	4aad      	ldr	r2, [pc, #692]	; (40a790 <_Z15menuProcExpoMixhh+0x608>)
  40a4dc:	2302      	movs	r3, #2
  40a4de:	4648      	mov	r0, r9
  40a4e0:	f7f8 f9ea 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  lcd_outdezAtt(lcd_lastPos+2*FW+FW/2, 0, getExpoMixCount(expo));
  40a4e4:	4648      	mov	r0, r9
  40a4e6:	f7f7 f99f 	bl	401828 <_Z15getExpoMixCounth>
  40a4ea:	f89a 3a85 	ldrb.w	r3, [sl, #2693]	; 0xa85
  40a4ee:	b202      	sxth	r2, r0
  40a4f0:	f103 000f 	add.w	r0, r3, #15
  40a4f4:	b2c0      	uxtb	r0, r0
  40a4f6:	4649      	mov	r1, r9
  40a4f8:	464b      	mov	r3, r9
  40a4fa:	f7f8 fc9d 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  lcd_puts(lcd_lastPos, 0, expo ? STR_MAX(MAX_EXPOS) : STR_MAX(MAX_MIXERS));
  40a4fe:	4649      	mov	r1, r9
  40a500:	f89a 0a85 	ldrb.w	r0, [sl, #2693]	; 0xa85
  40a504:	4aa3      	ldr	r2, [pc, #652]	; (40a794 <_Z15menuProcExpoMixhh+0x60c>)
  40a506:	f7f8 f9df 	bl	4028c8 <_Z8lcd_putshhPKc>
  SIMPLE_MENU_NOTITLE(menuTabModel, expo ? e_ExposAll : e_MixAll, s_maxLines);
  40a50a:	2104      	movs	r1, #4
  40a50c:	e673      	b.n	40a1f6 <_Z15menuProcExpoMixhh+0x6e>
  int8_t sub = m_posVert;
#else
  uint8_t sub = m_posVert;
#endif

  switch(_event)
  40a50e:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
  40a512:	f080 80c6 	bcs.w	40a6a2 <_Z15menuProcExpoMixhh+0x51a>
  40a516:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
  40a51a:	f000 82dd 	beq.w	40aad8 <_Z15menuProcExpoMixhh+0x950>
  40a51e:	f200 80b9 	bhi.w	40a694 <_Z15menuProcExpoMixhh+0x50c>
  40a522:	f1bc 0f20 	cmp.w	ip, #32
  40a526:	f47f ae91 	bne.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
      }
      s_copyMode = 0;
      s_copyTgtOfs = 0;
      break;
    case EVT_KEY_BREAK(KEY_MENU):
      if (!s_currCh || (s_copyMode && !s_copyTgtOfs)) {
  40a52a:	f240 1c08 	movw	ip, #264	; 0x108
  40a52e:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  40a532:	f99c 3a8c 	ldrsb.w	r3, [ip, #2700]	; 0xa8c
  40a536:	f895 2e7e 	ldrb.w	r2, [r5, #3710]	; 0xe7e
  40a53a:	2b00      	cmp	r3, #0
  40a53c:	f040 8300 	bne.w	40ab40 <_Z15menuProcExpoMixhh+0x9b8>
        s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
        s_copySrcIdx = s_currIdx;
  40a540:	f89a 3af8 	ldrb.w	r3, [sl, #2808]	; 0xaf8
      s_copyMode = 0;
      s_copyTgtOfs = 0;
      break;
    case EVT_KEY_BREAK(KEY_MENU):
      if (!s_currCh || (s_copyMode && !s_copyTgtOfs)) {
        s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
  40a544:	2a01      	cmp	r2, #1
  40a546:	bf14      	ite	ne
  40a548:	2201      	movne	r2, #1
  40a54a:	2202      	moveq	r2, #2
  40a54c:	f88a 2e7e 	strb.w	r2, [sl, #3710]	; 0xe7e
        s_copySrcIdx = s_currIdx;
  40a550:	f88a 3e81 	strb.w	r3, [sl, #3713]	; 0xe81
        s_copySrcCh = expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1;
  40a554:	f1b9 0f00 	cmp.w	r9, #0
  40a558:	f000 8318 	beq.w	40ab8c <_Z15menuProcExpoMixhh+0xa04>
  40a55c:	4a8e      	ldr	r2, [pc, #568]	; (40a798 <_Z15menuProcExpoMixhh+0x610>)
  40a55e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40a562:	189b      	adds	r3, r3, r2
  40a564:	799b      	ldrb	r3, [r3, #6]
  40a566:	3301      	adds	r3, #1
  40a568:	b2db      	uxtb	r3, r3
        s_copySrcRow = sub;
  40a56a:	9c05      	ldr	r4, [sp, #20]
      break;
    case EVT_KEY_BREAK(KEY_MENU):
      if (!s_currCh || (s_copyMode && !s_copyTgtOfs)) {
        s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
        s_copySrcIdx = s_currIdx;
        s_copySrcCh = expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1;
  40a56c:	f88a 3e82 	strb.w	r3, [sl, #3714]	; 0xe82
        s_copySrcRow = sub;
  40a570:	f88a 4e80 	strb.w	r4, [sl, #3712]	; 0xe80
        break;
  40a574:	e66a      	b.n	40a24c <_Z15menuProcExpoMixhh+0xc4>
        return;
      }
      break;
    case EVT_KEY_LONG(KEY_LEFT):
    case EVT_KEY_LONG(KEY_RIGHT):
      if (s_copyMode && !s_copyTgtOfs) {
  40a576:	f895 3e7e 	ldrb.w	r3, [r5, #3710]	; 0xe7e
  40a57a:	2b00      	cmp	r3, #0
  40a57c:	f43f ae66 	beq.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
  40a580:	f995 3e7f 	ldrsb.w	r3, [r5, #3711]	; 0xe7f
  40a584:	2b00      	cmp	r3, #0
  40a586:	f47f ae61 	bne.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
        if (reachExpoMixCountLimit(expo)) break;
  40a58a:	4648      	mov	r0, r9
  40a58c:	f7f7 f96e 	bl	40186c <_Z22reachExpoMixCountLimith>
  40a590:	2800      	cmp	r0, #0
  40a592:	f47f ae5b 	bne.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
  return &g_model.phaseData[idx];
}

ExpoData *expoaddress(uint8_t idx )
{
  return &g_model.expoData[idx];
  40a596:	f895 3af8 	ldrb.w	r3, [r5, #2808]	; 0xaf8
        s_currCh = (expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1);
  40a59a:	f1b9 0f00 	cmp.w	r9, #0
  40a59e:	f000 8323 	beq.w	40abe8 <_Z15menuProcExpoMixhh+0xa60>
  40a5a2:	4a7d      	ldr	r2, [pc, #500]	; (40a798 <_Z15menuProcExpoMixhh+0x610>)
  40a5a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40a5a8:	189b      	adds	r3, r3, r2
  40a5aa:	799b      	ldrb	r3, [r3, #6]
  40a5ac:	3301      	adds	r3, #1
  40a5ae:	b2db      	uxtb	r3, r3
        if (_event == EVT_KEY_LONG(KEY_RIGHT)) s_currIdx++;
  40a5b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      break;
    case EVT_KEY_LONG(KEY_LEFT):
    case EVT_KEY_LONG(KEY_RIGHT):
      if (s_copyMode && !s_copyTgtOfs) {
        if (reachExpoMixCountLimit(expo)) break;
        s_currCh = (expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1);
  40a5b2:	f240 1e08 	movw	lr, #264	; 0x108
  40a5b6:	f2c2 0e00 	movt	lr, #8192	; 0x2000
        if (_event == EVT_KEY_LONG(KEY_RIGHT)) s_currIdx++;
  40a5ba:	2c84      	cmp	r4, #132	; 0x84
      break;
    case EVT_KEY_LONG(KEY_LEFT):
    case EVT_KEY_LONG(KEY_RIGHT):
      if (s_copyMode && !s_copyTgtOfs) {
        if (reachExpoMixCountLimit(expo)) break;
        s_currCh = (expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1);
  40a5bc:	f88e 3a8c 	strb.w	r3, [lr, #2700]	; 0xa8c
        if (_event == EVT_KEY_LONG(KEY_RIGHT)) s_currIdx++;
  40a5c0:	f89a 1af8 	ldrb.w	r1, [sl, #2808]	; 0xaf8
  40a5c4:	d103      	bne.n	40a5ce <_Z15menuProcExpoMixhh+0x446>
  40a5c6:	3101      	adds	r1, #1
  40a5c8:	b2c9      	uxtb	r1, r1
  40a5ca:	f88a 1af8 	strb.w	r1, [sl, #2808]	; 0xaf8
        insertExpoMix(expo, s_currIdx);
  40a5ce:	4648      	mov	r0, r9
  40a5d0:	f7f7 f9bc 	bl	40194c <_Z13insertExpoMixhh>
        pushMenu(expo ? menuProcExpoOne : menuProcMixOne);
  40a5d4:	4b71      	ldr	r3, [pc, #452]	; (40a79c <_Z15menuProcExpoMixhh+0x614>)
  40a5d6:	4872      	ldr	r0, [pc, #456]	; (40a7a0 <_Z15menuProcExpoMixhh+0x618>)
  40a5d8:	f1b9 0f00 	cmp.w	r9, #0
  40a5dc:	bf18      	it	ne
  40a5de:	4618      	movne	r0, r3
  40a5e0:	f7fc ffe4 	bl	4075ac <_Z8pushMenuPFvhE>
  40a5e4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40a5e8:	4a6e      	ldr	r2, [pc, #440]	; (40a7a4 <_Z15menuProcExpoMixhh+0x61c>)
  40a5ea:	f00c 030f 	and.w	r3, ip, #15
  40a5ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40a5f2:	18d1      	adds	r1, r2, r3
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  40a5f4:	2063      	movs	r0, #99	; 0x63
  40a5f6:	7088      	strb	r0, [r1, #2]
  40a5f8:	5cd1      	ldrb	r1, [r2, r3]
        s_copyMode = 0;
  40a5fa:	2000      	movs	r0, #0
  40a5fc:	f360 1105 	bfi	r1, r0, #4, #2
  40a600:	f88a 0e7e 	strb.w	r0, [sl, #3710]	; 0xe7e
  40a604:	54d1      	strb	r1, [r2, r3]
    }
  }
  s_maxLines = cur;
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  displayWarning(_event_);
}
  40a606:	b00f      	add	sp, #60	; 0x3c
  40a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int8_t sub = m_posVert;
#else
  uint8_t sub = m_posVert;
#endif

  switch(_event)
  40a60c:	2c84      	cmp	r4, #132	; 0x84
  40a60e:	d2b2      	bcs.n	40a576 <_Z15menuProcExpoMixhh+0x3ee>
  40a610:	2c80      	cmp	r4, #128	; 0x80
  40a612:	f000 8264 	beq.w	40aade <_Z15menuProcExpoMixhh+0x956>
  40a616:	2c81      	cmp	r4, #129	; 0x81
  40a618:	f47f ae18 	bne.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
    case EVT_ENTRY_UP:
      s_copyMode = 0;
      s_copyTgtOfs = 0;
      break;
    case EVT_KEY_LONG(KEY_EXIT):
      if (s_copyMode && s_copyTgtOfs == 0) {
  40a61c:	f895 3e7e 	ldrb.w	r3, [r5, #3710]	; 0xe7e
  40a620:	f895 4e7f 	ldrb.w	r4, [r5, #3711]	; 0xe7f
  40a624:	b12b      	cbz	r3, 40a632 <_Z15menuProcExpoMixhh+0x4aa>
  40a626:	b924      	cbnz	r4, 40a632 <_Z15menuProcExpoMixhh+0x4aa>
        deleteExpoMix(expo, s_currIdx);
  40a628:	f895 1af8 	ldrb.w	r1, [r5, #2808]	; 0xaf8
  40a62c:	4648      	mov	r0, r9
  40a62e:	f7f7 f939 	bl	4018a4 <_Z13deleteExpoMixhh>
  40a632:	f240 1008 	movw	r0, #264	; 0x108
  40a636:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40a63a:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
  40a63e:	2263      	movs	r2, #99	; 0x63
  40a640:	f36f 1305 	bfc	r3, #4, #2
  40a644:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
  40a648:	f880 30a3 	strb.w	r3, [r0, #163]	; 0xa3
      }
      killEvents(_event);
      // no break
    case EVT_KEY_BREAK(KEY_EXIT):
      if (s_copyTgtOfs) {
  40a64c:	b1e4      	cbz	r4, 40a688 <_Z15menuProcExpoMixhh+0x500>
        // cancel the current copy / move operation
        if (s_copyMode == COPY_MODE) {
  40a64e:	f89a 3e7e 	ldrb.w	r3, [sl, #3710]	; 0xe7e
  40a652:	4e55      	ldr	r6, [pc, #340]	; (40a7a8 <_Z15menuProcExpoMixhh+0x620>)
  40a654:	2b01      	cmp	r3, #1
  40a656:	f000 82a1 	beq.w	40ab9c <_Z15menuProcExpoMixhh+0xa14>
          deleteExpoMix(expo, s_currIdx);
        }
        else {
          do {
            swapExpoMix(expo, s_currIdx, s_copyTgtOfs > 0);
  40a65a:	b265      	sxtb	r5, r4
  40a65c:	2d00      	cmp	r5, #0
  40a65e:	bfd4      	ite	le
  40a660:	2200      	movle	r2, #0
  40a662:	2201      	movgt	r2, #1
  40a664:	4648      	mov	r0, r9
  40a666:	4951      	ldr	r1, [pc, #324]	; (40a7ac <_Z15menuProcExpoMixhh+0x624>)
  40a668:	f7f7 fabc 	bl	401be4 <_Z11swapExpoMixhRhh>
            if (s_copyTgtOfs < 0)
  40a66c:	2d00      	cmp	r5, #0
  40a66e:	f2c0 822e 	blt.w	40aace <_Z15menuProcExpoMixhh+0x946>
              s_copyTgtOfs++;
            else
              s_copyTgtOfs--;
  40a672:	3c01      	subs	r4, #1
  40a674:	b2e4      	uxtb	r4, r4
  40a676:	f886 4e7f 	strb.w	r4, [r6, #3711]	; 0xe7f
        // cancel the current copy / move operation
        if (s_copyMode == COPY_MODE) {
          deleteExpoMix(expo, s_currIdx);
        }
        else {
          do {
  40a67a:	2c00      	cmp	r4, #0
  40a67c:	d1ed      	bne.n	40a65a <_Z15menuProcExpoMixhh+0x4d2>
              s_copyTgtOfs++;
            else
              s_copyTgtOfs--;
          } while (s_copyTgtOfs != 0);
        }
        sub = m_posVert = s_copySrcRow;
  40a67e:	f89a 4e80 	ldrb.w	r4, [sl, #3712]	; 0xe80
  40a682:	9405      	str	r4, [sp, #20]
  40a684:	f88a 4c34 	strb.w	r4, [sl, #3124]	; 0xc34
        break;
#endif
    case EVT_KEY_LONG(KEY_MENU):
      killEvents(_event);
      if (s_copyTgtOfs) {
        s_copyMode = 0;
  40a688:	2300      	movs	r3, #0
  40a68a:	f88a 3e7e 	strb.w	r3, [sl, #3710]	; 0xe7e
        s_copyTgtOfs = 0;
  40a68e:	f88a 3e7f 	strb.w	r3, [sl, #3711]	; 0xe7f
        }
        pushMenu(expo ? menuProcExpoOne : menuProcMixOne);
        s_copyMode = 0;
        return;
      }
      break;
  40a692:	e5db      	b.n	40a24c <_Z15menuProcExpoMixhh+0xc4>
  int8_t sub = m_posVert;
#else
  uint8_t sub = m_posVert;
#endif

  switch(_event)
  40a694:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40a698:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
  40a69c:	2b01      	cmp	r3, #1
  40a69e:	f63f add5 	bhi.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
      break;
    case EVT_KEY_REPT(KEY_UP):
    case EVT_KEY_FIRST(KEY_UP):
    case EVT_KEY_REPT(KEY_DOWN):
    case EVT_KEY_FIRST(KEY_DOWN):
      if (s_copyMode) {
  40a6a2:	f89a 3e7e 	ldrb.w	r3, [sl, #3710]	; 0xe7e
  40a6a6:	4a40      	ldr	r2, [pc, #256]	; (40a7a8 <_Z15menuProcExpoMixhh+0x620>)
  40a6a8:	2b00      	cmp	r3, #0
  40a6aa:	f43f adcf 	beq.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
        uint8_t next_ofs = (key == KEY_UP ? s_copyTgtOfs - 1 : s_copyTgtOfs + 1);
  40a6ae:	f892 2e7f 	ldrb.w	r2, [r2, #3711]	; 0xe7f
  40a6b2:	1e56      	subs	r6, r2, #1
  40a6b4:	2c03      	cmp	r4, #3
  40a6b6:	b2f6      	uxtb	r6, r6
  40a6b8:	d001      	beq.n	40a6be <_Z15menuProcExpoMixhh+0x536>
  40a6ba:	1c56      	adds	r6, r2, #1
  40a6bc:	b2f6      	uxtb	r6, r6

        if (s_copyTgtOfs==0 && s_copyMode==COPY_MODE) {
  40a6be:	b912      	cbnz	r2, 40a6c6 <_Z15menuProcExpoMixhh+0x53e>
  40a6c0:	2b01      	cmp	r3, #1
  40a6c2:	f000 8247 	beq.w	40ab54 <_Z15menuProcExpoMixhh+0x9cc>
          if (reachExpoMixCountLimit(expo)) break;
          copyExpoMix(expo, s_currIdx);
          if (key==KEY_DOWN) s_currIdx++;
          else if (sub-s_pgOfs >= 6) s_pgOfs++;
        }
        else if (next_ofs==0 && s_copyMode==COPY_MODE) {
  40a6c6:	b916      	cbnz	r6, 40a6ce <_Z15menuProcExpoMixhh+0x546>
  40a6c8:	2b01      	cmp	r3, #1
  40a6ca:	f000 826d 	beq.w	40aba8 <_Z15menuProcExpoMixhh+0xa20>
          deleteExpoMix(expo, s_currIdx);
          if (key==KEY_UP) s_currIdx--;
        }
        else {
          // only swap the mix with its neighbor
          if (!swapExpoMix(expo, s_currIdx, key==KEY_UP)) break;
  40a6ce:	f1a4 0b03 	sub.w	fp, r4, #3
  40a6d2:	f1db 0200 	rsbs	r2, fp, #0
  40a6d6:	eb42 020b 	adc.w	r2, r2, fp
  40a6da:	4648      	mov	r0, r9
  40a6dc:	4933      	ldr	r1, [pc, #204]	; (40a7ac <_Z15menuProcExpoMixhh+0x624>)
  40a6de:	f7f7 fa81 	bl	401be4 <_Z11swapExpoMixhRhh>
  40a6e2:	2800      	cmp	r0, #0
  40a6e4:	f43f adb2 	beq.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
        }

        s_copyTgtOfs = next_ofs;
  40a6e8:	f88a 6e7f 	strb.w	r6, [sl, #3711]	; 0xe7f
  40a6ec:	e5ae      	b.n	40a24c <_Z15menuProcExpoMixhh+0xc4>
  uint8_t event = _event;
  uint8_t key = (event & 0x1f);

  if (s_copyMode) {
    if (key == KEY_EXIT)
      event -= KEY_EXIT;
  40a6ee:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40a6f2:	f10c 35ff 	add.w	r5, ip, #4294967295
  40a6f6:	b2ed      	uxtb	r5, r5
  40a6f8:	e55f      	b.n	40a1ba <_Z15menuProcExpoMixhh+0x32>
          if (expo)
            displayExpoLine(cur, i, ch, mixCnt, sub, _event);
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
  40a6fa:	1c66      	adds	r6, r4, #1
  40a6fc:	b2f6      	uxtb	r6, r6
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
      }
      uint8_t mixCnt = 0;
      do {
  40a6fe:	f1b9 0f00 	cmp.w	r9, #0
  40a702:	f47f aea7 	bne.w	40a454 <_Z15menuProcExpoMixhh+0x2cc>
  40a706:	2d3f      	cmp	r5, #63	; 0x3f
  40a708:	f63f aeae 	bhi.w	40a468 <_Z15menuProcExpoMixhh+0x2e0>
  40a70c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40a710:	f89c 300b 	ldrb.w	r3, [ip, #11]
  40a714:	2b00      	cmp	r3, #0
  40a716:	f43f aea7 	beq.w	40a468 <_Z15menuProcExpoMixhh+0x2e0>
  40a71a:	f89c 3000 	ldrb.w	r3, [ip]
  40a71e:	3301      	adds	r3, #1
  40a720:	459b      	cmp	fp, r3
  40a722:	f47f aea1 	bne.w	40a468 <_Z15menuProcExpoMixhh+0x2e0>
          if (expo)
            displayExpoLine(cur, i, ch, mixCnt, sub, _event);
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
  40a726:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a72a:	3501      	adds	r5, #1
  40a72c:	f10c 0201 	add.w	r2, ip, #1
  40a730:	f8dd c020 	ldr.w	ip, [sp, #32]
  40a734:	b2ed      	uxtb	r5, r5
  40a736:	f10c 0c07 	add.w	ip, ip, #7
  40a73a:	f8cd c020 	str.w	ip, [sp, #32]
  40a73e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40a742:	b2d2      	uxtb	r2, r2
  40a744:	f10c 0c0f 	add.w	ip, ip, #15
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
  40a748:	f105 38ff 	add.w	r8, r5, #4294967295
      }
      uint8_t mixCnt = 0;
      do {
  40a74c:	4634      	mov	r4, r6
          if (expo)
            displayExpoLine(cur, i, ch, mixCnt, sub, _event);
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
  40a74e:	f89a 3e7d 	ldrb.w	r3, [sl, #3709]	; 0xe7d
  40a752:	f8cd c01c 	str.w	ip, [sp, #28]
  40a756:	9209      	str	r2, [sp, #36]	; 0x24
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
  40a758:	fa5f f888 	uxtb.w	r8, r8
      }
      uint8_t mixCnt = 0;
      do {
        if (s_copyMode) {
  40a75c:	2f00      	cmp	r7, #0
  40a75e:	f47f adfd 	bne.w	40a35c <_Z15menuProcExpoMixhh+0x1d4>
          if (s_currIdx == i) {
            sub = m_posVert = cur;
            s_currCh = ch;
          }
        }
        else if (sub == cur) {
  40a762:	f8dd c014 	ldr.w	ip, [sp, #20]
  40a766:	45b4      	cmp	ip, r6
          s_currIdx = i;
  40a768:	bf04      	itt	eq
  40a76a:	f88a 8af8 	strbeq.w	r8, [sl, #2808]	; 0xaf8
  40a76e:	4664      	moveq	r4, ip
  40a770:	e5fc      	b.n	40a36c <_Z15menuProcExpoMixhh+0x1e4>
            uint8_t y = (cur-s_pgOfs)*FH;
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
            cur++;
          }
          if (s_currIdx == i) {
            sub = m_posVert = cur;
  40a772:	f241 2000 	movw	r0, #4608	; 0x1200
            s_currCh = ch;
  40a776:	f240 1108 	movw	r1, #264	; 0x108
            uint8_t y = (cur-s_pgOfs)*FH;
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
            cur++;
          }
          if (s_currIdx == i) {
            sub = m_posVert = cur;
  40a77a:	f2c2 0000 	movt	r0, #8192	; 0x2000
            s_currCh = ch;
  40a77e:	f2c2 0100 	movt	r1, #8192	; 0x2000
            uint8_t y = (cur-s_pgOfs)*FH;
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
            cur++;
          }
          if (s_currIdx == i) {
            sub = m_posVert = cur;
  40a782:	f880 4c34 	strb.w	r4, [r0, #3124]	; 0xc34
            s_currCh = ch;
  40a786:	f881 ba8c 	strb.w	fp, [r1, #2700]	; 0xa8c
            uint8_t y = (cur-s_pgOfs)*FH;
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
            cur++;
          }
          if (s_currIdx == i) {
            sub = m_posVert = cur;
  40a78a:	9405      	str	r4, [sp, #20]
  40a78c:	e5ee      	b.n	40a36c <_Z15menuProcExpoMixhh+0x1e4>
  40a78e:	bf00      	nop
  40a790:	00410ca4 	.word	0x00410ca4
  40a794:	0041145c 	.word	0x0041145c
  40a798:	200006b4 	.word	0x200006b4
  40a79c:	0040b225 	.word	0x0040b225
  40a7a0:	0040ae0d 	.word	0x0040ae0d
  40a7a4:	200001a8 	.word	0x200001a8
  40a7a8:	20001200 	.word	0x20001200
  40a7ac:	20001cf8 	.word	0x20001cf8
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
      }
      uint8_t mixCnt = 0;
      do {
        if (s_copyMode) {
          if (s_copyMode == MOVE_MODE && s_pgOfs < cur && cur-s_pgOfs < 8 && s_copySrcCh == ch && s_copyTgtOfs != 0 && i == (s_copySrcIdx + (s_copyTgtOfs<0))) {
  40a7b0:	429e      	cmp	r6, r3
  40a7b2:	f67f add6 	bls.w	40a362 <_Z15menuProcExpoMixhh+0x1da>
  40a7b6:	1af2      	subs	r2, r6, r3
  40a7b8:	2a07      	cmp	r2, #7
  40a7ba:	f73f add2 	bgt.w	40a362 <_Z15menuProcExpoMixhh+0x1da>
  40a7be:	f89a 1e82 	ldrb.w	r1, [sl, #3714]	; 0xe82
  40a7c2:	4559      	cmp	r1, fp
  40a7c4:	f47f adcd 	bne.w	40a362 <_Z15menuProcExpoMixhh+0x1da>
  40a7c8:	f241 2000 	movw	r0, #4608	; 0x1200
  40a7cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40a7d0:	f890 1e7f 	ldrb.w	r1, [r0, #3711]	; 0xe7f
  40a7d4:	2900      	cmp	r1, #0
  40a7d6:	f43f adc4 	beq.w	40a362 <_Z15menuProcExpoMixhh+0x1da>
  40a7da:	f890 0e81 	ldrb.w	r0, [r0, #3713]	; 0xe81
  40a7de:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
  40a7e2:	4588      	cmp	r8, r1
  40a7e4:	f47f adbd 	bne.w	40a362 <_Z15menuProcExpoMixhh+0x1da>
            uint8_t y = (cur-s_pgOfs)*FH;
  40a7e8:	00d2      	lsls	r2, r2, #3
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
  40a7ea:	1e51      	subs	r1, r2, #1
  40a7ec:	f04f 0c00 	mov.w	ip, #0
  40a7f0:	2309      	movs	r3, #9
  40a7f2:	2455      	movs	r4, #85	; 0x55
  40a7f4:	b2c9      	uxtb	r1, r1
  40a7f6:	2016      	movs	r0, #22
  40a7f8:	226a      	movs	r2, #106	; 0x6a
  40a7fa:	e88d 1010 	stmia.w	sp, {r4, ip}
  40a7fe:	f7f8 fb83 	bl	402f08 <_Z8lcd_recthhhhhh>
            cur++;
  40a802:	f241 2c00 	movw	ip, #4608	; 0x1200
  40a806:	1c74      	adds	r4, r6, #1
  40a808:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  40a80c:	f89c 3e7d 	ldrb.w	r3, [ip, #3709]	; 0xe7d
  40a810:	b2e4      	uxtb	r4, r4
  40a812:	e5a6      	b.n	40a362 <_Z15menuProcExpoMixhh+0x1da>
static uint8_t s_copySrcCh;

inline void displayMixerLine(uint8_t row, uint8_t mix, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  MixData *md = mixaddress(mix);
  40a814:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40a818:	ebc8 1608 	rsb	r6, r8, r8, lsl #4
  40a81c:	4466      	add	r6, ip
  if (idx > 0)
  40a81e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
static uint8_t s_copySrcIdx;
static uint8_t s_copySrcCh;

inline void displayMixerLine(uint8_t row, uint8_t mix, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  40a822:	00db      	lsls	r3, r3, #3
  40a824:	b2db      	uxtb	r3, r3
  MixData *md = mixaddress(mix);
  40a826:	3615      	adds	r6, #21
  if (idx > 0)
  40a828:	f1bc 0f01 	cmp.w	ip, #1
static uint8_t s_copySrcIdx;
static uint8_t s_copySrcCh;

inline void displayMixerLine(uint8_t row, uint8_t mix, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  40a82c:	9304      	str	r3, [sp, #16]
  MixData *md = mixaddress(mix);
  if (idx > 0)
  40a82e:	f040 809c 	bne.w	40a96a <_Z15menuProcExpoMixhh+0x7e2>
    lcd_putsiAtt(1*FW+0, y, STR_VMLTPX2, md->mltpx, 0);

  putsMixerSource(4*FW+0, y, md->srcRaw, 0);
  40a832:	2300      	movs	r3, #0
  40a834:	2018      	movs	r0, #24

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a836:	ebb7 0c03 	subs.w	ip, r7, r3
  40a83a:	bf18      	it	ne
  40a83c:	f04f 0c01 	movne.w	ip, #1
  uint8_t y = (row-s_pgOfs)*FH;
  MixData *md = mixaddress(mix);
  if (idx > 0)
    lcd_putsiAtt(1*FW+0, y, STR_VMLTPX2, md->mltpx, 0);

  putsMixerSource(4*FW+0, y, md->srcRaw, 0);
  40a840:	7af2      	ldrb	r2, [r6, #11]
  40a842:	9904      	ldr	r1, [sp, #16]

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a844:	f8cd c018 	str.w	ip, [sp, #24]
  uint8_t y = (row-s_pgOfs)*FH;
  MixData *md = mixaddress(mix);
  if (idx > 0)
    lcd_putsiAtt(1*FW+0, y, STR_VMLTPX2, md->mltpx, 0);

  putsMixerSource(4*FW+0, y, md->srcRaw, 0);
  40a848:	f7f8 feac 	bl	4035a4 <_Z15putsMixerSourcehhhh>

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a84c:	9b06      	ldr	r3, [sp, #24]
  40a84e:	f8dd c014 	ldr.w	ip, [sp, #20]
  lcd_outdezAtt(11*FW+3, y, md->weight, attr);
  40a852:	f996 2002 	ldrsb.w	r2, [r6, #2]
  if (idx > 0)
    lcd_putsiAtt(1*FW+0, y, STR_VMLTPX2, md->mltpx, 0);

  putsMixerSource(4*FW+0, y, md->srcRaw, 0);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a856:	45a4      	cmp	ip, r4
  40a858:	bf18      	it	ne
  40a85a:	f043 0301 	orrne.w	r3, r3, #1
  lcd_outdezAtt(11*FW+3, y, md->weight, attr);
  40a85e:	2045      	movs	r0, #69	; 0x45
  40a860:	9904      	ldr	r1, [sp, #16]
  if (idx > 0)
    lcd_putsiAtt(1*FW+0, y, STR_VMLTPX2, md->mltpx, 0);

  putsMixerSource(4*FW+0, y, md->srcRaw, 0);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  40a862:	2b00      	cmp	r3, #0
  40a864:	d051      	beq.n	40a90a <_Z15menuProcExpoMixhh+0x782>
  lcd_outdezAtt(11*FW+3, y, md->weight, attr);
  40a866:	2300      	movs	r3, #0
  40a868:	f7f8 fae6 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  if (attr != 0)
    CHECK_INCDEC_MODELVAR(event, md->weight, -125, 125);

  if (md->curve) putsCurve(12*FW+2, y, md->curve);
  40a86c:	7972      	ldrb	r2, [r6, #5]
  40a86e:	2a00      	cmp	r2, #0
  40a870:	d15a      	bne.n	40a928 <_Z15menuProcExpoMixhh+0x7a0>
  if (md->swtch) putsSwitches(15*FW+5, y, md->swtch);
  40a872:	78f2      	ldrb	r2, [r6, #3]
  40a874:	2a00      	cmp	r2, #0
  40a876:	d160      	bne.n	40a93a <_Z15menuProcExpoMixhh+0x7b2>

  char cs = ' ';
  if (md->speedDown || md->speedUp)
  40a878:	7ab3      	ldrb	r3, [r6, #10]
    cs = 'S';
  40a87a:	2253      	movs	r2, #83	; 0x53

  if (md->curve) putsCurve(12*FW+2, y, md->curve);
  if (md->swtch) putsSwitches(15*FW+5, y, md->swtch);

  char cs = ' ';
  if (md->speedDown || md->speedUp)
  40a87c:	b923      	cbnz	r3, 40a888 <_Z15menuProcExpoMixhh+0x700>
  40a87e:	7a72      	ldrb	r2, [r6, #9]
    CHECK_INCDEC_MODELVAR(event, md->weight, -125, 125);

  if (md->curve) putsCurve(12*FW+2, y, md->curve);
  if (md->swtch) putsSwitches(15*FW+5, y, md->swtch);

  char cs = ' ';
  40a880:	2a00      	cmp	r2, #0
  40a882:	bf14      	ite	ne
  40a884:	2253      	movne	r2, #83	; 0x53
  40a886:	2220      	moveq	r2, #32
  if (md->speedDown || md->speedUp)
    cs = 'S';
  if ((md->delayUp || md->delayDown))
  40a888:	79f3      	ldrb	r3, [r6, #7]
  40a88a:	b90b      	cbnz	r3, 40a890 <_Z15menuProcExpoMixhh+0x708>
  40a88c:	7a33      	ldrb	r3, [r6, #8]
  40a88e:	b11b      	cbz	r3, 40a898 <_Z15menuProcExpoMixhh+0x710>
    cs = (cs =='S' ? '*' : 'D');
  40a890:	2a53      	cmp	r2, #83	; 0x53
  40a892:	bf14      	ite	ne
  40a894:	2244      	movne	r2, #68	; 0x44
  40a896:	222a      	moveq	r2, #42	; 0x2a
  lcd_putcAtt(18*FW+7, y, cs, 0);
  40a898:	2073      	movs	r0, #115	; 0x73
  40a89a:	9904      	ldr	r1, [sp, #16]
  40a89c:	2300      	movs	r3, #0
  40a89e:	f7f7 fee5 	bl	40266c <_Z11lcd_putcAtthhhh>
  
#ifdef FLIGHT_PHASES
  if (md->phase)
  40a8a2:	7872      	ldrb	r2, [r6, #1]
  40a8a4:	2a00      	cmp	r2, #0
  40a8a6:	d169      	bne.n	40a97c <_Z15menuProcExpoMixhh+0x7f4>
    putsFlightPhase(20*FW+2, y, md->phase, CONDENSED);
#endif
  
  if (s_copyMode) {
  40a8a8:	9806      	ldr	r0, [sp, #24]
  40a8aa:	b170      	cbz	r0, 40a8ca <_Z15menuProcExpoMixhh+0x742>
    if ((s_copyMode==COPY_MODE || s_copyTgtOfs == 0) && s_copySrcCh == ch && mix == (s_copySrcIdx + (s_copyTgtOfs<0))) {
  40a8ac:	2f01      	cmp	r7, #1
  40a8ae:	d002      	beq.n	40a8b6 <_Z15menuProcExpoMixhh+0x72e>
  40a8b0:	f99a 3e7f 	ldrsb.w	r3, [sl, #3711]	; 0xe7f
  40a8b4:	b923      	cbnz	r3, 40a8c0 <_Z15menuProcExpoMixhh+0x738>
  40a8b6:	f89a 3e82 	ldrb.w	r3, [sl, #3714]	; 0xe82
  40a8ba:	455b      	cmp	r3, fp
  40a8bc:	f000 80e3 	beq.w	40aa86 <_Z15menuProcExpoMixhh+0x8fe>
      /* draw a border around the raw on selection mode (copy/move) */
      lcd_rect(22, y-1, DISPLAY_W-1-21, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
    }

    if (row == cur) {
  40a8c0:	f8dd c014 	ldr.w	ip, [sp, #20]
  40a8c4:	45a4      	cmp	ip, r4
  40a8c6:	f000 80a2 	beq.w	40aa0e <_Z15menuProcExpoMixhh+0x886>
          if (expo)
            displayExpoLine(cur, i, ch, mixCnt, sub, _event);
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
  40a8ca:	1c66      	adds	r6, r4, #1
  40a8cc:	b2f6      	uxtb	r6, r6
  40a8ce:	f89a 7e7e 	ldrb.w	r7, [sl, #3710]	; 0xe7e
  40a8d2:	e718      	b.n	40a706 <_Z15menuProcExpoMixhh+0x57e>
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    MixData *md=NULL; ExpoData *ed=NULL;
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
  40a8d4:	48bd      	ldr	r0, [pc, #756]	; (40abcc <_Z15menuProcExpoMixhh+0xa44>)
  40a8d6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
  40a8da:	f503 638e 	add.w	r3, r3, #1136	; 0x470
  40a8de:	18c3      	adds	r3, r0, r3
  40a8e0:	f103 0805 	add.w	r8, r3, #5
  40a8e4:	f898 2001 	ldrb.w	r2, [r8, #1]
  40a8e8:	900a      	str	r0, [sp, #40]	; 0x28
  40a8ea:	3201      	adds	r2, #1
  40a8ec:	4593      	cmp	fp, r2
  40a8ee:	f47f acbb 	bne.w	40a268 <_Z15menuProcExpoMixhh+0xe0>
  40a8f2:	795b      	ldrb	r3, [r3, #5]
  s_currCh = 0;
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    MixData *md=NULL; ExpoData *ed=NULL;
  40a8f4:	2400      	movs	r4, #0
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
  40a8f6:	2b00      	cmp	r3, #0
  40a8f8:	f47f ad02 	bne.w	40a300 <_Z15menuProcExpoMixhh+0x178>
  40a8fc:	e4b4      	b.n	40a268 <_Z15menuProcExpoMixhh+0xe0>
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
      }
      uint8_t mixCnt = 0;
      do {
  40a8fe:	f89c 3000 	ldrb.w	r3, [ip]
  40a902:	2b00      	cmp	r3, #0
  40a904:	f47f af0f 	bne.w	40a726 <_Z15menuProcExpoMixhh+0x59e>
  40a908:	e5ae      	b.n	40a468 <_Z15menuProcExpoMixhh+0x2e0>
    lcd_putsiAtt(1*FW+0, y, STR_VMLTPX2, md->mltpx, 0);

  putsMixerSource(4*FW+0, y, md->srcRaw, 0);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  lcd_outdezAtt(11*FW+3, y, md->weight, attr);
  40a90a:	2302      	movs	r3, #2
  40a90c:	f7f8 fa94 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  if (attr != 0)
    CHECK_INCDEC_MODELVAR(event, md->weight, -125, 125);
  40a910:	f06f 027c 	mvn.w	r2, #124	; 0x7c
  40a914:	f996 1002 	ldrsb.w	r1, [r6, #2]
  40a918:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a91a:	237d      	movs	r3, #125	; 0x7d
  40a91c:	f7fc fca4 	bl	407268 <_Z16checkIncDecModelhaaa>

  if (md->curve) putsCurve(12*FW+2, y, md->curve);
  40a920:	7972      	ldrb	r2, [r6, #5]
  putsMixerSource(4*FW+0, y, md->srcRaw, 0);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  lcd_outdezAtt(11*FW+3, y, md->weight, attr);
  if (attr != 0)
    CHECK_INCDEC_MODELVAR(event, md->weight, -125, 125);
  40a922:	70b0      	strb	r0, [r6, #2]

  if (md->curve) putsCurve(12*FW+2, y, md->curve);
  40a924:	2a00      	cmp	r2, #0
  40a926:	d0a4      	beq.n	40a872 <_Z15menuProcExpoMixhh+0x6ea>
  40a928:	b252      	sxtb	r2, r2
  40a92a:	204a      	movs	r0, #74	; 0x4a
  40a92c:	9904      	ldr	r1, [sp, #16]
  40a92e:	2300      	movs	r3, #0
  40a930:	f7f8 fe78 	bl	403624 <_Z9putsCurvehhah>
  if (md->swtch) putsSwitches(15*FW+5, y, md->swtch);
  40a934:	78f2      	ldrb	r2, [r6, #3]
  40a936:	2a00      	cmp	r2, #0
  40a938:	d09e      	beq.n	40a878 <_Z15menuProcExpoMixhh+0x6f0>
  40a93a:	b252      	sxtb	r2, r2
  40a93c:	205f      	movs	r0, #95	; 0x5f
  40a93e:	9904      	ldr	r1, [sp, #16]
  40a940:	2300      	movs	r3, #0
  40a942:	f7f8 fdd7 	bl	4034f4 <_Z12putsSwitcheshhah>
  40a946:	e797      	b.n	40a878 <_Z15menuProcExpoMixhh+0x6f0>
{
  uint8_t y = (row-s_pgOfs)*FH;
  ExpoData *ed = expoaddress(expo);

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
  lcd_outdezAtt(6*FW-2, y, ed->weight, attr);
  40a948:	9904      	ldr	r1, [sp, #16]
  40a94a:	2302      	movs	r3, #2
  40a94c:	f8cd c00c 	str.w	ip, [sp, #12]
  40a950:	f7f8 fa72 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  if (attr != 0)
    CHECK_INCDEC_MODELVAR(event, ed->weight, 0, 100);
  40a954:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40a958:	f996 1005 	ldrsb.w	r1, [r6, #5]
  40a95c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a95e:	4662      	mov	r2, ip
  40a960:	2364      	movs	r3, #100	; 0x64
  40a962:	f7fc fc81 	bl	407268 <_Z16checkIncDecModelhaaa>
  40a966:	7170      	strb	r0, [r6, #5]
  40a968:	e530      	b.n	40a3cc <_Z15menuProcExpoMixhh+0x244>
inline void displayMixerLine(uint8_t row, uint8_t mix, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
  uint8_t y = (row-s_pgOfs)*FH;
  MixData *md = mixaddress(mix);
  if (idx > 0)
    lcd_putsiAtt(1*FW+0, y, STR_VMLTPX2, md->mltpx, 0);
  40a96a:	7933      	ldrb	r3, [r6, #4]
  40a96c:	2006      	movs	r0, #6
  40a96e:	9904      	ldr	r1, [sp, #16]
  40a970:	4a97      	ldr	r2, [pc, #604]	; (40abd0 <_Z15menuProcExpoMixhh+0xa48>)
  40a972:	f8cd 9000 	str.w	r9, [sp]
  40a976:	f7f7 ff7b 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  40a97a:	e75a      	b.n	40a832 <_Z15menuProcExpoMixhh+0x6aa>
    cs = (cs =='S' ? '*' : 'D');
  lcd_putcAtt(18*FW+7, y, cs, 0);
  
#ifdef FLIGHT_PHASES
  if (md->phase)
    putsFlightPhase(20*FW+2, y, md->phase, CONDENSED);
  40a97c:	b252      	sxtb	r2, r2
  40a97e:	207a      	movs	r0, #122	; 0x7a
  40a980:	9904      	ldr	r1, [sp, #16]
  40a982:	2308      	movs	r3, #8
  40a984:	f7f8 fe18 	bl	4035b8 <_Z15putsFlightPhasehhah>
  40a988:	e78e      	b.n	40a8a8 <_Z15menuProcExpoMixhh+0x720>
      }
      cur++;
    }
  }
  s_maxLines = cur;
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  40a98a:	f8dd c014 	ldr.w	ip, [sp, #20]
  40a98e:	1e73      	subs	r3, r6, #1
        }
      }
      cur++;
    }
  }
  s_maxLines = cur;
  40a990:	f240 0400 	movw	r4, #0
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  displayWarning(_event_);
  40a994:	980d      	ldr	r0, [sp, #52]	; 0x34
        }
      }
      cur++;
    }
  }
  s_maxLines = cur;
  40a996:	f2c2 0400 	movt	r4, #8192	; 0x2000
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  40a99a:	459c      	cmp	ip, r3
        }
      }
      cur++;
    }
  }
  s_maxLines = cur;
  40a99c:	f884 6100 	strb.w	r6, [r4, #256]	; 0x100
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  40a9a0:	bfa8      	it	ge
  40a9a2:	f88a 3c34 	strbge.w	r3, [sl, #3124]	; 0xc34
  displayWarning(_event_);
}
  40a9a6:	b00f      	add	sp, #60	; 0x3c
  40a9a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      cur++;
    }
  }
  s_maxLines = cur;
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  displayWarning(_event_);
  40a9ac:	f7f8 bc5a 	b.w	403264 <_Z14displayWarningh>
      }
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, attr);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, attr); // show CHx
  40a9b0:	4648      	mov	r0, r9
  40a9b2:	465a      	mov	r2, fp
  40a9b4:	f7f8 fd62 	bl	40347c <_Z7putsChnhhhh>
        if (s_copyMode == MOVE_MODE && s_copySrcCh == ch) {
  40a9b8:	f89a 3e7e 	ldrb.w	r3, [sl, #3710]	; 0xe7e
  40a9bc:	2b02      	cmp	r3, #2
  40a9be:	f47f ac7b 	bne.w	40a2b8 <_Z15menuProcExpoMixhh+0x130>
  40a9c2:	f241 2200 	movw	r2, #4608	; 0x1200
  40a9c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40a9ca:	f892 3e82 	ldrb.w	r3, [r2, #3714]	; 0xe82
  40a9ce:	455b      	cmp	r3, fp
  40a9d0:	f47f ac72 	bne.w	40a2b8 <_Z15menuProcExpoMixhh+0x130>
          uint8_t y = (cur-s_pgOfs)*FH;
  40a9d4:	f892 1e7d 	ldrb.w	r1, [r2, #3709]	; 0xe7d
          lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
  40a9d8:	2355      	movs	r3, #85	; 0x55
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, attr);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, attr); // show CHx
        if (s_copyMode == MOVE_MODE && s_copySrcCh == ch) {
          uint8_t y = (cur-s_pgOfs)*FH;
  40a9da:	1a71      	subs	r1, r6, r1
  40a9dc:	00c9      	lsls	r1, r1, #3
          lcd_rect(22, y-1, DISPLAY_W-1-21, 9, DOTTED);
  40a9de:	3901      	subs	r1, #1
  40a9e0:	f04f 0c00 	mov.w	ip, #0
  40a9e4:	e88d 1008 	stmia.w	sp, {r3, ip}
  40a9e8:	b2c9      	uxtb	r1, r1
  40a9ea:	2016      	movs	r0, #22
  40a9ec:	226a      	movs	r2, #106	; 0x6a
  40a9ee:	2309      	movs	r3, #9
  40a9f0:	f7f8 fa8a 	bl	402f08 <_Z8lcd_recthhhhhh>
  40a9f4:	e460      	b.n	40a2b8 <_Z15menuProcExpoMixhh+0x130>
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->srcRaw && md->destCh+1 == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
        if (expo)
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
  40a9f6:	4648      	mov	r0, r9
  40a9f8:	464b      	mov	r3, r9
  40a9fa:	465a      	mov	r2, fp
  40a9fc:	f7f8 fd3e 	bl	40347c <_Z7putsChnhhhh>
  40aa00:	f241 2000 	movw	r0, #4608	; 0x1200
  40aa04:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40aa08:	f890 3e7d 	ldrb.w	r3, [r0, #3709]	; 0xe7d
  40aa0c:	e490      	b.n	40a330 <_Z15menuProcExpoMixhh+0x1a8>
      lcd_rect(22, y-1, DISPLAY_W-1-21, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
    }

    if (row == cur) {
      /* invert the raw when it's the current one */
      lcd_filled_rect(22, y-1, DISPLAY_W-1-21, 9);
  40aa0e:	f8dd c010 	ldr.w	ip, [sp, #16]
  40aa12:	20ff      	movs	r0, #255	; 0xff
  40aa14:	2300      	movs	r3, #0
  40aa16:	f10c 31ff 	add.w	r1, ip, #4294967295
  40aa1a:	e88d 0009 	stmia.w	sp, {r0, r3}
  40aa1e:	b249      	sxtb	r1, r1
  40aa20:	2016      	movs	r0, #22
  40aa22:	226a      	movs	r2, #106	; 0x6a
  40aa24:	2309      	movs	r3, #9
  40aa26:	f7f8 fb99 	bl	40315c <_Z15lcd_filled_recthahhhh>
  40aa2a:	e74e      	b.n	40a8ca <_Z15menuProcExpoMixhh+0x742>
      /* draw a border around the raw on selection mode (copy/move) */
      lcd_rect(18, y-1, DISPLAY_W-18, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
    }
    if (row == cur) {
      /* invert the raw when it's the current one */
      lcd_filled_rect(19, y, DISPLAY_W-20, 7);
  40aa2c:	f8dd c010 	ldr.w	ip, [sp, #16]
  40aa30:	20ff      	movs	r0, #255	; 0xff
  40aa32:	2300      	movs	r3, #0
  40aa34:	e88d 0009 	stmia.w	sp, {r0, r3}
  40aa38:	fa4f f18c 	sxtb.w	r1, ip
  40aa3c:	2013      	movs	r0, #19
  40aa3e:	226c      	movs	r2, #108	; 0x6c
  40aa40:	2307      	movs	r3, #7
  40aa42:	f7f8 fb8b 	bl	40315c <_Z15lcd_filled_recthahhhh>
  40aa46:	e503      	b.n	40a450 <_Z15menuProcExpoMixhh+0x2c8>
  putsSwitches(13*FW+4, y, ed->swtch, 0); // normal switches
  if (ed->mode!=3) lcd_putc(17*FW, y, ed->mode == 2 ? 126 : 127);//'|' : (stkVal[i] ? '<' : '>'),0);*/
  if (ed->curve) putsCurve(18*FW+2, y, ed->curve+(ed->curve >= CURVE_BASE+4 ? 4 : 0));

  if (s_copyMode) {
    if ((s_copyMode==COPY_MODE || s_copyTgtOfs == 0) && s_copySrcCh == ch && expo == (s_copySrcIdx + (s_copyTgtOfs<0))) {
  40aa48:	f241 2100 	movw	r1, #4608	; 0x1200
  40aa4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40aa50:	f891 3e81 	ldrb.w	r3, [r1, #3713]	; 0xe81
  40aa54:	f991 2e7f 	ldrsb.w	r2, [r1, #3711]	; 0xe7f
  40aa58:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  40aa5c:	4598      	cmp	r8, r3
  40aa5e:	f47f acf2 	bne.w	40a446 <_Z15menuProcExpoMixhh+0x2be>
      /* draw a border around the raw on selection mode (copy/move) */
      lcd_rect(18, y-1, DISPLAY_W-18, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
  40aa62:	f8dd c010 	ldr.w	ip, [sp, #16]
  40aa66:	2f01      	cmp	r7, #1
  40aa68:	bf0c      	ite	eq
  40aa6a:	23ff      	moveq	r3, #255	; 0xff
  40aa6c:	2355      	movne	r3, #85	; 0x55
  40aa6e:	2000      	movs	r0, #0
  40aa70:	f10c 31ff 	add.w	r1, ip, #4294967295
  40aa74:	9300      	str	r3, [sp, #0]
  40aa76:	9001      	str	r0, [sp, #4]
  40aa78:	b2c9      	uxtb	r1, r1
  40aa7a:	2012      	movs	r0, #18
  40aa7c:	226e      	movs	r2, #110	; 0x6e
  40aa7e:	2309      	movs	r3, #9
  40aa80:	f7f8 fa42 	bl	402f08 <_Z8lcd_recthhhhhh>
  40aa84:	e4df      	b.n	40a446 <_Z15menuProcExpoMixhh+0x2be>
  if (md->phase)
    putsFlightPhase(20*FW+2, y, md->phase, CONDENSED);
#endif
  
  if (s_copyMode) {
    if ((s_copyMode==COPY_MODE || s_copyTgtOfs == 0) && s_copySrcCh == ch && mix == (s_copySrcIdx + (s_copyTgtOfs<0))) {
  40aa86:	f241 2100 	movw	r1, #4608	; 0x1200
  40aa8a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40aa8e:	f891 3e81 	ldrb.w	r3, [r1, #3713]	; 0xe81
  40aa92:	f991 2e7f 	ldrsb.w	r2, [r1, #3711]	; 0xe7f
  40aa96:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  40aa9a:	4598      	cmp	r8, r3
  40aa9c:	f47f af10 	bne.w	40a8c0 <_Z15menuProcExpoMixhh+0x738>
      /* draw a border around the raw on selection mode (copy/move) */
      lcd_rect(22, y-1, DISPLAY_W-1-21, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
  40aaa0:	f8dd c010 	ldr.w	ip, [sp, #16]
  40aaa4:	2000      	movs	r0, #0
  40aaa6:	f10c 31ff 	add.w	r1, ip, #4294967295
  40aaaa:	2f01      	cmp	r7, #1
  40aaac:	bf0c      	ite	eq
  40aaae:	27ff      	moveq	r7, #255	; 0xff
  40aab0:	2755      	movne	r7, #85	; 0x55
  40aab2:	9001      	str	r0, [sp, #4]
  40aab4:	b2c9      	uxtb	r1, r1
  40aab6:	2016      	movs	r0, #22
  40aab8:	226a      	movs	r2, #106	; 0x6a
  40aaba:	2309      	movs	r3, #9
  40aabc:	9700      	str	r7, [sp, #0]
  40aabe:	f7f8 fa23 	bl	402f08 <_Z8lcd_recthhhhhh>
  40aac2:	e6fd      	b.n	40a8c0 <_Z15menuProcExpoMixhh+0x738>
#define _STR_MAX(x) PSTR("/" #x)
#define STR_MAX(x) _STR_MAX(x)

void menuProcExpoMix(uint8_t expo, uint8_t _event_)
{
  uint8_t _event = (s_warning ? 0 : _event_);
  40aac4:	f001 041f 	and.w	r4, r1, #31
  40aac8:	910c      	str	r1, [sp, #48]	; 0x30
  40aaca:	f7ff bb6d 	b.w	40a1a8 <_Z15menuProcExpoMixhh+0x20>
        }
        else {
          do {
            swapExpoMix(expo, s_currIdx, s_copyTgtOfs > 0);
            if (s_copyTgtOfs < 0)
              s_copyTgtOfs++;
  40aace:	3401      	adds	r4, #1
  40aad0:	b2e4      	uxtb	r4, r4
  40aad2:	f886 4e7f 	strb.w	r4, [r6, #3711]	; 0xe7f
  40aad6:	e5d0      	b.n	40a67a <_Z15menuProcExpoMixhh+0x4f2>
  int8_t sub = m_posVert;
#else
  uint8_t sub = m_posVert;
#endif

  switch(_event)
  40aad8:	f895 4e7f 	ldrb.w	r4, [r5, #3711]	; 0xe7f
  40aadc:	e5b6      	b.n	40a64c <_Z15menuProcExpoMixhh+0x4c4>
      if (!s_currCh || (s_copyMode && !s_copyTgtOfs)) {
        s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
        s_copySrcIdx = s_currIdx;
        s_copySrcCh = expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1;
        s_copySrcRow = sub;
        break;
  40aade:	f895 3e7f 	ldrb.w	r3, [r5, #3711]	; 0xe7f
  40aae2:	f240 1c08 	movw	ip, #264	; 0x108
  40aae6:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  40aaea:	f89c 20a0 	ldrb.w	r2, [ip, #160]	; 0xa0
  40aaee:	2063      	movs	r0, #99	; 0x63
  40aaf0:	f36f 1205 	bfc	r2, #4, #2
  40aaf4:	4937      	ldr	r1, [pc, #220]	; (40abd4 <_Z15menuProcExpoMixhh+0xa4c>)
  40aaf6:	f88c 00a2 	strb.w	r0, [ip, #162]	; 0xa2
  40aafa:	f88c 20a0 	strb.w	r2, [ip, #160]	; 0xa0
      if (sub == 0)
        break;
#endif
    case EVT_KEY_LONG(KEY_MENU):
      killEvents(_event);
      if (s_copyTgtOfs) {
  40aafe:	2b00      	cmp	r3, #0
  40ab00:	f47f adc2 	bne.w	40a688 <_Z15menuProcExpoMixhh+0x500>
        s_copyMode = 0;
        s_copyTgtOfs = 0;
      }
      else {
        if (s_copyMode) s_currCh = 0;
  40ab04:	f89a 2e7e 	ldrb.w	r2, [sl, #3710]	; 0xe7e
  40ab08:	bb0a      	cbnz	r2, 40ab4e <_Z15menuProcExpoMixhh+0x9c6>
        if (s_currCh) {
  40ab0a:	f991 3a8c 	ldrsb.w	r3, [r1, #2700]	; 0xa8c
  40ab0e:	b15b      	cbz	r3, 40ab28 <_Z15menuProcExpoMixhh+0x9a0>
          if (reachExpoMixCountLimit(expo)) break;
  40ab10:	4648      	mov	r0, r9
  40ab12:	f7f6 feab 	bl	40186c <_Z22reachExpoMixCountLimith>
  40ab16:	2800      	cmp	r0, #0
  40ab18:	f47f ab98 	bne.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
          insertExpoMix(expo, s_currIdx);
  40ab1c:	4b2e      	ldr	r3, [pc, #184]	; (40abd8 <_Z15menuProcExpoMixhh+0xa50>)
  40ab1e:	4648      	mov	r0, r9
  40ab20:	f893 1af8 	ldrb.w	r1, [r3, #2808]	; 0xaf8
  40ab24:	f7f6 ff12 	bl	40194c <_Z13insertExpoMixhh>
        }
        pushMenu(expo ? menuProcExpoOne : menuProcMixOne);
  40ab28:	4b2c      	ldr	r3, [pc, #176]	; (40abdc <_Z15menuProcExpoMixhh+0xa54>)
  40ab2a:	482d      	ldr	r0, [pc, #180]	; (40abe0 <_Z15menuProcExpoMixhh+0xa58>)
  40ab2c:	f1b9 0f00 	cmp.w	r9, #0
  40ab30:	bf18      	it	ne
  40ab32:	4618      	movne	r0, r3
  40ab34:	f7fc fd3a 	bl	4075ac <_Z8pushMenuPFvhE>
        s_copyMode = 0;
  40ab38:	2300      	movs	r3, #0
  40ab3a:	f88a 3e7e 	strb.w	r3, [sl, #3710]	; 0xe7e
        return;
  40ab3e:	e562      	b.n	40a606 <_Z15menuProcExpoMixhh+0x47e>
      }
      s_copyMode = 0;
      s_copyTgtOfs = 0;
      break;
    case EVT_KEY_BREAK(KEY_MENU):
      if (!s_currCh || (s_copyMode && !s_copyTgtOfs)) {
  40ab40:	f895 3e7f 	ldrb.w	r3, [r5, #3711]	; 0xe7f
  40ab44:	2a00      	cmp	r2, #0
  40ab46:	d0cc      	beq.n	40aae2 <_Z15menuProcExpoMixhh+0x95a>
  40ab48:	2b00      	cmp	r3, #0
  40ab4a:	d1ca      	bne.n	40aae2 <_Z15menuProcExpoMixhh+0x95a>
  40ab4c:	e4f8      	b.n	40a540 <_Z15menuProcExpoMixhh+0x3b8>
      if (s_copyTgtOfs) {
        s_copyMode = 0;
        s_copyTgtOfs = 0;
      }
      else {
        if (s_copyMode) s_currCh = 0;
  40ab4e:	f881 3a8c 	strb.w	r3, [r1, #2700]	; 0xa8c
  40ab52:	e7e9      	b.n	40ab28 <_Z15menuProcExpoMixhh+0x9a0>
      if (s_copyMode) {
        uint8_t next_ofs = (key == KEY_UP ? s_copyTgtOfs - 1 : s_copyTgtOfs + 1);

        if (s_copyTgtOfs==0 && s_copyMode==COPY_MODE) {
          // insert a mix on the same channel (just above / just below)
          if (reachExpoMixCountLimit(expo)) break;
  40ab54:	4648      	mov	r0, r9
  40ab56:	f7f6 fe89 	bl	40186c <_Z22reachExpoMixCountLimith>
  40ab5a:	2800      	cmp	r0, #0
  40ab5c:	f47f ab76 	bne.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
          copyExpoMix(expo, s_currIdx);
  40ab60:	f89a 1af8 	ldrb.w	r1, [sl, #2808]	; 0xaf8
  40ab64:	4648      	mov	r0, r9
  40ab66:	f7f6 ff5d 	bl	401a24 <_Z11copyExpoMixhh>
          if (key==KEY_DOWN) s_currIdx++;
  40ab6a:	2c02      	cmp	r4, #2
        uint8_t next_ofs = (key == KEY_UP ? s_copyTgtOfs - 1 : s_copyTgtOfs + 1);

        if (s_copyTgtOfs==0 && s_copyMode==COPY_MODE) {
          // insert a mix on the same channel (just above / just below)
          if (reachExpoMixCountLimit(expo)) break;
          copyExpoMix(expo, s_currIdx);
  40ab6c:	4d1a      	ldr	r5, [pc, #104]	; (40abd8 <_Z15menuProcExpoMixhh+0xa50>)
          if (key==KEY_DOWN) s_currIdx++;
  40ab6e:	d043      	beq.n	40abf8 <_Z15menuProcExpoMixhh+0xa70>
          else if (sub-s_pgOfs >= 6) s_pgOfs++;
  40ab70:	f895 3e7d 	ldrb.w	r3, [r5, #3709]	; 0xe7d
  40ab74:	9c05      	ldr	r4, [sp, #20]
  40ab76:	1ae2      	subs	r2, r4, r3
  40ab78:	2a05      	cmp	r2, #5
  40ab7a:	f77f adb5 	ble.w	40a6e8 <_Z15menuProcExpoMixhh+0x560>
  40ab7e:	3301      	adds	r3, #1
  40ab80:	f885 3e7d 	strb.w	r3, [r5, #3709]	; 0xe7d
        else {
          // only swap the mix with its neighbor
          if (!swapExpoMix(expo, s_currIdx, key==KEY_UP)) break;
        }

        s_copyTgtOfs = next_ofs;
  40ab84:	f88a 6e7f 	strb.w	r6, [sl, #3711]	; 0xe7f
  40ab88:	f7ff bb60 	b.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
      break;
    case EVT_KEY_BREAK(KEY_MENU):
      if (!s_currCh || (s_copyMode && !s_copyTgtOfs)) {
        s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
        s_copySrcIdx = s_currIdx;
        s_copySrcCh = expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1;
  40ab8c:	4a15      	ldr	r2, [pc, #84]	; (40abe4 <_Z15menuProcExpoMixhh+0xa5c>)
  40ab8e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40ab92:	189b      	adds	r3, r3, r2
  40ab94:	795b      	ldrb	r3, [r3, #5]
  40ab96:	3301      	adds	r3, #1
  40ab98:	b2db      	uxtb	r3, r3
  40ab9a:	e4e6      	b.n	40a56a <_Z15menuProcExpoMixhh+0x3e2>
      // no break
    case EVT_KEY_BREAK(KEY_EXIT):
      if (s_copyTgtOfs) {
        // cancel the current copy / move operation
        if (s_copyMode == COPY_MODE) {
          deleteExpoMix(expo, s_currIdx);
  40ab9c:	f896 1af8 	ldrb.w	r1, [r6, #2808]	; 0xaf8
  40aba0:	4648      	mov	r0, r9
  40aba2:	f7f6 fe7f 	bl	4018a4 <_Z13deleteExpoMixhh>
  40aba6:	e56a      	b.n	40a67e <_Z15menuProcExpoMixhh+0x4f6>
          if (key==KEY_DOWN) s_currIdx++;
          else if (sub-s_pgOfs >= 6) s_pgOfs++;
        }
        else if (next_ofs==0 && s_copyMode==COPY_MODE) {
          // delete the mix
          deleteExpoMix(expo, s_currIdx);
  40aba8:	f89a 1af8 	ldrb.w	r1, [sl, #2808]	; 0xaf8
  40abac:	4648      	mov	r0, r9
  40abae:	f7f6 fe79 	bl	4018a4 <_Z13deleteExpoMixhh>
          if (key==KEY_UP) s_currIdx--;
  40abb2:	2c03      	cmp	r4, #3
          if (key==KEY_DOWN) s_currIdx++;
          else if (sub-s_pgOfs >= 6) s_pgOfs++;
        }
        else if (next_ofs==0 && s_copyMode==COPY_MODE) {
          // delete the mix
          deleteExpoMix(expo, s_currIdx);
  40abb4:	4d08      	ldr	r5, [pc, #32]	; (40abd8 <_Z15menuProcExpoMixhh+0xa50>)
          if (key==KEY_UP) s_currIdx--;
  40abb6:	f47f ad97 	bne.w	40a6e8 <_Z15menuProcExpoMixhh+0x560>
  40abba:	f895 3af8 	ldrb.w	r3, [r5, #2808]	; 0xaf8
        else {
          // only swap the mix with its neighbor
          if (!swapExpoMix(expo, s_currIdx, key==KEY_UP)) break;
        }

        s_copyTgtOfs = next_ofs;
  40abbe:	f88a 6e7f 	strb.w	r6, [sl, #3711]	; 0xe7f
          else if (sub-s_pgOfs >= 6) s_pgOfs++;
        }
        else if (next_ofs==0 && s_copyMode==COPY_MODE) {
          // delete the mix
          deleteExpoMix(expo, s_currIdx);
          if (key==KEY_UP) s_currIdx--;
  40abc2:	3b01      	subs	r3, #1
  40abc4:	f885 3af8 	strb.w	r3, [r5, #2808]	; 0xaf8
  40abc8:	f7ff bb40 	b.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
  40abcc:	20000244 	.word	0x20000244
  40abd0:	0041041d 	.word	0x0041041d
  40abd4:	20000108 	.word	0x20000108
  40abd8:	20001200 	.word	0x20001200
  40abdc:	0040b225 	.word	0x0040b225
  40abe0:	0040ae0d 	.word	0x0040ae0d
  40abe4:	20000254 	.word	0x20000254
      break;
    case EVT_KEY_LONG(KEY_LEFT):
    case EVT_KEY_LONG(KEY_RIGHT):
      if (s_copyMode && !s_copyTgtOfs) {
        if (reachExpoMixCountLimit(expo)) break;
        s_currCh = (expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh+1);
  40abe8:	4a08      	ldr	r2, [pc, #32]	; (40ac0c <_Z15menuProcExpoMixhh+0xa84>)
  40abea:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40abee:	189b      	adds	r3, r3, r2
  40abf0:	795b      	ldrb	r3, [r3, #5]
  40abf2:	3301      	adds	r3, #1
  40abf4:	b2db      	uxtb	r3, r3
  40abf6:	e4db      	b.n	40a5b0 <_Z15menuProcExpoMixhh+0x428>

        if (s_copyTgtOfs==0 && s_copyMode==COPY_MODE) {
          // insert a mix on the same channel (just above / just below)
          if (reachExpoMixCountLimit(expo)) break;
          copyExpoMix(expo, s_currIdx);
          if (key==KEY_DOWN) s_currIdx++;
  40abf8:	f895 3af8 	ldrb.w	r3, [r5, #2808]	; 0xaf8
        else {
          // only swap the mix with its neighbor
          if (!swapExpoMix(expo, s_currIdx, key==KEY_UP)) break;
        }

        s_copyTgtOfs = next_ofs;
  40abfc:	f88a 6e7f 	strb.w	r6, [sl, #3711]	; 0xe7f

        if (s_copyTgtOfs==0 && s_copyMode==COPY_MODE) {
          // insert a mix on the same channel (just above / just below)
          if (reachExpoMixCountLimit(expo)) break;
          copyExpoMix(expo, s_currIdx);
          if (key==KEY_DOWN) s_currIdx++;
  40ac00:	3301      	adds	r3, #1
  40ac02:	f885 3af8 	strb.w	r3, [r5, #2808]	; 0xaf8
  40ac06:	f7ff bb21 	b.w	40a24c <_Z15menuProcExpoMixhh+0xc4>
  40ac0a:	bf00      	nop
  40ac0c:	20000254 	.word	0x20000254

0040ac10 <_Z14menuProcMixAllh>:
{
  return menuProcExpoMix(1, event);
}

void menuProcMixAll(uint8_t event)
{
  40ac10:	4601      	mov	r1, r0
  return menuProcExpoMix(0, event);
  40ac12:	2000      	movs	r0, #0
  40ac14:	f7ff bab8 	b.w	40a188 <_Z15menuProcExpoMixhh>

0040ac18 <_Z16menuProcExposAllh>:
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  displayWarning(_event_);
}

void menuProcExposAll(uint8_t event)
{
  40ac18:	4601      	mov	r1, r0
  return menuProcExpoMix(1, event);
  40ac1a:	2001      	movs	r0, #1
  40ac1c:	f7ff bab4 	b.w	40a188 <_Z15menuProcExpoMixhh>

0040ac20 <_Z17menuProcPhasesAllh>:
    }
  }
}

void menuProcPhasesAll(uint8_t event)
{
  40ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SIMPLE_MENU(STR_MENUFLIGHTPHASES, menuTabModel, e_PhasesAll, 1+MAX_PHASES+1);
  40ac24:	2102      	movs	r1, #2
    }
  }
}

void menuProcPhasesAll(uint8_t event)
{
  40ac26:	b085      	sub	sp, #20
  SIMPLE_MENU(STR_MENUFLIGHTPHASES, menuTabModel, e_PhasesAll, 1+MAX_PHASES+1);
  40ac28:	250a      	movs	r5, #10
  40ac2a:	4a6c      	ldr	r2, [pc, #432]	; (40addc <_Z17menuProcPhasesAllh+0x1bc>)
  40ac2c:	230b      	movs	r3, #11
    }
  }
}

void menuProcPhasesAll(uint8_t event)
{
  40ac2e:	4604      	mov	r4, r0
  SIMPLE_MENU(STR_MENUFLIGHTPHASES, menuTabModel, e_PhasesAll, 1+MAX_PHASES+1);
  40ac30:	9500      	str	r5, [sp, #0]
  40ac32:	f7ff f839 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  40ac36:	b910      	cbnz	r0, 40ac3e <_Z17menuProcPhasesAllh+0x1e>
#endif

  att = (sub==MAX_PHASES && !trimsCheckTimer) ? INVERS : 0;
  lcd_putsAtt(0, 7*FH, STR_CHECKTRIMS, att);
  putsFlightPhase(6*FW, 7*FH, getFlightPhase()+1, att);
}
  40ac38:	b005      	add	sp, #20
  40ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
}

void menuProcPhasesAll(uint8_t event)
{
  SIMPLE_MENU(STR_MENUFLIGHTPHASES, menuTabModel, e_PhasesAll, 1+MAX_PHASES+1);
  40ac3e:	2000      	movs	r0, #0
  40ac40:	2302      	movs	r3, #2
  40ac42:	4601      	mov	r1, r0
  40ac44:	4a66      	ldr	r2, [pc, #408]	; (40ade0 <_Z17menuProcPhasesAllh+0x1c0>)
  40ac46:	f7f7 fe37 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  int8_t sub = m_posVert - 1;
  40ac4a:	f241 2100 	movw	r1, #4608	; 0x1200
  40ac4e:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40ac52:	f891 3c34 	ldrb.w	r3, [r1, #3124]	; 0xc34
  40ac56:	3b01      	subs	r3, #1
  40ac58:	b2db      	uxtb	r3, r3
  40ac5a:	b2da      	uxtb	r2, r3

  switch (event) {
  40ac5c:	2c60      	cmp	r4, #96	; 0x60

void menuProcPhasesAll(uint8_t event)
{
  SIMPLE_MENU(STR_MENUFLIGHTPHASES, menuTabModel, e_PhasesAll, 1+MAX_PHASES+1);

  int8_t sub = m_posVert - 1;
  40ac5e:	9203      	str	r2, [sp, #12]

  switch (event) {
  40ac60:	f000 8094 	beq.w	40ad8c <_Z17menuProcPhasesAllh+0x16c>
  40ac64:	2c64      	cmp	r4, #100	; 0x64
  40ac66:	f000 809e 	beq.w	40ada6 <_Z17menuProcPhasesAllh+0x186>
    int8_t y = (1+i-s_pgOfs)*FH;
    if (y<1*FH || y>7*FH) continue;
#else
    uint8_t y=(i+1)*FH;
#endif
    att = i==sub ? INVERS : 0;
  40ac6a:	9903      	ldr	r1, [sp, #12]
      }
      // no break
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (sub >= 0 && sub < MAX_PHASES) {
        s_currIdx = sub;
        pushMenu(menuProcPhaseOne);
  40ac6c:	f241 2300 	movw	r3, #4608	; 0x1200
  40ac70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    int8_t y = (1+i-s_pgOfs)*FH;
    if (y<1*FH || y>7*FH) continue;
#else
    uint8_t y=(i+1)*FH;
#endif
    att = i==sub ? INVERS : 0;
  40ac74:	b249      	sxtb	r1, r1
      }
      // no break
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (sub >= 0 && sub < MAX_PHASES) {
        s_currIdx = sub;
        pushMenu(menuProcPhaseOne);
  40ac76:	f893 2e7d 	ldrb.w	r2, [r3, #3709]	; 0xe7d
    }
  }
}

void menuProcPhasesAll(uint8_t event)
{
  40ac7a:	2701      	movs	r7, #1
  40ac7c:	2400      	movs	r4, #0
    int8_t y = (1+i-s_pgOfs)*FH;
    if (y<1*FH || y>7*FH) continue;
#else
    uint8_t y=(i+1)*FH;
#endif
    att = i==sub ? INVERS : 0;
  40ac7e:	9102      	str	r1, [sp, #8]
  40ac80:	e012      	b.n	40aca8 <_Z17menuProcPhasesAllh+0x88>
#define SWITCH_OFS (FW/2)
#define TRIMS_OFS  (FW/2)
#endif
    lcd_putsnAtt(4*FW+NAME_OFS, y, p->name, 6, ZCHAR);
    if (i == 0) {
      lcd_puts(11*FW+SWITCH_OFS, y, STR_DEFAULT);
  40ac82:	2045      	movs	r0, #69	; 0x45
  40ac84:	4629      	mov	r1, r5
  40ac86:	4a57      	ldr	r2, [pc, #348]	; (40ade4 <_Z17menuProcPhasesAllh+0x1c4>)
  40ac88:	f7f7 fe1e 	bl	4028c8 <_Z8lcd_putshhPKc>
      for (uint8_t t=0; t<NUM_ROTARY_ENCODERS; t++) {
        putsRotaryEncoderMode((19+t)*FW+TRIMS_OFS+ROTARY_ENC_OFS, y, i, t, 0);
      }
#endif
    }
    if (p->fadeIn || p->fadeOut) 
  40ac8c:	f89a 300f 	ldrb.w	r3, [sl, #15]
  40ac90:	2b00      	cmp	r3, #0
  40ac92:	d14d      	bne.n	40ad30 <_Z17menuProcPhasesAllh+0x110>
  40ac94:	f241 2100 	movw	r1, #4608	; 0x1200
  40ac98:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40ac9c:	f891 2e7d 	ldrb.w	r2, [r1, #3709]	; 0xe7d
      lcd_putc(20*FW+2, y, (p->fadeIn && p->fadeOut) ? '*' : (p->fadeIn ? 'I' : 'O'));
  40aca0:	3401      	adds	r4, #1
  40aca2:	3701      	adds	r7, #1
      }
      break;
  }

  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
  40aca4:	2c09      	cmp	r4, #9
  40aca6:	d058      	beq.n	40ad5a <_Z17menuProcPhasesAllh+0x13a>
#if defined(PCBARM)
    int8_t y = (1+i-s_pgOfs)*FH;
  40aca8:	1abd      	subs	r5, r7, r2
  40acaa:	00ed      	lsls	r5, r5, #3
  40acac:	b2ed      	uxtb	r5, r5
    if (y<1*FH || y>7*FH) continue;
  40acae:	f1a5 0308 	sub.w	r3, r5, #8
  40acb2:	b2db      	uxtb	r3, r3
  40acb4:	2b30      	cmp	r3, #48	; 0x30
      }
      // no break
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (sub >= 0 && sub < MAX_PHASES) {
        s_currIdx = sub;
        pushMenu(menuProcPhaseOne);
  40acb6:	fa5f f984 	uxtb.w	r9, r4

  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
#if defined(PCBARM)
    int8_t y = (1+i-s_pgOfs)*FH;
    if (y<1*FH || y>7*FH) continue;
  40acba:	d8f1      	bhi.n	40aca0 <_Z17menuProcPhasesAllh+0x80>
#else
    uint8_t y=(i+1)*FH;
#endif
    att = i==sub ? INVERS : 0;
  40acbc:	9a02      	ldr	r2, [sp, #8]
    PhaseData *p = phaseaddress(i);
  40acbe:	494a      	ldr	r1, [pc, #296]	; (40ade8 <_Z17menuProcPhasesAllh+0x1c8>)
    int8_t y = (1+i-s_pgOfs)*FH;
    if (y<1*FH || y>7*FH) continue;
#else
    uint8_t y=(i+1)*FH;
#endif
    att = i==sub ? INVERS : 0;
  40acc0:	4294      	cmp	r4, r2
  40acc2:	bf0c      	ite	eq
  40acc4:	2302      	moveq	r3, #2
  40acc6:	2300      	movne	r3, #0
    PhaseData *p = phaseaddress(i);
  40acc8:	eb01 1a04 	add.w	sl, r1, r4, lsl #4
#if defined(EXTRA_ROTARY_ENCODERS)
    putsFlightPhase(0, y, i+1, att|CONDENSED);
#else //EXTRA_ROTARY_ENCODERS
    putsFlightPhase(0, y, i+1, att);
  40accc:	b27a      	sxtb	r2, r7
  40acce:	4629      	mov	r1, r5
  40acd0:	2000      	movs	r0, #0
  40acd2:	f7f8 fc71 	bl	4035b8 <_Z15putsFlightPhasehhah>
    if (y<1*FH || y>7*FH) continue;
#else
    uint8_t y=(i+1)*FH;
#endif
    att = i==sub ? INVERS : 0;
    PhaseData *p = phaseaddress(i);
  40acd6:	f50a 6ad1 	add.w	sl, sl, #1672	; 0x688
#else
#define NAME_OFS 0
#define SWITCH_OFS (FW/2)
#define TRIMS_OFS  (FW/2)
#endif
    lcd_putsnAtt(4*FW+NAME_OFS, y, p->name, 6, ZCHAR);
  40acda:	2320      	movs	r3, #32
  40acdc:	9300      	str	r3, [sp, #0]
  40acde:	f10a 0209 	add.w	r2, sl, #9
  40ace2:	2018      	movs	r0, #24
  40ace4:	4629      	mov	r1, r5
  40ace6:	2306      	movs	r3, #6
  40ace8:	f7f7 fd7e 	bl	4027e8 <_Z12lcd_putsnAtthhPKchh>
    if (i == 0) {
  40acec:	f1b9 0f00 	cmp.w	r9, #0
  40acf0:	d0c7      	beq.n	40ac82 <_Z17menuProcPhasesAllh+0x62>
      lcd_puts(11*FW+SWITCH_OFS, y, STR_DEFAULT);
    }
    else {
      putsSwitches(11*FW+SWITCH_OFS, y, p->swtch, 0);
  40acf2:	f99a 2008 	ldrsb.w	r2, [sl, #8]
  40acf6:	2045      	movs	r0, #69	; 0x45
  40acf8:	4629      	mov	r1, r5
  40acfa:	2300      	movs	r3, #0
  40acfc:	f7f8 fbfa 	bl	4034f4 <_Z12putsSwitcheshhah>
      for (uint8_t t=0; t<NUM_STICKS; t++) {
  40ad00:	2600      	movs	r6, #0
    lcd_putsnAtt(4*FW+NAME_OFS, y, p->name, 6, ZCHAR);
    if (i == 0) {
      lcd_puts(11*FW+SWITCH_OFS, y, STR_DEFAULT);
    }
    else {
      putsSwitches(11*FW+SWITCH_OFS, y, p->swtch, 0);
  40ad02:	f04f 085d 	mov.w	r8, #93	; 0x5d
      for (uint8_t t=0; t<NUM_STICKS; t++) {
        putsTrimMode((15+t)*FW+TRIMS_OFS, y, i, t, 0);
  40ad06:	46b3      	mov	fp, r6
  40ad08:	4633      	mov	r3, r6
    if (i == 0) {
      lcd_puts(11*FW+SWITCH_OFS, y, STR_DEFAULT);
    }
    else {
      putsSwitches(11*FW+SWITCH_OFS, y, p->swtch, 0);
      for (uint8_t t=0; t<NUM_STICKS; t++) {
  40ad0a:	3601      	adds	r6, #1
        putsTrimMode((15+t)*FW+TRIMS_OFS, y, i, t, 0);
  40ad0c:	4640      	mov	r0, r8
  40ad0e:	4629      	mov	r1, r5
  40ad10:	464a      	mov	r2, r9
    if (i == 0) {
      lcd_puts(11*FW+SWITCH_OFS, y, STR_DEFAULT);
    }
    else {
      putsSwitches(11*FW+SWITCH_OFS, y, p->swtch, 0);
      for (uint8_t t=0; t<NUM_STICKS; t++) {
  40ad12:	b2f6      	uxtb	r6, r6
        putsTrimMode((15+t)*FW+TRIMS_OFS, y, i, t, 0);
  40ad14:	f8cd b000 	str.w	fp, [sp]
    if (i == 0) {
      lcd_puts(11*FW+SWITCH_OFS, y, STR_DEFAULT);
    }
    else {
      putsSwitches(11*FW+SWITCH_OFS, y, p->swtch, 0);
      for (uint8_t t=0; t<NUM_STICKS; t++) {
  40ad18:	f108 0806 	add.w	r8, r8, #6
        putsTrimMode((15+t)*FW+TRIMS_OFS, y, i, t, 0);
  40ad1c:	f7f8 fcd2 	bl	4036c4 <_Z12putsTrimModehhhhh>
    if (i == 0) {
      lcd_puts(11*FW+SWITCH_OFS, y, STR_DEFAULT);
    }
    else {
      putsSwitches(11*FW+SWITCH_OFS, y, p->swtch, 0);
      for (uint8_t t=0; t<NUM_STICKS; t++) {
  40ad20:	2e04      	cmp	r6, #4
  40ad22:	fa5f f888 	uxtb.w	r8, r8
  40ad26:	d1ef      	bne.n	40ad08 <_Z17menuProcPhasesAllh+0xe8>
      for (uint8_t t=0; t<NUM_ROTARY_ENCODERS; t++) {
        putsRotaryEncoderMode((19+t)*FW+TRIMS_OFS+ROTARY_ENC_OFS, y, i, t, 0);
      }
#endif
    }
    if (p->fadeIn || p->fadeOut) 
  40ad28:	f89a 300f 	ldrb.w	r3, [sl, #15]
  40ad2c:	2b00      	cmp	r3, #0
  40ad2e:	d0b1      	beq.n	40ac94 <_Z17menuProcPhasesAllh+0x74>
      lcd_putc(20*FW+2, y, (p->fadeIn && p->fadeOut) ? '*' : (p->fadeIn ? 'I' : 'O'));
  40ad30:	071a      	lsls	r2, r3, #28
  40ad32:	d045      	beq.n	40adc0 <_Z17menuProcPhasesAllh+0x1a0>
  40ad34:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  40ad38:	bf0c      	ite	eq
  40ad3a:	2249      	moveq	r2, #73	; 0x49
  40ad3c:	222a      	movne	r2, #42	; 0x2a
  40ad3e:	207a      	movs	r0, #122	; 0x7a
  40ad40:	4629      	mov	r1, r5
  40ad42:	f7f7 fd4f 	bl	4027e4 <_Z8lcd_putchhh>
  40ad46:	3401      	adds	r4, #1
  40ad48:	f241 2300 	movw	r3, #4608	; 0x1200
  40ad4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40ad50:	3701      	adds	r7, #1
      }
      break;
  }

  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
  40ad52:	2c09      	cmp	r4, #9
        putsRotaryEncoderMode((19+t)*FW+TRIMS_OFS+ROTARY_ENC_OFS, y, i, t, 0);
      }
#endif
    }
    if (p->fadeIn || p->fadeOut) 
      lcd_putc(20*FW+2, y, (p->fadeIn && p->fadeOut) ? '*' : (p->fadeIn ? 'I' : 'O'));
  40ad54:	f893 2e7d 	ldrb.w	r2, [r3, #3709]	; 0xe7d
      }
      break;
  }

  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
  40ad58:	d1a6      	bne.n	40aca8 <_Z17menuProcPhasesAllh+0x88>
    if (p->fadeIn || p->fadeOut) 
      lcd_putc(20*FW+2, y, (p->fadeIn && p->fadeOut) ? '*' : (p->fadeIn ? 'I' : 'O'));
  }

#if defined(PCBARM)
  if (s_pgOfs != MAX_PHASES-6) return;
  40ad5a:	2a03      	cmp	r2, #3
  40ad5c:	f47f af6c 	bne.w	40ac38 <_Z17menuProcPhasesAllh+0x18>
#endif

  att = (sub==MAX_PHASES && !trimsCheckTimer) ? INVERS : 0;
  40ad60:	9903      	ldr	r1, [sp, #12]
  40ad62:	2400      	movs	r4, #0
  40ad64:	2909      	cmp	r1, #9
  40ad66:	d02d      	beq.n	40adc4 <_Z17menuProcPhasesAllh+0x1a4>
  lcd_putsAtt(0, 7*FH, STR_CHECKTRIMS, att);
  40ad68:	2138      	movs	r1, #56	; 0x38
  40ad6a:	4623      	mov	r3, r4
  40ad6c:	4a1f      	ldr	r2, [pc, #124]	; (40adec <_Z17menuProcPhasesAllh+0x1cc>)
  40ad6e:	2000      	movs	r0, #0
  40ad70:	f7f7 fda2 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  putsFlightPhase(6*FW, 7*FH, getFlightPhase()+1, att);
  40ad74:	f7fa f800 	bl	404d78 <_Z14getFlightPhasev>
  40ad78:	1c42      	adds	r2, r0, #1
  40ad7a:	b252      	sxtb	r2, r2
  40ad7c:	2024      	movs	r0, #36	; 0x24
  40ad7e:	2138      	movs	r1, #56	; 0x38
  40ad80:	4623      	mov	r3, r4
}
  40ad82:	b005      	add	sp, #20
  40ad84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (s_pgOfs != MAX_PHASES-6) return;
#endif

  att = (sub==MAX_PHASES && !trimsCheckTimer) ? INVERS : 0;
  lcd_putsAtt(0, 7*FH, STR_CHECKTRIMS, att);
  putsFlightPhase(6*FW, 7*FH, getFlightPhase()+1, att);
  40ad88:	f7f8 bc16 	b.w	4035b8 <_Z15putsFlightPhasehhah>
    case EVT_KEY_BREAK(BTN_REb):
      if (!navigationRotaryEncoder(event))
        break;
#endif
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub == MAX_PHASES) {
  40ad8c:	9903      	ldr	r1, [sp, #12]
  40ad8e:	2909      	cmp	r1, #9
  40ad90:	d109      	bne.n	40ada6 <_Z17menuProcPhasesAllh+0x186>
        s_editMode = 0;
  40ad92:	f241 2100 	movw	r1, #4608	; 0x1200
  40ad96:	2200      	movs	r2, #0
  40ad98:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40ad9c:	f881 2c2c 	strb.w	r2, [r1, #3116]	; 0xc2c
        trimsCheckTimer = 200; // 2 seconds
  40ada0:	22c8      	movs	r2, #200	; 0xc8
  40ada2:	f881 2b08 	strb.w	r2, [r1, #2824]	; 0xb08
      }
      // no break
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (sub >= 0 && sub < MAX_PHASES) {
  40ada6:	2b08      	cmp	r3, #8
  40ada8:	f63f af5f 	bhi.w	40ac6a <_Z17menuProcPhasesAllh+0x4a>
        s_currIdx = sub;
  40adac:	f241 2200 	movw	r2, #4608	; 0x1200
  40adb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40adb4:	f882 3af8 	strb.w	r3, [r2, #2808]	; 0xaf8
        pushMenu(menuProcPhaseOne);
  40adb8:	480d      	ldr	r0, [pc, #52]	; (40adf0 <_Z17menuProcPhasesAllh+0x1d0>)
  40adba:	f7fc fbf7 	bl	4075ac <_Z8pushMenuPFvhE>
  40adbe:	e754      	b.n	40ac6a <_Z17menuProcPhasesAllh+0x4a>
        putsRotaryEncoderMode((19+t)*FW+TRIMS_OFS+ROTARY_ENC_OFS, y, i, t, 0);
      }
#endif
    }
    if (p->fadeIn || p->fadeOut) 
      lcd_putc(20*FW+2, y, (p->fadeIn && p->fadeOut) ? '*' : (p->fadeIn ? 'I' : 'O'));
  40adc0:	224f      	movs	r2, #79	; 0x4f
  40adc2:	e7bc      	b.n	40ad3e <_Z17menuProcPhasesAllh+0x11e>

#if defined(PCBARM)
  if (s_pgOfs != MAX_PHASES-6) return;
#endif

  att = (sub==MAX_PHASES && !trimsCheckTimer) ? INVERS : 0;
  40adc4:	f241 2200 	movw	r2, #4608	; 0x1200
  40adc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40adcc:	f892 4b08 	ldrb.w	r4, [r2, #2824]	; 0xb08
  40add0:	2c00      	cmp	r4, #0
  40add2:	bf0c      	ite	eq
  40add4:	2402      	moveq	r4, #2
  40add6:	2400      	movne	r4, #0
  40add8:	e7c6      	b.n	40ad68 <_Z17menuProcPhasesAllh+0x148>
  40adda:	bf00      	nop
  40addc:	00410b14 	.word	0x00410b14
  40ade0:	00410cac 	.word	0x00410cac
  40ade4:	00410cbc 	.word	0x00410cbc
  40ade8:	20000244 	.word	0x20000244
  40adec:	00410cc8 	.word	0x00410cc8
  40adf0:	0040be6d 	.word	0x0040be6d

0040adf4 <_Z20check_submenu_simplehh>:

bool check_submenu_simple(uint8_t event, uint8_t maxrow)
{
  40adf4:	b510      	push	{r4, lr}
  40adf6:	460c      	mov	r4, r1
  return check_simple(event, 0, 0, 0, maxrow);
  40adf8:	2100      	movs	r1, #0
{
  return check(event, curr, menuTab, menuTabSize, 0, 0, maxrow);
}

bool check_submenu_simple(uint8_t event, uint8_t maxrow)
{
  40adfa:	b082      	sub	sp, #8
  return check_simple(event, 0, 0, 0, maxrow);
  40adfc:	460a      	mov	r2, r1
  40adfe:	460b      	mov	r3, r1
  40ae00:	9400      	str	r4, [sp, #0]
  40ae02:	f7fe ff51 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
}
  40ae06:	b002      	add	sp, #8
  40ae08:	bd10      	pop	{r4, pc}
  40ae0a:	bf00      	nop

0040ae0c <_Z14menuProcMixOneh>:
  MIX_FIELD_SLOW_DOWN,
  MIX_FIELD_COUNT
};

void menuProcMixOne(uint8_t event)
{
  40ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TITLEP(s_currCh ? STR_INSERTMIX : STR_EDITMIX);
  40ae10:	f8df b308 	ldr.w	fp, [pc, #776]	; 40b11c <_Z14menuProcMixOneh+0x310>
  40ae14:	4bb2      	ldr	r3, [pc, #712]	; (40b0e0 <_Z14menuProcMixOneh+0x2d4>)
  40ae16:	f99b 1a8c 	ldrsb.w	r1, [fp, #2700]	; 0xa8c
  40ae1a:	f1a3 020c 	sub.w	r2, r3, #12
  40ae1e:	2900      	cmp	r1, #0
  40ae20:	bf08      	it	eq
  40ae22:	461a      	moveq	r2, r3
}

MixData *mixaddress(uint8_t idx)
{
  return &g_model.mixData[idx];
  40ae24:	4faf      	ldr	r7, [pc, #700]	; (40b0e4 <_Z14menuProcMixOneh+0x2d8>)
  40ae26:	2100      	movs	r1, #0
  MIX_FIELD_SLOW_DOWN,
  MIX_FIELD_COUNT
};

void menuProcMixOne(uint8_t event)
{
  40ae28:	b083      	sub	sp, #12
  40ae2a:	4682      	mov	sl, r0
  TITLEP(s_currCh ? STR_INSERTMIX : STR_EDITMIX);
  40ae2c:	2302      	movs	r3, #2
  40ae2e:	4608      	mov	r0, r1
  40ae30:	f7f7 fd42 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  40ae34:	f897 8af8 	ldrb.w	r8, [r7, #2808]	; 0xaf8
  MixData *md2 = mixaddress(s_currIdx) ;
  putsChn(lcd_lastPos+1*FW,0,md2->destCh+1,0);
  40ae38:	f897 0a85 	ldrb.w	r0, [r7, #2693]	; 0xa85
};

void menuProcMixOne(uint8_t event)
{
  TITLEP(s_currCh ? STR_INSERTMIX : STR_EDITMIX);
  MixData *md2 = mixaddress(s_currIdx) ;
  40ae3c:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
  40ae40:	44d8      	add	r8, fp
  putsChn(lcd_lastPos+1*FW,0,md2->destCh+1,0);
  40ae42:	f898 2151 	ldrb.w	r2, [r8, #337]	; 0x151
  40ae46:	2100      	movs	r1, #0
  40ae48:	3006      	adds	r0, #6
  40ae4a:	3201      	adds	r2, #1
  40ae4c:	b2c0      	uxtb	r0, r0
  40ae4e:	460b      	mov	r3, r1
  40ae50:	b2d2      	uxtb	r2, r2
  40ae52:	f7f8 fb13 	bl	40347c <_Z7putsChnhhhh>
};

void menuProcMixOne(uint8_t event)
{
  TITLEP(s_currCh ? STR_INSERTMIX : STR_EDITMIX);
  MixData *md2 = mixaddress(s_currIdx) ;
  40ae56:	f508 78a6 	add.w	r8, r8, #332	; 0x14c
  putsChn(lcd_lastPos+1*FW,0,md2->destCh+1,0);
  SIMPLE_SUBMENU_NOTITLE(MIX_FIELD_COUNT);
  40ae5a:	4650      	mov	r0, sl
  40ae5c:	210d      	movs	r1, #13
};

void menuProcMixOne(uint8_t event)
{
  TITLEP(s_currCh ? STR_INSERTMIX : STR_EDITMIX);
  MixData *md2 = mixaddress(s_currIdx) ;
  40ae5e:	f108 0805 	add.w	r8, r8, #5
  putsChn(lcd_lastPos+1*FW,0,md2->destCh+1,0);
  SIMPLE_SUBMENU_NOTITLE(MIX_FIELD_COUNT);
  40ae62:	f7ff ffc7 	bl	40adf4 <_Z20check_submenu_simplehh>
  40ae66:	2800      	cmp	r0, #0
  40ae68:	d04a      	beq.n	40af00 <_Z14menuProcMixOneh+0xf4>
  40ae6a:	f997 9c34 	ldrsb.w	r9, [r7, #3124]	; 0xc34

  int8_t  sub = m_posVert;
  40ae6e:	2508      	movs	r5, #8

  for (uint8_t k=0; k<7; k++) {
  40ae70:	2400      	movs	r4, #0
    uint8_t y = (k+1) * FH;
    uint8_t i = k + s_pgOfs;
  40ae72:	f897 3e7d 	ldrb.w	r3, [r7, #3709]	; 0xe7d
  40ae76:	18e3      	adds	r3, r4, r3
  40ae78:	b2db      	uxtb	r3, r3
    uint8_t attr = sub==i ? INVERS : 0;
  40ae7a:	454b      	cmp	r3, r9
  40ae7c:	bf0c      	ite	eq
  40ae7e:	2602      	moveq	r6, #2
  40ae80:	2600      	movne	r6, #0
    switch(i) {
  40ae82:	2b0d      	cmp	r3, #13
  40ae84:	d836      	bhi.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40ae86:	e8df f013 	tbh	[pc, r3, lsl #1]
  40ae8a:	01a0      	.short	0x01a0
  40ae8c:	01670184 	.word	0x01670184
  40ae90:	010a014b 	.word	0x010a014b
  40ae94:	00f0000e 	.word	0x00f0000e
  40ae98:	00b700d6 	.word	0x00b700d6
  40ae9c:	0086009e 	.word	0x0086009e
  40aea0:	0056006e 	.word	0x0056006e
  40aea4:	003e      	.short	0x003e
        lcd_puts(2*FW, y, STR_TRIM);
        lcd_putsiAtt(FW*10, y, STR_VMIXTRIMS, (md2->srcRaw <= 4) ? md2->carryTrim : 1, attr);
        if (attr) CHECK_INCDEC_MODELVAR( event, md2->carryTrim, TRIM_ON, TRIM_OFFSET);
        break;
      case MIX_FIELD_CURVE:
        lcd_puts(2*FW, y, STR_CURVES);
  40aea6:	4629      	mov	r1, r5
  40aea8:	4a8f      	ldr	r2, [pc, #572]	; (40b0e8 <_Z14menuProcMixOneh+0x2dc>)
  40aeaa:	200c      	movs	r0, #12
  40aeac:	f7f7 fd0c 	bl	4028c8 <_Z8lcd_putshhPKc>
        putsCurve(FW*10, y, md2->curve, attr);
  40aeb0:	f998 2005 	ldrsb.w	r2, [r8, #5]
  40aeb4:	203c      	movs	r0, #60	; 0x3c
  40aeb6:	4629      	mov	r1, r5
  40aeb8:	4633      	mov	r3, r6
  40aeba:	f7f8 fbb3 	bl	403624 <_Z9putsCurvehhah>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->curve, -MAX_CURVE5-MAX_CURVE9, MAX_CURVE5+MAX_CURVE9+7-1);
  40aebe:	b1ce      	cbz	r6, 40aef4 <_Z14menuProcMixOneh+0xe8>
  40aec0:	2316      	movs	r3, #22
  40aec2:	f998 1005 	ldrsb.w	r1, [r8, #5]
  40aec6:	4650      	mov	r0, sl
  40aec8:	f06f 020f 	mvn.w	r2, #15
  40aecc:	f7fc f9cc 	bl	407268 <_Z16checkIncDecModelhaaa>
        if(attr && event==EVT_KEY_FIRST(KEY_MENU) && (md2->curve<0 || md2->curve>=CURVE_BASE)){
  40aed0:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
        if (attr) CHECK_INCDEC_MODELVAR( event, md2->carryTrim, TRIM_ON, TRIM_OFFSET);
        break;
      case MIX_FIELD_CURVE:
        lcd_puts(2*FW, y, STR_CURVES);
        putsCurve(FW*10, y, md2->curve, attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->curve, -MAX_CURVE5-MAX_CURVE9, MAX_CURVE5+MAX_CURVE9+7-1);
  40aed4:	f888 0005 	strb.w	r0, [r8, #5]
        if(attr && event==EVT_KEY_FIRST(KEY_MENU) && (md2->curve<0 || md2->curve>=CURVE_BASE)){
  40aed8:	d10c      	bne.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40aeda:	b2c3      	uxtb	r3, r0
  40aedc:	2b06      	cmp	r3, #6
  40aede:	d909      	bls.n	40aef4 <_Z14menuProcMixOneh+0xe8>
          s_curveChan = (md2->curve<0 ? -md2->curve-1 : md2->curve-CURVE_BASE);
  40aee0:	2800      	cmp	r0, #0
  40aee2:	f2c0 8192 	blt.w	40b20a <_Z14menuProcMixOneh+0x3fe>
  40aee6:	3b07      	subs	r3, #7
  40aee8:	b2db      	uxtb	r3, r3
          pushMenu(menuProcCurveOne);
  40aeea:	4880      	ldr	r0, [pc, #512]	; (40b0ec <_Z14menuProcMixOneh+0x2e0>)
      case MIX_FIELD_CURVE:
        lcd_puts(2*FW, y, STR_CURVES);
        putsCurve(FW*10, y, md2->curve, attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->curve, -MAX_CURVE5-MAX_CURVE9, MAX_CURVE5+MAX_CURVE9+7-1);
        if(attr && event==EVT_KEY_FIRST(KEY_MENU) && (md2->curve<0 || md2->curve>=CURVE_BASE)){
          s_curveChan = (md2->curve<0 ? -md2->curve-1 : md2->curve-CURVE_BASE);
  40aeec:	f88b 3897 	strb.w	r3, [fp, #2199]	; 0x897
          pushMenu(menuProcCurveOne);
  40aef0:	f7fc fb5c 	bl	4075ac <_Z8pushMenuPFvhE>
  putsChn(lcd_lastPos+1*FW,0,md2->destCh+1,0);
  SIMPLE_SUBMENU_NOTITLE(MIX_FIELD_COUNT);

  int8_t  sub = m_posVert;

  for (uint8_t k=0; k<7; k++) {
  40aef4:	3401      	adds	r4, #1
  40aef6:	b2e4      	uxtb	r4, r4
  40aef8:	3508      	adds	r5, #8
  40aefa:	2c07      	cmp	r4, #7
  40aefc:	b2ed      	uxtb	r5, r5
  40aefe:	d1b8      	bne.n	40ae72 <_Z14menuProcMixOneh+0x66>
        lcd_outdezAtt(FW*16,y,md2->speedDown,attr);
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->speedDown, 0,15);
        break;
    }
  }
}
  40af00:	b003      	add	sp, #12
  40af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lcd_puts(  2*FW,y,STR_SLOWUP);
        lcd_outdezAtt(FW*16,y,md2->speedUp,attr);
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->speedUp, 0,15);
        break;
      case MIX_FIELD_SLOW_DOWN:
        lcd_puts(  2*FW,y,STR_SLOWDOWN);
  40af06:	4629      	mov	r1, r5
  40af08:	4a79      	ldr	r2, [pc, #484]	; (40b0f0 <_Z14menuProcMixOneh+0x2e4>)
  40af0a:	200c      	movs	r0, #12
  40af0c:	f7f7 fcdc 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(FW*16,y,md2->speedDown,attr);
  40af10:	f898 200a 	ldrb.w	r2, [r8, #10]
  40af14:	2060      	movs	r0, #96	; 0x60
  40af16:	4629      	mov	r1, r5
  40af18:	4633      	mov	r3, r6
  40af1a:	f7f7 ff8d 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->speedDown, 0,15);
  40af1e:	2e00      	cmp	r6, #0
  40af20:	d0e8      	beq.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40af22:	f998 100a 	ldrsb.w	r1, [r8, #10]
  40af26:	4650      	mov	r0, sl
  40af28:	2200      	movs	r2, #0
  40af2a:	230f      	movs	r3, #15
  40af2c:	f7fc f99c 	bl	407268 <_Z16checkIncDecModelhaaa>
  40af30:	f888 000a 	strb.w	r0, [r8, #10]
  40af34:	e7de      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        lcd_puts(  2*FW,y,STR_DELAYDOWN);
        lcd_outdezAtt(FW*16,y,md2->delayDown,attr);
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->delayDown, 0,15);
        break;
      case MIX_FIELD_SLOW_UP:
        lcd_puts(  2*FW,y,STR_SLOWUP);
  40af36:	4629      	mov	r1, r5
  40af38:	4a6e      	ldr	r2, [pc, #440]	; (40b0f4 <_Z14menuProcMixOneh+0x2e8>)
  40af3a:	200c      	movs	r0, #12
  40af3c:	f7f7 fcc4 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(FW*16,y,md2->speedUp,attr);
  40af40:	f898 2009 	ldrb.w	r2, [r8, #9]
  40af44:	2060      	movs	r0, #96	; 0x60
  40af46:	4629      	mov	r1, r5
  40af48:	4633      	mov	r3, r6
  40af4a:	f7f7 ff75 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->speedUp, 0,15);
  40af4e:	2e00      	cmp	r6, #0
  40af50:	d0d0      	beq.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40af52:	f998 1009 	ldrsb.w	r1, [r8, #9]
  40af56:	4650      	mov	r0, sl
  40af58:	2200      	movs	r2, #0
  40af5a:	230f      	movs	r3, #15
  40af5c:	f7fc f984 	bl	407268 <_Z16checkIncDecModelhaaa>
  40af60:	f888 0009 	strb.w	r0, [r8, #9]
  40af64:	e7c6      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        lcd_puts(  2*FW,y,STR_DELAYUP);
        lcd_outdezAtt(FW*16,y,md2->delayUp,attr);
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->delayUp, 0,15);
        break;
      case MIX_FIELD_DELAY_DOWN:
        lcd_puts(  2*FW,y,STR_DELAYDOWN);
  40af66:	4629      	mov	r1, r5
  40af68:	4a63      	ldr	r2, [pc, #396]	; (40b0f8 <_Z14menuProcMixOneh+0x2ec>)
  40af6a:	200c      	movs	r0, #12
  40af6c:	f7f7 fcac 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(FW*16,y,md2->delayDown,attr);
  40af70:	f898 2008 	ldrb.w	r2, [r8, #8]
  40af74:	2060      	movs	r0, #96	; 0x60
  40af76:	4629      	mov	r1, r5
  40af78:	4633      	mov	r3, r6
  40af7a:	f7f7 ff5d 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->delayDown, 0,15);
  40af7e:	2e00      	cmp	r6, #0
  40af80:	d0b8      	beq.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40af82:	f998 1008 	ldrsb.w	r1, [r8, #8]
  40af86:	4650      	mov	r0, sl
  40af88:	2200      	movs	r2, #0
  40af8a:	230f      	movs	r3, #15
  40af8c:	f7fc f96c 	bl	407268 <_Z16checkIncDecModelhaaa>
  40af90:	f888 0008 	strb.w	r0, [r8, #8]
  40af94:	e7ae      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        lcd_puts(  2*FW,y,STR_MULTPX);
        lcd_putsiAtt(10*FW, y, STR_VMLTPX, md2->mltpx, attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->mltpx, 0, 2);
        break;
      case MIX_FIELD_DELAY_UP:
        lcd_puts(  2*FW,y,STR_DELAYUP);
  40af96:	4629      	mov	r1, r5
  40af98:	4a58      	ldr	r2, [pc, #352]	; (40b0fc <_Z14menuProcMixOneh+0x2f0>)
  40af9a:	200c      	movs	r0, #12
  40af9c:	f7f7 fc94 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(FW*16,y,md2->delayUp,attr);
  40afa0:	f898 2007 	ldrb.w	r2, [r8, #7]
  40afa4:	2060      	movs	r0, #96	; 0x60
  40afa6:	4629      	mov	r1, r5
  40afa8:	4633      	mov	r3, r6
  40afaa:	f7f7 ff45 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->delayUp, 0,15);
  40afae:	2e00      	cmp	r6, #0
  40afb0:	d0a0      	beq.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40afb2:	f998 1007 	ldrsb.w	r1, [r8, #7]
  40afb6:	4650      	mov	r0, sl
  40afb8:	2200      	movs	r2, #0
  40afba:	230f      	movs	r3, #15
  40afbc:	f7fc f954 	bl	407268 <_Z16checkIncDecModelhaaa>
  40afc0:	f888 0007 	strb.w	r0, [r8, #7]
  40afc4:	e796      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        else
          lcd_putsAtt(FW*10, y, STR_OFF, attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->mixWarn, 0,3);
        break;
      case MIX_FIELD_MLTPX:
        lcd_puts(  2*FW,y,STR_MULTPX);
  40afc6:	4629      	mov	r1, r5
  40afc8:	4a4d      	ldr	r2, [pc, #308]	; (40b100 <_Z14menuProcMixOneh+0x2f4>)
  40afca:	200c      	movs	r0, #12
  40afcc:	f7f7 fc7c 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_putsiAtt(10*FW, y, STR_VMLTPX, md2->mltpx, attr);
  40afd0:	f898 3004 	ldrb.w	r3, [r8, #4]
  40afd4:	203c      	movs	r0, #60	; 0x3c
  40afd6:	4629      	mov	r1, r5
  40afd8:	4a4a      	ldr	r2, [pc, #296]	; (40b104 <_Z14menuProcMixOneh+0x2f8>)
  40afda:	9600      	str	r6, [sp, #0]
  40afdc:	f7f7 fc48 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->mltpx, 0, 2);
  40afe0:	2e00      	cmp	r6, #0
  40afe2:	d087      	beq.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40afe4:	f998 1004 	ldrsb.w	r1, [r8, #4]
  40afe8:	4650      	mov	r0, sl
  40afea:	2200      	movs	r2, #0
  40afec:	2302      	movs	r3, #2
  40afee:	f7fc f93b 	bl	407268 <_Z16checkIncDecModelhaaa>
  40aff2:	f888 0004 	strb.w	r0, [r8, #4]
  40aff6:	e77d      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        putsFlightPhase(10*FW, y, md2->phase, attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->phase, -MAX_PHASES, MAX_PHASES);
        break;
#endif
      case MIX_FIELD_WARNING:
        lcd_puts(  2*FW,y,STR_WARNING);
  40aff8:	4a43      	ldr	r2, [pc, #268]	; (40b108 <_Z14menuProcMixOneh+0x2fc>)
  40affa:	200c      	movs	r0, #12
  40affc:	4629      	mov	r1, r5
  40affe:	f7f7 fc63 	bl	4028c8 <_Z8lcd_putshhPKc>
        if(md2->mixWarn)
  40b002:	f898 2006 	ldrb.w	r2, [r8, #6]
  40b006:	2a00      	cmp	r2, #0
  40b008:	f000 80f8 	beq.w	40b1fc <_Z14menuProcMixOneh+0x3f0>
          lcd_outdezAtt(FW*10,y,md2->mixWarn,attr|LEFT);
  40b00c:	f066 037f 	orn	r3, r6, #127	; 0x7f
  40b010:	b212      	sxth	r2, r2
  40b012:	b2db      	uxtb	r3, r3
  40b014:	203c      	movs	r0, #60	; 0x3c
  40b016:	4629      	mov	r1, r5
  40b018:	f7f7 ff0e 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        else
          lcd_putsAtt(FW*10, y, STR_OFF, attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->mixWarn, 0,3);
  40b01c:	2e00      	cmp	r6, #0
  40b01e:	f43f af69 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b022:	f998 1006 	ldrsb.w	r1, [r8, #6]
  40b026:	4650      	mov	r0, sl
  40b028:	2200      	movs	r2, #0
  40b02a:	2303      	movs	r3, #3
  40b02c:	f7fc f91c 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b030:	f888 0006 	strb.w	r0, [r8, #6]
  40b034:	e75e      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        putsSwitches(10*FW,  y,md2->swtch,attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->swtch, -MAX_SWITCH, MAX_SWITCH);
        break;
#ifdef FLIGHT_PHASES
      case MIX_FIELD_FLIGHT_PHASE:
        lcd_puts(  2*FW,y,STR_FPHASE);
  40b036:	4629      	mov	r1, r5
  40b038:	4a34      	ldr	r2, [pc, #208]	; (40b10c <_Z14menuProcMixOneh+0x300>)
  40b03a:	200c      	movs	r0, #12
  40b03c:	f7f7 fc44 	bl	4028c8 <_Z8lcd_putshhPKc>
        putsFlightPhase(10*FW, y, md2->phase, attr);
  40b040:	f998 2001 	ldrsb.w	r2, [r8, #1]
  40b044:	203c      	movs	r0, #60	; 0x3c
  40b046:	4629      	mov	r1, r5
  40b048:	4633      	mov	r3, r6
  40b04a:	f7f8 fab5 	bl	4035b8 <_Z15putsFlightPhasehhah>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->phase, -MAX_PHASES, MAX_PHASES);
  40b04e:	2e00      	cmp	r6, #0
  40b050:	f43f af50 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b054:	f998 1001 	ldrsb.w	r1, [r8, #1]
  40b058:	4650      	mov	r0, sl
  40b05a:	f06f 0208 	mvn.w	r2, #8
  40b05e:	2309      	movs	r3, #9
  40b060:	f7fc f902 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b064:	f888 0001 	strb.w	r0, [r8, #1]
  40b068:	e744      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
          s_curveChan = (md2->curve<0 ? -md2->curve-1 : md2->curve-CURVE_BASE);
          pushMenu(menuProcCurveOne);
        }
        break;
      case MIX_FIELD_SWITCH:
        lcd_puts(  2*FW,y,STR_SWITCH);
  40b06a:	4629      	mov	r1, r5
  40b06c:	4a28      	ldr	r2, [pc, #160]	; (40b110 <_Z14menuProcMixOneh+0x304>)
  40b06e:	200c      	movs	r0, #12
  40b070:	f7f7 fc2a 	bl	4028c8 <_Z8lcd_putshhPKc>
        putsSwitches(10*FW,  y,md2->swtch,attr);
  40b074:	f998 2003 	ldrsb.w	r2, [r8, #3]
  40b078:	203c      	movs	r0, #60	; 0x3c
  40b07a:	4629      	mov	r1, r5
  40b07c:	4633      	mov	r3, r6
  40b07e:	f7f8 fa39 	bl	4034f4 <_Z12putsSwitcheshhah>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->swtch, -MAX_SWITCH, MAX_SWITCH);
  40b082:	2e00      	cmp	r6, #0
  40b084:	f43f af36 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b088:	f998 1003 	ldrsb.w	r1, [r8, #3]
  40b08c:	4650      	mov	r0, sl
  40b08e:	f06f 0228 	mvn.w	r2, #40	; 0x28
  40b092:	2329      	movs	r3, #41	; 0x29
  40b094:	f7fc f8e8 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b098:	f888 0003 	strb.w	r0, [r8, #3]
  40b09c:	e72a      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        lcd_puts(2*FW, y, STR_OFFSET);
        lcd_outdezAtt(FW*10, y, md2->sOffset, attr|LEFT|INFLIGHT(md2->sOffset));
        if (attr) CHECK_INFLIGHT_INCDEC_MODELVAR(event, md2->sOffset, -125, 125, 0, STR_MIXEROFFSET);
        break;
      case MIX_FIELD_TRIM:
        lcd_puts(2*FW, y, STR_TRIM);
  40b09e:	200c      	movs	r0, #12
  40b0a0:	4629      	mov	r1, r5
  40b0a2:	4a1c      	ldr	r2, [pc, #112]	; (40b114 <_Z14menuProcMixOneh+0x308>)
  40b0a4:	f7f7 fc10 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_putsiAtt(FW*10, y, STR_VMIXTRIMS, (md2->srcRaw <= 4) ? md2->carryTrim : 1, attr);
  40b0a8:	f898 300b 	ldrb.w	r3, [r8, #11]
  40b0ac:	4629      	mov	r1, r5
  40b0ae:	2b04      	cmp	r3, #4
  40b0b0:	bf98      	it	ls
  40b0b2:	f898 300d 	ldrbls.w	r3, [r8, #13]
  40b0b6:	4a18      	ldr	r2, [pc, #96]	; (40b118 <_Z14menuProcMixOneh+0x30c>)
  40b0b8:	bf88      	it	hi
  40b0ba:	2301      	movhi	r3, #1
  40b0bc:	203c      	movs	r0, #60	; 0x3c
  40b0be:	9600      	str	r6, [sp, #0]
  40b0c0:	f7f7 fbd6 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if (attr) CHECK_INCDEC_MODELVAR( event, md2->carryTrim, TRIM_ON, TRIM_OFFSET);
  40b0c4:	2e00      	cmp	r6, #0
  40b0c6:	f43f af15 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b0ca:	f998 100d 	ldrsb.w	r1, [r8, #13]
  40b0ce:	4650      	mov	r0, sl
  40b0d0:	2200      	movs	r2, #0
  40b0d2:	2302      	movs	r3, #2
  40b0d4:	f7fc f8c8 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b0d8:	f888 000d 	strb.w	r0, [r8, #13]
  40b0dc:	e70a      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b0de:	bf00      	nop
  40b0e0:	00410ce0 	.word	0x00410ce0
  40b0e4:	20001200 	.word	0x20001200
  40b0e8:	00410d04 	.word	0x00410d04
  40b0ec:	00407641 	.word	0x00407641
  40b0f0:	00410d54 	.word	0x00410d54
  40b0f4:	00410d48 	.word	0x00410d48
  40b0f8:	00410d3c 	.word	0x00410d3c
  40b0fc:	00410d30 	.word	0x00410d30
  40b100:	00410d28 	.word	0x00410d28
  40b104:	00410404 	.word	0x00410404
  40b108:	00410d1c 	.word	0x00410d1c
  40b10c:	00410d14 	.word	0x00410d14
  40b110:	00410d0c 	.word	0x00410d0c
  40b114:	00410cfc 	.word	0x00410cfc
  40b118:	00410424 	.word	0x00410424
  40b11c:	20000108 	.word	0x20000108
        lcd_puts(2*FW, y, STR_DIFFERENTIAL);
        lcd_outdezAtt(FW*10, y, md2->differential*2, attr|LEFT);
        if (attr) CHECK_INCDEC_MODELVAR(event, md2->differential, -50, 50);
        break;
      case MIX_FIELD_OFFSET:
        lcd_puts(2*FW, y, STR_OFFSET);
  40b120:	4629      	mov	r1, r5
  40b122:	4a3b      	ldr	r2, [pc, #236]	; (40b210 <_Z14menuProcMixOneh+0x404>)
  40b124:	200c      	movs	r0, #12
  40b126:	f7f7 fbcf 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(FW*10, y, md2->sOffset, attr|LEFT|INFLIGHT(md2->sOffset));
  40b12a:	f066 037f 	orn	r3, r6, #127	; 0x7f
  40b12e:	f998 200e 	ldrsb.w	r2, [r8, #14]
  40b132:	b2db      	uxtb	r3, r3
  40b134:	203c      	movs	r0, #60	; 0x3c
  40b136:	4629      	mov	r1, r5
  40b138:	f7f7 fe7e 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (attr) CHECK_INFLIGHT_INCDEC_MODELVAR(event, md2->sOffset, -125, 125, 0, STR_MIXEROFFSET);
  40b13c:	2e00      	cmp	r6, #0
  40b13e:	f43f aed9 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b142:	f998 100e 	ldrsb.w	r1, [r8, #14]
  40b146:	4650      	mov	r0, sl
  40b148:	f06f 027c 	mvn.w	r2, #124	; 0x7c
  40b14c:	237d      	movs	r3, #125	; 0x7d
  40b14e:	f7fc f88b 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b152:	f888 000e 	strb.w	r0, [r8, #14]
  40b156:	e6cd      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        lcd_outdezAtt(FW*10, y, md2->weight, attr|LEFT|INFLIGHT(md2->weight));
        if (attr) CHECK_INFLIGHT_INCDEC_MODELVAR(event, md2->weight, -125, 125, 0, STR_MIXERWEIGHT);
        break;
      case MIX_FIELD_DIFFERENTIAL:
        // TODO INFLIGHT
        lcd_puts(2*FW, y, STR_DIFFERENTIAL);
  40b158:	4629      	mov	r1, r5
  40b15a:	4a2e      	ldr	r2, [pc, #184]	; (40b214 <_Z14menuProcMixOneh+0x408>)
  40b15c:	200c      	movs	r0, #12
  40b15e:	f7f7 fbb3 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(FW*10, y, md2->differential*2, attr|LEFT);
  40b162:	f998 200c 	ldrsb.w	r2, [r8, #12]
  40b166:	f066 037f 	orn	r3, r6, #127	; 0x7f
  40b16a:	0052      	lsls	r2, r2, #1
  40b16c:	b2db      	uxtb	r3, r3
  40b16e:	203c      	movs	r0, #60	; 0x3c
  40b170:	4629      	mov	r1, r5
  40b172:	f7f7 fe61 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (attr) CHECK_INCDEC_MODELVAR(event, md2->differential, -50, 50);
  40b176:	2e00      	cmp	r6, #0
  40b178:	f43f aebc 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b17c:	f998 100c 	ldrsb.w	r1, [r8, #12]
  40b180:	4650      	mov	r0, sl
  40b182:	f06f 0231 	mvn.w	r2, #49	; 0x31
  40b186:	2332      	movs	r3, #50	; 0x32
  40b188:	f7fc f86e 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b18c:	f888 000c 	strb.w	r0, [r8, #12]
  40b190:	e6b0      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
        lcd_puts(2*FW, y, STR_SOURCE);
        putsMixerSource(FW*10, y, md2->srcRaw, attr);
        if(attr) CHECK_INCDEC_MODELVAR(event, md2->srcRaw, 1, NUM_XCHNMIX);
        break;
      case MIX_FIELD_WEIGHT:
        lcd_puts(2*FW, y, STR_WEIGHT);
  40b192:	4629      	mov	r1, r5
  40b194:	4a20      	ldr	r2, [pc, #128]	; (40b218 <_Z14menuProcMixOneh+0x40c>)
  40b196:	200c      	movs	r0, #12
  40b198:	f7f7 fb96 	bl	4028c8 <_Z8lcd_putshhPKc>
        lcd_outdezAtt(FW*10, y, md2->weight, attr|LEFT|INFLIGHT(md2->weight));
  40b19c:	f066 037f 	orn	r3, r6, #127	; 0x7f
  40b1a0:	f998 2002 	ldrsb.w	r2, [r8, #2]
  40b1a4:	b2db      	uxtb	r3, r3
  40b1a6:	203c      	movs	r0, #60	; 0x3c
  40b1a8:	4629      	mov	r1, r5
  40b1aa:	f7f7 fe45 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (attr) CHECK_INFLIGHT_INCDEC_MODELVAR(event, md2->weight, -125, 125, 0, STR_MIXERWEIGHT);
  40b1ae:	2e00      	cmp	r6, #0
  40b1b0:	f43f aea0 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b1b4:	f998 1002 	ldrsb.w	r1, [r8, #2]
  40b1b8:	4650      	mov	r0, sl
  40b1ba:	f06f 027c 	mvn.w	r2, #124	; 0x7c
  40b1be:	237d      	movs	r3, #125	; 0x7d
  40b1c0:	f7fc f852 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b1c4:	f888 0002 	strb.w	r0, [r8, #2]
  40b1c8:	e694      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
    uint8_t y = (k+1) * FH;
    uint8_t i = k + s_pgOfs;
    uint8_t attr = sub==i ? INVERS : 0;
    switch(i) {
      case MIX_FIELD_SOURCE:
        lcd_puts(2*FW, y, STR_SOURCE);
  40b1ca:	4629      	mov	r1, r5
  40b1cc:	4a13      	ldr	r2, [pc, #76]	; (40b21c <_Z14menuProcMixOneh+0x410>)
  40b1ce:	200c      	movs	r0, #12
  40b1d0:	f7f7 fb7a 	bl	4028c8 <_Z8lcd_putshhPKc>
        putsMixerSource(FW*10, y, md2->srcRaw, attr);
  40b1d4:	f898 200b 	ldrb.w	r2, [r8, #11]
  40b1d8:	203c      	movs	r0, #60	; 0x3c
  40b1da:	4629      	mov	r1, r5
  40b1dc:	4633      	mov	r3, r6
  40b1de:	f7f8 f9e1 	bl	4035a4 <_Z15putsMixerSourcehhhh>
        if(attr) CHECK_INCDEC_MODELVAR(event, md2->srcRaw, 1, NUM_XCHNMIX);
  40b1e2:	2e00      	cmp	r6, #0
  40b1e4:	f43f ae86 	beq.w	40aef4 <_Z14menuProcMixOneh+0xe8>
  40b1e8:	f998 100b 	ldrsb.w	r1, [r8, #11]
  40b1ec:	4650      	mov	r0, sl
  40b1ee:	2201      	movs	r2, #1
  40b1f0:	235d      	movs	r3, #93	; 0x5d
  40b1f2:	f7fc f839 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b1f6:	f888 000b 	strb.w	r0, [r8, #11]
  40b1fa:	e67b      	b.n	40aef4 <_Z14menuProcMixOneh+0xe8>
      case MIX_FIELD_WARNING:
        lcd_puts(  2*FW,y,STR_WARNING);
        if(md2->mixWarn)
          lcd_outdezAtt(FW*10,y,md2->mixWarn,attr|LEFT);
        else
          lcd_putsAtt(FW*10, y, STR_OFF, attr);
  40b1fc:	203c      	movs	r0, #60	; 0x3c
  40b1fe:	4629      	mov	r1, r5
  40b200:	4a07      	ldr	r2, [pc, #28]	; (40b220 <_Z14menuProcMixOneh+0x414>)
  40b202:	4633      	mov	r3, r6
  40b204:	f7f7 fb58 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  40b208:	e708      	b.n	40b01c <_Z14menuProcMixOneh+0x210>
      case MIX_FIELD_CURVE:
        lcd_puts(2*FW, y, STR_CURVES);
        putsCurve(FW*10, y, md2->curve, attr);
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->curve, -MAX_CURVE5-MAX_CURVE9, MAX_CURVE5+MAX_CURVE9+7-1);
        if(attr && event==EVT_KEY_FIRST(KEY_MENU) && (md2->curve<0 || md2->curve>=CURVE_BASE)){
          s_curveChan = (md2->curve<0 ? -md2->curve-1 : md2->curve-CURVE_BASE);
  40b20a:	43db      	mvns	r3, r3
  40b20c:	b2db      	uxtb	r3, r3
  40b20e:	e66c      	b.n	40aeea <_Z14menuProcMixOneh+0xde>
  40b210:	00410b80 	.word	0x00410b80
  40b214:	00410cf4 	.word	0x00410cf4
  40b218:	00410cec 	.word	0x00410cec
  40b21c:	00410bb0 	.word	0x00410bb0
  40b220:	00410d24 	.word	0x00410d24

0040b224 <_Z15menuProcExpoOneh>:
#else
#define EXPO_ONE_LINES_COUNT 5
#endif

void menuProcExpoOne(uint8_t event)
{
  40b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return &g_model.phaseData[idx];
}

ExpoData *expoaddress(uint8_t idx )
{
  return &g_model.expoData[idx];
  40b228:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 40b4d0 <_Z15menuProcExpoOneh+0x2ac>
  ExpoData *ed = expoaddress(s_currIdx);
  40b22c:	4aa2      	ldr	r2, [pc, #648]	; (40b4b8 <_Z15menuProcExpoOneh+0x294>)
  40b22e:	f89b 3af8 	ldrb.w	r3, [fp, #2808]	; 0xaf8
#else
#define EXPO_ONE_LINES_COUNT 5
#endif

void menuProcExpoOne(uint8_t event)
{
  40b232:	b087      	sub	sp, #28
  ExpoData *ed = expoaddress(s_currIdx);
  40b234:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40b238:	18d3      	adds	r3, r2, r3
  40b23a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
  40b23e:	3305      	adds	r3, #5
  putsChnRaw(7*FW+FW/2,0,ed->chn+1,0);
  40b240:	785a      	ldrb	r2, [r3, #1]
  40b242:	2100      	movs	r1, #0
  40b244:	3201      	adds	r2, #1
#else
#define EXPO_ONE_LINES_COUNT 5
#endif

void menuProcExpoOne(uint8_t event)
{
  40b246:	9005      	str	r0, [sp, #20]
  ExpoData *ed = expoaddress(s_currIdx);
  40b248:	9303      	str	r3, [sp, #12]
  putsChnRaw(7*FW+FW/2,0,ed->chn+1,0);
  40b24a:	202d      	movs	r0, #45	; 0x2d
  40b24c:	460b      	mov	r3, r1
  40b24e:	b2d2      	uxtb	r2, r2
  40b250:	f7f8 f8d8 	bl	403404 <_Z10putsChnRawhhhh>

  SIMPLE_SUBMENU(STR_MENUDREXPO, EXPO_ONE_LINES_COUNT);
  40b254:	9805      	ldr	r0, [sp, #20]
  40b256:	2105      	movs	r1, #5
  40b258:	f7ff fdcc 	bl	40adf4 <_Z20check_submenu_simplehh>
  40b25c:	b910      	cbnz	r0, 40b264 <_Z15menuProcExpoOneh+0x40>
  x512 = X0+x512/(RESXu/WCHART);
  y512 = (DISPLAY_H-1) - (uint16_t)((y512+RESX)/2) * (DISPLAY_H-1) / RESX;

  lcd_vline(x512, y512-3,3*2+1);
  lcd_hline(x512-3, y512,3*2+1);
}
  40b25e:	b007      	add	sp, #28
  40b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void menuProcExpoOne(uint8_t event)
{
  ExpoData *ed = expoaddress(s_currIdx);
  putsChnRaw(7*FW+FW/2,0,ed->chn+1,0);

  SIMPLE_SUBMENU(STR_MENUDREXPO, EXPO_ONE_LINES_COUNT);
  40b264:	2000      	movs	r0, #0
  40b266:	4601      	mov	r1, r0
  40b268:	4a94      	ldr	r2, [pc, #592]	; (40b4bc <_Z15menuProcExpoOneh+0x298>)
  40b26a:	2302      	movs	r3, #2
  40b26c:	f7f7 fb24 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  40b270:	f99b 7c34 	ldrsb.w	r7, [fp, #3124]	; 0xc34

  int8_t sub = m_posVert;
  40b274:	2501      	movs	r5, #1
void menuProcExpoOne(uint8_t event)
{
  ExpoData *ed = expoaddress(s_currIdx);
  putsChnRaw(7*FW+FW/2,0,ed->chn+1,0);

  SIMPLE_SUBMENU(STR_MENUDREXPO, EXPO_ONE_LINES_COUNT);
  40b276:	9704      	str	r7, [sp, #16]
  40b278:	1e6c      	subs	r4, r5, #1
  40b27a:	00ee      	lsls	r6, r5, #3
  40b27c:	b2e4      	uxtb	r4, r4
  40b27e:	b2f6      	uxtb	r6, r6
  int8_t sub = m_posVert;

  uint8_t y = FH;

  for (uint8_t i=0; i<EXPO_ONE_LINES_COUNT+1; i++) {
    lcd_putsiAtt(0, y, STR_EXPLABELS, i, 0);
  40b280:	2000      	movs	r0, #0
  40b282:	4a8f      	ldr	r2, [pc, #572]	; (40b4c0 <_Z15menuProcExpoOneh+0x29c>)
  40b284:	4623      	mov	r3, r4
  40b286:	4631      	mov	r1, r6
  40b288:	9000      	str	r0, [sp, #0]
  40b28a:	f7f7 faf1 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
    editExpoVals(event, i, sub==i, y, s_currIdx);
  40b28e:	f89b 8af8 	ldrb.w	r8, [fp, #2808]	; 0xaf8
  40b292:	9a04      	ldr	r2, [sp, #16]

inline void editExpoVals(uint8_t event, uint8_t which, bool edit, uint8_t y, uint8_t idt)
{
  uint8_t invBlk = edit ? INVERS : 0;

  ExpoData *ed = expoaddress(idt); // TODO volatile
  40b294:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3

  uint8_t y = FH;

  for (uint8_t i=0; i<EXPO_ONE_LINES_COUNT+1; i++) {
    lcd_putsiAtt(0, y, STR_EXPLABELS, i, 0);
    editExpoVals(event, i, sub==i, y, s_currIdx);
  40b298:	1aa0      	subs	r0, r4, r2

inline void editExpoVals(uint8_t event, uint8_t which, bool edit, uint8_t y, uint8_t idt)
{
  uint8_t invBlk = edit ? INVERS : 0;

  ExpoData *ed = expoaddress(idt); // TODO volatile
  40b29a:	4b87      	ldr	r3, [pc, #540]	; (40b4b8 <_Z15menuProcExpoOneh+0x294>)

  uint8_t y = FH;

  for (uint8_t i=0; i<EXPO_ONE_LINES_COUNT+1; i++) {
    lcd_putsiAtt(0, y, STR_EXPLABELS, i, 0);
    editExpoVals(event, i, sub==i, y, s_currIdx);
  40b29c:	4247      	negs	r7, r0

inline void editExpoVals(uint8_t event, uint8_t which, bool edit, uint8_t y, uint8_t idt)
{
  uint8_t invBlk = edit ? INVERS : 0;

  ExpoData *ed = expoaddress(idt); // TODO volatile
  40b29e:	f508 688e 	add.w	r8, r8, #1136	; 0x470

  uint8_t y = FH;

  for (uint8_t i=0; i<EXPO_ONE_LINES_COUNT+1; i++) {
    lcd_putsiAtt(0, y, STR_EXPLABELS, i, 0);
    editExpoVals(event, i, sub==i, y, s_currIdx);
  40b2a2:	eb47 0700 	adc.w	r7, r7, r0

inline void editExpoVals(uint8_t event, uint8_t which, bool edit, uint8_t y, uint8_t idt)
{
  uint8_t invBlk = edit ? INVERS : 0;

  ExpoData *ed = expoaddress(idt); // TODO volatile
  40b2a6:	4498      	add	r8, r3
  EXPO_FIELD_WHEN
};

inline void editExpoVals(uint8_t event, uint8_t which, bool edit, uint8_t y, uint8_t idt)
{
  uint8_t invBlk = edit ? INVERS : 0;
  40b2a8:	ea4f 0a47 	mov.w	sl, r7, lsl #1

  ExpoData *ed = expoaddress(idt); // TODO volatile
  40b2ac:	f108 0905 	add.w	r9, r8, #5

  switch(which)
  40b2b0:	2c05      	cmp	r4, #5
  40b2b2:	d838      	bhi.n	40b326 <_Z15menuProcExpoOneh+0x102>
  40b2b4:	e8df f004 	tbb	[pc, r4]
  40b2b8:	6d038195 	.word	0x6d038195
  40b2bc:	3c59      	.short	0x3c59
    case EXPO_FIELD_EXPO:
      lcd_outdezAtt(9*FW+5, y, ed->expo, invBlk|INFLIGHT(ed->expo));
      if (edit) CHECK_INFLIGHT_INCDEC_MODELVAR(event, ed->expo, -100, 100, 0, STR_DREXPO);
      break;
    case EXPO_FIELD_CURVE:
      putsCurve(6*FW+5, y, ed->curve+(ed->curve >= CURVE_BASE+4 ? 4 : 0), invBlk);
  40b2be:	f899 3002 	ldrb.w	r3, [r9, #2]
  40b2c2:	2029      	movs	r0, #41	; 0x29
  40b2c4:	b25a      	sxtb	r2, r3
  40b2c6:	2a0a      	cmp	r2, #10
  40b2c8:	bfcc      	ite	gt
  40b2ca:	2204      	movgt	r2, #4
  40b2cc:	2200      	movle	r2, #0
  40b2ce:	18d2      	adds	r2, r2, r3
  40b2d0:	b252      	sxtb	r2, r2
  40b2d2:	4631      	mov	r1, r6
  40b2d4:	4653      	mov	r3, sl
  40b2d6:	f7f8 f9a5 	bl	403624 <_Z9putsCurvehhah>
      if (invBlk) CHECK_INCDEC_MODELVAR(event, ed->curve, 0, 15);
  40b2da:	f1ba 0f00 	cmp.w	sl, #0
  40b2de:	d022      	beq.n	40b326 <_Z15menuProcExpoOneh+0x102>
  40b2e0:	f999 1002 	ldrsb.w	r1, [r9, #2]
  40b2e4:	2200      	movs	r2, #0
  40b2e6:	230f      	movs	r3, #15
  40b2e8:	9805      	ldr	r0, [sp, #20]
  40b2ea:	f7fb ffbd 	bl	407268 <_Z16checkIncDecModelhaaa>
      if (invBlk && ed->curve>=CURVE_BASE && event==EVT_KEY_FIRST(KEY_MENU)) {
  40b2ee:	9f05      	ldr	r7, [sp, #20]
      lcd_outdezAtt(9*FW+5, y, ed->expo, invBlk|INFLIGHT(ed->expo));
      if (edit) CHECK_INFLIGHT_INCDEC_MODELVAR(event, ed->expo, -100, 100, 0, STR_DREXPO);
      break;
    case EXPO_FIELD_CURVE:
      putsCurve(6*FW+5, y, ed->curve+(ed->curve >= CURVE_BASE+4 ? 4 : 0), invBlk);
      if (invBlk) CHECK_INCDEC_MODELVAR(event, ed->curve, 0, 15);
  40b2f0:	f889 0002 	strb.w	r0, [r9, #2]
      if (invBlk && ed->curve>=CURVE_BASE && event==EVT_KEY_FIRST(KEY_MENU)) {
  40b2f4:	f1a7 0160 	sub.w	r1, r7, #96	; 0x60
  40b2f8:	424b      	negs	r3, r1
  40b2fa:	eb43 0301 	adc.w	r3, r3, r1
  40b2fe:	2806      	cmp	r0, #6
  40b300:	bfd4      	ite	le
  40b302:	2300      	movle	r3, #0
  40b304:	f003 0301 	andgt.w	r3, r3, #1
  40b308:	b16b      	cbz	r3, 40b326 <_Z15menuProcExpoOneh+0x102>
        s_curveChan = ed->curve - (ed->curve >= CURVE_BASE+4 ? CURVE_BASE-4 : CURVE_BASE);
  40b30a:	280a      	cmp	r0, #10
  40b30c:	bfd4      	ite	le
  40b30e:	2307      	movle	r3, #7
  40b310:	2303      	movgt	r3, #3
  40b312:	f240 1208 	movw	r2, #264	; 0x108
  40b316:	1ac0      	subs	r0, r0, r3
  40b318:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40b31c:	f882 0897 	strb.w	r0, [r2, #2199]	; 0x897
        pushMenu(menuProcCurveOne);
  40b320:	4868      	ldr	r0, [pc, #416]	; (40b4c4 <_Z15menuProcExpoOneh+0x2a0>)
  40b322:	f7fc f943 	bl	4075ac <_Z8pushMenuPFvhE>

  int8_t sub = m_posVert;

  uint8_t y = FH;

  for (uint8_t i=0; i<EXPO_ONE_LINES_COUNT+1; i++) {
  40b326:	2d07      	cmp	r5, #7
  40b328:	d06e      	beq.n	40b408 <_Z15menuProcExpoOneh+0x1e4>
void menuProcExpoOne(uint8_t event)
{
  ExpoData *ed = expoaddress(s_currIdx);
  putsChnRaw(7*FW+FW/2,0,ed->chn+1,0);

  SIMPLE_SUBMENU(STR_MENUDREXPO, EXPO_ONE_LINES_COUNT);
  40b32a:	3501      	adds	r5, #1
  40b32c:	b2ed      	uxtb	r5, r5
  40b32e:	e7a3      	b.n	40b278 <_Z15menuProcExpoOneh+0x54>
    case EXPO_FIELD_SWITCH:
      putsSwitches(6*FW+5, y, ed->swtch, invBlk);
      if(edit) CHECK_INCDEC_MODELVAR(event, ed->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
      break;
    case EXPO_FIELD_WHEN:
      lcd_putsiAtt(6*FW+5, y, STR_VWHEN, 3-ed->mode, invBlk);
  40b330:	f898 3005 	ldrb.w	r3, [r8, #5]
  40b334:	2029      	movs	r0, #41	; 0x29
  40b336:	f1c3 0303 	rsb	r3, r3, #3
  40b33a:	b2db      	uxtb	r3, r3
  40b33c:	4631      	mov	r1, r6
  40b33e:	4a62      	ldr	r2, [pc, #392]	; (40b4c8 <_Z15menuProcExpoOneh+0x2a4>)
  40b340:	f8cd a000 	str.w	sl, [sp]
  40b344:	f7f7 fa94 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
      if(edit) ed->mode = 4 - checkIncDecModel(event, 4-ed->mode, 1, 3);
  40b348:	2f00      	cmp	r7, #0
  40b34a:	d0ec      	beq.n	40b326 <_Z15menuProcExpoOneh+0x102>
  40b34c:	f898 1005 	ldrb.w	r1, [r8, #5]
  40b350:	9805      	ldr	r0, [sp, #20]
  40b352:	f1c1 0104 	rsb	r1, r1, #4
  40b356:	b249      	sxtb	r1, r1
  40b358:	2201      	movs	r2, #1
  40b35a:	2303      	movs	r3, #3
  40b35c:	f7fb ff84 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b360:	f1c0 0004 	rsb	r0, r0, #4
  40b364:	f888 0005 	strb.w	r0, [r8, #5]
  40b368:	e7df      	b.n	40b32a <_Z15menuProcExpoOneh+0x106>
#endif
      }
      break;
#endif
    case EXPO_FIELD_SWITCH:
      putsSwitches(6*FW+5, y, ed->swtch, invBlk);
  40b36a:	f999 2003 	ldrsb.w	r2, [r9, #3]
  40b36e:	2029      	movs	r0, #41	; 0x29
  40b370:	4631      	mov	r1, r6
  40b372:	4653      	mov	r3, sl
  40b374:	f7f8 f8be 	bl	4034f4 <_Z12putsSwitcheshhah>
      if(edit) CHECK_INCDEC_MODELVAR(event, ed->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
  40b378:	2f00      	cmp	r7, #0
  40b37a:	d0d4      	beq.n	40b326 <_Z15menuProcExpoOneh+0x102>
  40b37c:	f999 1003 	ldrsb.w	r1, [r9, #3]
  40b380:	9805      	ldr	r0, [sp, #20]
  40b382:	f06f 0228 	mvn.w	r2, #40	; 0x28
  40b386:	2329      	movs	r3, #41	; 0x29
  40b388:	f7fb ff6e 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b38c:	f889 0003 	strb.w	r0, [r9, #3]
  40b390:	e7cb      	b.n	40b32a <_Z15menuProcExpoOneh+0x106>
      break;
#ifdef FLIGHT_PHASES
    case EXPO_FIELD_FLIGHT_PHASE:
      {
#if defined(PCBARM)
        putsFlightPhase(6*FW+5, y, ed->phase, invBlk);
  40b392:	f999 2004 	ldrsb.w	r2, [r9, #4]
  40b396:	2029      	movs	r0, #41	; 0x29
  40b398:	4631      	mov	r1, r6
  40b39a:	4653      	mov	r3, sl
  40b39c:	f7f8 f90c 	bl	4035b8 <_Z15putsFlightPhasehhah>
        if(edit) { ed->phase = checkIncDecModel(event, ed->phase, -MAX_PHASES, MAX_PHASES); }
  40b3a0:	2f00      	cmp	r7, #0
  40b3a2:	d0c0      	beq.n	40b326 <_Z15menuProcExpoOneh+0x102>
  40b3a4:	f999 1004 	ldrsb.w	r1, [r9, #4]
  40b3a8:	9805      	ldr	r0, [sp, #20]
  40b3aa:	f06f 0208 	mvn.w	r2, #8
  40b3ae:	2309      	movs	r3, #9
  40b3b0:	f7fb ff5a 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b3b4:	f889 0004 	strb.w	r0, [r9, #4]
  40b3b8:	e7b7      	b.n	40b32a <_Z15menuProcExpoOneh+0x106>
        lcd_outdezAtt(9*FW+5, y, ed->weight, invBlk|INFLIGHT(*bitfield));
        if (edit) CHECK_INFLIGHT_INCDEC_MODELVAR_BITFIELD(event, ed->weight, 0, 100, 0, STR_DRWEIGHT, 1);
      }
      break;
    case EXPO_FIELD_EXPO:
      lcd_outdezAtt(9*FW+5, y, ed->expo, invBlk|INFLIGHT(ed->expo));
  40b3ba:	f999 2006 	ldrsb.w	r2, [r9, #6]
  40b3be:	203b      	movs	r0, #59	; 0x3b
  40b3c0:	4631      	mov	r1, r6
  40b3c2:	4653      	mov	r3, sl
  40b3c4:	f7f7 fd38 	bl	402e38 <_Z13lcd_outdezAtthhsh>
      if (edit) CHECK_INFLIGHT_INCDEC_MODELVAR(event, ed->expo, -100, 100, 0, STR_DREXPO);
  40b3c8:	2f00      	cmp	r7, #0
  40b3ca:	d0ac      	beq.n	40b326 <_Z15menuProcExpoOneh+0x102>
  40b3cc:	f999 1006 	ldrsb.w	r1, [r9, #6]
  40b3d0:	9805      	ldr	r0, [sp, #20]
  40b3d2:	f06f 0263 	mvn.w	r2, #99	; 0x63
  40b3d6:	2364      	movs	r3, #100	; 0x64
  40b3d8:	f7fb ff46 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b3dc:	f889 0006 	strb.w	r0, [r9, #6]
  40b3e0:	e7a3      	b.n	40b32a <_Z15menuProcExpoOneh+0x106>
  switch(which)
  {
    case EXPO_FIELD_WIDTH:
      {
        PREPARE_INFLIGHT_BITFIELD(&ed->expo - 1);
        lcd_outdezAtt(9*FW+5, y, ed->weight, invBlk|INFLIGHT(*bitfield));
  40b3e2:	f899 2005 	ldrb.w	r2, [r9, #5]
  40b3e6:	203b      	movs	r0, #59	; 0x3b
  40b3e8:	4631      	mov	r1, r6
  40b3ea:	4653      	mov	r3, sl
  40b3ec:	f7f7 fd24 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if (edit) CHECK_INFLIGHT_INCDEC_MODELVAR_BITFIELD(event, ed->weight, 0, 100, 0, STR_DRWEIGHT, 1);
  40b3f0:	2f00      	cmp	r7, #0
  40b3f2:	d098      	beq.n	40b326 <_Z15menuProcExpoOneh+0x102>
  40b3f4:	f999 1005 	ldrsb.w	r1, [r9, #5]
  40b3f8:	9805      	ldr	r0, [sp, #20]
  40b3fa:	2200      	movs	r2, #0
  40b3fc:	2364      	movs	r3, #100	; 0x64
  40b3fe:	f7fb ff33 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b402:	f889 0005 	strb.w	r0, [r9, #5]
  40b406:	e790      	b.n	40b32a <_Z15menuProcExpoOneh+0x106>
    lcd_putsiAtt(0, y, STR_EXPLABELS, i, 0);
    editExpoVals(event, i, sub==i, y, s_currIdx);
    y+=FH;
  }

  DrawCurve(expoFn);
  40b408:	4830      	ldr	r0, [pc, #192]	; (40b4cc <_Z15menuProcExpoOneh+0x2a8>)
  40b40a:	f7f7 fb69 	bl	402ae0 <_Z9DrawCurvePFssE>

  int16_t x512 = calibratedStick[ed->chn];
  40b40e:	9f03      	ldr	r7, [sp, #12]
  40b410:	f240 1208 	movw	r2, #264	; 0x108
  40b414:	787b      	ldrb	r3, [r7, #1]
  40b416:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40b41a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  int16_t y512 = expoFn(x512);
  40b41e:	f9b3 48b8 	ldrsh.w	r4, [r3, #2232]	; 0x8b8
  40b422:	4620      	mov	r0, r4
  40b424:	f7f9 fd3e 	bl	404ea4 <_Z6expoFns>

  lcd_outdezAtt(20*FW, 6*FH, x512*25/256, 0);
  40b428:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40b42c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40b430:	f102 03ff 	add.w	r3, r2, #255	; 0xff
  40b434:	ea32 0222 	bics.w	r2, r2, r2, asr #32
  40b438:	bf28      	it	cs
  40b43a:	461a      	movcs	r2, r3
  }

  DrawCurve(expoFn);

  int16_t x512 = calibratedStick[ed->chn];
  int16_t y512 = expoFn(x512);
  40b43c:	4606      	mov	r6, r0

  lcd_outdezAtt(20*FW, 6*FH, x512*25/256, 0);
  40b43e:	2130      	movs	r1, #48	; 0x30
  40b440:	2078      	movs	r0, #120	; 0x78
  40b442:	2300      	movs	r3, #0
  40b444:	f342 220f 	sbfx	r2, r2, #8, #16
  40b448:	f7f7 fcf6 	bl	402e38 <_Z13lcd_outdezAtthhsh>
  lcd_outdezAtt(14*FW, 1*FH, y512*25/256, 0);
  40b44c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  40b450:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40b454:	f102 03ff 	add.w	r3, r2, #255	; 0xff
  40b458:	ea32 0222 	bics.w	r2, r2, r2, asr #32
  40b45c:	bf28      	it	cs
  40b45e:	461a      	movcs	r2, r3

  x512 = X0+x512/(RESXu/WCHART);
  y512 = (DISPLAY_H-1) - (uint16_t)((y512+RESX)/2) * (DISPLAY_H-1) / RESX;
  40b460:	f506 6680 	add.w	r6, r6, #1024	; 0x400

  int16_t x512 = calibratedStick[ed->chn];
  int16_t y512 = expoFn(x512);

  lcd_outdezAtt(20*FW, 6*FH, x512*25/256, 0);
  lcd_outdezAtt(14*FW, 1*FH, y512*25/256, 0);
  40b464:	2300      	movs	r3, #0
  40b466:	2054      	movs	r0, #84	; 0x54
  40b468:	2108      	movs	r1, #8
  40b46a:	f342 220f 	sbfx	r2, r2, #8, #16

  x512 = X0+x512/(RESXu/WCHART);
  y512 = (DISPLAY_H-1) - (uint16_t)((y512+RESX)/2) * (DISPLAY_H-1) / RESX;
  40b46e:	eb06 76d6 	add.w	r6, r6, r6, lsr #31

  int16_t x512 = calibratedStick[ed->chn];
  int16_t y512 = expoFn(x512);

  lcd_outdezAtt(20*FW, 6*FH, x512*25/256, 0);
  lcd_outdezAtt(14*FW, 1*FH, y512*25/256, 0);
  40b472:	f7f7 fce1 	bl	402e38 <_Z13lcd_outdezAtthhsh>

  x512 = X0+x512/(RESXu/WCHART);
  y512 = (DISPLAY_H-1) - (uint16_t)((y512+RESX)/2) * (DISPLAY_H-1) / RESX;
  40b476:	f3c6 024f 	ubfx	r2, r6, #1, #16
  40b47a:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
  40b47e:	f502 737e 	add.w	r3, r2, #1016	; 0x3f8
  40b482:	3307      	adds	r3, #7
  40b484:	ea32 0222 	bics.w	r2, r2, r2, asr #32
  40b488:	bf28      	it	cs
  40b48a:	461a      	movcs	r2, r3
  40b48c:	1296      	asrs	r6, r2, #10
  int16_t y512 = expoFn(x512);

  lcd_outdezAtt(20*FW, 6*FH, x512*25/256, 0);
  lcd_outdezAtt(14*FW, 1*FH, y512*25/256, 0);

  x512 = X0+x512/(RESXu/WCHART);
  40b48e:	0964      	lsrs	r4, r4, #5
  y512 = (DISPLAY_H-1) - (uint16_t)((y512+RESX)/2) * (DISPLAY_H-1) / RESX;

  lcd_vline(x512, y512-3,3*2+1);
  40b490:	f1c6 063f 	rsb	r6, r6, #63	; 0x3f
  40b494:	b2f6      	uxtb	r6, r6
  40b496:	345e      	adds	r4, #94	; 0x5e
  40b498:	1ef1      	subs	r1, r6, #3
  40b49a:	b2e4      	uxtb	r4, r4
  40b49c:	462a      	mov	r2, r5
  40b49e:	4620      	mov	r0, r4
  40b4a0:	b249      	sxtb	r1, r1
  40b4a2:	f7f7 fb55 	bl	402b50 <_Z9lcd_vlinehaa>
  lcd_hline(x512-3, y512,3*2+1);
  40b4a6:	3c03      	subs	r4, #3
  40b4a8:	b2e0      	uxtb	r0, r4
  40b4aa:	4631      	mov	r1, r6
  40b4ac:	462a      	mov	r2, r5
}
  40b4ae:	b007      	add	sp, #28
  40b4b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  x512 = X0+x512/(RESXu/WCHART);
  y512 = (DISPLAY_H-1) - (uint16_t)((y512+RESX)/2) * (DISPLAY_H-1) / RESX;

  lcd_vline(x512, y512-3,3*2+1);
  lcd_hline(x512-3, y512,3*2+1);
  40b4b4:	f7f7 ba9c 	b.w	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
  40b4b8:	20000244 	.word	0x20000244
  40b4bc:	00410c9c 	.word	0x00410c9c
  40b4c0:	004103da 	.word	0x004103da
  40b4c4:	00407641 	.word	0x00407641
  40b4c8:	004103b4 	.word	0x004103b4
  40b4cc:	00404ea5 	.word	0x00404ea5
  40b4d0:	20001200 	.word	0x20001200

0040b4d4 <_Z17menuProcDiagCalibh>:
#endif

}

void menuProcDiagCalib(uint8_t event)
{
  40b4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SIMPLE_MENU(STR_MENUCALIBRATION, menuTabDiag, e_Calib, 1);
  40b4d8:	2105      	movs	r1, #5
#endif

}

void menuProcDiagCalib(uint8_t event)
{
  40b4da:	b082      	sub	sp, #8
  SIMPLE_MENU(STR_MENUCALIBRATION, menuTabDiag, e_Calib, 1);
  40b4dc:	2600      	movs	r6, #0
  40b4de:	4a71      	ldr	r2, [pc, #452]	; (40b6a4 <_Z17menuProcDiagCalibh+0x1d0>)
  40b4e0:	2306      	movs	r3, #6
#endif

}

void menuProcDiagCalib(uint8_t event)
{
  40b4e2:	4680      	mov	r8, r0
  SIMPLE_MENU(STR_MENUCALIBRATION, menuTabDiag, e_Calib, 1);
  40b4e4:	9600      	str	r6, [sp, #0]
  40b4e6:	f7fe fbdf 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  40b4ea:	b910      	cbnz	r0, 40b4f2 <_Z17menuProcDiagCalibh+0x1e>
      g_eeGeneral.chkSum = evalChkSum();
      break;
  }

  doMainScreenGrphics();
}
  40b4ec:	b002      	add	sp, #8
  40b4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

}

void menuProcDiagCalib(uint8_t event)
{
  SIMPLE_MENU(STR_MENUCALIBRATION, menuTabDiag, e_Calib, 1);
  40b4f2:	4d6d      	ldr	r5, [pc, #436]	; (40b6a8 <_Z17menuProcDiagCalibh+0x1d4>)
  40b4f4:	2302      	movs	r3, #2
  40b4f6:	4630      	mov	r0, r6
  40b4f8:	4631      	mov	r1, r6
  40b4fa:	4a6c      	ldr	r2, [pc, #432]	; (40b6ac <_Z17menuProcDiagCalibh+0x1d8>)
  40b4fc:	4f6c      	ldr	r7, [pc, #432]	; (40b6b0 <_Z17menuProcDiagCalibh+0x1dc>)
  40b4fe:	4c6d      	ldr	r4, [pc, #436]	; (40b6b4 <_Z17menuProcDiagCalibh+0x1e0>)
  40b500:	f7f7 f9da 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  40b504:	462b      	mov	r3, r5
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  40b506:	5dba      	ldrb	r2, [r7, r6]

  static uint8_t idxState;

  for (uint8_t i=0; i<7; i++) { //get low and high vals for sticks and trims
    int16_t vt = anaIn(i);
    reusableBuffer.calib.loVals[i] = min(vt, reusableBuffer.calib.loVals[i]);
  40b508:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
  return *p;
  40b50c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    reusableBuffer.calib.hiVals[i] = max(vt, reusableBuffer.calib.hiVals[i]);
  40b510:	f9b3 001c 	ldrsh.w	r0, [r3, #28]

  static uint8_t idxState;

  for (uint8_t i=0; i<7; i++) { //get low and high vals for sticks and trims
    int16_t vt = anaIn(i);
    reusableBuffer.calib.loVals[i] = min(vt, reusableBuffer.calib.loVals[i]);
  40b514:	f9b2 29b0 	ldrsh.w	r2, [r2, #2480]	; 0x9b0
    reusableBuffer.calib.hiVals[i] = max(vt, reusableBuffer.calib.hiVals[i]);
  40b518:	3601      	adds	r6, #1

  static uint8_t idxState;

  for (uint8_t i=0; i<7; i++) { //get low and high vals for sticks and trims
    int16_t vt = anaIn(i);
    reusableBuffer.calib.loVals[i] = min(vt, reusableBuffer.calib.loVals[i]);
  40b51a:	428a      	cmp	r2, r1
  40b51c:	bfb8      	it	lt
  40b51e:	4611      	movlt	r1, r2
    reusableBuffer.calib.hiVals[i] = max(vt, reusableBuffer.calib.hiVals[i]);
  40b520:	4282      	cmp	r2, r0
  40b522:	bfb8      	it	lt
  40b524:	4602      	movlt	r2, r0
  40b526:	839a      	strh	r2, [r3, #28]

  static uint8_t idxState;

  for (uint8_t i=0; i<7; i++) { //get low and high vals for sticks and trims
    int16_t vt = anaIn(i);
    reusableBuffer.calib.loVals[i] = min(vt, reusableBuffer.calib.loVals[i]);
  40b528:	81d9      	strh	r1, [r3, #14]
    reusableBuffer.calib.hiVals[i] = max(vt, reusableBuffer.calib.hiVals[i]);
  40b52a:	3302      	adds	r3, #2
{
  SIMPLE_MENU(STR_MENUCALIBRATION, menuTabDiag, e_Calib, 1);

  static uint8_t idxState;

  for (uint8_t i=0; i<7; i++) { //get low and high vals for sticks and trims
  40b52c:	2e07      	cmp	r6, #7
  40b52e:	4a61      	ldr	r2, [pc, #388]	; (40b6b4 <_Z17menuProcDiagCalibh+0x1e0>)
  40b530:	d1e9      	bne.n	40b506 <_Z17menuProcDiagCalibh+0x32>
    reusableBuffer.calib.loVals[i] = min(vt, reusableBuffer.calib.loVals[i]);
    reusableBuffer.calib.hiVals[i] = max(vt, reusableBuffer.calib.hiVals[i]);
    //if(i>=4) midVals[i] = (loVals[i] + hiVals[i])/2;
  }

  s_noScroll = idxState; // make sure we don't scroll while calibrating
  40b532:	4961      	ldr	r1, [pc, #388]	; (40b6b8 <_Z17menuProcDiagCalibh+0x1e4>)

  switch(event)
  40b534:	f1b8 0f20 	cmp.w	r8, #32
    reusableBuffer.calib.loVals[i] = min(vt, reusableBuffer.calib.loVals[i]);
    reusableBuffer.calib.hiVals[i] = max(vt, reusableBuffer.calib.hiVals[i]);
    //if(i>=4) midVals[i] = (loVals[i] + hiVals[i])/2;
  }

  s_noScroll = idxState; // make sure we don't scroll while calibrating
  40b538:	f891 3eae 	ldrb.w	r3, [r1, #3758]	; 0xeae
  40b53c:	f881 3e7c 	strb.w	r3, [r1, #3708]	; 0xe7c

  switch(event)
  40b540:	d00e      	beq.n	40b560 <_Z17menuProcDiagCalibh+0x8c>
  40b542:	f1b8 0fbf 	cmp.w	r8, #191	; 0xbf
  40b546:	bf18      	it	ne
  40b548:	4618      	movne	r0, r3
  40b54a:	d019      	beq.n	40b580 <_Z17menuProcDiagCalibh+0xac>
      }
      break;
  }


  switch (idxState) {
  40b54c:	2801      	cmp	r0, #1
  40b54e:	d020      	beq.n	40b592 <_Z17menuProcDiagCalibh+0xbe>
  40b550:	d319      	bcc.n	40b586 <_Z17menuProcDiagCalibh+0xb2>
  40b552:	2802      	cmp	r0, #2
  40b554:	d03c      	beq.n	40b5d0 <_Z17menuProcDiagCalibh+0xfc>
      g_eeGeneral.chkSum = evalChkSum();
      break;
  }

  doMainScreenGrphics();
}
  40b556:	b002      	add	sp, #8
  40b558:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

      g_eeGeneral.chkSum = evalChkSum();
      break;
  }

  doMainScreenGrphics();
  40b55c:	f7f7 bd1a 	b.w	402f94 <_Z19doMainScreenGrphicsv>
    case EVT_ENTRY:
      idxState = 0;
      break;

    case EVT_KEY_BREAK(KEY_MENU):
      idxState++;
  40b560:	1c58      	adds	r0, r3, #1
  40b562:	b2c0      	uxtb	r0, r0
      if (idxState==3) {
  40b564:	2803      	cmp	r0, #3
    case EVT_ENTRY:
      idxState = 0;
      break;

    case EVT_KEY_BREAK(KEY_MENU):
      idxState++;
  40b566:	f881 0eae 	strb.w	r0, [r1, #3758]	; 0xeae
      if (idxState==3) {
  40b56a:	d1ef      	bne.n	40b54c <_Z17menuProcDiagCalibh+0x78>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40b56c:	f892 09a8 	ldrb.w	r0, [r2, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40b570:	f8b2 39aa 	ldrh.w	r3, [r2, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40b574:	f040 0001 	orr.w	r0, r0, #1
  40b578:	f882 09a8 	strb.w	r0, [r2, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40b57c:	f8a2 39ac 	strh.w	r3, [r2, #2476]	; 0x9ac
        STORE_GENERALVARS;
        idxState = 0;
  40b580:	2300      	movs	r3, #0
  40b582:	f881 3eae 	strb.w	r3, [r1, #3758]	; 0xeae


  switch (idxState) {
    case 0:
      // START CALIBRATION
      lcd_puts(3*FW, 3*FH, STR_MENUTOSTART);
  40b586:	2012      	movs	r0, #18
  40b588:	2118      	movs	r1, #24
  40b58a:	4a4c      	ldr	r2, [pc, #304]	; (40b6bc <_Z17menuProcDiagCalibh+0x1e8>)
  40b58c:	f7f7 f99c 	bl	4028c8 <_Z8lcd_putshhPKc>
  40b590:	e7e1      	b.n	40b556 <_Z17menuProcDiagCalibh+0x82>
      break;

    case 1:
      // SET MIDPOINT
      lcd_putsAtt(5*FW, 2*FH, STR_SETMIDPOINT, s_noScroll ? INVERS : 0);
  40b592:	2b00      	cmp	r3, #0
  40b594:	bf18      	it	ne
  40b596:	2302      	movne	r3, #2
  40b598:	4a49      	ldr	r2, [pc, #292]	; (40b6c0 <_Z17menuProcDiagCalibh+0x1ec>)
  40b59a:	201e      	movs	r0, #30
  40b59c:	2110      	movs	r1, #16
  40b59e:	f7f7 f98b 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);
  40b5a2:	2012      	movs	r0, #18
  40b5a4:	2118      	movs	r1, #24
  40b5a6:	4a47      	ldr	r2, [pc, #284]	; (40b6c4 <_Z17menuProcDiagCalibh+0x1f0>)
  40b5a8:	f7f7 f98e 	bl	4028c8 <_Z8lcd_putshhPKc>
  40b5ac:	2300      	movs	r3, #0
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  40b5ae:	5cfa      	ldrb	r2, [r7, r3]

      for (uint8_t i=0; i<7; i++) {
        reusableBuffer.calib.loVals[i] = 15000;
  40b5b0:	f643 2198 	movw	r1, #15000	; 0x3a98
  return *p;
  40b5b4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
        reusableBuffer.calib.hiVals[i] = -15000;
        reusableBuffer.calib.midVals[i] = anaIn(i);
  40b5b8:	3301      	adds	r3, #1
  40b5ba:	f8b2 29b0 	ldrh.w	r2, [r2, #2480]	; 0x9b0
      // SET MIDPOINT
      lcd_putsAtt(5*FW, 2*FH, STR_SETMIDPOINT, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
        reusableBuffer.calib.loVals[i] = 15000;
  40b5be:	81e9      	strh	r1, [r5, #14]
    case 1:
      // SET MIDPOINT
      lcd_putsAtt(5*FW, 2*FH, STR_SETMIDPOINT, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
  40b5c0:	2b07      	cmp	r3, #7
        reusableBuffer.calib.loVals[i] = 15000;
        reusableBuffer.calib.hiVals[i] = -15000;
  40b5c2:	f24c 5168 	movw	r1, #50536	; 0xc568
  40b5c6:	83a9      	strh	r1, [r5, #28]
        reusableBuffer.calib.midVals[i] = anaIn(i);
  40b5c8:	f825 2b02 	strh.w	r2, [r5], #2
    case 1:
      // SET MIDPOINT
      lcd_putsAtt(5*FW, 2*FH, STR_SETMIDPOINT, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
  40b5cc:	d1ef      	bne.n	40b5ae <_Z17menuProcDiagCalibh+0xda>
  40b5ce:	e7c2      	b.n	40b556 <_Z17menuProcDiagCalibh+0x82>
      }
      break;

    case 2:
      // MOVE STICKS/POTS
      lcd_putsAtt(3*FW, 2*FH, STR_MOVESTICKSPOTS, s_noScroll ? INVERS : 0);
  40b5d0:	2b00      	cmp	r3, #0
  40b5d2:	bf18      	it	ne
  40b5d4:	2302      	movne	r3, #2
  40b5d6:	4a3c      	ldr	r2, [pc, #240]	; (40b6c8 <_Z17menuProcDiagCalibh+0x1f4>)
  40b5d8:	2012      	movs	r0, #18
  40b5da:	2110      	movs	r1, #16
  40b5dc:	f7f7 f96c 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);
  40b5e0:	4a38      	ldr	r2, [pc, #224]	; (40b6c4 <_Z17menuProcDiagCalibh+0x1f0>)
  40b5e2:	2012      	movs	r0, #18
  40b5e4:	2118      	movs	r1, #24
  40b5e6:	f7f7 f96f 	bl	4028c8 <_Z8lcd_putshhPKc>
  40b5ea:	4a38      	ldr	r2, [pc, #224]	; (40b6cc <_Z17menuProcDiagCalibh+0x1f8>)
  40b5ec:	2300      	movs	r3, #0

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
  40b5ee:	f832 0f02 	ldrh.w	r0, [r2, #2]!
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b5f2:	f103 0c04 	add.w	ip, r3, #4
      // MOVE STICKS/POTS
      lcd_putsAtt(3*FW, 2*FH, STR_MOVESTICKSPOTS, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
  40b5f6:	89d1      	ldrh	r1, [r2, #14]
  40b5f8:	b206      	sxth	r6, r0
  40b5fa:	b20d      	sxth	r5, r1
  40b5fc:	1b75      	subs	r5, r6, r5
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  40b5fe:	2d00      	cmp	r5, #0
  40b600:	bfb8      	it	lt
  40b602:	426d      	neglt	r5, r5
  40b604:	2d32      	cmp	r5, #50	; 0x32
  40b606:	dd34      	ble.n	40b672 <_Z17menuProcDiagCalibh+0x19e>
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
  40b608:	f832 5c0e 	ldrh.w	r5, [r2, #-14]
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b60c:	f103 080c 	add.w	r8, r3, #12
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
  40b610:	b2ae      	uxth	r6, r5
  40b612:	1a30      	subs	r0, r6, r0
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
  40b614:	1b89      	subs	r1, r1, r6
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
  40b616:	b280      	uxth	r0, r0
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
  40b618:	b289      	uxth	r1, r1

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b61a:	b207      	sxth	r7, r0
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b61c:	b20e      	sxth	r6, r1

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b61e:	f107 0a3f 	add.w	sl, r7, #63	; 0x3f
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b622:	f106 093f 	add.w	r9, r6, #63	; 0x3f

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b626:	ea37 0727 	bics.w	r7, r7, r7, asr #32
  40b62a:	bf28      	it	cs
  40b62c:	4657      	movcs	r7, sl
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b62e:	ea36 0626 	bics.w	r6, r6, r6, asr #32
  40b632:	bf28      	it	cs
  40b634:	464e      	movcs	r6, r9

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b636:	eba0 17a7 	sub.w	r7, r0, r7, asr #6
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b63a:	eba1 16a6 	sub.w	r6, r1, r6, asr #6

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b63e:	b2bf      	uxth	r7, r7
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b640:	b2b6      	uxth	r6, r6
  40b642:	eb04 0148 	add.w	r1, r4, r8, lsl #1
      lcd_putsAtt(3*FW, 2*FH, STR_MOVESTICKSPOTS, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
  40b646:	eb04 0043 	add.w	r0, r4, r3, lsl #1
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b64a:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
      lcd_putsAtt(3*FW, 2*FH, STR_MOVESTICKSPOTS, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
  40b64e:	ea4f 2a15 	mov.w	sl, r5, lsr #8
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b652:	ea4f 2917 	mov.w	r9, r7, lsr #8
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b656:	ea4f 2816 	mov.w	r8, r6, lsr #8
      lcd_putsAtt(3*FW, 2*FH, STR_MOVESTICKSPOTS, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
        if (abs(reusableBuffer.calib.loVals[i]-reusableBuffer.calib.hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = reusableBuffer.calib.midVals[i];
  40b65a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
  40b65e:	f880 a026 	strb.w	sl, [r0, #38]	; 0x26
          int16_t v = reusableBuffer.calib.midVals[i] - reusableBuffer.calib.loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
  40b662:	f88c 702b 	strb.w	r7, [ip, #43]	; 0x2b
  40b666:	f88c 902c 	strb.w	r9, [ip, #44]	; 0x2c
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
  40b66a:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
  40b66e:	f881 802a 	strb.w	r8, [r1, #42]	; 0x2a
  40b672:	3301      	adds	r3, #1
    case 2:
      // MOVE STICKS/POTS
      lcd_putsAtt(3*FW, 2*FH, STR_MOVESTICKSPOTS, s_noScroll ? INVERS : 0);
      lcd_puts(3*FW, 3*FH, STR_MENUWHENDONE);

      for (uint8_t i=0; i<7; i++) {
  40b674:	2b07      	cmp	r3, #7
  40b676:	d1ba      	bne.n	40b5ee <_Z17menuProcDiagCalibh+0x11a>
  40b678:	2100      	movs	r1, #0
  40b67a:	460b      	mov	r3, r1

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
    sum += g_eeGeneral.calibMid[i];
  40b67c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
  40b680:	f892 0025 	ldrb.w	r0, [r2, #37]	; 0x25
  40b684:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  40b688:	3301      	adds	r3, #1
    sum += g_eeGeneral.calibMid[i];
  40b68a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
  40b68e:	1851      	adds	r1, r2, r1
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  40b690:	2b0c      	cmp	r3, #12
    sum += g_eeGeneral.calibMid[i];
  40b692:	4a08      	ldr	r2, [pc, #32]	; (40b6b4 <_Z17menuProcDiagCalibh+0x1e0>)
  40b694:	b289      	uxth	r1, r1
}

uint16_t evalChkSum()
{
  uint16_t sum=0;
  for (int i=0; i<12;i++)
  40b696:	d1f1      	bne.n	40b67c <_Z17menuProcDiagCalibh+0x1a8>
          v = reusableBuffer.calib.hiVals[i] - reusableBuffer.calib.midVals[i];
          g_eeGeneral.calibSpanPos[i] = v - v/64;
        }
      }

      g_eeGeneral.chkSum = evalChkSum();
  40b698:	0a0b      	lsrs	r3, r1, #8
  40b69a:	f882 104f 	strb.w	r1, [r2, #79]	; 0x4f
  40b69e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  40b6a2:	e758      	b.n	40b556 <_Z17menuProcDiagCalibh+0x82>
  40b6a4:	00410914 	.word	0x00410914
  40b6a8:	20002084 	.word	0x20002084
  40b6ac:	00410d60 	.word	0x00410d60
  40b6b0:	0040f750 	.word	0x0040f750
  40b6b4:	20000108 	.word	0x20000108
  40b6b8:	20001200 	.word	0x20001200
  40b6bc:	00410d6c 	.word	0x00410d6c
  40b6c0:	00410d7c 	.word	0x00410d7c
  40b6c4:	00410d8c 	.word	0x00410d8c
  40b6c8:	00410da0 	.word	0x00410da0
  40b6cc:	20002090 	.word	0x20002090

0040b6d0 <_Z13menuProcModelh>:
#define IS_PXX_PROTOCOL(protocol) (0)
#endif

#define MODEL_PARAM_OFS (9*FW+2)
void menuProcModel(uint8_t event)
{
  40b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);
  40b6d4:	f8df 9248 	ldr.w	r9, [pc, #584]	; 40b920 <_Z13menuProcModelh+0x250>
#define IS_PXX_PROTOCOL(protocol) (0)
#endif

#define MODEL_PARAM_OFS (9*FW+2)
void menuProcModel(uint8_t event)
{
  40b6d8:	b08d      	sub	sp, #52	; 0x34
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);
  40b6da:	f899 2051 	ldrb.w	r2, [r9, #81]	; 0x51
#define IS_PXX_PROTOCOL(protocol) (0)
#endif

#define MODEL_PARAM_OFS (9*FW+2)
void menuProcModel(uint8_t event)
{
  40b6de:	9008      	str	r0, [sp, #32]
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);
  40b6e0:	3201      	adds	r2, #1
  40b6e2:	202a      	movs	r0, #42	; 0x2a
  40b6e4:	2100      	movs	r1, #0
  40b6e6:	2312      	movs	r3, #18
  40b6e8:	2502      	movs	r5, #2
  40b6ea:	9500      	str	r5, [sp, #0]
  40b6ec:	f7f7 fa32 	bl	402b54 <_Z14lcd_outdezNAtthhshh>

  uint8_t protocol = g_model.protocol;
  40b6f0:	f899 314c 	ldrb.w	r3, [r9, #332]	; 0x14c
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});
  40b6f4:	4c85      	ldr	r4, [pc, #532]	; (40b90c <_Z13menuProcModelh+0x23c>)
#define MODEL_PARAM_OFS (9*FW+2)
void menuProcModel(uint8_t event)
{
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);

  uint8_t protocol = g_model.protocol;
  40b6f6:	f003 0307 	and.w	r3, r3, #7
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});
  40b6fa:	260b      	movs	r6, #11
  40b6fc:	42ab      	cmp	r3, r5
  40b6fe:	bf8c      	ite	hi
  40b700:	270a      	movhi	r7, #10
  40b702:	4637      	movls	r7, r6
#define MODEL_PARAM_OFS (9*FW+2)
void menuProcModel(uint8_t event)
{
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);

  uint8_t protocol = g_model.protocol;
  40b704:	9307      	str	r3, [sp, #28]
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});
  40b706:	9808      	ldr	r0, [sp, #32]
  40b708:	2101      	movs	r1, #1
  40b70a:	f5a4 7228 	sub.w	r2, r4, #672	; 0x2a0
  40b70e:	4633      	mov	r3, r6
  40b710:	e88d 00d0 	stmia.w	sp, {r4, r6, r7}
  40b714:	f7fc fc00 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  40b718:	b910      	cbnz	r0, 40b720 <_Z13menuProcModelh+0x50>
        }
#endif
        break;
    }
  }
}
  40b71a:	b00d      	add	sp, #52	; 0x34
  40b71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void menuProcModel(uint8_t event)
{
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);

  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});
  40b720:	2000      	movs	r0, #0

  uint8_t  sub = m_posVert - 1;
  40b722:	4e7b      	ldr	r6, [pc, #492]	; (40b910 <_Z13menuProcModelh+0x240>)
void menuProcModel(uint8_t event)
{
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);

  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});
  40b724:	f104 020c 	add.w	r2, r4, #12
  40b728:	462b      	mov	r3, r5
  40b72a:	4601      	mov	r1, r0
  40b72c:	f7f7 f8c4 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  uint8_t  sub = m_posVert - 1;
  40b730:	f896 bc34 	ldrb.w	fp, [r6, #3124]	; 0xc34
            case 0:
              CHECK_INCDEC_MODELVAR(event, timer->mode, -2*(MAX_PSWITCH+NUM_CSW), TMR_VAROFS-1+2*(MAX_PSWITCH+NUM_CSW));
              break;
            case 1:
            {
              int8_t min = timer_val/60;
  40b734:	f648 0789 	movw	r7, #34953	; 0x8889
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);

  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;
  40b738:	f10b 3bff 	add.w	fp, fp, #4294967295
            case 0:
              CHECK_INCDEC_MODELVAR(event, timer->mode, -2*(MAX_PSWITCH+NUM_CSW), TMR_VAROFS-1+2*(MAX_PSWITCH+NUM_CSW));
              break;
            case 1:
            {
              int8_t min = timer_val/60;
  40b73c:	f6c8 0788 	movt	r7, #34952	; 0x8888
  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);

  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;
  40b740:	fa5f fb8b 	uxtb.w	fp, fp
  40b744:	2408      	movs	r4, #8

  for (uint8_t i=0; i<7; i++) {
  40b746:	2500      	movs	r5, #0
            case 0:
              CHECK_INCDEC_MODELVAR(event, timer->mode, -2*(MAX_PSWITCH+NUM_CSW), TMR_VAROFS-1+2*(MAX_PSWITCH+NUM_CSW));
              break;
            case 1:
            {
              int8_t min = timer_val/60;
  40b748:	970a      	str	r7, [sp, #40]	; 0x28

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i+s_pgOfs;
  40b74a:	f896 3e7d 	ldrb.w	r3, [r6, #3709]	; 0xe7d
    uint8_t attr = (sub == k ? INVERS : 0);
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
  40b74e:	f996 7c2c 	ldrsb.w	r7, [r6, #3116]	; 0xc2c

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = 1*FH + i*FH;
    uint8_t k = i+s_pgOfs;
  40b752:	18eb      	adds	r3, r5, r3
  40b754:	b2db      	uxtb	r3, r3
    uint8_t attr = (sub == k ? INVERS : 0);
  40b756:	459b      	cmp	fp, r3
  40b758:	bf0c      	ite	eq
  40b75a:	f04f 0802 	moveq.w	r8, #2
  40b75e:	f04f 0800 	movne.w	r8, #0
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);
  40b762:	2f00      	cmp	r7, #0
  40b764:	bfd4      	ite	le
  40b766:	f04f 0c02 	movle.w	ip, #2
  40b76a:	f04f 0c03 	movgt.w	ip, #3

    switch(k) {
  40b76e:	2b0a      	cmp	r3, #10
  40b770:	d870      	bhi.n	40b854 <_Z13menuProcModelh+0x184>
  40b772:	e8df f013 	tbh	[pc, r3, lsl #1]
  40b776:	01ed      	.short	0x01ed
  40b778:	01880188 	.word	0x01880188
  40b77c:	01440166 	.word	0x01440166
  40b780:	02160237 	.word	0x02160237
  40b784:	00db0277 	.word	0x00db0277
  40b788:	000b0077 	.word	0x000b0077
          }
        }
        break;

      case ITEM_MODEL_PROTOCOL_PARAMS:
        if (protocol <= PROTO_PPMSIM) {
  40b78c:	9f07      	ldr	r7, [sp, #28]
  40b78e:	2f02      	cmp	r7, #2
  40b790:	d860      	bhi.n	40b854 <_Z13menuProcModelh+0x184>
          lcd_putsLeft( y, STR_PPMFRAME);
  40b792:	4620      	mov	r0, r4
  40b794:	495f      	ldr	r1, [pc, #380]	; (40b914 <_Z13menuProcModelh+0x244>)
  40b796:	f8cd c014 	str.w	ip, [sp, #20]
  40b79a:	f7f7 f897 	bl	4028cc <_Z12lcd_putsLefthPKc>
          lcd_puts(MODEL_PARAM_OFS+3*FW, y, STR_MS);
  40b79e:	4a5e      	ldr	r2, [pc, #376]	; (40b918 <_Z13menuProcModelh+0x248>)
  40b7a0:	204a      	movs	r0, #74	; 0x4a
  40b7a2:	4621      	mov	r1, r4
  40b7a4:	f7f7 f890 	bl	4028c8 <_Z8lcd_putshhPKc>
          lcd_outdezAtt(MODEL_PARAM_OFS, y, (int16_t)g_model.ppmFrameLength*5 + 225, ((attr && m_posHorz==0) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0) | PREC1|LEFT);
  40b7a8:	f999 386b 	ldrsb.w	r3, [r9, #2155]	; 0x86b
  40b7ac:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b7b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40b7b4:	f103 02e1 	add.w	r2, r3, #225	; 0xe1
  40b7b8:	b292      	uxth	r2, r2
  40b7ba:	f1b8 0f00 	cmp.w	r8, #0
  40b7be:	f040 82b5 	bne.w	40bd2c <_Z13menuProcModelh+0x65c>
  40b7c2:	23a0      	movs	r3, #160	; 0xa0
  40b7c4:	b212      	sxth	r2, r2
  40b7c6:	2038      	movs	r0, #56	; 0x38
  40b7c8:	4621      	mov	r1, r4
  40b7ca:	f7f7 fb35 	bl	402e38 <_Z13lcd_outdezAtthhsh>
          lcd_puts(MODEL_PARAM_OFS+8*FW+2, y, PSTR("us"));
  40b7ce:	4a53      	ldr	r2, [pc, #332]	; (40b91c <_Z13menuProcModelh+0x24c>)
  40b7d0:	206a      	movs	r0, #106	; 0x6a
  40b7d2:	4621      	mov	r1, r4
  40b7d4:	f7f7 f878 	bl	4028c8 <_Z8lcd_putshhPKc>
          lcd_outdezAtt(MODEL_PARAM_OFS+8*FW+2, y, (g_model.ppmDelay*50)+300, ((attr && m_posHorz==1) ? blink : 0));
  40b7d8:	4b51      	ldr	r3, [pc, #324]	; (40b920 <_Z13menuProcModelh+0x250>)
  40b7da:	46c4      	mov	ip, r8
  40b7dc:	f993 314e 	ldrsb.w	r3, [r3, #334]	; 0x14e
  40b7e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40b7e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40b7e8:	005a      	lsls	r2, r3, #1
  40b7ea:	f502 7296 	add.w	r2, r2, #300	; 0x12c
  40b7ee:	b292      	uxth	r2, r2
  40b7f0:	b212      	sxth	r2, r2
  40b7f2:	206a      	movs	r0, #106	; 0x6a
  40b7f4:	4621      	mov	r1, r4
  40b7f6:	4663      	mov	r3, ip
  40b7f8:	f7f7 fb1e 	bl	402e38 <_Z13lcd_outdezAtthhsh>
          lcd_putcAtt(MODEL_PARAM_OFS+11*FW, y, g_model.pulsePol ? '-' : '+', (attr && m_posHorz==2) ? INVERS : 0);
  40b7fc:	f899 214d 	ldrb.w	r2, [r9, #333]	; 0x14d
  40b800:	f002 0210 	and.w	r2, r2, #16
  40b804:	b2d2      	uxtb	r2, r2
  40b806:	2a00      	cmp	r2, #0
  40b808:	bf0c      	ite	eq
  40b80a:	222b      	moveq	r2, #43	; 0x2b
  40b80c:	222d      	movne	r2, #45	; 0x2d
  40b80e:	f1b8 0f00 	cmp.w	r8, #0
  40b812:	f000 82c4 	beq.w	40bd9e <_Z13menuProcModelh+0x6ce>
  40b816:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  40b81a:	207a      	movs	r0, #122	; 0x7a
  40b81c:	2b02      	cmp	r3, #2
  40b81e:	bf18      	it	ne
  40b820:	2300      	movne	r3, #0
  40b822:	4621      	mov	r1, r4
  40b824:	f7f6 ff22 	bl	40266c <_Z11lcd_putcAtthhhh>

          if(attr && (s_editMode>0 || p1valdiff)) {
  40b828:	f996 3c2c 	ldrsb.w	r3, [r6, #3116]	; 0xc2c
  40b82c:	2b00      	cmp	r3, #0
  40b82e:	dd11      	ble.n	40b854 <_Z13menuProcModelh+0x184>
            switch (m_posHorz) {
  40b830:	4b37      	ldr	r3, [pc, #220]	; (40b910 <_Z13menuProcModelh+0x240>)
  40b832:	f893 3c35 	ldrb.w	r3, [r3, #3125]	; 0xc35
  40b836:	2b01      	cmp	r3, #1
  40b838:	f000 8302 	beq.w	40be40 <_Z13menuProcModelh+0x770>
  40b83c:	f080 82ed 	bcs.w	40be1a <_Z13menuProcModelh+0x74a>
              case 0:
                CHECK_INCDEC_MODELVAR(event, g_model.ppmFrameLength, -20, 20);
  40b840:	f999 186b 	ldrsb.w	r1, [r9, #2155]	; 0x86b
  40b844:	9808      	ldr	r0, [sp, #32]
  40b846:	f06f 0213 	mvn.w	r2, #19
  40b84a:	2314      	movs	r3, #20
  40b84c:	f7fb fd0c 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b850:	f889 086b 	strb.w	r0, [r9, #2155]	; 0x86b
  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  40b854:	3501      	adds	r5, #1
  40b856:	b2ed      	uxtb	r5, r5
  40b858:	3408      	adds	r4, #8
  40b85a:	2d07      	cmp	r5, #7
  40b85c:	b2e4      	uxtb	r4, r4
  40b85e:	f47f af74 	bne.w	40b74a <_Z13menuProcModelh+0x7a>
  40b862:	e75a      	b.n	40b71a <_Z13menuProcModelh+0x4a>
          }
        }
        break;

      case ITEM_MODEL_PROTOCOL:
        lcd_putsLeft(y, STR_PROTO);
  40b864:	4620      	mov	r0, r4
  40b866:	492f      	ldr	r1, [pc, #188]	; (40b924 <_Z13menuProcModelh+0x254>)
  40b868:	f8cd c014 	str.w	ip, [sp, #20]
  40b86c:	f7f7 f82e 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_putsiAtt(MODEL_PARAM_OFS, y, STR_VPROTOS, protocol,
            (attr && m_posHorz==0 ? (s_editMode>0 ? BLINK|INVERS : INVERS):0));
  40b870:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b874:	4643      	mov	r3, r8
  40b876:	f1b8 0f00 	cmp.w	r8, #0
  40b87a:	d00b      	beq.n	40b894 <_Z13menuProcModelh+0x1c4>
  40b87c:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  40b880:	2b00      	cmp	r3, #0
  40b882:	f040 8251 	bne.w	40bd28 <_Z13menuProcModelh+0x658>
  40b886:	4b22      	ldr	r3, [pc, #136]	; (40b910 <_Z13menuProcModelh+0x240>)
  40b888:	f993 3c2c 	ldrsb.w	r3, [r3, #3116]	; 0xc2c
  40b88c:	2b00      	cmp	r3, #0
  40b88e:	bfd4      	ite	le
  40b890:	2302      	movle	r3, #2
  40b892:	2303      	movgt	r3, #3
  40b894:	9300      	str	r3, [sp, #0]
  40b896:	2038      	movs	r0, #56	; 0x38
  40b898:	4621      	mov	r1, r4
  40b89a:	4a23      	ldr	r2, [pc, #140]	; (40b928 <_Z13menuProcModelh+0x258>)
  40b89c:	9b07      	ldr	r3, [sp, #28]
  40b89e:	f8cd c014 	str.w	ip, [sp, #20]
  40b8a2:	f7f6 ffe5 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if (protocol <= PROTO_PPMSIM) {
  40b8a6:	9f07      	ldr	r7, [sp, #28]
  40b8a8:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b8ac:	2f02      	cmp	r7, #2
  40b8ae:	f240 81fb 	bls.w	40bca8 <_Z13menuProcModelh+0x5d8>
          int8_t x = limit((int8_t)0, (int8_t)g_model.ppmNCH, (int8_t)2);
          g_model.ppmNCH = x;
          lcd_putsiAtt(MODEL_PARAM_OFS+7*FW, y, STR_DSM2MODE, x, (attr && m_posHorz==1) ? blink : 0);
        }
#endif
        else if (attr) {
  40b8b2:	f1b8 0f00 	cmp.w	r8, #0
  40b8b6:	d0cd      	beq.n	40b854 <_Z13menuProcModelh+0x184>
          m_posHorz = 0;
  40b8b8:	2300      	movs	r3, #0
  40b8ba:	f886 3c35 	strb.w	r3, [r6, #3125]	; 0xc35
        }
        if (attr && (s_editMode>0 || p1valdiff || (protocol>PROTO_PPMSIM && !IS_DSM2_PROTOCOL(protocol)))) {
  40b8be:	f996 3c2c 	ldrsb.w	r3, [r6, #3116]	; 0xc2c
  40b8c2:	9f07      	ldr	r7, [sp, #28]
  40b8c4:	2b00      	cmp	r3, #0
  40b8c6:	bfd4      	ite	le
  40b8c8:	2300      	movle	r3, #0
  40b8ca:	2301      	movgt	r3, #1
  40b8cc:	2f02      	cmp	r7, #2
  40b8ce:	bf88      	it	hi
  40b8d0:	f043 0301 	orrhi.w	r3, r3, #1
  40b8d4:	2b00      	cmp	r3, #0
  40b8d6:	d0bd      	beq.n	40b854 <_Z13menuProcModelh+0x184>
          switch (m_posHorz) {
  40b8d8:	4b0d      	ldr	r3, [pc, #52]	; (40b910 <_Z13menuProcModelh+0x240>)
  40b8da:	f893 2c35 	ldrb.w	r2, [r3, #3125]	; 0xc35
  40b8de:	2a00      	cmp	r2, #0
  40b8e0:	f000 824e 	beq.w	40bd80 <_Z13menuProcModelh+0x6b0>
  40b8e4:	2a01      	cmp	r2, #1
  40b8e6:	d1b5      	bne.n	40b854 <_Z13menuProcModelh+0x184>
#ifdef DSM2
              if (protocol == PROTO_DSM2)
                CHECK_INCDEC_MODELVAR(event, g_model.ppmNCH, 0, 2);
              else
#endif
                CHECK_INCDEC_MODELVAR(event, g_model.ppmNCH, -2, 4);
  40b8e8:	f899 114c 	ldrb.w	r1, [r9, #332]	; 0x14c
  40b8ec:	2304      	movs	r3, #4
  40b8ee:	9808      	ldr	r0, [sp, #32]
  40b8f0:	f341 1103 	sbfx	r1, r1, #4, #4
  40b8f4:	f06f 0201 	mvn.w	r2, #1
  40b8f8:	f7fb fcb6 	bl	407268 <_Z16checkIncDecModelhaaa>
  40b8fc:	f899 314c 	ldrb.w	r3, [r9, #332]	; 0x14c
  40b900:	f360 1307 	bfi	r3, r0, #4, #4
  40b904:	f889 314c 	strb.w	r3, [r9, #332]	; 0x14c
              break;
  40b908:	e7a4      	b.n	40b854 <_Z13menuProcModelh+0x184>
  40b90a:	bf00      	nop
  40b90c:	00410db4 	.word	0x00410db4
  40b910:	20001200 	.word	0x20001200
  40b914:	00410e14 	.word	0x00410e14
  40b918:	00410e20 	.word	0x00410e20
  40b91c:	00411460 	.word	0x00411460
  40b920:	20000108 	.word	0x20000108
  40b924:	00410b98 	.word	0x00410b98
  40b928:	0041038e 	.word	0x0041038e
        menu_lcd_onoff(MODEL_PARAM_OFS, y, g_model.thrTrim, attr) ;
        if (attr) CHECK_INCDEC_MODELVAR(event,g_model.thrTrim,0,1);
        break;

      case ITEM_MODEL_BEEP_CENTER:
        lcd_putsLeft(y, STR_BEEPCTR);
  40b92c:	4620      	mov	r0, r4
  40b92e:	49bf      	ldr	r1, [pc, #764]	; (40bc2c <_Z13menuProcModelh+0x55c>)
  40b930:	f7f6 ffcc 	bl	4028cc <_Z12lcd_putsLefthPKc>
  40b934:	f1d8 0301 	rsbs	r3, r8, #1
  40b938:	bf38      	it	cc
  40b93a:	2300      	movcc	r3, #0
  40b93c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  40b940:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  40b944:	f04f 0a38 	mov.w	sl, #56	; 0x38
  40b948:	2700      	movs	r7, #0
  40b94a:	46ab      	mov	fp, r5
  40b94c:	4698      	mov	r8, r3
        for (uint8_t i=0;i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS;i++)
          lcd_putsiAtt(MODEL_PARAM_OFS+i*FW, y, STR_RETA123, i, ((m_posHorz==i) && attr) ? BLINK|INVERS : ((g_model.beepANACenter & ((BeepANACenter)1<<i)) ? INVERS : 0 ) );
  40b94e:	f896 2c35 	ldrb.w	r2, [r6, #3125]	; 0xc35
        menu_lcd_onoff(MODEL_PARAM_OFS, y, g_model.thrTrim, attr) ;
        if (attr) CHECK_INCDEC_MODELVAR(event,g_model.thrTrim,0,1);
        break;

      case ITEM_MODEL_BEEP_CENTER:
        lcd_putsLeft(y, STR_BEEPCTR);
  40b952:	b2fb      	uxtb	r3, r7
        for (uint8_t i=0;i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS;i++)
          lcd_putsiAtt(MODEL_PARAM_OFS+i*FW, y, STR_RETA123, i, ((m_posHorz==i) && attr) ? BLINK|INVERS : ((g_model.beepANACenter & ((BeepANACenter)1<<i)) ? INVERS : 0 ) );
  40b954:	429a      	cmp	r2, r3
  40b956:	bf0c      	ite	eq
  40b958:	4642      	moveq	r2, r8
  40b95a:	f048 0201 	orrne.w	r2, r8, #1
  40b95e:	2503      	movs	r5, #3
  40b960:	b152      	cbz	r2, 40b978 <_Z13menuProcModelh+0x2a8>
  40b962:	f899 214f 	ldrb.w	r2, [r9, #335]	; 0x14f
  40b966:	f899 5150 	ldrb.w	r5, [r9, #336]	; 0x150
  40b96a:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  40b96e:	413d      	asrs	r5, r7
  40b970:	f015 0501 	ands.w	r5, r5, #1
  40b974:	bf18      	it	ne
  40b976:	2502      	movne	r5, #2
  40b978:	4650      	mov	r0, sl
  40b97a:	4621      	mov	r1, r4
  40b97c:	4aac      	ldr	r2, [pc, #688]	; (40bc30 <_Z13menuProcModelh+0x560>)
  40b97e:	3701      	adds	r7, #1
  40b980:	9500      	str	r5, [sp, #0]
  40b982:	f10a 0a06 	add.w	sl, sl, #6
  40b986:	f7f6 ff73 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if (attr) CHECK_INCDEC_MODELVAR(event,g_model.thrTrim,0,1);
        break;

      case ITEM_MODEL_BEEP_CENTER:
        lcd_putsLeft(y, STR_BEEPCTR);
        for (uint8_t i=0;i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS;i++)
  40b98a:	2f07      	cmp	r7, #7
          lcd_putsiAtt(MODEL_PARAM_OFS+i*FW, y, STR_RETA123, i, ((m_posHorz==i) && attr) ? BLINK|INVERS : ((g_model.beepANACenter & ((BeepANACenter)1<<i)) ? INVERS : 0 ) );
  40b98c:	fa5f fa8a 	uxtb.w	sl, sl
        if (attr) CHECK_INCDEC_MODELVAR(event,g_model.thrTrim,0,1);
        break;

      case ITEM_MODEL_BEEP_CENTER:
        lcd_putsLeft(y, STR_BEEPCTR);
        for (uint8_t i=0;i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS;i++)
  40b990:	d1dd      	bne.n	40b94e <_Z13menuProcModelh+0x27e>
  40b992:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  40b996:	465d      	mov	r5, fp
  40b998:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
          lcd_putsiAtt(MODEL_PARAM_OFS+i*FW, y, STR_RETA123, i, ((m_posHorz==i) && attr) ? BLINK|INVERS : ((g_model.beepANACenter & ((BeepANACenter)1<<i)) ? INVERS : 0 ) );
        if (attr) {
  40b99c:	f1b8 0f00 	cmp.w	r8, #0
  40b9a0:	f43f af58 	beq.w	40b854 <_Z13menuProcModelh+0x184>
          if((event==EVT_KEY_FIRST(KEY_MENU)) || p1valdiff) {
  40b9a4:	9f08      	ldr	r7, [sp, #32]
  40b9a6:	2f60      	cmp	r7, #96	; 0x60
  40b9a8:	f47f af54 	bne.w	40b854 <_Z13menuProcModelh+0x184>
            killEvents(event);
            s_editMode = 0;
            g_model.beepANACenter ^= ((BeepANACenter)1<<m_posHorz);
  40b9ac:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  40b9b0:	2101      	movs	r1, #1
  40b9b2:	4099      	lsls	r1, r3
  40b9b4:	f899 0150 	ldrb.w	r0, [r9, #336]	; 0x150
  40b9b8:	f899 314f 	ldrb.w	r3, [r9, #335]	; 0x14f
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  40b9bc:	f899 20a0 	ldrb.w	r2, [r9, #160]	; 0xa0
  40b9c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  40b9c4:	404b      	eors	r3, r1
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40b9c6:	f899 09a8 	ldrb.w	r0, [r9, #2472]	; 0x9a8
  40b9ca:	b29b      	uxth	r3, r3
  40b9cc:	f36f 1205 	bfc	r2, #4, #2
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40b9d0:	f8b9 19aa 	ldrh.w	r1, [r9, #2474]	; 0x9aa
  40b9d4:	f889 20a0 	strb.w	r2, [r9, #160]	; 0xa0
  40b9d8:	0a1f      	lsrs	r7, r3, #8
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40b9da:	f040 0002 	orr.w	r0, r0, #2
  40b9de:	f04f 0c63 	mov.w	ip, #99	; 0x63
        for (uint8_t i=0;i<NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS;i++)
          lcd_putsiAtt(MODEL_PARAM_OFS+i*FW, y, STR_RETA123, i, ((m_posHorz==i) && attr) ? BLINK|INVERS : ((g_model.beepANACenter & ((BeepANACenter)1<<i)) ? INVERS : 0 ) );
        if (attr) {
          if((event==EVT_KEY_FIRST(KEY_MENU)) || p1valdiff) {
            killEvents(event);
            s_editMode = 0;
  40b9e2:	2200      	movs	r2, #0
  40b9e4:	f886 2c2c 	strb.w	r2, [r6, #3116]	; 0xc2c
  40b9e8:	f889 c0a2 	strb.w	ip, [r9, #162]	; 0xa2
            g_model.beepANACenter ^= ((BeepANACenter)1<<m_posHorz);
  40b9ec:	f889 314f 	strb.w	r3, [r9, #335]	; 0x14f
  40b9f0:	f889 7150 	strb.w	r7, [r9, #336]	; 0x150
  40b9f4:	f889 09a8 	strb.w	r0, [r9, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40b9f8:	f8a9 19ac 	strh.w	r1, [r9, #2476]	; 0x9ac
  40b9fc:	e72a      	b.n	40b854 <_Z13menuProcModelh+0x184>
        menu_lcd_onoff( MODEL_PARAM_OFS, y, g_model.extendedLimits, attr ) ;
        if(attr) CHECK_INCDEC_MODELVAR(event,g_model.extendedLimits,0,1);
        break;

      case ITEM_MODEL_EXTENDED_TRIMS:
        lcd_putsLeft(y, STR_ETRIMS);
  40b9fe:	498d      	ldr	r1, [pc, #564]	; (40bc34 <_Z13menuProcModelh+0x564>)
  40ba00:	4620      	mov	r0, r4
  40ba02:	f7f6 ff63 	bl	4028cc <_Z12lcd_putsLefthPKc>
        menu_lcd_onoff( MODEL_PARAM_OFS, y, g_model.extendedTrims, attr ) ;
  40ba06:	f899 214d 	ldrb.w	r2, [r9, #333]	; 0x14d
  40ba0a:	2038      	movs	r0, #56	; 0x38
  40ba0c:	f3c2 1280 	ubfx	r2, r2, #6, #1
  40ba10:	4621      	mov	r1, r4
  40ba12:	4643      	mov	r3, r8
  40ba14:	4f88      	ldr	r7, [pc, #544]	; (40bc38 <_Z13menuProcModelh+0x568>)
  40ba16:	f7f6 ff37 	bl	402888 <_Z14menu_lcd_onoffhhhh>
        if(attr) CHECK_INCDEC_MODELVAR(event,g_model.extendedTrims,0,1);
  40ba1a:	f1b8 0f00 	cmp.w	r8, #0
  40ba1e:	f43f af19 	beq.w	40b854 <_Z13menuProcModelh+0x184>
  40ba22:	f897 114d 	ldrb.w	r1, [r7, #333]	; 0x14d
  40ba26:	2301      	movs	r3, #1
  40ba28:	9808      	ldr	r0, [sp, #32]
  40ba2a:	f3c1 1180 	ubfx	r1, r1, #6, #1
  40ba2e:	2200      	movs	r2, #0
  40ba30:	f7fb fc1a 	bl	407268 <_Z16checkIncDecModelhaaa>
  40ba34:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
  40ba38:	f360 1386 	bfi	r3, r0, #6, #1
  40ba3c:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
  40ba40:	e708      	b.n	40b854 <_Z13menuProcModelh+0x184>
        }
        break;
      }

      case ITEM_MODEL_EXTENDED_LIMITS:
        lcd_putsLeft(y, STR_ELIMITS);
  40ba42:	497e      	ldr	r1, [pc, #504]	; (40bc3c <_Z13menuProcModelh+0x56c>)
  40ba44:	4620      	mov	r0, r4
  40ba46:	f7f6 ff41 	bl	4028cc <_Z12lcd_putsLefthPKc>
        menu_lcd_onoff( MODEL_PARAM_OFS, y, g_model.extendedLimits, attr ) ;
  40ba4a:	f899 214d 	ldrb.w	r2, [r9, #333]	; 0x14d
  40ba4e:	2038      	movs	r0, #56	; 0x38
  40ba50:	f3c2 1240 	ubfx	r2, r2, #5, #1
  40ba54:	4621      	mov	r1, r4
  40ba56:	4643      	mov	r3, r8
  40ba58:	4f77      	ldr	r7, [pc, #476]	; (40bc38 <_Z13menuProcModelh+0x568>)
  40ba5a:	f7f6 ff15 	bl	402888 <_Z14menu_lcd_onoffhhhh>
        if(attr) CHECK_INCDEC_MODELVAR(event,g_model.extendedLimits,0,1);
  40ba5e:	f1b8 0f00 	cmp.w	r8, #0
  40ba62:	f43f aef7 	beq.w	40b854 <_Z13menuProcModelh+0x184>
  40ba66:	f897 114d 	ldrb.w	r1, [r7, #333]	; 0x14d
  40ba6a:	2301      	movs	r3, #1
  40ba6c:	9808      	ldr	r0, [sp, #32]
  40ba6e:	f3c1 1140 	ubfx	r1, r1, #5, #1
  40ba72:	2200      	movs	r2, #0
  40ba74:	f7fb fbf8 	bl	407268 <_Z16checkIncDecModelhaaa>
  40ba78:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
  40ba7c:	f360 1345 	bfi	r3, r0, #5, #1
  40ba80:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
  40ba84:	e6e6      	b.n	40b854 <_Z13menuProcModelh+0x184>
        break;

      case ITEM_MODEL_TIMER1:
      case ITEM_MODEL_TIMER2:
      {
        TimerData *timer = &g_model.timers[k-ITEM_MODEL_TIMER1];
  40ba86:	4a6e      	ldr	r2, [pc, #440]	; (40bc40 <_Z13menuProcModelh+0x570>)
  40ba88:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  40ba8c:	188a      	adds	r2, r1, r2
  40ba8e:	9209      	str	r2, [sp, #36]	; 0x24
  40ba90:	9f09      	ldr	r7, [sp, #36]	; 0x24
        putsStrIdx(0*FW, y, STR_TIMER, k-ITEM_MODEL_TIMER1+1); // TODO keep that?
  40ba92:	2000      	movs	r0, #0
  40ba94:	4a6b      	ldr	r2, [pc, #428]	; (40bc44 <_Z13menuProcModelh+0x574>)
  40ba96:	4621      	mov	r1, r4
  40ba98:	f8cd c014 	str.w	ip, [sp, #20]
  40ba9c:	9000      	str	r0, [sp, #0]
        break;

      case ITEM_MODEL_TIMER1:
      case ITEM_MODEL_TIMER2:
      {
        TimerData *timer = &g_model.timers[k-ITEM_MODEL_TIMER1];
  40ba9e:	f107 0a02 	add.w	sl, r7, #2
        putsStrIdx(0*FW, y, STR_TIMER, k-ITEM_MODEL_TIMER1+1); // TODO keep that?
  40baa2:	f7f7 fc89 	bl	4033b8 <_Z10putsStrIdxhhPKchh>
        putsTmrMode(MODEL_PARAM_OFS, y, timer->mode, (attr && m_posHorz==0) ? blink : 0);
  40baa6:	78ba      	ldrb	r2, [r7, #2]
  40baa8:	f8dd c014 	ldr.w	ip, [sp, #20]
  40baac:	f1b8 0f00 	cmp.w	r8, #0
  40bab0:	f000 8114 	beq.w	40bcdc <_Z13menuProcModelh+0x60c>
  40bab4:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  40bab8:	b252      	sxtb	r2, r2
  40baba:	2b00      	cmp	r3, #0
  40babc:	bf0c      	ite	eq
  40babe:	4663      	moveq	r3, ip
  40bac0:	2300      	movne	r3, #0
  40bac2:	2038      	movs	r0, #56	; 0x38
  40bac4:	4621      	mov	r1, r4
  40bac6:	f7f7 fdd7 	bl	403678 <_Z11putsTmrModehhah>
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
  40baca:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  40bace:	f89a 2001 	ldrb.w	r2, [sl, #1]
  40bad2:	f89a 1002 	ldrb.w	r1, [sl, #2]
  40bad6:	2b01      	cmp	r3, #1
  40bad8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40badc:	f8dd c014 	ldr.w	ip, [sp, #20]
  40bae0:	bf08      	it	eq
  40bae2:	f04f 0e00 	moveq.w	lr, #0
  40bae6:	d007      	beq.n	40baf8 <_Z13menuProcModelh+0x428>
  40bae8:	2b02      	cmp	r3, #2
  40baea:	bf15      	itete	ne
  40baec:	f04f 0c00 	movne.w	ip, #0
  40baf0:	46e6      	moveq	lr, ip
  40baf2:	46e6      	movne	lr, ip
  40baf4:	f04f 0c00 	moveq.w	ip, #0
  40baf8:	2054      	movs	r0, #84	; 0x54
  40bafa:	4663      	mov	r3, ip
  40bafc:	b212      	sxth	r2, r2
  40bafe:	4621      	mov	r1, r4
  40bb00:	f8cd e000 	str.w	lr, [sp]
  40bb04:	f7f7 fbce 	bl	4032a4 <_Z8putsTimehhshh>
        if (attr && (s_editMode>0 || p1valdiff)) {
  40bb08:	f996 3c2c 	ldrsb.w	r3, [r6, #3116]	; 0xc2c
  40bb0c:	2b00      	cmp	r3, #0
  40bb0e:	f77f aea1 	ble.w	40b854 <_Z13menuProcModelh+0x184>
          uint16_t timer_val = timer->val;
          switch (m_posHorz) {
  40bb12:	4b4d      	ldr	r3, [pc, #308]	; (40bc48 <_Z13menuProcModelh+0x578>)
        putsTmrMode(MODEL_PARAM_OFS, y, timer->mode, (attr && m_posHorz==0) ? blink : 0);
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
        if (attr && (s_editMode>0 || p1valdiff)) {
          uint16_t timer_val = timer->val;
  40bb14:	f89a 2001 	ldrb.w	r2, [sl, #1]
          switch (m_posHorz) {
  40bb18:	f893 3c35 	ldrb.w	r3, [r3, #3125]	; 0xc35
        putsTmrMode(MODEL_PARAM_OFS, y, timer->mode, (attr && m_posHorz==0) ? blink : 0);
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
        if (attr && (s_editMode>0 || p1valdiff)) {
          uint16_t timer_val = timer->val;
  40bb1c:	f89a 7002 	ldrb.w	r7, [sl, #2]
          switch (m_posHorz) {
  40bb20:	2b01      	cmp	r3, #1
        putsTmrMode(MODEL_PARAM_OFS, y, timer->mode, (attr && m_posHorz==0) ? blink : 0);
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
        if (attr && (s_editMode>0 || p1valdiff)) {
          uint16_t timer_val = timer->val;
  40bb22:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
          switch (m_posHorz) {
  40bb26:	f000 8160 	beq.w	40bdea <_Z13menuProcModelh+0x71a>
  40bb2a:	f080 813e 	bcs.w	40bdaa <_Z13menuProcModelh+0x6da>
            case 0:
              CHECK_INCDEC_MODELVAR(event, timer->mode, -2*(MAX_PSWITCH+NUM_CSW), TMR_VAROFS-1+2*(MAX_PSWITCH+NUM_CSW));
  40bb2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40bb30:	2356      	movs	r3, #86	; 0x56
  40bb32:	f992 1002 	ldrsb.w	r1, [r2, #2]
  40bb36:	9808      	ldr	r0, [sp, #32]
  40bb38:	f06f 0251 	mvn.w	r2, #81	; 0x51
  40bb3c:	f7fb fb94 	bl	407268 <_Z16checkIncDecModelhaaa>
  40bb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bb42:	7098      	strb	r0, [r3, #2]
              timer_val -= sec ;
              if ((int16_t)timer_val < 0) timer_val=0;
              break;
            }
          }
          timer->val = timer_val;
  40bb44:	0a3b      	lsrs	r3, r7, #8
  40bb46:	f88a 7001 	strb.w	r7, [sl, #1]
  40bb4a:	f88a 3002 	strb.w	r3, [sl, #2]
  40bb4e:	e681      	b.n	40b854 <_Z13menuProcModelh+0x184>
    uint8_t attr = (sub == k ? INVERS : 0);
    uint8_t blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);

    switch(k) {
      case ITEM_MODEL_NAME:
        lcd_putsLeft(y, STR_NAME);
  40bb50:	4620      	mov	r0, r4
  40bb52:	493e      	ldr	r1, [pc, #248]	; (40bc4c <_Z13menuProcModelh+0x57c>)
  40bb54:	f7f6 feba 	bl	4028cc <_Z12lcd_putsLefthPKc>
        EditName(MODEL_PARAM_OFS, y, g_model.name, sizeof(g_model.name), event, attr, m_posHorz);
  40bb58:	230a      	movs	r3, #10
  40bb5a:	9f08      	ldr	r7, [sp, #32]
  40bb5c:	f118 0800 	adds.w	r8, r8, #0
  40bb60:	bf18      	it	ne
  40bb62:	f04f 0801 	movne.w	r8, #1
  40bb66:	e88d 0180 	stmia.w	sp, {r7, r8}
  40bb6a:	4f39      	ldr	r7, [pc, #228]	; (40bc50 <_Z13menuProcModelh+0x580>)
  40bb6c:	4621      	mov	r1, r4
  40bb6e:	2038      	movs	r0, #56	; 0x38
  40bb70:	4a38      	ldr	r2, [pc, #224]	; (40bc54 <_Z13menuProcModelh+0x584>)
  40bb72:	9702      	str	r7, [sp, #8]
  40bb74:	f7fb fb82 	bl	40727c <_Z8EditNamehhPchhbRh>
#if defined(PCBARM)
        memcpy(ModelNames[g_eeGeneral.currModel], g_model.name, sizeof(g_model.name));
  40bb78:	f899 0051 	ldrb.w	r0, [r9, #81]	; 0x51
  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  40bb7c:	3501      	adds	r5, #1
    switch(k) {
      case ITEM_MODEL_NAME:
        lcd_putsLeft(y, STR_NAME);
        EditName(MODEL_PARAM_OFS, y, g_model.name, sizeof(g_model.name), event, attr, m_posHorz);
#if defined(PCBARM)
        memcpy(ModelNames[g_eeGeneral.currModel], g_model.name, sizeof(g_model.name));
  40bb7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40bb82:	eb06 0040 	add.w	r0, r6, r0, lsl #1
  40bb86:	f500 6082 	add.w	r0, r0, #1040	; 0x410
  40bb8a:	3004      	adds	r0, #4
  40bb8c:	220a      	movs	r2, #10
  40bb8e:	4931      	ldr	r1, [pc, #196]	; (40bc54 <_Z13menuProcModelh+0x584>)
  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  40bb90:	b2ed      	uxtb	r5, r5
  40bb92:	3408      	adds	r4, #8
    switch(k) {
      case ITEM_MODEL_NAME:
        lcd_putsLeft(y, STR_NAME);
        EditName(MODEL_PARAM_OFS, y, g_model.name, sizeof(g_model.name), event, attr, m_posHorz);
#if defined(PCBARM)
        memcpy(ModelNames[g_eeGeneral.currModel], g_model.name, sizeof(g_model.name));
  40bb94:	f003 fbb8 	bl	40f308 <memcpy>
  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  40bb98:	2d07      	cmp	r5, #7
  40bb9a:	b2e4      	uxtb	r4, r4
  40bb9c:	f47f add5 	bne.w	40b74a <_Z13menuProcModelh+0x7a>
  40bba0:	e5bb      	b.n	40b71a <_Z13menuProcModelh+0x4a>
        if(attr) CHECK_INCDEC_MODELVAR(event,g_model.trimInc,0,4);
        break;

      case ITEM_MODEL_THROTTLE_TRACE:
      {
        lcd_putsLeft(y, STR_TTRACE);
  40bba2:	4620      	mov	r0, r4
  40bba4:	492c      	ldr	r1, [pc, #176]	; (40bc58 <_Z13menuProcModelh+0x588>)
  40bba6:	f7f6 fe91 	bl	4028cc <_Z12lcd_putsLefthPKc>
        int8_t idx = 3;
        if (g_model.thrTraceSrc > NUM_POTS) idx = NUM_STICKS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+g_model.thrTraceSrc;
  40bbaa:	f899 286c 	ldrb.w	r2, [r9, #2156]	; 0x86c
  40bbae:	2a03      	cmp	r2, #3
  40bbb0:	f200 8091 	bhi.w	40bcd6 <_Z13menuProcModelh+0x606>
        else if (g_model.thrTraceSrc > 0) idx = NUM_STICKS+g_model.thrTraceSrc;
  40bbb4:	2a00      	cmp	r2, #0
  40bbb6:	f000 80b5 	beq.w	40bd24 <_Z13menuProcModelh+0x654>
  40bbba:	3204      	adds	r2, #4
  40bbbc:	b2d2      	uxtb	r2, r2
        putsChnRaw(MODEL_PARAM_OFS, y, idx, attr);
  40bbbe:	2038      	movs	r0, #56	; 0x38
  40bbc0:	4621      	mov	r1, r4
  40bbc2:	4643      	mov	r3, r8
  40bbc4:	f7f7 fc1e 	bl	403404 <_Z10putsChnRawhhhh>
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.thrTraceSrc, 0, NUM_POTS+NUM_CHNOUT);
  40bbc8:	f1b8 0f00 	cmp.w	r8, #0
  40bbcc:	f43f ae42 	beq.w	40b854 <_Z13menuProcModelh+0x184>
  40bbd0:	f999 186c 	ldrsb.w	r1, [r9, #2156]	; 0x86c
  40bbd4:	9808      	ldr	r0, [sp, #32]
  40bbd6:	2200      	movs	r2, #0
  40bbd8:	2323      	movs	r3, #35	; 0x23
  40bbda:	f7fb fb45 	bl	407268 <_Z16checkIncDecModelhaaa>
  40bbde:	f889 086c 	strb.w	r0, [r9, #2156]	; 0x86c
  40bbe2:	e637      	b.n	40b854 <_Z13menuProcModelh+0x184>
        menu_lcd_onoff( MODEL_PARAM_OFS, y, g_model.extendedTrims, attr ) ;
        if(attr) CHECK_INCDEC_MODELVAR(event,g_model.extendedTrims,0,1);
        break;

      case ITEM_MODEL_TRIM_INC:
        lcd_putsLeft(y, STR_TRIMINC);
  40bbe4:	491d      	ldr	r1, [pc, #116]	; (40bc5c <_Z13menuProcModelh+0x58c>)
  40bbe6:	4620      	mov	r0, r4
  40bbe8:	f7f6 fe70 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_putsiAtt(MODEL_PARAM_OFS, y, STR_VTRIMINC, g_model.trimInc, attr);
  40bbec:	f899 314d 	ldrb.w	r3, [r9, #333]	; 0x14d
  40bbf0:	2038      	movs	r0, #56	; 0x38
  40bbf2:	f003 0307 	and.w	r3, r3, #7
  40bbf6:	4621      	mov	r1, r4
  40bbf8:	4a19      	ldr	r2, [pc, #100]	; (40bc60 <_Z13menuProcModelh+0x590>)
  40bbfa:	f8cd 8000 	str.w	r8, [sp]
  40bbfe:	4f0e      	ldr	r7, [pc, #56]	; (40bc38 <_Z13menuProcModelh+0x568>)
  40bc00:	f7f6 fe36 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
        if(attr) CHECK_INCDEC_MODELVAR(event,g_model.trimInc,0,4);
  40bc04:	f1b8 0f00 	cmp.w	r8, #0
  40bc08:	f43f ae24 	beq.w	40b854 <_Z13menuProcModelh+0x184>
  40bc0c:	f897 114d 	ldrb.w	r1, [r7, #333]	; 0x14d
  40bc10:	2304      	movs	r3, #4
  40bc12:	9808      	ldr	r0, [sp, #32]
  40bc14:	f001 0107 	and.w	r1, r1, #7
  40bc18:	2200      	movs	r2, #0
  40bc1a:	f7fb fb25 	bl	407268 <_Z16checkIncDecModelhaaa>
  40bc1e:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
  40bc22:	f360 0302 	bfi	r3, r0, #0, #3
  40bc26:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
  40bc2a:	e613      	b.n	40b854 <_Z13menuProcModelh+0x184>
  40bc2c:	00410e08 	.word	0x00410e08
  40bc30:	00410386 	.word	0x00410386
  40bc34:	00410de4 	.word	0x00410de4
  40bc38:	20000108 	.word	0x20000108
  40bc3c:	00410dd8 	.word	0x00410dd8
  40bc40:	20000249 	.word	0x20000249
  40bc44:	00410dd0 	.word	0x00410dd0
  40bc48:	20001200 	.word	0x20001200
  40bc4c:	00410dc8 	.word	0x00410dc8
  40bc50:	20001e35 	.word	0x20001e35
  40bc54:	20000244 	.word	0x20000244
  40bc58:	00410df8 	.word	0x00410df8
  40bc5c:	00410dec 	.word	0x00410dec
  40bc60:	00410367 	.word	0x00410367
        if (attr) CHECK_INCDEC_MODELVAR(event, g_model.thrTraceSrc, 0, NUM_POTS+NUM_CHNOUT);
        break;
      }

      case ITEM_MODEL_THROTTLE_TRIM:
        lcd_putsLeft(y, STR_TTRIM);
  40bc64:	497c      	ldr	r1, [pc, #496]	; (40be58 <_Z13menuProcModelh+0x788>)
  40bc66:	4620      	mov	r0, r4
  40bc68:	f7f6 fe30 	bl	4028cc <_Z12lcd_putsLefthPKc>
        menu_lcd_onoff(MODEL_PARAM_OFS, y, g_model.thrTrim, attr) ;
  40bc6c:	f899 214c 	ldrb.w	r2, [r9, #332]	; 0x14c
  40bc70:	2038      	movs	r0, #56	; 0x38
  40bc72:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  40bc76:	4621      	mov	r1, r4
  40bc78:	4643      	mov	r3, r8
  40bc7a:	4f78      	ldr	r7, [pc, #480]	; (40be5c <_Z13menuProcModelh+0x78c>)
  40bc7c:	f7f6 fe04 	bl	402888 <_Z14menu_lcd_onoffhhhh>
        if (attr) CHECK_INCDEC_MODELVAR(event,g_model.thrTrim,0,1);
  40bc80:	f1b8 0f00 	cmp.w	r8, #0
  40bc84:	f43f ade6 	beq.w	40b854 <_Z13menuProcModelh+0x184>
  40bc88:	f897 114c 	ldrb.w	r1, [r7, #332]	; 0x14c
  40bc8c:	2301      	movs	r3, #1
  40bc8e:	9808      	ldr	r0, [sp, #32]
  40bc90:	f3c1 01c0 	ubfx	r1, r1, #3, #1
  40bc94:	2200      	movs	r2, #0
  40bc96:	f7fb fae7 	bl	407268 <_Z16checkIncDecModelhaaa>
  40bc9a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
  40bc9e:	f360 03c3 	bfi	r3, r0, #3, #1
  40bca2:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
  40bca6:	e5d5      	b.n	40b854 <_Z13menuProcModelh+0x184>
      case ITEM_MODEL_PROTOCOL:
        lcd_putsLeft(y, STR_PROTO);
        lcd_putsiAtt(MODEL_PARAM_OFS, y, STR_VPROTOS, protocol,
            (attr && m_posHorz==0 ? (s_editMode>0 ? BLINK|INVERS : INVERS):0));
        if (protocol <= PROTO_PPMSIM) {
          lcd_putsiAtt(MODEL_PARAM_OFS+7*FW, y, STR_NCHANNELS, g_model.ppmNCH+2, (attr && m_posHorz==1) ? blink : 0);
  40bca8:	f899 314c 	ldrb.w	r3, [r9, #332]	; 0x14c
  40bcac:	f343 1303 	sbfx	r3, r3, #4, #4
  40bcb0:	3302      	adds	r3, #2
  40bcb2:	b2db      	uxtb	r3, r3
  40bcb4:	f1b8 0f00 	cmp.w	r8, #0
  40bcb8:	d02c      	beq.n	40bd14 <_Z13menuProcModelh+0x644>
  40bcba:	f896 2c35 	ldrb.w	r2, [r6, #3125]	; 0xc35
  40bcbe:	2062      	movs	r0, #98	; 0x62
  40bcc0:	2a01      	cmp	r2, #1
  40bcc2:	bf18      	it	ne
  40bcc4:	f04f 0c00 	movne.w	ip, #0
  40bcc8:	4621      	mov	r1, r4
  40bcca:	4a65      	ldr	r2, [pc, #404]	; (40be60 <_Z13menuProcModelh+0x790>)
  40bccc:	f8cd c000 	str.w	ip, [sp]
  40bcd0:	f7f6 fdce 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  40bcd4:	e5f3      	b.n	40b8be <_Z13menuProcModelh+0x1ee>

      case ITEM_MODEL_THROTTLE_TRACE:
      {
        lcd_putsLeft(y, STR_TTRACE);
        int8_t idx = 3;
        if (g_model.thrTraceSrc > NUM_POTS) idx = NUM_STICKS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+g_model.thrTraceSrc;
  40bcd6:	3211      	adds	r2, #17
  40bcd8:	b2d2      	uxtb	r2, r2
  40bcda:	e770      	b.n	40bbbe <_Z13menuProcModelh+0x4ee>
      case ITEM_MODEL_TIMER1:
      case ITEM_MODEL_TIMER2:
      {
        TimerData *timer = &g_model.timers[k-ITEM_MODEL_TIMER1];
        putsStrIdx(0*FW, y, STR_TIMER, k-ITEM_MODEL_TIMER1+1); // TODO keep that?
        putsTmrMode(MODEL_PARAM_OFS, y, timer->mode, (attr && m_posHorz==0) ? blink : 0);
  40bcdc:	4621      	mov	r1, r4
  40bcde:	2038      	movs	r0, #56	; 0x38
  40bce0:	b252      	sxtb	r2, r2
  40bce2:	4643      	mov	r3, r8
  40bce4:	f7f7 fcc8 	bl	403678 <_Z11putsTmrModehhah>
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
  40bce8:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40bcec:	f89a 2002 	ldrb.w	r2, [sl, #2]
  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  40bcf0:	3501      	adds	r5, #1
        TimerData *timer = &g_model.timers[k-ITEM_MODEL_TIMER1];
        putsStrIdx(0*FW, y, STR_TIMER, k-ITEM_MODEL_TIMER1+1); // TODO keep that?
        putsTmrMode(MODEL_PARAM_OFS, y, timer->mode, (attr && m_posHorz==0) ? blink : 0);
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
  40bcf2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40bcf6:	2054      	movs	r0, #84	; 0x54
  40bcf8:	4621      	mov	r1, r4
  40bcfa:	b212      	sxth	r2, r2
  40bcfc:	4643      	mov	r3, r8
  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  40bcfe:	b2ed      	uxtb	r5, r5
  40bd00:	3408      	adds	r4, #8
        TimerData *timer = &g_model.timers[k-ITEM_MODEL_TIMER1];
        putsStrIdx(0*FW, y, STR_TIMER, k-ITEM_MODEL_TIMER1+1); // TODO keep that?
        putsTmrMode(MODEL_PARAM_OFS, y, timer->mode, (attr && m_posHorz==0) ? blink : 0);
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
  40bd02:	f8cd 8000 	str.w	r8, [sp]
  40bd06:	f7f7 facd 	bl	4032a4 <_Z8putsTimehhshh>
  uint8_t protocol = g_model.protocol;
  MENU(STR_MENUSETUP, menuTabModel, e_Model, ((protocol<=PROTO_PPMSIM||IS_DSM2_PROTOCOL(protocol)||IS_PXX_PROTOCOL(protocol)) ? 12 : 11), {0,ZCHAR|(sizeof(g_model.name)-1),2,2,0,0,0,0,0,NUM_STICKS+NUM_POTS+NUM_ROTARY_ENCODERS-1,1,2});

  uint8_t  sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
  40bd0a:	2d07      	cmp	r5, #7
  40bd0c:	b2e4      	uxtb	r4, r4
  40bd0e:	f47f ad1c 	bne.w	40b74a <_Z13menuProcModelh+0x7a>
  40bd12:	e502      	b.n	40b71a <_Z13menuProcModelh+0x4a>
      case ITEM_MODEL_PROTOCOL:
        lcd_putsLeft(y, STR_PROTO);
        lcd_putsiAtt(MODEL_PARAM_OFS, y, STR_VPROTOS, protocol,
            (attr && m_posHorz==0 ? (s_editMode>0 ? BLINK|INVERS : INVERS):0));
        if (protocol <= PROTO_PPMSIM) {
          lcd_putsiAtt(MODEL_PARAM_OFS+7*FW, y, STR_NCHANNELS, g_model.ppmNCH+2, (attr && m_posHorz==1) ? blink : 0);
  40bd14:	2062      	movs	r0, #98	; 0x62
  40bd16:	4621      	mov	r1, r4
  40bd18:	4a51      	ldr	r2, [pc, #324]	; (40be60 <_Z13menuProcModelh+0x790>)
  40bd1a:	f8cd 8000 	str.w	r8, [sp]
  40bd1e:	f7f6 fda7 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
  40bd22:	e597      	b.n	40b854 <_Z13menuProcModelh+0x184>
      case ITEM_MODEL_THROTTLE_TRACE:
      {
        lcd_putsLeft(y, STR_TTRACE);
        int8_t idx = 3;
        if (g_model.thrTraceSrc > NUM_POTS) idx = NUM_STICKS+NUM_ROTARY_ENCODERS+2+3+NUM_PPM+g_model.thrTraceSrc;
        else if (g_model.thrTraceSrc > 0) idx = NUM_STICKS+g_model.thrTraceSrc;
  40bd24:	2203      	movs	r2, #3
  40bd26:	e74a      	b.n	40bbbe <_Z13menuProcModelh+0x4ee>
        break;

      case ITEM_MODEL_PROTOCOL:
        lcd_putsLeft(y, STR_PROTO);
        lcd_putsiAtt(MODEL_PARAM_OFS, y, STR_VPROTOS, protocol,
            (attr && m_posHorz==0 ? (s_editMode>0 ? BLINK|INVERS : INVERS):0));
  40bd28:	2300      	movs	r3, #0
  40bd2a:	e5b3      	b.n	40b894 <_Z13menuProcModelh+0x1c4>

      case ITEM_MODEL_PROTOCOL_PARAMS:
        if (protocol <= PROTO_PPMSIM) {
          lcd_putsLeft( y, STR_PPMFRAME);
          lcd_puts(MODEL_PARAM_OFS+3*FW, y, STR_MS);
          lcd_outdezAtt(MODEL_PARAM_OFS, y, (int16_t)g_model.ppmFrameLength*5 + 225, ((attr && m_posHorz==0) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0) | PREC1|LEFT);
  40bd2c:	f896 3c35 	ldrb.w	r3, [r6, #3125]	; 0xc35
  40bd30:	2b00      	cmp	r3, #0
  40bd32:	d170      	bne.n	40be16 <_Z13menuProcModelh+0x746>
  40bd34:	4b4b      	ldr	r3, [pc, #300]	; (40be64 <_Z13menuProcModelh+0x794>)
  40bd36:	f993 3c2c 	ldrsb.w	r3, [r3, #3116]	; 0xc2c
  40bd3a:	2b00      	cmp	r3, #0
  40bd3c:	bfd4      	ite	le
  40bd3e:	23a2      	movle	r3, #162	; 0xa2
  40bd40:	23a3      	movgt	r3, #163	; 0xa3
  40bd42:	b212      	sxth	r2, r2
  40bd44:	2038      	movs	r0, #56	; 0x38
  40bd46:	4621      	mov	r1, r4
  40bd48:	f8cd c014 	str.w	ip, [sp, #20]
  40bd4c:	f7f7 f874 	bl	402e38 <_Z13lcd_outdezAtthhsh>
          lcd_puts(MODEL_PARAM_OFS+8*FW+2, y, PSTR("us"));
  40bd50:	4621      	mov	r1, r4
  40bd52:	4a45      	ldr	r2, [pc, #276]	; (40be68 <_Z13menuProcModelh+0x798>)
  40bd54:	206a      	movs	r0, #106	; 0x6a
  40bd56:	f7f6 fdb7 	bl	4028c8 <_Z8lcd_putshhPKc>
          lcd_outdezAtt(MODEL_PARAM_OFS+8*FW+2, y, (g_model.ppmDelay*50)+300, ((attr && m_posHorz==1) ? blink : 0));
  40bd5a:	f999 314e 	ldrsb.w	r3, [r9, #334]	; 0x14e
  40bd5e:	f896 1c35 	ldrb.w	r1, [r6, #3125]	; 0xc35
  40bd62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40bd66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40bd6a:	005a      	lsls	r2, r3, #1
  40bd6c:	f8dd c014 	ldr.w	ip, [sp, #20]
  40bd70:	f502 7296 	add.w	r2, r2, #300	; 0x12c
  40bd74:	b292      	uxth	r2, r2
  40bd76:	2901      	cmp	r1, #1
  40bd78:	bf18      	it	ne
  40bd7a:	f04f 0c00 	movne.w	ip, #0
  40bd7e:	e537      	b.n	40b7f0 <_Z13menuProcModelh+0x120>
          m_posHorz = 0;
        }
        if (attr && (s_editMode>0 || p1valdiff || (protocol>PROTO_PPMSIM && !IS_DSM2_PROTOCOL(protocol)))) {
          switch (m_posHorz) {
            case 0:
              CHECK_INCDEC_MODELVAR(event, g_model.protocol,0, PROTO_MAX-1);
  40bd80:	f899 114c 	ldrb.w	r1, [r9, #332]	; 0x14c
  40bd84:	2304      	movs	r3, #4
  40bd86:	9808      	ldr	r0, [sp, #32]
  40bd88:	f001 0107 	and.w	r1, r1, #7
  40bd8c:	f7fb fa6c 	bl	407268 <_Z16checkIncDecModelhaaa>
  40bd90:	f899 314c 	ldrb.w	r3, [r9, #332]	; 0x14c
  40bd94:	f360 0302 	bfi	r3, r0, #0, #3
  40bd98:	f889 314c 	strb.w	r3, [r9, #332]	; 0x14c
              break;
  40bd9c:	e55a      	b.n	40b854 <_Z13menuProcModelh+0x184>
          lcd_putsLeft( y, STR_PPMFRAME);
          lcd_puts(MODEL_PARAM_OFS+3*FW, y, STR_MS);
          lcd_outdezAtt(MODEL_PARAM_OFS, y, (int16_t)g_model.ppmFrameLength*5 + 225, ((attr && m_posHorz==0) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0) | PREC1|LEFT);
          lcd_puts(MODEL_PARAM_OFS+8*FW+2, y, PSTR("us"));
          lcd_outdezAtt(MODEL_PARAM_OFS+8*FW+2, y, (g_model.ppmDelay*50)+300, ((attr && m_posHorz==1) ? blink : 0));
          lcd_putcAtt(MODEL_PARAM_OFS+11*FW, y, g_model.pulsePol ? '-' : '+', (attr && m_posHorz==2) ? INVERS : 0);
  40bd9e:	207a      	movs	r0, #122	; 0x7a
  40bda0:	4621      	mov	r1, r4
  40bda2:	4643      	mov	r3, r8
  40bda4:	f7f6 fc62 	bl	40266c <_Z11lcd_putcAtthhhh>
  40bda8:	e554      	b.n	40b854 <_Z13menuProcModelh+0x184>
        putsTime(14*FW, y, timer->val,
            (attr && m_posHorz==1 ? blink:0),
            (attr && m_posHorz==2 ? blink:0) );
        if (attr && (s_editMode>0 || p1valdiff)) {
          uint16_t timer_val = timer->val;
          switch (m_posHorz) {
  40bdaa:	2b02      	cmp	r3, #2
  40bdac:	f47f aeca 	bne.w	40bb44 <_Z13menuProcModelh+0x474>
              timer_val = timer_val%60 + min*60;
              break;
            }
            case 2:
            {
              int8_t sec = timer_val%60;
  40bdb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
              sec -= checkIncDecModel(event, sec+2, 1, 62)-2;
  40bdb2:	9808      	ldr	r0, [sp, #32]
              timer_val = timer_val%60 + min*60;
              break;
            }
            case 2:
            {
              int8_t sec = timer_val%60;
  40bdb4:	fba2 2307 	umull	r2, r3, r2, r7
  40bdb8:	095b      	lsrs	r3, r3, #5
  40bdba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40bdbe:	eba7 0883 	sub.w	r8, r7, r3, lsl #2
              sec -= checkIncDecModel(event, sec+2, 1, 62)-2;
  40bdc2:	f108 0802 	add.w	r8, r8, #2
  40bdc6:	fa5f f888 	uxtb.w	r8, r8
  40bdca:	233e      	movs	r3, #62	; 0x3e
  40bdcc:	2201      	movs	r2, #1
  40bdce:	fa4f f188 	sxtb.w	r1, r8
  40bdd2:	f7fb fa49 	bl	407268 <_Z16checkIncDecModelhaaa>
  40bdd6:	ebc0 0308 	rsb	r3, r0, r8
              timer_val -= sec ;
  40bdda:	b25b      	sxtb	r3, r3
  40bddc:	1aff      	subs	r7, r7, r3
  40bdde:	b2bf      	uxth	r7, r7
              if ((int16_t)timer_val < 0) timer_val=0;
  40bde0:	f417 4f00 	tst.w	r7, #32768	; 0x8000
  40bde4:	bf18      	it	ne
  40bde6:	2700      	movne	r7, #0
  40bde8:	e6ac      	b.n	40bb44 <_Z13menuProcModelh+0x474>
            case 0:
              CHECK_INCDEC_MODELVAR(event, timer->mode, -2*(MAX_PSWITCH+NUM_CSW), TMR_VAROFS-1+2*(MAX_PSWITCH+NUM_CSW));
              break;
            case 1:
            {
              int8_t min = timer_val/60;
  40bdea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
              CHECK_INCDEC_MODELVAR(event, min, 0, 59);
  40bdec:	9808      	ldr	r0, [sp, #32]
            case 0:
              CHECK_INCDEC_MODELVAR(event, timer->mode, -2*(MAX_PSWITCH+NUM_CSW), TMR_VAROFS-1+2*(MAX_PSWITCH+NUM_CSW));
              break;
            case 1:
            {
              int8_t min = timer_val/60;
  40bdee:	fba2 2807 	umull	r2, r8, r2, r7
  40bdf2:	ea4f 1858 	mov.w	r8, r8, lsr #5
              CHECK_INCDEC_MODELVAR(event, min, 0, 59);
  40bdf6:	fa4f f188 	sxtb.w	r1, r8
  40bdfa:	2200      	movs	r2, #0
  40bdfc:	233b      	movs	r3, #59	; 0x3b
  40bdfe:	f7fb fa33 	bl	407268 <_Z16checkIncDecModelhaaa>
              timer_val = timer_val%60 + min*60;
  40be02:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
  40be06:	eba7 0788 	sub.w	r7, r7, r8, lsl #2
  40be0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  40be0e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
  40be12:	b2bf      	uxth	r7, r7
              break;
  40be14:	e696      	b.n	40bb44 <_Z13menuProcModelh+0x474>

      case ITEM_MODEL_PROTOCOL_PARAMS:
        if (protocol <= PROTO_PPMSIM) {
          lcd_putsLeft( y, STR_PPMFRAME);
          lcd_puts(MODEL_PARAM_OFS+3*FW, y, STR_MS);
          lcd_outdezAtt(MODEL_PARAM_OFS, y, (int16_t)g_model.ppmFrameLength*5 + 225, ((attr && m_posHorz==0) ? (s_editMode>0 ? BLINK|INVERS : INVERS) : 0) | PREC1|LEFT);
  40be16:	23a0      	movs	r3, #160	; 0xa0
  40be18:	e793      	b.n	40bd42 <_Z13menuProcModelh+0x672>
          lcd_puts(MODEL_PARAM_OFS+8*FW+2, y, PSTR("us"));
          lcd_outdezAtt(MODEL_PARAM_OFS+8*FW+2, y, (g_model.ppmDelay*50)+300, ((attr && m_posHorz==1) ? blink : 0));
          lcd_putcAtt(MODEL_PARAM_OFS+11*FW, y, g_model.pulsePol ? '-' : '+', (attr && m_posHorz==2) ? INVERS : 0);

          if(attr && (s_editMode>0 || p1valdiff)) {
            switch (m_posHorz) {
  40be1a:	2b02      	cmp	r3, #2
  40be1c:	f47f ad1a 	bne.w	40b854 <_Z13menuProcModelh+0x184>
                break;
              case 1:
                CHECK_INCDEC_MODELVAR(event, g_model.ppmDelay, -4, 10);
                break;
              case 2:
                CHECK_INCDEC_MODELVAR(event, g_model.pulsePol, 0, 1);
  40be20:	f899 114d 	ldrb.w	r1, [r9, #333]	; 0x14d
  40be24:	2301      	movs	r3, #1
  40be26:	9808      	ldr	r0, [sp, #32]
  40be28:	f3c1 1100 	ubfx	r1, r1, #4, #1
  40be2c:	2200      	movs	r2, #0
  40be2e:	f7fb fa1b 	bl	407268 <_Z16checkIncDecModelhaaa>
  40be32:	f899 314d 	ldrb.w	r3, [r9, #333]	; 0x14d
  40be36:	f360 1304 	bfi	r3, r0, #4, #1
  40be3a:	f889 314d 	strb.w	r3, [r9, #333]	; 0x14d
                break;
  40be3e:	e509      	b.n	40b854 <_Z13menuProcModelh+0x184>
            switch (m_posHorz) {
              case 0:
                CHECK_INCDEC_MODELVAR(event, g_model.ppmFrameLength, -20, 20);
                break;
              case 1:
                CHECK_INCDEC_MODELVAR(event, g_model.ppmDelay, -4, 10);
  40be40:	f999 114e 	ldrsb.w	r1, [r9, #334]	; 0x14e
  40be44:	9808      	ldr	r0, [sp, #32]
  40be46:	f06f 0203 	mvn.w	r2, #3
  40be4a:	230a      	movs	r3, #10
  40be4c:	f7fb fa0c 	bl	407268 <_Z16checkIncDecModelhaaa>
  40be50:	f889 014e 	strb.w	r0, [r9, #334]	; 0x14e
                break;
  40be54:	e4fe      	b.n	40b854 <_Z13menuProcModelh+0x184>
  40be56:	bf00      	nop
  40be58:	00410e00 	.word	0x00410e00
  40be5c:	20000108 	.word	0x20000108
  40be60:	004102ea 	.word	0x004102ea
  40be64:	20001200 	.word	0x20001200
  40be68:	00411460 	.word	0x00411460

0040be6c <_Z16menuProcPhaseOneh>:
static uint8_t s_currIdx;

#ifdef FLIGHT_PHASES

void menuProcPhaseOne(uint8_t event)
{
  40be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PhaseData *phase = phaseaddress(s_currIdx);
  40be70:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 40c128 <_Z16menuProcPhaseOneh+0x2bc>
  40be74:	49a4      	ldr	r1, [pc, #656]	; (40c108 <_Z16menuProcPhaseOneh+0x29c>)
  40be76:	f89a 4af8 	ldrb.w	r4, [sl, #2808]	; 0xaf8
static uint8_t s_currIdx;

#ifdef FLIGHT_PHASES

void menuProcPhaseOne(uint8_t event)
{
  40be7a:	b08b      	sub	sp, #44	; 0x2c
  PhaseData *phase = phaseaddress(s_currIdx);
  putsFlightPhase(13*FW, 0, s_currIdx+1, 0);
  40be7c:	1c62      	adds	r2, r4, #1

#ifdef FLIGHT_PHASES

void menuProcPhaseOne(uint8_t event)
{
  PhaseData *phase = phaseaddress(s_currIdx);
  40be7e:	eb01 1404 	add.w	r4, r1, r4, lsl #4
  putsFlightPhase(13*FW, 0, s_currIdx+1, 0);
  40be82:	2100      	movs	r1, #0
  40be84:	460b      	mov	r3, r1
static uint8_t s_currIdx;

#ifdef FLIGHT_PHASES

void menuProcPhaseOne(uint8_t event)
{
  40be86:	9008      	str	r0, [sp, #32]
  PhaseData *phase = phaseaddress(s_currIdx);
  putsFlightPhase(13*FW, 0, s_currIdx+1, 0);
  40be88:	b252      	sxtb	r2, r2
  40be8a:	204e      	movs	r0, #78	; 0x4e

#ifdef FLIGHT_PHASES

void menuProcPhaseOne(uint8_t event)
{
  PhaseData *phase = phaseaddress(s_currIdx);
  40be8c:	f504 64d1 	add.w	r4, r4, #1672	; 0x688
  40be90:	9406      	str	r4, [sp, #24]
  putsFlightPhase(13*FW, 0, s_currIdx+1, 0);
  40be92:	f7f7 fb91 	bl	4035b8 <_Z15putsFlightPhasehhah>

#define MAX_TRIM_LINE (3+NUM_ROTARY_ENCODERS)

  SUBMENU(STR_MENUFLIGHTPHASE, (s_currIdx==0 ? 3 : 5), {ZCHAR|(sizeof(phase->name)-1), 0, MAX_TRIM_LINE, 0/*, 0*/});
  40be96:	f89a 5af8 	ldrb.w	r5, [sl, #2808]	; 0xaf8
  40be9a:	2100      	movs	r1, #0
  40be9c:	4c9b      	ldr	r4, [pc, #620]	; (40c10c <_Z16menuProcPhaseOneh+0x2a0>)
  40be9e:	2d00      	cmp	r5, #0
  40bea0:	bf14      	ite	ne
  40bea2:	2504      	movne	r5, #4
  40bea4:	2502      	moveq	r5, #2
  40bea6:	2603      	movs	r6, #3
  40bea8:	9808      	ldr	r0, [sp, #32]
  40beaa:	460a      	mov	r2, r1
  40beac:	460b      	mov	r3, r1
  40beae:	9400      	str	r4, [sp, #0]
  40beb0:	9601      	str	r6, [sp, #4]
  40beb2:	9502      	str	r5, [sp, #8]
  40beb4:	f7fc f830 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  40beb8:	b910      	cbnz	r0, 40bec0 <_Z16menuProcPhaseOneh+0x54>
        lcd_outdezAtt(10*FW, y, phase->fadeOut, attr|LEFT);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeOut, 0, 15);
        break;
    }
  }
}
  40beba:	b00b      	add	sp, #44	; 0x2c
  40bebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PhaseData *phase = phaseaddress(s_currIdx);
  putsFlightPhase(13*FW, 0, s_currIdx+1, 0);

#define MAX_TRIM_LINE (3+NUM_ROTARY_ENCODERS)

  SUBMENU(STR_MENUFLIGHTPHASE, (s_currIdx==0 ? 3 : 5), {ZCHAR|(sizeof(phase->name)-1), 0, MAX_TRIM_LINE, 0/*, 0*/});
  40bec0:	2000      	movs	r0, #0
  40bec2:	1d22      	adds	r2, r4, #4
  40bec4:	4601      	mov	r1, r0
  40bec6:	2302      	movs	r3, #2
  40bec8:	f7f6 fcf6 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  40becc:	f99a 6c34 	ldrsb.w	r6, [sl, #3124]	; 0xc34

  int8_t sub = m_posVert;
  40bed0:	2718      	movs	r7, #24
  PhaseData *phase = phaseaddress(s_currIdx);
  putsFlightPhase(13*FW, 0, s_currIdx+1, 0);

#define MAX_TRIM_LINE (3+NUM_ROTARY_ENCODERS)

  SUBMENU(STR_MENUFLIGHTPHASE, (s_currIdx==0 ? 3 : 5), {ZCHAR|(sizeof(phase->name)-1), 0, MAX_TRIM_LINE, 0/*, 0*/});
  40bed2:	9607      	str	r6, [sp, #28]

  int8_t sub = m_posVert;
  40bed4:	f04f 0801 	mov.w	r8, #1

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
  40bed8:	2400      	movs	r4, #0
    if (s_currIdx == 0 && i==1) i = 3;
    uint8_t attr = sub==k ? INVERS : 0;
  40beda:	f108 35ff 	add.w	r5, r8, #4294967295
  40bede:	9e07      	ldr	r6, [sp, #28]
  SUBMENU(STR_MENUFLIGHTPHASE, (s_currIdx==0 ? 3 : 5), {ZCHAR|(sizeof(phase->name)-1), 0, MAX_TRIM_LINE, 0/*, 0*/});

  int8_t sub = m_posVert;

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
    if (s_currIdx == 0 && i==1) i = 3;
  40bee0:	f1a7 0b08 	sub.w	fp, r7, #8
    uint8_t attr = sub==k ? INVERS : 0;
  40bee4:	b2ed      	uxtb	r5, r5
  SUBMENU(STR_MENUFLIGHTPHASE, (s_currIdx==0 ? 3 : 5), {ZCHAR|(sizeof(phase->name)-1), 0, MAX_TRIM_LINE, 0/*, 0*/});

  int8_t sub = m_posVert;

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
    if (s_currIdx == 0 && i==1) i = 3;
  40bee6:	fa5f fb8b 	uxtb.w	fp, fp
    uint8_t attr = sub==k ? INVERS : 0;
  40beea:	42b5      	cmp	r5, r6
  40beec:	bf0c      	ite	eq
  40beee:	2502      	moveq	r5, #2
  40bef0:	2500      	movne	r5, #0
    switch(i) {
  40bef2:	2c04      	cmp	r4, #4
  40bef4:	d862      	bhi.n	40bfbc <_Z16menuProcPhaseOneh+0x150>
  40bef6:	e8df f014 	tbh	[pc, r4, lsl #1]
  40befa:	00c5      	.short	0x00c5
  40befc:	000500ad 	.word	0x000500ad
  40bf00:	007b0099 	.word	0x007b0099
        lcd_putsLeft( y, STR_SWITCH);
        putsSwitches(10*FW,  y, phase->swtch, attr);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
        break;
      case 2:
        lcd_putsLeft( y, STR_TRIMS);
  40bf04:	4658      	mov	r0, fp
  40bf06:	4982      	ldr	r1, [pc, #520]	; (40c110 <_Z16menuProcPhaseOneh+0x2a4>)
  40bf08:	f7f6 fce0 	bl	4028cc <_Z12lcd_putsLefthPKc>
  40bf0c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
        for (uint8_t t=0; t<NUM_STICKS; t++) {
          putsTrimMode((10+t)*FW, y, s_currIdx, t, (attr && m_posHorz==t) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
          if (attr && m_posHorz==t && ((s_editMode>0) || p1valdiff)) {
            int16_t v = getRawTrimValue(s_currIdx, t);
            if (v < TRIM_EXTENDED_MAX) v = TRIM_EXTENDED_MAX;
            v = checkIncDec(event, v, TRIM_EXTENDED_MAX, TRIM_EXTENDED_MAX+MAX_PHASES-1, EE_MODEL);
  40bf10:	9409      	str	r4, [sp, #36]	; 0x24
        putsSwitches(10*FW,  y, phase->swtch, attr);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
        break;
      case 2:
        lcd_putsLeft( y, STR_TRIMS);
        for (uint8_t t=0; t<NUM_STICKS; t++) {
  40bf12:	f04f 0900 	mov.w	r9, #0
          putsTrimMode((10+t)*FW, y, s_currIdx, t, (attr && m_posHorz==t) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
          if (attr && m_posHorz==t && ((s_editMode>0) || p1valdiff)) {
            int16_t v = getRawTrimValue(s_currIdx, t);
            if (v < TRIM_EXTENDED_MAX) v = TRIM_EXTENDED_MAX;
            v = checkIncDec(event, v, TRIM_EXTENDED_MAX, TRIM_EXTENDED_MAX+MAX_PHASES-1, EE_MODEL);
  40bf16:	4664      	mov	r4, ip
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
        break;
      case 2:
        lcd_putsLeft( y, STR_TRIMS);
        for (uint8_t t=0; t<NUM_STICKS; t++) {
          putsTrimMode((10+t)*FW, y, s_currIdx, t, (attr && m_posHorz==t) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40bf18:	f89a 2af8 	ldrb.w	r2, [sl, #2808]	; 0xaf8
  40bf1c:	2d00      	cmp	r5, #0
  40bf1e:	f000 80c6 	beq.w	40c0ae <_Z16menuProcPhaseOneh+0x242>
  40bf22:	f241 2100 	movw	r1, #4608	; 0x1200
  40bf26:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40bf2a:	f891 3c35 	ldrb.w	r3, [r1, #3125]	; 0xc35
  40bf2e:	2600      	movs	r6, #0
  40bf30:	454b      	cmp	r3, r9
  40bf32:	f000 80c3 	beq.w	40c0bc <_Z16menuProcPhaseOneh+0x250>
  40bf36:	4620      	mov	r0, r4
  40bf38:	4659      	mov	r1, fp
  40bf3a:	464b      	mov	r3, r9
  40bf3c:	9600      	str	r6, [sp, #0]
  40bf3e:	f7f7 fbc1 	bl	4036c4 <_Z12putsTrimModehhhhh>
          if (attr && m_posHorz==t && ((s_editMode>0) || p1valdiff)) {
  40bf42:	f89a 6c35 	ldrb.w	r6, [sl, #3125]	; 0xc35
  40bf46:	454e      	cmp	r6, r9
  40bf48:	9605      	str	r6, [sp, #20]
  40bf4a:	d12d      	bne.n	40bfa8 <_Z16menuProcPhaseOneh+0x13c>
  40bf4c:	f241 2100 	movw	r1, #4608	; 0x1200
  40bf50:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40bf54:	f991 3c2c 	ldrsb.w	r3, [r1, #3116]	; 0xc2c
  40bf58:	2b00      	cmp	r3, #0
  40bf5a:	dd25      	ble.n	40bfa8 <_Z16menuProcPhaseOneh+0x13c>
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  40bf5c:	f240 1208 	movw	r2, #264	; 0x108
  40bf60:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40bf64:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  40bf68:	f8d3 3998 	ldr.w	r3, [r3, #2456]	; 0x998
            int16_t v = getRawTrimValue(s_currIdx, t);
  40bf6c:	f891 2af8 	ldrb.w	r2, [r1, #2808]	; 0xaf8
  40bf70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  40bf74:	2b00      	cmp	r3, #0
  40bf76:	f000 80b5 	beq.w	40c0e4 <_Z16menuProcPhaseOneh+0x278>
            if (v < TRIM_EXTENDED_MAX) v = TRIM_EXTENDED_MAX;
            v = checkIncDec(event, v, TRIM_EXTENDED_MAX, TRIM_EXTENDED_MAX+MAX_PHASES-1, EE_MODEL);
  40bf7a:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
  40bf7e:	9808      	ldr	r0, [sp, #32]
  40bf80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40bf84:	2602      	movs	r6, #2
  40bf86:	9600      	str	r6, [sp, #0]
  40bf88:	f7fa fffa 	bl	406f80 <_Z11checkIncDechsssh>
            if (checkIncDec_Ret) {
  40bf8c:	f99a 3c2d 	ldrsb.w	r3, [sl, #3117]	; 0xc2d
  40bf90:	b153      	cbz	r3, 40bfa8 <_Z16menuProcPhaseOneh+0x13c>
              if (v == TRIM_EXTENDED_MAX) v = 0;
  40bf92:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  40bf96:	bf14      	ite	ne
  40bf98:	4602      	movne	r2, r0
  40bf9a:	2200      	moveq	r2, #0
              setTrimValue(s_currIdx, t, v);
  40bf9c:	b212      	sxth	r2, r2
  40bf9e:	f89a 0af8 	ldrb.w	r0, [sl, #2808]	; 0xaf8
  40bfa2:	9905      	ldr	r1, [sp, #20]
  40bfa4:	f7f4 ff58 	bl	400e58 <_Z12setTrimValuehhs>
        putsSwitches(10*FW,  y, phase->swtch, attr);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
        break;
      case 2:
        lcd_putsLeft( y, STR_TRIMS);
        for (uint8_t t=0; t<NUM_STICKS; t++) {
  40bfa8:	f109 0901 	add.w	r9, r9, #1
  40bfac:	fa5f f989 	uxtb.w	r9, r9
  40bfb0:	3406      	adds	r4, #6
  40bfb2:	f1b9 0f04 	cmp.w	r9, #4
  40bfb6:	b2e4      	uxtb	r4, r4
  40bfb8:	d1ae      	bne.n	40bf18 <_Z16menuProcPhaseOneh+0xac>
  40bfba:	9c09      	ldr	r4, [sp, #36]	; 0x24

  SUBMENU(STR_MENUFLIGHTPHASE, (s_currIdx==0 ? 3 : 5), {ZCHAR|(sizeof(phase->name)-1), 0, MAX_TRIM_LINE, 0/*, 0*/});

  int8_t sub = m_posVert;

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
  40bfbc:	3401      	adds	r4, #1
  40bfbe:	b2e4      	uxtb	r4, r4
  40bfc0:	2c04      	cmp	r4, #4
  40bfc2:	f63f af7a 	bhi.w	40beba <_Z16menuProcPhaseOneh+0x4e>
    if (s_currIdx == 0 && i==1) i = 3;
  40bfc6:	f89a 3af8 	ldrb.w	r3, [sl, #2808]	; 0xaf8
  40bfca:	f108 0801 	add.w	r8, r8, #1
  40bfce:	f1d3 0301 	rsbs	r3, r3, #1
  40bfd2:	bf38      	it	cc
  40bfd4:	2300      	movcc	r3, #0
  40bfd6:	2c01      	cmp	r4, #1
  40bfd8:	bf14      	ite	ne
  40bfda:	2300      	movne	r3, #0
  40bfdc:	f003 0301 	andeq.w	r3, r3, #1
  40bfe0:	3708      	adds	r7, #8
  40bfe2:	2b00      	cmp	r3, #0
  40bfe4:	bf18      	it	ne
  40bfe6:	2403      	movne	r4, #3
  40bfe8:	fa5f f888 	uxtb.w	r8, r8
  40bfec:	b2ff      	uxtb	r7, r7
  40bfee:	e774      	b.n	40beda <_Z16menuProcPhaseOneh+0x6e>
        lcd_putsLeft( y, STR_FADEIN);
        lcd_outdezAtt(10*FW, y, phase->fadeIn, attr|LEFT);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeIn, 0, 15);
        break;
      case 4:
        lcd_putsLeft( y, STR_FADEOUT);
  40bff0:	4948      	ldr	r1, [pc, #288]	; (40c114 <_Z16menuProcPhaseOneh+0x2a8>)
  40bff2:	4658      	mov	r0, fp
  40bff4:	f7f6 fc6a 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(10*FW, y, phase->fadeOut, attr|LEFT);
  40bff8:	9e06      	ldr	r6, [sp, #24]
  40bffa:	f065 037f 	orn	r3, r5, #127	; 0x7f
  40bffe:	7bf2      	ldrb	r2, [r6, #15]
  40c000:	b2db      	uxtb	r3, r3
  40c002:	0912      	lsrs	r2, r2, #4
  40c004:	203c      	movs	r0, #60	; 0x3c
  40c006:	4659      	mov	r1, fp
  40c008:	46d9      	mov	r9, fp
  40c00a:	f7f6 ff15 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeOut, 0, 15);
  40c00e:	2d00      	cmp	r5, #0
  40c010:	f43f af53 	beq.w	40beba <_Z16menuProcPhaseOneh+0x4e>
  40c014:	7bf1      	ldrb	r1, [r6, #15]
  40c016:	230f      	movs	r3, #15
  40c018:	9808      	ldr	r0, [sp, #32]
  40c01a:	0909      	lsrs	r1, r1, #4
  40c01c:	2200      	movs	r2, #0
  40c01e:	f7fb f923 	bl	407268 <_Z16checkIncDecModelhaaa>
  40c022:	7bf3      	ldrb	r3, [r6, #15]
  40c024:	f360 1307 	bfi	r3, r0, #4, #4
  40c028:	73f3      	strb	r3, [r6, #15]
  40c02a:	e746      	b.n	40beba <_Z16menuProcPhaseOneh+0x4e>
          }
        }
#endif
        break;
      case 3:
        lcd_putsLeft( y, STR_FADEIN);
  40c02c:	493a      	ldr	r1, [pc, #232]	; (40c118 <_Z16menuProcPhaseOneh+0x2ac>)
  40c02e:	4658      	mov	r0, fp
  40c030:	f7f6 fc4c 	bl	4028cc <_Z12lcd_putsLefthPKc>
        lcd_outdezAtt(10*FW, y, phase->fadeIn, attr|LEFT);
  40c034:	9e06      	ldr	r6, [sp, #24]
  40c036:	f065 037f 	orn	r3, r5, #127	; 0x7f
  40c03a:	7bf2      	ldrb	r2, [r6, #15]
  40c03c:	b2db      	uxtb	r3, r3
  40c03e:	f002 020f 	and.w	r2, r2, #15
  40c042:	203c      	movs	r0, #60	; 0x3c
  40c044:	4659      	mov	r1, fp
  40c046:	f7f6 fef7 	bl	402e38 <_Z13lcd_outdezAtthhsh>
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeIn, 0, 15);
  40c04a:	2d00      	cmp	r5, #0
  40c04c:	d13d      	bne.n	40c0ca <_Z16menuProcPhaseOneh+0x25e>

  SUBMENU(STR_MENUFLIGHTPHASE, (s_currIdx==0 ? 3 : 5), {ZCHAR|(sizeof(phase->name)-1), 0, MAX_TRIM_LINE, 0/*, 0*/});

  int8_t sub = m_posVert;

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
  40c04e:	3401      	adds	r4, #1
  40c050:	b2e4      	uxtb	r4, r4
  40c052:	e7b8      	b.n	40bfc6 <_Z16menuProcPhaseOneh+0x15a>
      case 0:
        lcd_putsLeft( y, STR_NAME);
        EditName(10*FW, y, phase->name, sizeof(phase->name), event, attr, m_posHorz);
        break;
      case 1:
        lcd_putsLeft( y, STR_SWITCH);
  40c054:	4931      	ldr	r1, [pc, #196]	; (40c11c <_Z16menuProcPhaseOneh+0x2b0>)
  40c056:	4658      	mov	r0, fp
  40c058:	f7f6 fc38 	bl	4028cc <_Z12lcd_putsLefthPKc>
        putsSwitches(10*FW,  y, phase->swtch, attr);
  40c05c:	9e06      	ldr	r6, [sp, #24]
  40c05e:	203c      	movs	r0, #60	; 0x3c
  40c060:	f996 2008 	ldrsb.w	r2, [r6, #8]
  40c064:	4659      	mov	r1, fp
  40c066:	462b      	mov	r3, r5
  40c068:	f7f7 fa44 	bl	4034f4 <_Z12putsSwitcheshhah>
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
  40c06c:	2d00      	cmp	r5, #0
  40c06e:	d0ee      	beq.n	40c04e <_Z16menuProcPhaseOneh+0x1e2>
  40c070:	f996 1008 	ldrsb.w	r1, [r6, #8]
  40c074:	9808      	ldr	r0, [sp, #32]
  40c076:	f06f 0228 	mvn.w	r2, #40	; 0x28
  40c07a:	2329      	movs	r3, #41	; 0x29
  40c07c:	f7fb f8f4 	bl	407268 <_Z16checkIncDecModelhaaa>
  40c080:	7230      	strb	r0, [r6, #8]
  40c082:	e7e4      	b.n	40c04e <_Z16menuProcPhaseOneh+0x1e2>
  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
    if (s_currIdx == 0 && i==1) i = 3;
    uint8_t attr = sub==k ? INVERS : 0;
    switch(i) {
      case 0:
        lcd_putsLeft( y, STR_NAME);
  40c084:	4658      	mov	r0, fp
  40c086:	4926      	ldr	r1, [pc, #152]	; (40c120 <_Z16menuProcPhaseOneh+0x2b4>)
  40c088:	f7f6 fc20 	bl	4028cc <_Z12lcd_putsLefthPKc>
        EditName(10*FW, y, phase->name, sizeof(phase->name), event, attr, m_posHorz);
  40c08c:	9e06      	ldr	r6, [sp, #24]
  40c08e:	4b25      	ldr	r3, [pc, #148]	; (40c124 <_Z16menuProcPhaseOneh+0x2b8>)
  40c090:	3500      	adds	r5, #0
  40c092:	f106 0209 	add.w	r2, r6, #9
  40c096:	9e08      	ldr	r6, [sp, #32]
  40c098:	bf18      	it	ne
  40c09a:	2501      	movne	r5, #1
  40c09c:	9302      	str	r3, [sp, #8]
  40c09e:	203c      	movs	r0, #60	; 0x3c
  40c0a0:	4659      	mov	r1, fp
  40c0a2:	2306      	movs	r3, #6
  40c0a4:	9600      	str	r6, [sp, #0]
  40c0a6:	9501      	str	r5, [sp, #4]
  40c0a8:	f7fb f8e8 	bl	40727c <_Z8EditNamehhPchhbRh>
        break;
  40c0ac:	e7cf      	b.n	40c04e <_Z16menuProcPhaseOneh+0x1e2>
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
        break;
      case 2:
        lcd_putsLeft( y, STR_TRIMS);
        for (uint8_t t=0; t<NUM_STICKS; t++) {
          putsTrimMode((10+t)*FW, y, s_currIdx, t, (attr && m_posHorz==t) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40c0ae:	4620      	mov	r0, r4
  40c0b0:	4659      	mov	r1, fp
  40c0b2:	464b      	mov	r3, r9
  40c0b4:	9500      	str	r5, [sp, #0]
  40c0b6:	f7f7 fb05 	bl	4036c4 <_Z12putsTrimModehhhhh>
  40c0ba:	e775      	b.n	40bfa8 <_Z16menuProcPhaseOneh+0x13c>
  40c0bc:	f991 6c2c 	ldrsb.w	r6, [r1, #3116]	; 0xc2c
  40c0c0:	2e00      	cmp	r6, #0
  40c0c2:	bfd4      	ite	le
  40c0c4:	2602      	movle	r6, #2
  40c0c6:	2603      	movgt	r6, #3
  40c0c8:	e735      	b.n	40bf36 <_Z16menuProcPhaseOneh+0xca>
#endif
        break;
      case 3:
        lcd_putsLeft( y, STR_FADEIN);
        lcd_outdezAtt(10*FW, y, phase->fadeIn, attr|LEFT);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeIn, 0, 15);
  40c0ca:	7bf1      	ldrb	r1, [r6, #15]
  40c0cc:	230f      	movs	r3, #15
  40c0ce:	9808      	ldr	r0, [sp, #32]
  40c0d0:	f001 010f 	and.w	r1, r1, #15
  40c0d4:	2200      	movs	r2, #0
  40c0d6:	f7fb f8c7 	bl	407268 <_Z16checkIncDecModelhaaa>
  40c0da:	7bf3      	ldrb	r3, [r6, #15]
  40c0dc:	f360 0303 	bfi	r3, r0, #0, #4
  40c0e0:	73f3      	strb	r3, [r6, #15]
  40c0e2:	e7b4      	b.n	40c04e <_Z16menuProcPhaseOneh+0x1e2>
  else {
    PhaseData *p = phaseaddress(phase);
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  40c0e4:	4e08      	ldr	r6, [pc, #32]	; (40c108 <_Z16menuProcPhaseOneh+0x29c>)
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  40c0e6:	0113      	lsls	r3, r2, #4
  40c0e8:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  40c0ec:	eb06 0249 	add.w	r2, r6, r9, lsl #1
  40c0f0:	18d1      	adds	r1, r2, r3
  40c0f2:	7849      	ldrb	r1, [r1, #1]
  40c0f4:	5cd3      	ldrb	r3, [r2, r3]
  40c0f6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        lcd_putsLeft( y, STR_TRIMS);
        for (uint8_t t=0; t<NUM_STICKS; t++) {
          putsTrimMode((10+t)*FW, y, s_currIdx, t, (attr && m_posHorz==t) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
          if (attr && m_posHorz==t && ((s_editMode>0) || p1valdiff)) {
            int16_t v = getRawTrimValue(s_currIdx, t);
            if (v < TRIM_EXTENDED_MAX) v = TRIM_EXTENDED_MAX;
  40c0fa:	b209      	sxth	r1, r1
  40c0fc:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
  40c100:	bfb8      	it	lt
  40c102:	f44f 71fa 	movlt.w	r1, #500	; 0x1f4
  40c106:	e738      	b.n	40bf7a <_Z16menuProcPhaseOneh+0x10e>
  40c108:	20000244 	.word	0x20000244
  40c10c:	00410e24 	.word	0x00410e24
  40c110:	00410e38 	.word	0x00410e38
  40c114:	00410e48 	.word	0x00410e48
  40c118:	00410e40 	.word	0x00410e40
  40c11c:	00410d0c 	.word	0x00410d0c
  40c120:	00410dc8 	.word	0x00410dc8
  40c124:	20001e35 	.word	0x20001e35
  40c128:	20001200 	.word	0x20001200

0040c12c <_Z15menuProcTrainerh>:
  }
}
#endif

void menuProcTrainer(uint8_t event)
{
  40c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MENU(STR_MENUTRAINER, menuTabDiag, e_Trainer, 7, {0, 2, 2, 2, 2, 0/*, 0*/});
  40c130:	4d98      	ldr	r5, [pc, #608]	; (40c394 <_Z15menuProcTrainerh+0x268>)
  40c132:	2406      	movs	r4, #6
  }
}
#endif

void menuProcTrainer(uint8_t event)
{
  40c134:	b087      	sub	sp, #28
  MENU(STR_MENUTRAINER, menuTabDiag, e_Trainer, 7, {0, 2, 2, 2, 2, 0/*, 0*/});
  40c136:	2605      	movs	r6, #5
  40c138:	2101      	movs	r1, #1
  40c13a:	f5a5 62a8 	sub.w	r2, r5, #1344	; 0x540
  40c13e:	4623      	mov	r3, r4
  }
}
#endif

void menuProcTrainer(uint8_t event)
{
  40c140:	9004      	str	r0, [sp, #16]
  MENU(STR_MENUTRAINER, menuTabDiag, e_Trainer, 7, {0, 2, 2, 2, 2, 0/*, 0*/});
  40c142:	9500      	str	r5, [sp, #0]
  40c144:	9601      	str	r6, [sp, #4]
  40c146:	9402      	str	r4, [sp, #8]
  40c148:	f7fb fee6 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  40c14c:	b910      	cbnz	r0, 40c154 <_Z15menuProcTrainerh+0x28>
        eeDirty(EE_GENERAL);
        AUDIO_KEYPAD_UP();
      }
    }
  }
}
  40c14e:	b007      	add	sp, #28
  40c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif

void menuProcTrainer(uint8_t event)
{
  MENU(STR_MENUTRAINER, menuTabDiag, e_Trainer, 7, {0, 2, 2, 2, 2, 0/*, 0*/});
  40c154:	2000      	movs	r0, #0
  40c156:	2302      	movs	r3, #2
  40c158:	4601      	mov	r1, r0
  40c15a:	f105 0208 	add.w	r2, r5, #8
  40c15e:	f7f6 fbab 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  uint8_t y;
  bool    edit;
  uint8_t blink ;

  if (SLAVE_MODE) { // i am the slave
  40c162:	f7f4 f88f 	bl	400284 <_Z16check_soft_powerv>
  40c166:	2801      	cmp	r0, #1
  40c168:	f000 810b 	beq.w	40c382 <_Z15menuProcTrainerh+0x256>
  }
  else {
    lcd_puts(3*FW, 1*FH, STR_MODESRC);

    y = 2*FH;
    blink = (s_editMode>0) ? BLINK|INVERS : INVERS ;
  40c16c:	f8df 9244 	ldr.w	r9, [pc, #580]	; 40c3b4 <_Z15menuProcTrainerh+0x288>

  if (SLAVE_MODE) { // i am the slave
    lcd_puts(7*FW, 3*FH, STR_SLAVE);
  }
  else {
    lcd_puts(3*FW, 1*FH, STR_MODESRC);
  40c170:	f105 0218 	add.w	r2, r5, #24
  40c174:	2012      	movs	r0, #18
  40c176:	2108      	movs	r1, #8
  40c178:	f7f6 fba6 	bl	4028c8 <_Z8lcd_putshhPKc>

    y = 2*FH;
    blink = (s_editMode>0) ? BLINK|INVERS : INVERS ;
  40c17c:	f999 3c2c 	ldrsb.w	r3, [r9, #3116]	; 0xc2c
  40c180:	f8df b220 	ldr.w	fp, [pc, #544]	; 40c3a4 <_Z15menuProcTrainerh+0x278>
  40c184:	2b00      	cmp	r3, #0
  40c186:	bfd4      	ite	le
  40c188:	2302      	movle	r3, #2
  40c18a:	2303      	movgt	r3, #3
  40c18c:	9305      	str	r3, [sp, #20]
  40c18e:	46a2      	mov	sl, r4
    lcd_puts(7*FW, 3*FH, STR_SLAVE);
  }
  else {
    lcd_puts(3*FW, 1*FH, STR_MODESRC);

    y = 2*FH;
  40c190:	2510      	movs	r5, #16
    blink = (s_editMode>0) ? BLINK|INVERS : INVERS ;

    for (uint8_t i=1; i<=NUM_STICKS; i++) {
  40c192:	2601      	movs	r6, #1
    0x87, 0x8D, 0x93, 0x9C, 0xB1, 0xB4,
    0xC6, 0xC9, 0xD2, 0xD8, 0xE1, 0xE4 };

uint8_t channel_order(uint8_t x)
{
  return ( ((pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup) >> (6-(x-1) * 2)) & 3 ) + 1 );
  40c194:	f89b 306d 	ldrb.w	r3, [fp, #109]	; 0x6d
  40c198:	f24f 7130 	movw	r1, #63280	; 0xf730
  40c19c:	f2c0 0140 	movt	r1, #64	; 0x40
  40c1a0:	5cca      	ldrb	r2, [r1, r3]
      uint8_t chan = channel_order(i);

      volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];
  40c1a2:	4b7d      	ldr	r3, [pc, #500]	; (40c398 <_Z15menuProcTrainerh+0x26c>)
  40c1a4:	fa42 f20a 	asr.w	r2, r2, sl
  40c1a8:	f002 0203 	and.w	r2, r2, #3

      putsChnRaw(0, y, chan, 0);
  40c1ac:	2000      	movs	r0, #0
  40c1ae:	3201      	adds	r2, #1
    blink = (s_editMode>0) ? BLINK|INVERS : INVERS ;

    for (uint8_t i=1; i<=NUM_STICKS; i++) {
      uint8_t chan = channel_order(i);

      volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];
  40c1b0:	eb03 0742 	add.w	r7, r3, r2, lsl #1

      putsChnRaw(0, y, chan, 0);
  40c1b4:	4629      	mov	r1, r5
  40c1b6:	4603      	mov	r3, r0
  40c1b8:	f7f7 f924 	bl	403404 <_Z10putsChnRawhhhh>
    blink = (s_editMode>0) ? BLINK|INVERS : INVERS ;

    for (uint8_t i=1; i<=NUM_STICKS; i++) {
      uint8_t chan = channel_order(i);

      volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];
  40c1bc:	3738      	adds	r7, #56	; 0x38

      putsChnRaw(0, y, chan, 0);

      for (uint8_t j=0; j<3; j++) {
  40c1be:	2400      	movs	r4, #0
        edit = (m_posVert==i && m_posHorz==j);
  40c1c0:	f899 3c34 	ldrb.w	r3, [r9, #3124]	; 0xc34
  40c1c4:	42b3      	cmp	r3, r6
  40c1c6:	d07d      	beq.n	40c2c4 <_Z15menuProcTrainerh+0x198>
  40c1c8:	2100      	movs	r1, #0
        bool incdec = (edit && s_editMode>0);

        switch(j) {
  40c1ca:	2c01      	cmp	r4, #1

      putsChnRaw(0, y, chan, 0);

      for (uint8_t j=0; j<3; j++) {
        edit = (m_posVert==i && m_posHorz==j);
        bool incdec = (edit && s_editMode>0);
  40c1cc:	f04f 0800 	mov.w	r8, #0

        switch(j) {
  40c1d0:	f000 808c 	beq.w	40c2ec <_Z15menuProcTrainerh+0x1c0>
            if (incdec)
              CHECK_INCDEC_GENVAR(event, td->studWeight, -100, 100);
            break;

          case 2:
            lcd_putsiAtt(12*FW, y, STR_TRNCHN, td->srcChn, edit ? blink : 0);
  40c1d4:	9a05      	ldr	r2, [sp, #20]
  40c1d6:	783b      	ldrb	r3, [r7, #0]
  40c1d8:	2900      	cmp	r1, #0
  40c1da:	bf08      	it	eq
  40c1dc:	2200      	moveq	r2, #0

      for (uint8_t j=0; j<3; j++) {
        edit = (m_posVert==i && m_posHorz==j);
        bool incdec = (edit && s_editMode>0);

        switch(j) {
  40c1de:	2c02      	cmp	r4, #2
  40c1e0:	f000 809c 	beq.w	40c31c <_Z15menuProcTrainerh+0x1f0>
          case 0:
            lcd_putsiAtt(4*FW, y, STR_TRNMODE, td->mode, edit ? blink : 0);
  40c1e4:	9200      	str	r2, [sp, #0]
  40c1e6:	099b      	lsrs	r3, r3, #6
  40c1e8:	2018      	movs	r0, #24
  40c1ea:	4629      	mov	r1, r5
  40c1ec:	4a6b      	ldr	r2, [pc, #428]	; (40c39c <_Z15menuProcTrainerh+0x270>)
  40c1ee:	f7f6 fb3f 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
            if (incdec)
  40c1f2:	f1b8 0f00 	cmp.w	r8, #0
  40c1f6:	f040 80aa 	bne.w	40c34e <_Z15menuProcTrainerh+0x222>

      volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];

      putsChnRaw(0, y, chan, 0);

      for (uint8_t j=0; j<3; j++) {
  40c1fa:	3401      	adds	r4, #1
  40c1fc:	b2e4      	uxtb	r4, r4
  40c1fe:	2c03      	cmp	r4, #3
  40c200:	d1de      	bne.n	40c1c0 <_Z15menuProcTrainerh+0x94>
            if (incdec)
              CHECK_INCDEC_GENVAR(event, td->srcChn, 0, 3);
            break;
        }
      }
      y += FH;
  40c202:	3508      	adds	r5, #8
  40c204:	b2ed      	uxtb	r5, r5
    lcd_puts(3*FW, 1*FH, STR_MODESRC);

    y = 2*FH;
    blink = (s_editMode>0) ? BLINK|INVERS : INVERS ;

    for (uint8_t i=1; i<=NUM_STICKS; i++) {
  40c206:	3601      	adds	r6, #1
  40c208:	2d30      	cmp	r5, #48	; 0x30
  40c20a:	b2f6      	uxtb	r6, r6
  40c20c:	f1aa 0a02 	sub.w	sl, sl, #2
  40c210:	d1c0      	bne.n	40c194 <_Z15menuProcTrainerh+0x68>
      }
      y += FH;
    }

    edit = (m_posVert==5);
    lcd_putsLeft(6*FH, STR_MULTIPLIER);
  40c212:	4628      	mov	r0, r5
  40c214:	4962      	ldr	r1, [pc, #392]	; (40c3a0 <_Z15menuProcTrainerh+0x274>)
        }
      }
      y += FH;
    }

    edit = (m_posVert==5);
  40c216:	f899 6c34 	ldrb.w	r6, [r9, #3124]	; 0xc34
    lcd_putsLeft(6*FH, STR_MULTIPLIER);
  40c21a:	f7f6 fb57 	bl	4028cc <_Z12lcd_putsLefthPKc>
    lcd_outdezAtt(LEN_MULTIPLIER*FW+3*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, (edit ? INVERS : 0)|PREC1);
  40c21e:	f99b 206e 	ldrsb.w	r2, [fp, #110]	; 0x6e
  40c222:	204e      	movs	r0, #78	; 0x4e
  40c224:	320a      	adds	r2, #10
  40c226:	b292      	uxth	r2, r2
  40c228:	2e05      	cmp	r6, #5
  40c22a:	4c5e      	ldr	r4, [pc, #376]	; (40c3a4 <_Z15menuProcTrainerh+0x278>)
  40c22c:	b212      	sxth	r2, r2
  40c22e:	4629      	mov	r1, r5
  40c230:	f000 8099 	beq.w	40c366 <_Z15menuProcTrainerh+0x23a>
  40c234:	2320      	movs	r3, #32
  40c236:	f7f6 fdff 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    if (edit) CHECK_INCDEC_GENVAR(event, g_eeGeneral.PPM_Multiplier, -10, 40);

    edit = (m_posVert==6);
  40c23a:	f899 8c34 	ldrb.w	r8, [r9, #3124]	; 0xc34
    lcd_putsAtt(0*FW, 7*FH, STR_CAL, edit ? INVERS : 0);
  40c23e:	2000      	movs	r0, #0
    edit = (m_posVert==5);
    lcd_putsLeft(6*FH, STR_MULTIPLIER);
    lcd_outdezAtt(LEN_MULTIPLIER*FW+3*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, (edit ? INVERS : 0)|PREC1);
    if (edit) CHECK_INCDEC_GENVAR(event, g_eeGeneral.PPM_Multiplier, -10, 40);

    edit = (m_posVert==6);
  40c240:	f1a8 0406 	sub.w	r4, r8, #6
  40c244:	f1d4 0800 	rsbs	r8, r4, #0
  40c248:	eb48 0804 	adc.w	r8, r8, r4
    lcd_putsAtt(0*FW, 7*FH, STR_CAL, edit ? INVERS : 0);
  40c24c:	ea4f 0348 	mov.w	r3, r8, lsl #1
  40c250:	2138      	movs	r1, #56	; 0x38
  40c252:	4a55      	ldr	r2, [pc, #340]	; (40c3a8 <_Z15menuProcTrainerh+0x27c>)
  40c254:	f7f6 fb30 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
  40c258:	4e54      	ldr	r6, [pc, #336]	; (40c3ac <_Z15menuProcTrainerh+0x280>)
  40c25a:	2530      	movs	r5, #48	; 0x30
  40c25c:	2400      	movs	r4, #0
    for (uint8_t i=0; i<4; i++) {
      uint8_t x = (i*8+16)*FW/2;
#if defined (DECIMALS_DISPLAYED)
      lcd_outdezAtt(x, 7*FH, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])*2, PREC1);
  40c25e:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
  40c262:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
  40c266:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  40c26a:	4628      	mov	r0, r5
  40c26c:	1ad2      	subs	r2, r2, r3
  40c26e:	0052      	lsls	r2, r2, #1
  40c270:	2138      	movs	r1, #56	; 0x38
  40c272:	2320      	movs	r3, #32
  40c274:	b212      	sxth	r2, r2
  40c276:	3401      	adds	r4, #1
  40c278:	3518      	adds	r5, #24
  40c27a:	f7f6 fddd 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    lcd_outdezAtt(LEN_MULTIPLIER*FW+3*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, (edit ? INVERS : 0)|PREC1);
    if (edit) CHECK_INCDEC_GENVAR(event, g_eeGeneral.PPM_Multiplier, -10, 40);

    edit = (m_posVert==6);
    lcd_putsAtt(0*FW, 7*FH, STR_CAL, edit ? INVERS : 0);
    for (uint8_t i=0; i<4; i++) {
  40c27e:	2c04      	cmp	r4, #4
      uint8_t x = (i*8+16)*FW/2;
#if defined (DECIMALS_DISPLAYED)
      lcd_outdezAtt(x, 7*FH, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])*2, PREC1);
  40c280:	4f48      	ldr	r7, [pc, #288]	; (40c3a4 <_Z15menuProcTrainerh+0x278>)
  40c282:	b2ed      	uxtb	r5, r5
    lcd_outdezAtt(LEN_MULTIPLIER*FW+3*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, (edit ? INVERS : 0)|PREC1);
    if (edit) CHECK_INCDEC_GENVAR(event, g_eeGeneral.PPM_Multiplier, -10, 40);

    edit = (m_posVert==6);
    lcd_putsAtt(0*FW, 7*FH, STR_CAL, edit ? INVERS : 0);
    for (uint8_t i=0; i<4; i++) {
  40c284:	d1eb      	bne.n	40c25e <_Z15menuProcTrainerh+0x132>
#else
      lcd_outdezAtt(x, 7*FH, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])/5, 0);
#endif
    }

    if (edit) {
  40c286:	f1b8 0f00 	cmp.w	r8, #0
  40c28a:	f43f af60 	beq.w	40c14e <_Z15menuProcTrainerh+0x22>
      if (event==EVT_KEY_FIRST(KEY_MENU)){
  40c28e:	9b04      	ldr	r3, [sp, #16]
  40c290:	2b60      	cmp	r3, #96	; 0x60
  40c292:	f47f af5c 	bne.w	40c14e <_Z15menuProcTrainerh+0x22>
        memcpy(g_eeGeneral.trainer.calib, g_ppmIns, sizeof(g_eeGeneral.trainer.calib));
  40c296:	2208      	movs	r2, #8
  40c298:	f107 0114 	add.w	r1, r7, #20
  40c29c:	f107 0056 	add.w	r0, r7, #86	; 0x56
  40c2a0:	f003 f832 	bl	40f308 <memcpy>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40c2a4:	f897 29a8 	ldrb.w	r2, [r7, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40c2a8:	f8b7 39aa 	ldrh.w	r3, [r7, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40c2ac:	f042 0201 	orr.w	r2, r2, #1
        eeDirty(EE_GENERAL);
        AUDIO_KEYPAD_UP();
  40c2b0:	2003      	movs	r0, #3
  40c2b2:	f887 29a8 	strb.w	r2, [r7, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40c2b6:	f8a7 39ac 	strh.w	r3, [r7, #2476]	; 0x9ac
      }
    }
  }
}
  40c2ba:	b007      	add	sp, #28
  40c2bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if (edit) {
      if (event==EVT_KEY_FIRST(KEY_MENU)){
        memcpy(g_eeGeneral.trainer.calib, g_ppmIns, sizeof(g_eeGeneral.trainer.calib));
        eeDirty(EE_GENERAL);
        AUDIO_KEYPAD_UP();
  40c2c0:	f7fa b924 	b.w	40650c <_Z13audioDefeventh>
      volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];

      putsChnRaw(0, y, chan, 0);

      for (uint8_t j=0; j<3; j++) {
        edit = (m_posVert==i && m_posHorz==j);
  40c2c4:	f241 2100 	movw	r1, #4608	; 0x1200
  40c2c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40c2cc:	f891 3c35 	ldrb.w	r3, [r1, #3125]	; 0xc35
  40c2d0:	42a3      	cmp	r3, r4
  40c2d2:	f47f af79 	bne.w	40c1c8 <_Z15menuProcTrainerh+0x9c>
        bool incdec = (edit && s_editMode>0);
  40c2d6:	f991 3c2c 	ldrsb.w	r3, [r1, #3116]	; 0xc2c
      volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];

      putsChnRaw(0, y, chan, 0);

      for (uint8_t j=0; j<3; j++) {
        edit = (m_posVert==i && m_posHorz==j);
  40c2da:	2101      	movs	r1, #1
        bool incdec = (edit && s_editMode>0);
  40c2dc:	2b00      	cmp	r3, #0
  40c2de:	bfc8      	it	gt
  40c2e0:	4688      	movgt	r8, r1
  40c2e2:	f77f af72 	ble.w	40c1ca <_Z15menuProcTrainerh+0x9e>

        switch(j) {
  40c2e6:	2c01      	cmp	r4, #1
  40c2e8:	f47f af74 	bne.w	40c1d4 <_Z15menuProcTrainerh+0xa8>
            if (incdec)
              CHECK_INCDEC_GENVAR(event, td->mode, 0, 2);
            break;

          case 1:
            lcd_outdezAtt(11*FW, y, td->studWeight, edit ? blink : 0);
  40c2ec:	787a      	ldrb	r2, [r7, #1]
  40c2ee:	9b05      	ldr	r3, [sp, #20]
  40c2f0:	b252      	sxtb	r2, r2
  40c2f2:	2900      	cmp	r1, #0
  40c2f4:	bf08      	it	eq
  40c2f6:	2300      	moveq	r3, #0
  40c2f8:	2042      	movs	r0, #66	; 0x42
  40c2fa:	4629      	mov	r1, r5
  40c2fc:	f7f6 fd9c 	bl	402e38 <_Z13lcd_outdezAtthhsh>
            if (incdec)
  40c300:	f1b8 0f00 	cmp.w	r8, #0
  40c304:	f43f af79 	beq.w	40c1fa <_Z15menuProcTrainerh+0xce>
              CHECK_INCDEC_GENVAR(event, td->studWeight, -100, 100);
  40c308:	7879      	ldrb	r1, [r7, #1]
  40c30a:	9804      	ldr	r0, [sp, #16]
  40c30c:	b249      	sxtb	r1, r1
  40c30e:	f06f 0263 	mvn.w	r2, #99	; 0x63
  40c312:	2364      	movs	r3, #100	; 0x64
  40c314:	f7fa ff60 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  40c318:	7078      	strb	r0, [r7, #1]
  40c31a:	e76e      	b.n	40c1fa <_Z15menuProcTrainerh+0xce>
            break;

          case 2:
            lcd_putsiAtt(12*FW, y, STR_TRNCHN, td->srcChn, edit ? blink : 0);
  40c31c:	9200      	str	r2, [sp, #0]
  40c31e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40c322:	2048      	movs	r0, #72	; 0x48
  40c324:	4629      	mov	r1, r5
  40c326:	4a22      	ldr	r2, [pc, #136]	; (40c3b0 <_Z15menuProcTrainerh+0x284>)
  40c328:	f7f6 faa2 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
            if (incdec)
  40c32c:	f1b8 0f00 	cmp.w	r8, #0
  40c330:	f43f af63 	beq.w	40c1fa <_Z15menuProcTrainerh+0xce>
              CHECK_INCDEC_GENVAR(event, td->srcChn, 0, 3);
  40c334:	7839      	ldrb	r1, [r7, #0]
  40c336:	2303      	movs	r3, #3
  40c338:	9804      	ldr	r0, [sp, #16]
  40c33a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  40c33e:	2200      	movs	r2, #0
  40c340:	f7fa ff4a 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  40c344:	783b      	ldrb	r3, [r7, #0]
  40c346:	f360 0305 	bfi	r3, r0, #0, #6
  40c34a:	703b      	strb	r3, [r7, #0]
  40c34c:	e755      	b.n	40c1fa <_Z15menuProcTrainerh+0xce>

        switch(j) {
          case 0:
            lcd_putsiAtt(4*FW, y, STR_TRNMODE, td->mode, edit ? blink : 0);
            if (incdec)
              CHECK_INCDEC_GENVAR(event, td->mode, 0, 2);
  40c34e:	7839      	ldrb	r1, [r7, #0]
  40c350:	2302      	movs	r3, #2
  40c352:	9804      	ldr	r0, [sp, #16]
  40c354:	0989      	lsrs	r1, r1, #6
  40c356:	2200      	movs	r2, #0
  40c358:	f7fa ff3e 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  40c35c:	783b      	ldrb	r3, [r7, #0]
  40c35e:	f360 1387 	bfi	r3, r0, #6, #2
  40c362:	703b      	strb	r3, [r7, #0]
  40c364:	e749      	b.n	40c1fa <_Z15menuProcTrainerh+0xce>
      y += FH;
    }

    edit = (m_posVert==5);
    lcd_putsLeft(6*FH, STR_MULTIPLIER);
    lcd_outdezAtt(LEN_MULTIPLIER*FW+3*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, (edit ? INVERS : 0)|PREC1);
  40c366:	2322      	movs	r3, #34	; 0x22
  40c368:	f7f6 fd66 	bl	402e38 <_Z13lcd_outdezAtthhsh>
    if (edit) CHECK_INCDEC_GENVAR(event, g_eeGeneral.PPM_Multiplier, -10, 40);
  40c36c:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
  40c370:	9804      	ldr	r0, [sp, #16]
  40c372:	f06f 0209 	mvn.w	r2, #9
  40c376:	2328      	movs	r3, #40	; 0x28
  40c378:	f7fa ff2e 	bl	4071d8 <_Z14checkIncDecGenhaaa>
  40c37c:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
  40c380:	e75b      	b.n	40c23a <_Z15menuProcTrainerh+0x10e>
  uint8_t y;
  bool    edit;
  uint8_t blink ;

  if (SLAVE_MODE) { // i am the slave
    lcd_puts(7*FW, 3*FH, STR_SLAVE);
  40c382:	202a      	movs	r0, #42	; 0x2a
  40c384:	2118      	movs	r1, #24
  40c386:	f105 0210 	add.w	r2, r5, #16
        eeDirty(EE_GENERAL);
        AUDIO_KEYPAD_UP();
      }
    }
  }
}
  40c38a:	b007      	add	sp, #28
  40c38c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t y;
  bool    edit;
  uint8_t blink ;

  if (SLAVE_MODE) { // i am the slave
    lcd_puts(7*FW, 3*FH, STR_SLAVE);
  40c390:	f7f6 ba9a 	b.w	4028c8 <_Z8lcd_putshhPKc>
  40c394:	00410e54 	.word	0x00410e54
  40c398:	2000012c 	.word	0x2000012c
  40c39c:	00410350 	.word	0x00410350
  40c3a0:	00410e78 	.word	0x00410e78
  40c3a4:	20000108 	.word	0x20000108
  40c3a8:	00410e84 	.word	0x00410e84
  40c3ac:	2000011a 	.word	0x2000011a
  40c3b0:	0041035a 	.word	0x0041035a
  40c3b4:	20001200 	.word	0x20001200

0040c3b8 <_Z11check_frskyv>:
  frskyTransmitBuffer();
#endif
}

void check_frsky()
{
  40c3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rxPdcUsart(processSerialData);              // Send serial data here
#endif

  // Attempt to transmit any waiting Fr-Sky alarm set packets every 50ms (subject to packet buffer availability)
  static uint8_t FrskyDelay = 5;
  if (FrskyAlarmSendState && (--FrskyDelay == 0)) {
  40c3bc:	4db1      	ldr	r5, [pc, #708]	; (40c684 <_Z11check_frskyv+0x2cc>)
  frskyTransmitBuffer();
#endif
}

void check_frsky()
{
  40c3be:	b084      	sub	sp, #16
#if defined(PCBARM)
  rxPdcUsart(processSerialData);              // Send serial data here
  40c3c0:	48b1      	ldr	r0, [pc, #708]	; (40c688 <_Z11check_frskyv+0x2d0>)
  40c3c2:	f7f4 f9ab 	bl	40071c <_Z10rxPdcUsartPFvhE>
#endif

  // Attempt to transmit any waiting Fr-Sky alarm set packets every 50ms (subject to packet buffer availability)
  static uint8_t FrskyDelay = 5;
  if (FrskyAlarmSendState && (--FrskyDelay == 0)) {
  40c3c6:	f895 2896 	ldrb.w	r2, [r5, #2198]	; 0x896
  40c3ca:	4eb0      	ldr	r6, [pc, #704]	; (40c68c <_Z11check_frskyv+0x2d4>)
  40c3cc:	b13a      	cbz	r2, 40c3de <_Z11check_frskyv+0x26>
  40c3ce:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
  40c3d2:	3b01      	subs	r3, #1
  40c3d4:	b2db      	uxtb	r3, r3
  40c3d6:	f886 3101 	strb.w	r3, [r6, #257]	; 0x101
  40c3da:	2b00      	cmp	r3, #0
  40c3dc:	d06d      	beq.n	40c4ba <_Z11check_frskyv+0x102>
  40c3de:	4cac      	ldr	r4, [pc, #688]	; (40c690 <_Z11check_frskyv+0x2d8>)
    FrskyDelay = 5; // 50ms
    FRSKY10mspoll();
  }

#ifndef SIMU
  if (frskyUsrStreaming > 0) {
  40c3e0:	f894 3aac 	ldrb.w	r3, [r4, #2732]	; 0xaac
  40c3e4:	b11b      	cbz	r3, 40c3ee <_Z11check_frskyv+0x36>
    frskyUsrStreaming--;
  40c3e6:	4aaa      	ldr	r2, [pc, #680]	; (40c690 <_Z11check_frskyv+0x2d8>)
  40c3e8:	3b01      	subs	r3, #1
  40c3ea:	f882 3aac 	strb.w	r3, [r2, #2732]	; 0xaac
  }

  if (frskyStreaming > 0) {
  40c3ee:	f896 30fa 	ldrb.w	r3, [r6, #250]	; 0xfa
  40c3f2:	b25a      	sxtb	r2, r3
  40c3f4:	2a00      	cmp	r2, #0
  40c3f6:	f340 80e0 	ble.w	40c5ba <_Z11check_frskyv+0x202>
    frskyStreaming--;
  40c3fa:	4aa4      	ldr	r2, [pc, #656]	; (40c68c <_Z11check_frskyv+0x2d4>)
  40c3fc:	3b01      	subs	r3, #1
  40c3fe:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
extern void moveTrimsToOffsets();

extern uint16_t active_functions;
inline bool isFunctionActive(uint8_t func)
{
  return active_functions & (1 << (func-FUNC_TRAINER));
  40c402:	f8b4 3afe 	ldrh.w	r3, [r4, #2814]	; 0xafe
  }
#endif

#if defined(FRSKY_HUB) || defined(WS_HOW_HIGH)
  static uint16_t s_varioTmr = 0;
  if (isFunctionActive(FUNC_VARIO)) {
  40c406:	059b      	lsls	r3, r3, #22
  40c408:	d51d      	bpl.n	40c446 <_Z11check_frskyv+0x8e>
    //vertical speed in 0.01m/s now
    //not baro vario only has additional resolution
    //A1/A2 need conversion there
    //GPS source need precision to be set, my gps gives 0.1m resolution
    /*if (g_model.varioSource == BARO_SOURCE_BARO)*/
      verticalSpeed = limit((int16_t)(-VARIO_SPEED_LIMIT*100), (int16_t)frskyHubData.varioSpeed, (int16_t)(+VARIO_SPEED_LIMIT*100));
  40c40a:	f8b5 2978 	ldrh.w	r2, [r5, #2424]	; 0x978
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  40c40e:	b213      	sxth	r3, r2
  40c410:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
  40c414:	bfbe      	ittt	lt
  40c416:	f64f 4118 	movwlt	r1, #64536	; 0xfc18
  40c41a:	460a      	movlt	r2, r1
  40c41c:	f6cf 71ff 	movtlt	r1, #65535	; 0xffff
  40c420:	db1e      	blt.n	40c460 <_Z11check_frskyv+0xa8>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  40c422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40c426:	db11      	blt.n	40c44c <_Z11check_frskyv+0x94>
      SoundAltBeepNextFreq = (0);
      SoundAltBeepNextTime = (0);
    }
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
  40c428:	2206      	movs	r2, #6
    if ((verticalSpeed < g_model.varioSpeedUpMin*VARIO_SPEED_LIMIT_MUL) && (verticalSpeed > (255 - g_model.varioSpeedDownMin)*(-VARIO_SPEED_LIMIT_MUL))) { //check thresholds here in cm/s
      SoundAltBeepNextFreq = (0);
      SoundAltBeepNextTime = (0);
    }
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
  40c42a:	2165      	movs	r1, #101	; 0x65
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
      if (verticalSpeed > 0) {
        if ((int16_t)(g_tmr10ms - s_varioTmr) > (int16_t)((int16_t)SoundAltBeepTime*2)) {
  40c42c:	f8b5 09aa 	ldrh.w	r0, [r5, #2474]	; 0x9aa
  40c430:	f8b4 3eb0 	ldrh.w	r3, [r4, #3760]	; 0xeb0
  40c434:	f894 4eb2 	ldrb.w	r4, [r4, #3762]	; 0xeb2
  40c438:	1ac3      	subs	r3, r0, r3
  40c43a:	b21b      	sxth	r3, r3
  40c43c:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
  40c440:	4893      	ldr	r0, [pc, #588]	; (40c690 <_Z11check_frskyv+0x2d8>)
  40c442:	f300 80e5 	bgt.w	40c610 <_Z11check_frskyv+0x258>
        AUDIO_VARIO_UP();
    }
#endif
  }
#endif
}
  40c446:	b004      	add	sp, #16
  40c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    uint8_t SoundAltBeepNextFreq = 0;
    uint8_t SoundAltBeepNextTime = 0;
    static uint8_t SoundAltBeepFreq = 0;
    static uint8_t SoundAltBeepTime = 0;
    if ((verticalSpeed < g_model.varioSpeedUpMin*VARIO_SPEED_LIMIT_MUL) && (verticalSpeed > (255 - g_model.varioSpeedDownMin)*(-VARIO_SPEED_LIMIT_MUL))) { //check thresholds here in cm/s
  40c44c:	498d      	ldr	r1, [pc, #564]	; (40c684 <_Z11check_frskyv+0x2cc>)
  40c44e:	2014      	movs	r0, #20
  40c450:	f891 1894 	ldrb.w	r1, [r1, #2196]	; 0x894
  40c454:	0909      	lsrs	r1, r1, #4
  40c456:	fb00 f001 	mul.w	r0, r0, r1
  40c45a:	4283      	cmp	r3, r0
  40c45c:	4619      	mov	r1, r3
  40c45e:	da0a      	bge.n	40c476 <_Z11check_frskyv+0xbe>
  40c460:	f895 3895 	ldrb.w	r3, [r5, #2197]	; 0x895
  40c464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40c468:	009b      	lsls	r3, r3, #2
  40c46a:	f5a3 539e 	sub.w	r3, r3, #5056	; 0x13c0
  40c46e:	3b2b      	subs	r3, #43	; 0x2b
  40c470:	428b      	cmp	r3, r1
  40c472:	dde8      	ble.n	40c446 <_Z11check_frskyv+0x8e>
  40c474:	b213      	sxth	r3, r2
      SoundAltBeepNextFreq = (0);
      SoundAltBeepNextTime = (0);
    }
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
  40c476:	f248 521f 	movw	r2, #34079	; 0x851f
  40c47a:	f5c1 60c8 	rsb	r0, r1, #1600	; 0x640
  40c47e:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
  40c482:	fb82 6200 	smull	r6, r2, r2, r0
    if ((verticalSpeed < g_model.varioSpeedUpMin*VARIO_SPEED_LIMIT_MUL) && (verticalSpeed > (255 - g_model.varioSpeedDownMin)*(-VARIO_SPEED_LIMIT_MUL))) { //check thresholds here in cm/s
      SoundAltBeepNextFreq = (0);
      SoundAltBeepNextTime = (0);
    }
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
  40c486:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40c48a:	0049      	lsls	r1, r1, #1
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
  40c48c:	17c0      	asrs	r0, r0, #31
    if ((verticalSpeed < g_model.varioSpeedUpMin*VARIO_SPEED_LIMIT_MUL) && (verticalSpeed > (255 - g_model.varioSpeedDownMin)*(-VARIO_SPEED_LIMIT_MUL))) { //check thresholds here in cm/s
      SoundAltBeepNextFreq = (0);
      SoundAltBeepNextTime = (0);
    }
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
  40c48e:	f501 517a 	add.w	r1, r1, #16000	; 0x3e80
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
  40c492:	ebc0 1262 	rsb	r2, r0, r2, asr #5
      if (verticalSpeed > 0) {
  40c496:	2b00      	cmp	r3, #0
    if ((verticalSpeed < g_model.varioSpeedUpMin*VARIO_SPEED_LIMIT_MUL) && (verticalSpeed > (255 - g_model.varioSpeedDownMin)*(-VARIO_SPEED_LIMIT_MUL))) { //check thresholds here in cm/s
      SoundAltBeepNextFreq = (0);
      SoundAltBeepNextTime = (0);
    }
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
  40c498:	f3c1 2107 	ubfx	r1, r1, #8, #8
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
  40c49c:	b2d2      	uxtb	r2, r2
      if (verticalSpeed > 0) {
  40c49e:	dcc5      	bgt.n	40c42c <_Z11check_frskyv+0x74>
          audio.play(SoundAltBeepFreq, SoundAltBeepTime, 0, PLAY_SOUND_VARIO);
        }
      }
      else {
        // negative vertical speed gives sound without pauses
        SoundAltBeepTime = SoundAltBeepNextTime;
  40c4a0:	f884 2eb2 	strb.w	r2, [r4, #3762]	; 0xeb2
        SoundAltBeepFreq = SoundAltBeepNextFreq;
        audio.play(SoundAltBeepFreq, 1, 0, PLAY_SOUND_VARIO);
  40c4a4:	2300      	movs	r3, #0
  40c4a6:	2220      	movs	r2, #32
        }
      }
      else {
        // negative vertical speed gives sound without pauses
        SoundAltBeepTime = SoundAltBeepNextTime;
        SoundAltBeepFreq = SoundAltBeepNextFreq;
  40c4a8:	f884 1eb3 	strb.w	r1, [r4, #3763]	; 0xeb3
        audio.play(SoundAltBeepFreq, 1, 0, PLAY_SOUND_VARIO);
  40c4ac:	4879      	ldr	r0, [pc, #484]	; (40c694 <_Z11check_frskyv+0x2dc>)
  40c4ae:	e88d 000c 	stmia.w	sp, {r2, r3}
  40c4b2:	2201      	movs	r2, #1
  40c4b4:	f7f9 fcc8 	bl	405e48 <_ZN10audioQueue4playEhhhha>
  40c4b8:	e7c5      	b.n	40c446 <_Z11check_frskyv+0x8e>
#endif

  // Attempt to transmit any waiting Fr-Sky alarm set packets every 50ms (subject to packet buffer availability)
  static uint8_t FrskyDelay = 5;
  if (FrskyAlarmSendState && (--FrskyDelay == 0)) {
    FrskyDelay = 5; // 50ms
  40c4ba:	2305      	movs	r3, #5
  40c4bc:	f886 3101 	strb.w	r3, [r6, #257]	; 0x101
static __INLINE void __disable_irq(void)              { __ASM volatile ("cpsid i"); }
  40c4c0:	b672      	cpsid	i
{
  register Usart *pUsart = SECOND_USART;
  uint32_t x ;

  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_TXTDIS ;              // Freeze DMA
  40c4c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40c4c6:	f2c4 0102 	movt	r1, #16386	; 0x4002
  40c4ca:	f44f 7300 	mov.w	r3, #512	; 0x200
  40c4ce:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
  x = pUsart->US_TNCR ;                           // Total
  x += pUsart->US_TCR ;                           // Still to send
  pUsart->US_PTCR = US_PTCR_TXTEN ;                       // DMA active again
  40c4d2:	f44f 7480 	mov.w	r4, #256	; 0x100
  register Usart *pUsart = SECOND_USART;
  uint32_t x ;

  __disable_irq() ;
  pUsart->US_PTCR = US_PTCR_TXTDIS ;              // Freeze DMA
  x = pUsart->US_TNCR ;                           // Total
  40c4d6:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
  x += pUsart->US_TCR ;                           // Still to send
  40c4da:	f8d1 010c 	ldr.w	r0, [r1, #268]	; 0x10c
  pUsart->US_PTCR = US_PTCR_TXTEN ;                       // DMA active again
  40c4de:	f8c1 4120 	str.w	r4, [r1, #288]	; 0x120


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
  40c4e2:	b662      	cpsie	i

uint8_t FrskyAlarmSendState = 0 ;
inline void FRSKY10mspoll(void)
{
#if defined(PCBARM)
  if (txPdcPending())
  40c4e4:	18c3      	adds	r3, r0, r3
  40c4e6:	f47f af7a 	bne.w	40c3de <_Z11check_frskyv+0x26>
  *ptr++ = 0x00;
  *ptr++ = 0x00;
  *ptr++ = 0x00;

  // Now send a packet
  FrskyAlarmSendState -= 1;
  40c4ea:	3a01      	subs	r2, #1
  40c4ec:	b2d2      	uxtb	r2, r2
#endif
    return; // we only have one buffer. If it's in use, then we can't send yet.

  uint8_t *ptr = &frskyTxBuffer[0];

  *ptr++ = START_STOP;        // End of packet
  40c4ee:	4c68      	ldr	r4, [pc, #416]	; (40c690 <_Z11check_frskyv+0x2d8>)
  *ptr++ = 0x00;
  *ptr++ = 0x00;

  // Now send a packet
  FrskyAlarmSendState -= 1;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  40c4f0:	f012 0f01 	tst.w	r2, #1
#endif
    return; // we only have one buffer. If it's in use, then we can't send yet.

  uint8_t *ptr = &frskyTxBuffer[0];

  *ptr++ = START_STOP;        // End of packet
  40c4f4:	f04f 017e 	mov.w	r1, #126	; 0x7e
  *ptr++ = 0x00;
  *ptr++ = 0x00;

  // Now send a packet
  FrskyAlarmSendState -= 1;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  40c4f8:	bf14      	ite	ne
  40c4fa:	2700      	movne	r7, #0
  40c4fc:	2701      	moveq	r7, #1
  if (FrskyAlarmSendState < 4) {
  40c4fe:	2a03      	cmp	r2, #3
#endif
    return; // we only have one buffer. If it's in use, then we can't send yet.

  uint8_t *ptr = &frskyTxBuffer[0];

  *ptr++ = START_STOP;        // End of packet
  40c500:	f884 1ab0 	strb.w	r1, [r4, #2736]	; 0xab0
  *ptr++ = 0x00;
  40c504:	f884 3ab1 	strb.w	r3, [r4, #2737]	; 0xab1
  *ptr++ = 0x00;
  40c508:	f884 3ab2 	strb.w	r3, [r4, #2738]	; 0xab2
  *ptr++ = 0x00;
  40c50c:	f884 3ab3 	strb.w	r3, [r4, #2739]	; 0xab3
  *ptr++ = 0x00;
  40c510:	f884 3ab4 	strb.w	r3, [r4, #2740]	; 0xab4
  *ptr++ = 0x00;
  40c514:	f884 3ab5 	strb.w	r3, [r4, #2741]	; 0xab5

  // Now send a packet
  FrskyAlarmSendState -= 1;
  40c518:	f885 2896 	strb.w	r2, [r5, #2198]	; 0x896
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  if (FrskyAlarmSendState < 4) {
  40c51c:	f200 808b 	bhi.w	40c636 <_Z11check_frskyv+0x27e>
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ALARM_LEVEL(channel, alarm) : alarm_off);
  40c520:	f895 1067 	ldrb.w	r1, [r5, #103]	; 0x67

  // Now send a packet
  FrskyAlarmSendState -= 1;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  if (FrskyAlarmSendState < 4) {
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
  40c524:	0852      	lsrs	r2, r2, #1
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ALARM_LEVEL(channel, alarm) : alarm_off);
  40c526:	f001 0118 	and.w	r1, r1, #24

  // Now send a packet
  FrskyAlarmSendState -= 1;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  if (FrskyAlarmSendState < 4) {
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
  40c52a:	f1c2 0201 	rsb	r2, r2, #1
  40c52e:	b2d2      	uxtb	r2, r2
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ALARM_LEVEL(channel, alarm) : alarm_off);
  40c530:	2910      	cmp	r1, #16
  40c532:	ea4f 0142 	mov.w	r1, r2, lsl #1
  40c536:	d00a      	beq.n	40c54e <_Z11check_frskyv+0x196>
  40c538:	188b      	adds	r3, r1, r2
  40c53a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40c53e:	f893 3859 	ldrb.w	r3, [r3, #2137]	; 0x859
  40c542:	0078      	lsls	r0, r7, #1
  40c544:	f003 030f 	and.w	r3, r3, #15
  40c548:	4103      	asrs	r3, r0
  40c54a:	f003 0303 	and.w	r3, r3, #3
    *ptr++ = ALARM_GREATER(channel, alarm);
  40c54e:	188a      	adds	r2, r1, r2
  40c550:	eb05 0242 	add.w	r2, r5, r2, lsl #1
  40c554:	f892 1859 	ldrb.w	r1, [r2, #2137]	; 0x859
    frskyPushValue(ptr, g_model.frsky.channels[channel].alarms_value[alarm]);
  40c558:	19d2      	adds	r2, r2, r7
  FrskyAlarmSendState -= 1;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  if (FrskyAlarmSendState < 4) {
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ALARM_LEVEL(channel, alarm) : alarm_off);
    *ptr++ = ALARM_GREATER(channel, alarm);
  40c55a:	f3c1 1101 	ubfx	r1, r1, #4, #2
  40c55e:	fa51 f707 	asrs.w	r7, r1, r7
    frskyPushValue(ptr, g_model.frsky.channels[channel].alarms_value[alarm]);
  40c562:	f892 1857 	ldrb.w	r1, [r2, #2135]	; 0x857
  FrskyAlarmSendState -= 1;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  if (FrskyAlarmSendState < 4) {
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ALARM_LEVEL(channel, alarm) : alarm_off);
    *ptr++ = ALARM_GREATER(channel, alarm);
  40c566:	4a4c      	ldr	r2, [pc, #304]	; (40c698 <_Z11check_frskyv+0x2e0>)
  40c568:	a804      	add	r0, sp, #16
  40c56a:	f007 0701 	and.w	r7, r7, #1
  40c56e:	f840 2d04 	str.w	r2, [r0, #-4]!
  // Now send a packet
  FrskyAlarmSendState -= 1;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  if (FrskyAlarmSendState < 4) {
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ALARM_LEVEL(channel, alarm) : alarm_off);
  40c572:	f884 3ab6 	strb.w	r3, [r4, #2742]	; 0xab6
    *ptr++ = ALARM_GREATER(channel, alarm);
  40c576:	f884 7ab7 	strb.w	r7, [r4, #2743]	; 0xab7
    frskyPushValue(ptr, g_model.frsky.channels[channel].alarms_value[alarm]);
  40c57a:	f7f7 fccb 	bl	403f14 <_Z14frskyPushValueRPhh>
    *ptr++ = (A22PKT + FrskyAlarmSendState); // fc - fb - fa - f9
  40c57e:	f895 3896 	ldrb.w	r3, [r5, #2198]	; 0x896
  40c582:	9a03      	ldr	r2, [sp, #12]
  40c584:	3b07      	subs	r3, #7
  40c586:	f802 3b01 	strb.w	r3, [r2], #1
    *ptr++ = 0x00 ;
    frskyPushValue(ptr, getRssiAlarmValue(alarm));
    *ptr++ = (RSSI1PKT-alarm);  // f7 - f6
  }

  *ptr++ = START_STOP; // Start of packet
  40c58a:	237e      	movs	r3, #126	; 0x7e
  40c58c:	f802 3b01 	strb.w	r3, [r2], #1

uint32_t txPdcUsart( uint8_t *buffer, uint32_t size )
{
  register Usart *pUsart = SECOND_USART;

  if ( pUsart->US_TNCR == 0 )
  40c590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40c594:	9203      	str	r2, [sp, #12]
  40c596:	f2c4 0302 	movt	r3, #16386	; 0x4002
  40c59a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
  40c59e:	2900      	cmp	r1, #0
  40c5a0:	f47f af1e 	bne.w	40c3e0 <_Z11check_frskyv+0x28>
  {
#ifndef SIMU
    pUsart->US_TNPR = (uint32_t)buffer ;
  40c5a4:	493d      	ldr	r1, [pc, #244]	; (40c69c <_Z11check_frskyv+0x2e4>)

#if defined(PCBARM)
  frskyTransmitBuffer(ptr - &frskyTxBuffer[0]);
  40c5a6:	1a52      	subs	r2, r2, r1
  40c5a8:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
#endif
    pUsart->US_TNCR = size ;
  40c5ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    pUsart->US_PTCR = US_PTCR_TXTEN ;
  40c5b0:	f44f 7280 	mov.w	r2, #256	; 0x100
  40c5b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  40c5b8:	e712      	b.n	40c3e0 <_Z11check_frskyv+0x28>
  }

  if (frskyStreaming > 0) {
    frskyStreaming--;
  }
  else if (g_eeGeneral.enableTelemetryAlarm) {
  40c5ba:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
  40c5be:	4e31      	ldr	r6, [pc, #196]	; (40c684 <_Z11check_frskyv+0x2cc>)
  40c5c0:	f003 0320 	and.w	r3, r3, #32
  40c5c4:	b2db      	uxtb	r3, r3
  40c5c6:	2b00      	cmp	r3, #0
  40c5c8:	f43f af1b 	beq.w	40c402 <_Z11check_frskyv+0x4a>
    frskyRSSI[0].set(0);
  40c5cc:	f506 6010 	add.w	r0, r6, #2304	; 0x900
  40c5d0:	3014      	adds	r0, #20
  40c5d2:	2100      	movs	r1, #0
  40c5d4:	f7f8 f882 	bl	4046dc <_ZN9FrskyRSSI3setEh>
    frskyRSSI[1].set(0);
  40c5d8:	f506 6010 	add.w	r0, r6, #2304	; 0x900
  40c5dc:	2100      	movs	r1, #0
  40c5de:	3016      	adds	r0, #22
  40c5e0:	f7f8 f87c 	bl	4046dc <_ZN9FrskyRSSI3setEh>
    if (!(g_tmr10ms % 30)) {
  40c5e4:	f8b6 39aa 	ldrh.w	r3, [r6, #2474]	; 0x9aa
  40c5e8:	f648 0289 	movw	r2, #34953	; 0x8889
  40c5ec:	b29b      	uxth	r3, r3
  40c5ee:	f6c8 0288 	movt	r2, #34952	; 0x8888
  40c5f2:	fba2 1203 	umull	r1, r2, r2, r3
  40c5f6:	0912      	lsrs	r2, r2, #4
  40c5f8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  40c5fc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  40c600:	b29b      	uxth	r3, r3
  40c602:	2b00      	cmp	r3, #0
  40c604:	f47f aefd 	bne.w	40c402 <_Z11check_frskyv+0x4a>
      AUDIO_TELEMETRY_ALARM();
  40c608:	2007      	movs	r0, #7
  40c60a:	f7f9 ff7f 	bl	40650c <_Z13audioDefeventh>
  40c60e:	e6f8      	b.n	40c402 <_Z11check_frskyv+0x4a>
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
      if (verticalSpeed > 0) {
        if ((int16_t)(g_tmr10ms - s_varioTmr) > (int16_t)((int16_t)SoundAltBeepTime*2)) {
          s_varioTmr = g_tmr10ms;
  40c610:	4b1c      	ldr	r3, [pc, #112]	; (40c684 <_Z11check_frskyv+0x2cc>)
          SoundAltBeepTime = SoundAltBeepNextTime;
  40c612:	f880 2eb2 	strb.w	r2, [r0, #3762]	; 0xeb2
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
      if (verticalSpeed > 0) {
        if ((int16_t)(g_tmr10ms - s_varioTmr) > (int16_t)((int16_t)SoundAltBeepTime*2)) {
          s_varioTmr = g_tmr10ms;
  40c616:	f8b3 49aa 	ldrh.w	r4, [r3, #2474]	; 0x9aa
          SoundAltBeepTime = SoundAltBeepNextTime;
          SoundAltBeepFreq = SoundAltBeepNextFreq;
  40c61a:	f880 1eb3 	strb.w	r1, [r0, #3763]	; 0xeb3
    else {
      SoundAltBeepNextFreq = (verticalSpeed * 10 + 16000) >> 8;
      SoundAltBeepNextTime = (1600 - verticalSpeed) / 100;
      if (verticalSpeed > 0) {
        if ((int16_t)(g_tmr10ms - s_varioTmr) > (int16_t)((int16_t)SoundAltBeepTime*2)) {
          s_varioTmr = g_tmr10ms;
  40c61e:	f8a0 4eb0 	strh.w	r4, [r0, #3760]	; 0xeb0
          SoundAltBeepTime = SoundAltBeepNextTime;
          SoundAltBeepFreq = SoundAltBeepNextFreq;
          audio.play(SoundAltBeepFreq, SoundAltBeepTime, 0, PLAY_SOUND_VARIO);
  40c622:	f500 6032 	add.w	r0, r0, #2848	; 0xb20
  40c626:	2300      	movs	r3, #0
  40c628:	2420      	movs	r4, #32
  40c62a:	3008      	adds	r0, #8
  40c62c:	9400      	str	r4, [sp, #0]
  40c62e:	9301      	str	r3, [sp, #4]
  40c630:	f7f9 fc0a 	bl	405e48 <_ZN10audioQueue4playEhhhha>
  40c634:	e707      	b.n	40c446 <_Z11check_frskyv+0x8e>
    *ptr++ = ALARM_GREATER(channel, alarm);
    frskyPushValue(ptr, g_model.frsky.channels[channel].alarms_value[alarm]);
    *ptr++ = (A22PKT + FrskyAlarmSendState); // fc - fb - fa - f9
  }
  else {
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ((2+alarm+g_model.frsky.rssiAlarms[alarm].level) % 4) : alarm_off);
  40c636:	f895 2067 	ldrb.w	r2, [r5, #103]	; 0x67
  40c63a:	f002 0218 	and.w	r2, r2, #24
  40c63e:	2a10      	cmp	r2, #16
  40c640:	d006      	beq.n	40c650 <_Z11check_frskyv+0x298>
  40c642:	19eb      	adds	r3, r5, r7
  40c644:	f893 2869 	ldrb.w	r2, [r3, #2153]	; 0x869
  40c648:	1cbb      	adds	r3, r7, #2
  40c64a:	18d3      	adds	r3, r2, r3
  40c64c:	f003 0303 	and.w	r3, r3, #3
    *ptr++ = 0x00 ;
  40c650:	4a11      	ldr	r2, [pc, #68]	; (40c698 <_Z11check_frskyv+0x2e0>)
    *ptr++ = ALARM_GREATER(channel, alarm);
    frskyPushValue(ptr, g_model.frsky.channels[channel].alarms_value[alarm]);
    *ptr++ = (A22PKT + FrskyAlarmSendState); // fc - fb - fa - f9
  }
  else {
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ((2+alarm+g_model.frsky.rssiAlarms[alarm].level) % 4) : alarm_off);
  40c652:	f884 3ab6 	strb.w	r3, [r4, #2742]	; 0xab6
    *ptr++ = 0x00 ;
  40c656:	2300      	movs	r3, #0
  40c658:	f884 3ab7 	strb.w	r3, [r4, #2743]	; 0xab7
  40c65c:	f10d 0810 	add.w	r8, sp, #16
    frskyPushValue(ptr, getRssiAlarmValue(alarm));
  40c660:	4638      	mov	r0, r7
    frskyPushValue(ptr, g_model.frsky.channels[channel].alarms_value[alarm]);
    *ptr++ = (A22PKT + FrskyAlarmSendState); // fc - fb - fa - f9
  }
  else {
    *ptr++ = (g_eeGeneral.beeperMode != e_mode_quiet ? ((2+alarm+g_model.frsky.rssiAlarms[alarm].level) % 4) : alarm_off);
    *ptr++ = 0x00 ;
  40c662:	f848 2d04 	str.w	r2, [r8, #-4]!
    frskyPushValue(ptr, getRssiAlarmValue(alarm));
  40c666:	f7f8 ff4f 	bl	405508 <_Z17getRssiAlarmValueh>
  40c66a:	4601      	mov	r1, r0
  40c66c:	4640      	mov	r0, r8
  40c66e:	f7f7 fc51 	bl	403f14 <_Z14frskyPushValueRPhh>
    *ptr++ = (RSSI1PKT-alarm);  // f7 - f6
  40c672:	f64f 73f7 	movw	r3, #65527	; 0xfff7
  40c676:	f6cf 73ff 	movt	r3, #65535	; 0xffff
  40c67a:	9a03      	ldr	r2, [sp, #12]
  40c67c:	1bdb      	subs	r3, r3, r7
  40c67e:	f802 3b01 	strb.w	r3, [r2], #1
  40c682:	e782      	b.n	40c58a <_Z11check_frskyv+0x1d2>
  40c684:	20000108 	.word	0x20000108
  40c688:	00404869 	.word	0x00404869
  40c68c:	20000000 	.word	0x20000000
  40c690:	20001200 	.word	0x20001200
  40c694:	20001d28 	.word	0x20001d28
  40c698:	20001cb8 	.word	0x20001cb8
  40c69c:	20001cb0 	.word	0x20001cb0

0040c6a0 <_Z12menuMainViewh>:
    }
  }
}

void menuMainView(uint8_t event)
{
  40c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t view = g_eeGeneral.view;
  40c6a4:	4dbb      	ldr	r5, [pc, #748]	; (40c994 <_Z12menuMainViewh+0x2f4>)
    }
  }
}

void menuMainView(uint8_t event)
{
  40c6a6:	b087      	sub	sp, #28
  uint8_t view = g_eeGeneral.view;
  40c6a8:	f895 4066 	ldrb.w	r4, [r5, #102]	; 0x66
  uint8_t view_base = view & 0x0f;

  switch(event)
  40c6ac:	2880      	cmp	r0, #128	; 0x80
  }
}

void menuMainView(uint8_t event)
{
  uint8_t view = g_eeGeneral.view;
  40c6ae:	9405      	str	r4, [sp, #20]
  uint8_t view_base = view & 0x0f;
  40c6b0:	f004 040f 	and.w	r4, r4, #15
  40c6b4:	9404      	str	r4, [sp, #16]

  switch(event)
  40c6b6:	f000 82d1 	beq.w	40cc5c <_Z12menuMainViewh+0x5bc>
  40c6ba:	d927      	bls.n	40c70c <_Z12menuMainViewh+0x6c>
  40c6bc:	2883      	cmp	r0, #131	; 0x83
  40c6be:	f000 82e1 	beq.w	40cc84 <_Z12menuMainViewh+0x5e4>
  40c6c2:	f240 8142 	bls.w	40c94a <_Z12menuMainViewh+0x2aa>
  40c6c6:	2885      	cmp	r0, #133	; 0x85
  40c6c8:	f000 82eb 	beq.w	40cca2 <_Z12menuMainViewh+0x602>
  40c6cc:	f0c0 8152 	bcc.w	40c974 <_Z12menuMainViewh+0x2d4>
  40c6d0:	28bf      	cmp	r0, #191	; 0xbf
  40c6d2:	d121      	bne.n	40c718 <_Z12menuMainViewh+0x78>
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  40c6d4:	f895 00a3 	ldrb.w	r0, [r5, #163]	; 0xa3
  40c6d8:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
  40c6dc:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
  40c6e0:	4cad      	ldr	r4, [pc, #692]	; (40c998 <_Z12menuMainViewh+0x2f8>)
  40c6e2:	2363      	movs	r3, #99	; 0x63
  40c6e4:	f36f 1005 	bfc	r0, #4, #2
  40c6e8:	f36f 1105 	bfc	r1, #4, #2
  40c6ec:	f36f 1205 	bfc	r2, #4, #2
  40c6f0:	9402      	str	r4, [sp, #8]
  40c6f2:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
  40c6f6:	f885 00a3 	strb.w	r0, [r5, #163]	; 0xa3
  40c6fa:	f885 30ab 	strb.w	r3, [r5, #171]	; 0xab
  40c6fe:	f885 10a9 	strb.w	r1, [r5, #169]	; 0xa9
  40c702:	f885 30a8 	strb.w	r3, [r5, #168]	; 0xa8
  40c706:	f885 20a6 	strb.w	r2, [r5, #166]	; 0xa6
  40c70a:	e007      	b.n	40c71c <_Z12menuMainViewh+0x7c>
  40c70c:	2825      	cmp	r0, #37	; 0x25
  40c70e:	f240 80fb 	bls.w	40c908 <_Z12menuMainViewh+0x268>
  40c712:	2861      	cmp	r0, #97	; 0x61
  40c714:	f000 82e8 	beq.w	40cce8 <_Z12menuMainViewh+0x648>
  40c718:	4c9f      	ldr	r4, [pc, #636]	; (40c998 <_Z12menuMainViewh+0x2f8>)
  40c71a:	9402      	str	r4, [sp, #8]
      break;
#endif
  }

  {
    uint8_t phase = getFlightPhase();
  40c71c:	f7f8 fb2c 	bl	404d78 <_Z14getFlightPhasev>
    lcd_putsnAtt(6*FW, 2*FH, g_model.phaseData[phase].name, sizeof(g_model.phaseData[phase].name), ZCHAR);
  40c720:	4c9e      	ldr	r4, [pc, #632]	; (40c99c <_Z12menuMainViewh+0x2fc>)
      break;
#endif
  }

  {
    uint8_t phase = getFlightPhase();
  40c722:	9003      	str	r0, [sp, #12]
    lcd_putsnAtt(6*FW, 2*FH, g_model.phaseData[phase].name, sizeof(g_model.phaseData[phase].name), ZCHAR);
  40c724:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  40c728:	f502 62d2 	add.w	r2, r2, #1680	; 0x690
  40c72c:	3201      	adds	r2, #1
  40c72e:	2024      	movs	r0, #36	; 0x24
  40c730:	2110      	movs	r1, #16
  40c732:	2306      	movs	r3, #6
  40c734:	2620      	movs	r6, #32
  40c736:	9600      	str	r6, [sp, #0]
  40c738:	f7f6 f856 	bl	4027e8 <_Z12lcd_putsnAtthhPKchh>

    uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK|INVERS : 0) | DBLSIZE;
  40c73c:	9802      	ldr	r0, [sp, #8]
  40c73e:	f895 7053 	ldrb.w	r7, [r5, #83]	; 0x53
  40c742:	f8b0 2a8e 	ldrh.w	r2, [r0, #2702]	; 0xa8e
    putsModelName(2*FW-2, 0*FH, g_model.name, g_eeGeneral.currModel, DBLSIZE);
  40c746:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51

  {
    uint8_t phase = getFlightPhase();
    lcd_putsnAtt(6*FW, 2*FH, g_model.phaseData[phase].name, sizeof(g_model.phaseData[phase].name), ZCHAR);

    uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK|INVERS : 0) | DBLSIZE;
  40c74a:	4297      	cmp	r7, r2
  40c74c:	bf94      	ite	ls
  40c74e:	2744      	movls	r7, #68	; 0x44
  40c750:	2747      	movhi	r7, #71	; 0x47
    putsModelName(2*FW-2, 0*FH, g_model.name, g_eeGeneral.currModel, DBLSIZE);
  40c752:	200a      	movs	r0, #10
  40c754:	4622      	mov	r2, r4
  40c756:	2100      	movs	r1, #0
  40c758:	2604      	movs	r6, #4
  40c75a:	9600      	str	r6, [sp, #0]
  40c75c:	f7f6 fea8 	bl	4034b0 <_Z13putsModelNamehhPchh>
    putsVBat(6*FW-1, 2*FH, att|NO_UNIT);
  40c760:	2023      	movs	r0, #35	; 0x23
  40c762:	2110      	movs	r1, #16
  40c764:	463a      	mov	r2, r7
  40c766:	f7f6 fe1b 	bl	4033a0 <_Z8putsVBathhh>
    lcd_putc(6*FW, 3*FH, 'V');
  40c76a:	2024      	movs	r0, #36	; 0x24
  40c76c:	2118      	movs	r1, #24
  40c76e:	2256      	movs	r2, #86	; 0x56
  40c770:	f7f6 f838 	bl	4027e4 <_Z8lcd_putchhh>

    if (g_model.timers[0].mode) {
  40c774:	f995 3146 	ldrsb.w	r3, [r5, #326]	; 0x146
  {
    uint8_t phase = getFlightPhase();
    lcd_putsnAtt(6*FW, 2*FH, g_model.phaseData[phase].name, sizeof(g_model.phaseData[phase].name), ZCHAR);

    uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK|INVERS : 0) | DBLSIZE;
    putsModelName(2*FW-2, 0*FH, g_model.name, g_eeGeneral.currModel, DBLSIZE);
  40c778:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
    putsVBat(6*FW-1, 2*FH, att|NO_UNIT);
    lcd_putc(6*FW, 3*FH, 'V');

    if (g_model.timers[0].mode) {
  40c77c:	b1cb      	cbz	r3, 40c7b2 <_Z12menuMainViewh+0x112>
      uint8_t att = DBLSIZE | (s_timerState[0]==TMR_BEEPING ? BLINK|INVERS : 0);
  40c77e:	f894 49e8 	ldrb.w	r4, [r4, #2536]	; 0x9e8
      putsTime(12*FW+3, FH*2, s_timerVal[0], att, att);
  40c782:	f9b5 2908 	ldrsh.w	r2, [r5, #2312]	; 0x908
    putsModelName(2*FW-2, 0*FH, g_model.name, g_eeGeneral.currModel, DBLSIZE);
    putsVBat(6*FW-1, 2*FH, att|NO_UNIT);
    lcd_putc(6*FW, 3*FH, 'V');

    if (g_model.timers[0].mode) {
      uint8_t att = DBLSIZE | (s_timerState[0]==TMR_BEEPING ? BLINK|INVERS : 0);
  40c786:	2c02      	cmp	r4, #2
  40c788:	bf14      	ite	ne
  40c78a:	4634      	movne	r4, r6
  40c78c:	2407      	moveq	r4, #7
      putsTime(12*FW+3, FH*2, s_timerVal[0], att, att);
  40c78e:	2110      	movs	r1, #16
  40c790:	4623      	mov	r3, r4
  40c792:	204b      	movs	r0, #75	; 0x4b
  40c794:	9400      	str	r4, [sp, #0]
  40c796:	f7f6 fd85 	bl	4032a4 <_Z8putsTimehhshh>
      putsTmrMode(s_timerVal[0] >= 0 ? 9*FW-FW/2+5 : 9*FW-FW/2-2, FH*3, g_model.timers[0].mode, SWCONDENSED);
  40c79a:	f9b5 0908 	ldrsh.w	r0, [r5, #2312]	; 0x908
  40c79e:	f995 2146 	ldrsb.w	r2, [r5, #326]	; 0x146
  40c7a2:	2800      	cmp	r0, #0
  40c7a4:	bfb4      	ite	lt
  40c7a6:	2031      	movlt	r0, #49	; 0x31
  40c7a8:	2038      	movge	r0, #56	; 0x38
  40c7aa:	2118      	movs	r1, #24
  40c7ac:	2380      	movs	r3, #128	; 0x80
  40c7ae:	f7f6 ff63 	bl	403678 <_Z11putsTmrModehhah>
  40c7b2:	4e7b      	ldr	r6, [pc, #492]	; (40c9a0 <_Z12menuMainViewh+0x300>)
  40c7b4:	2400      	movs	r4, #0
  40c7b6:	f506 6bcc 	add.w	fp, r6, #1632	; 0x660
  40c7ba:	f10b 0b04 	add.w	fp, fp, #4
#define TL 27
      //                        LH LV RV RH
      static uint8_t x[4]    = {128*1/4+2, 4, 128-4, 128*3/4-2};
      static uint8_t vert[4] = {0,1,1,0};
      uint8_t xm, ym;
      xm = x[CONVERT_MODE(i+1)-1];
  40c7be:	9a02      	ldr	r2, [sp, #8]
    lcd_putc(6*FW, 3*FH, 'V');

    if (g_model.timers[0].mode) {
      uint8_t att = DBLSIZE | (s_timerState[0]==TMR_BEEPING ? BLINK|INVERS : 0);
      putsTime(12*FW+3, FH*2, s_timerVal[0], att, att);
      putsTmrMode(s_timerVal[0] >= 0 ? 9*FW-FW/2+5 : 9*FW-FW/2-2, FH*3, g_model.timers[0].mode, SWCONDENSED);
  40c7c0:	fa5f f884 	uxtb.w	r8, r4
#define TL 27
      //                        LH LV RV RH
      static uint8_t x[4]    = {128*1/4+2, 4, 128-4, 128*3/4-2};
      static uint8_t vert[4] = {0,1,1,0};
      uint8_t xm, ym;
      xm = x[CONVERT_MODE(i+1)-1];
  40c7c4:	f892 3a86 	ldrb.w	r3, [r2, #2694]	; 0xa86

      uint8_t att = ROUND;
      int16_t val = getTrimValue(phase, i);
  40c7c8:	9803      	ldr	r0, [sp, #12]
#define TL 27
      //                        LH LV RV RH
      static uint8_t x[4]    = {128*1/4+2, 4, 128-4, 128*3/4-2};
      static uint8_t vert[4] = {0,1,1,0};
      uint8_t xm, ym;
      xm = x[CONVERT_MODE(i+1)-1];
  40c7ca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40c7ce:	191b      	adds	r3, r3, r4
  40c7d0:	f813 3c9c 	ldrb.w	r3, [r3, #-156]

      uint8_t att = ROUND;
      int16_t val = getTrimValue(phase, i);
  40c7d4:	4641      	mov	r1, r8
#define TL 27
      //                        LH LV RV RH
      static uint8_t x[4]    = {128*1/4+2, 4, 128-4, 128*3/4-2};
      static uint8_t vert[4] = {0,1,1,0};
      uint8_t xm, ym;
      xm = x[CONVERT_MODE(i+1)-1];
  40c7d6:	18f3      	adds	r3, r6, r3
  40c7d8:	f893 765f 	ldrb.w	r7, [r3, #1631]	; 0x65f

      uint8_t att = ROUND;
      int16_t val = getTrimValue(phase, i);
  40c7dc:	f7f4 fba8 	bl	400f30 <_Z12getTrimValuehh>

      if (val < -125 || val > 125)
  40c7e0:	f100 0a7d 	add.w	sl, r0, #125	; 0x7d
  40c7e4:	fa1f fa8a 	uxth.w	sl, sl
      static uint8_t x[4]    = {128*1/4+2, 4, 128-4, 128*3/4-2};
      static uint8_t vert[4] = {0,1,1,0};
      uint8_t xm, ym;
      xm = x[CONVERT_MODE(i+1)-1];

      uint8_t att = ROUND;
  40c7e8:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
  40c7ec:	bf8c      	ite	hi
  40c7ee:	f04f 0a0b 	movhi.w	sl, #11
  40c7f2:	f04f 0a08 	movls.w	sl, #8
      int16_t val = getTrimValue(phase, i);

      if (val < -125 || val > 125)
        att = BLINK|INVERS|ROUND;

      if (val < -(TL+1)*4)
  40c7f6:	f110 0f70 	cmn.w	r0, #112	; 0x70
  40c7fa:	bfb8      	it	lt
  40c7fc:	f04f 09e4 	movlt.w	r9, #228	; 0xe4
  40c800:	db0c      	blt.n	40c81c <_Z12menuMainViewh+0x17c>
        val = -(TL+1);
      else if (val > (TL+1)*4)
  40c802:	2870      	cmp	r0, #112	; 0x70
  40c804:	bfc8      	it	gt
  40c806:	f04f 091c 	movgt.w	r9, #28
  40c80a:	dc07      	bgt.n	40c81c <_Z12menuMainViewh+0x17c>
        val = TL+1;
      else
        val /= 4;
  40c80c:	f100 0903 	add.w	r9, r0, #3
  40c810:	ea30 0020 	bics.w	r0, r0, r0, asr #32
  40c814:	bf28      	it	cs
  40c816:	4648      	movcs	r0, r9
      if (val < -125 || val > 125)
        att = BLINK|INVERS|ROUND;

      if (val < -(TL+1)*4)
        val = -(TL+1);
      else if (val > (TL+1)*4)
  40c818:	f3c0 0987 	ubfx	r9, r0, #2, #8
        val = TL+1;
      else
        val /= 4;

      if (vert[i]) {
  40c81c:	f81b 3004 	ldrb.w	r3, [fp, r4]
  40c820:	2b00      	cmp	r3, #0
  40c822:	f000 80c5 	beq.w	40c9b0 <_Z12menuMainViewh+0x310>
        ym = 31;
        lcd_vline(xm, ym-TL, TL*2);
  40c826:	2104      	movs	r1, #4
  40c828:	2236      	movs	r2, #54	; 0x36
  40c82a:	4638      	mov	r0, r7
  40c82c:	f7f6 f990 	bl	402b50 <_Z9lcd_vlinehaa>
        if (i!=2 || !g_model.thrTrim) {
  40c830:	f1b8 0f02 	cmp.w	r8, #2
  40c834:	d105      	bne.n	40c842 <_Z12menuMainViewh+0x1a2>
  40c836:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
  40c83a:	f003 0308 	and.w	r3, r3, #8
  40c83e:	b2db      	uxtb	r3, r3
  40c840:	b95b      	cbnz	r3, 40c85a <_Z12menuMainViewh+0x1ba>
          lcd_vline(xm-1, ym-1,  3);
  40c842:	1e78      	subs	r0, r7, #1
  40c844:	b2c0      	uxtb	r0, r0
  40c846:	211e      	movs	r1, #30
  40c848:	2203      	movs	r2, #3
  40c84a:	f7f6 f981 	bl	402b50 <_Z9lcd_vlinehaa>
          lcd_vline(xm+1, ym-1,  3);
  40c84e:	1c78      	adds	r0, r7, #1
  40c850:	b2c0      	uxtb	r0, r0
  40c852:	211e      	movs	r1, #30
  40c854:	2203      	movs	r2, #3
  40c856:	f7f6 f97b 	bl	402b50 <_Z9lcd_vlinehaa>
  40c85a:	f1c9 091c 	rsb	r9, r9, #28
  40c85e:	fa5f f189 	uxtb.w	r1, r9
        lcd_hline(xm-TL, ym, TL*2);
        lcd_hline(xm-1, ym-1,  3);
        lcd_hline(xm-1, ym+1,  3);
        xm += val;
      }
      lcd_square(xm-3, ym-3, 7, att);
  40c862:	3f03      	subs	r7, #3
  40c864:	2207      	movs	r2, #7
  40c866:	b2f8      	uxtb	r0, r7
  40c868:	4613      	mov	r3, r2
  40c86a:	27ff      	movs	r7, #255	; 0xff
  40c86c:	3401      	adds	r4, #1
  40c86e:	e88d 0480 	stmia.w	sp, {r7, sl}
  40c872:	f7f6 fb49 	bl	402f08 <_Z8lcd_recthhhhhh>
      putsTime(12*FW+3, FH*2, s_timerVal[0], att, att);
      putsTmrMode(s_timerVal[0] >= 0 ? 9*FW-FW/2+5 : 9*FW-FW/2-2, FH*3, g_model.timers[0].mode, SWCONDENSED);
    }

    // trim sliders
    for(uint8_t i=0; i<4; i++)
  40c876:	2c04      	cmp	r4, #4
  40c878:	d1a1      	bne.n	40c7be <_Z12menuMainViewh+0x11e>
      }
      lcd_square(xm-3, ym-3, 7, att);
    }
  }

  if (view_base < e_inputs) {
  40c87a:	9b04      	ldr	r3, [sp, #16]
  40c87c:	2b01      	cmp	r3, #1
  40c87e:	f240 8166 	bls.w	40cb4e <_Z12menuMainViewh+0x4ae>
          lcd_hline(x0,y0-1,len);
          break;
      }
    }
  }
  else if (view_base == e_inputs) {
  40c882:	9804      	ldr	r0, [sp, #16]
  40c884:	2802      	cmp	r0, #2
  40c886:	f040 80ac 	bne.w	40c9e2 <_Z12menuMainViewh+0x342>
    if (view == e_inputs) {
  40c88a:	9a05      	ldr	r2, [sp, #20]
  40c88c:	2a02      	cmp	r2, #2
  40c88e:	f000 8109 	beq.w	40caa4 <_Z12menuMainViewh+0x404>
      // hardware inputs
      doMainScreenGrphics();
      for (uint8_t i=0; i<6; i++) {
  40c892:	4f44      	ldr	r7, [pc, #272]	; (40c9a4 <_Z12menuMainViewh+0x304>)
          break;
      }
    }
  }
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
  40c894:	242d      	movs	r4, #45	; 0x2d
    }
    else {
      // virtual inputs
      for (uint8_t i=0; i<8; i++) {
        int16_t val = g_chans512[8+i];
        int8_t len = limit((int16_t)0, (int16_t)(((val+1024) * BAR_HEIGHT) / 2048), (int16_t)BAR_HEIGHT);
  40c896:	f04f 0816 	mov.w	r8, #22
  40c89a:	e01f      	b.n	40c8dc <_Z12menuMainViewh+0x23c>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  40c89c:	2a15      	cmp	r2, #21
  40c89e:	bfde      	ittt	le
  40c8a0:	b2ed      	uxtble	r5, r5
  40c8a2:	f1c5 0638 	rsble	r6, r5, #56	; 0x38
  40c8a6:	b2f6      	uxtble	r6, r6
  40c8a8:	dd00      	ble.n	40c8ac <_Z12menuMainViewh+0x20c>
  40c8aa:	2516      	movs	r5, #22
#elif defined(PCBV4) //EXTRA_ROTARY_ENCODERS
#define V_BAR_W 5
        V_BAR(SCREEN_WIDTH/2-V_BAR_W*3+5+V_BAR_W*i, SCREEN_HEIGHT-8, len)
#else
#define V_BAR_W 5
        V_BAR(SCREEN_WIDTH/2-V_BAR_W*4+2+V_BAR_W*i, SCREEN_HEIGHT-8, len)
  40c8ac:	b276      	sxtb	r6, r6
  40c8ae:	b26d      	sxtb	r5, r5
  40c8b0:	4620      	mov	r0, r4
  40c8b2:	4631      	mov	r1, r6
  40c8b4:	462a      	mov	r2, r5
  40c8b6:	f7f6 f94b 	bl	402b50 <_Z9lcd_vlinehaa>
  40c8ba:	1c60      	adds	r0, r4, #1
  40c8bc:	b2c0      	uxtb	r0, r0
  40c8be:	4631      	mov	r1, r6
  40c8c0:	462a      	mov	r2, r5
  40c8c2:	f7f6 f945 	bl	402b50 <_Z9lcd_vlinehaa>
  40c8c6:	1ca0      	adds	r0, r4, #2
  40c8c8:	3405      	adds	r4, #5
  40c8ca:	b2c0      	uxtb	r0, r0
  40c8cc:	4631      	mov	r1, r6
  40c8ce:	462a      	mov	r2, r5
  40c8d0:	b2e4      	uxtb	r4, r4
  40c8d2:	f7f6 f93d 	bl	402b50 <_Z9lcd_vlinehaa>
        putsSwitches(i<3 ? 2*FW-2: 17*FW-1, (i%3)*FH+4*FH, sw2, getSwitch(sw1, 0) ? INVERS : 0);
      }
    }
    else {
      // virtual inputs
      for (uint8_t i=0; i<8; i++) {
  40c8d6:	2c55      	cmp	r4, #85	; 0x55
  40c8d8:	f000 809a 	beq.w	40ca10 <_Z12menuMainViewh+0x370>
        int16_t val = g_chans512[8+i];
        int8_t len = limit((int16_t)0, (int16_t)(((val+1024) * BAR_HEIGHT) / 2048), (int16_t)BAR_HEIGHT);
  40c8dc:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
  40c8e0:	2622      	movs	r6, #34	; 0x22
  40c8e2:	fb08 f505 	mul.w	r5, r8, r5
  40c8e6:	f505 45b0 	add.w	r5, r5, #22528	; 0x5800
  40c8ea:	f505 63fe 	add.w	r3, r5, #2032	; 0x7f0
  40c8ee:	330f      	adds	r3, #15
  40c8f0:	ea35 0525 	bics.w	r5, r5, r5, asr #32
  40c8f4:	bf28      	it	cs
  40c8f6:	461d      	movcs	r5, r3
  40c8f8:	f3c5 25cf 	ubfx	r5, r5, #11, #16
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  40c8fc:	b22a      	sxth	r2, r5
  40c8fe:	2a00      	cmp	r2, #0
  40c900:	dacc      	bge.n	40c89c <_Z12menuMainViewh+0x1fc>
  40c902:	2638      	movs	r6, #56	; 0x38
  40c904:	2500      	movs	r5, #0
  40c906:	e7d1      	b.n	40c8ac <_Z12menuMainViewh+0x20c>
void menuMainView(uint8_t event)
{
  uint8_t view = g_eeGeneral.view;
  uint8_t view_base = view & 0x0f;

  switch(event)
  40c908:	2824      	cmp	r0, #36	; 0x24
  40c90a:	f080 81df 	bcs.w	40cccc <_Z12menuMainViewh+0x62c>
  40c90e:	2822      	cmp	r0, #34	; 0x22
  40c910:	f4ff af02 	bcc.w	40c718 <_Z12menuMainViewh+0x78>
      pushMenu(menuProcSetup);
      killEvents(event);
      break;
    case EVT_KEY_BREAK(KEY_UP):
    case EVT_KEY_BREAK(KEY_DOWN):
      g_eeGeneral.view = (event == EVT_KEY_BREAK(KEY_UP) ? (view_base == MAIN_VIEW_MAX ? 0 : view_base + 1) : (view_base == 0 ? MAIN_VIEW_MAX : view_base - 1));
  40c914:	2823      	cmp	r0, #35	; 0x23
  40c916:	9c04      	ldr	r4, [sp, #16]
  40c918:	f000 820c 	beq.w	40cd34 <_Z12menuMainViewh+0x694>
  40c91c:	1e61      	subs	r1, r4, #1
  40c91e:	b2c9      	uxtb	r1, r1
  40c920:	2c00      	cmp	r4, #0
  40c922:	f000 81fb 	beq.w	40cd1c <_Z12menuMainViewh+0x67c>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40c926:	f895 29a8 	ldrb.w	r2, [r5, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40c92a:	f8b5 39aa 	ldrh.w	r3, [r5, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40c92e:	f042 0201 	orr.w	r2, r2, #1
  40c932:	4c19      	ldr	r4, [pc, #100]	; (40c998 <_Z12menuMainViewh+0x2f8>)
      eeDirty(EE_GENERAL);
      AUDIO_KEYPAD_UP();
  40c934:	2003      	movs	r0, #3
      pushMenu(menuProcSetup);
      killEvents(event);
      break;
    case EVT_KEY_BREAK(KEY_UP):
    case EVT_KEY_BREAK(KEY_DOWN):
      g_eeGeneral.view = (event == EVT_KEY_BREAK(KEY_UP) ? (view_base == MAIN_VIEW_MAX ? 0 : view_base + 1) : (view_base == 0 ? MAIN_VIEW_MAX : view_base - 1));
  40c936:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
  40c93a:	f885 29a8 	strb.w	r2, [r5, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40c93e:	f8a5 39ac 	strh.w	r3, [r5, #2476]	; 0x9ac
  40c942:	9402      	str	r4, [sp, #8]
      eeDirty(EE_GENERAL);
      AUDIO_KEYPAD_UP();
  40c944:	f7f9 fde2 	bl	40650c <_Z13audioDefeventh>
      break;
  40c948:	e6e8      	b.n	40c71c <_Z12menuMainViewh+0x7c>
void menuMainView(uint8_t event)
{
  uint8_t view = g_eeGeneral.view;
  uint8_t view_base = view & 0x0f;

  switch(event)
  40c94a:	2881      	cmp	r0, #129	; 0x81
  40c94c:	f000 81b8 	beq.w	40ccc0 <_Z12menuMainViewh+0x620>
  40c950:	2882      	cmp	r0, #130	; 0x82
  40c952:	f47f aee1 	bne.w	40c718 <_Z12menuMainViewh+0x78>
      chainMenu(menuProcStatistic);
      killEvents(event);
      break;
    case EVT_KEY_LONG(KEY_DOWN):
#if defined(FRSKY)
      chainMenu(menuProcFrsky);
  40c956:	4814      	ldr	r0, [pc, #80]	; (40c9a8 <_Z12menuMainViewh+0x308>)
  40c958:	f7f9 fe72 	bl	406640 <_Z9chainMenuPFvhE>
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  40c95c:	f895 30a6 	ldrb.w	r3, [r5, #166]	; 0xa6
  40c960:	4c0d      	ldr	r4, [pc, #52]	; (40c998 <_Z12menuMainViewh+0x2f8>)
  40c962:	f36f 1305 	bfc	r3, #4, #2
  40c966:	2263      	movs	r2, #99	; 0x63
  40c968:	f885 30a6 	strb.w	r3, [r5, #166]	; 0xa6
  40c96c:	f885 20a8 	strb.w	r2, [r5, #168]	; 0xa8
  40c970:	9402      	str	r4, [sp, #8]
  40c972:	e6d3      	b.n	40c71c <_Z12menuMainViewh+0x7c>
        eeDirty(EE_GENERAL);
        AUDIO_KEYPAD_UP();
      }
      break;
    case EVT_KEY_LONG(KEY_RIGHT):
      pushMenu(menuProcModelSelect);
  40c974:	480d      	ldr	r0, [pc, #52]	; (40c9ac <_Z12menuMainViewh+0x30c>)
  40c976:	f7fa fe19 	bl	4075ac <_Z8pushMenuPFvhE>
  40c97a:	f895 30ac 	ldrb.w	r3, [r5, #172]	; 0xac
  40c97e:	4c06      	ldr	r4, [pc, #24]	; (40c998 <_Z12menuMainViewh+0x2f8>)
  40c980:	f36f 1305 	bfc	r3, #4, #2
  40c984:	2263      	movs	r2, #99	; 0x63
  40c986:	f885 30ac 	strb.w	r3, [r5, #172]	; 0xac
  40c98a:	f885 20ae 	strb.w	r2, [r5, #174]	; 0xae
  40c98e:	9402      	str	r4, [sp, #8]
  40c990:	e6c4      	b.n	40c71c <_Z12menuMainViewh+0x7c>
  40c992:	bf00      	nop
  40c994:	20000108 	.word	0x20000108
  40c998:	20001200 	.word	0x20001200
  40c99c:	20000244 	.word	0x20000244
  40c9a0:	00410828 	.word	0x00410828
  40c9a4:	20000b06 	.word	0x20000b06
  40c9a8:	00406791 	.word	0x00406791
  40c9ac:	0040e665 	.word	0x0040e665
        }
        ym -= val;
      }
      else {
        ym = 60;
        lcd_hline(xm-TL, ym, TL*2);
  40c9b0:	f1a7 001b 	sub.w	r0, r7, #27
        lcd_hline(xm-1, ym-1,  3);
  40c9b4:	f107 38ff 	add.w	r8, r7, #4294967295
        }
        ym -= val;
      }
      else {
        ym = 60;
        lcd_hline(xm-TL, ym, TL*2);
  40c9b8:	b2c0      	uxtb	r0, r0
  40c9ba:	213c      	movs	r1, #60	; 0x3c
  40c9bc:	2236      	movs	r2, #54	; 0x36
        lcd_hline(xm-1, ym-1,  3);
  40c9be:	fa5f f888 	uxtb.w	r8, r8
        }
        ym -= val;
      }
      else {
        ym = 60;
        lcd_hline(xm-TL, ym, TL*2);
  40c9c2:	f7f6 f815 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
        lcd_hline(xm-1, ym-1,  3);
  40c9c6:	213b      	movs	r1, #59	; 0x3b
  40c9c8:	2203      	movs	r2, #3
  40c9ca:	4640      	mov	r0, r8
  40c9cc:	f7f6 f810 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
        lcd_hline(xm-1, ym+1,  3);
        xm += val;
  40c9d0:	444f      	add	r7, r9
      }
      else {
        ym = 60;
        lcd_hline(xm-TL, ym, TL*2);
        lcd_hline(xm-1, ym-1,  3);
        lcd_hline(xm-1, ym+1,  3);
  40c9d2:	213d      	movs	r1, #61	; 0x3d
  40c9d4:	4640      	mov	r0, r8
  40c9d6:	2203      	movs	r2, #3
  40c9d8:	f7f6 f80a 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
        xm += val;
  40c9dc:	b2ff      	uxtb	r7, r7
  40c9de:	2139      	movs	r1, #57	; 0x39
  40c9e0:	e73f      	b.n	40c862 <_Z12menuMainViewh+0x1c2>
        lcd_putcAtt((i<6 ? 2*FW-2 : 16*FW-2) + 2 * FW + ((i%6) < 3 ? 0 : FW), (i%3)*FH+4*FH, i<9 ? '1'+i : 'A'+i-9, getSwitch(10+i, 0) ? INVERS : 0);
      }
    }
  }
  else { // timer2
    putsTime(33+FW+2, FH*5, s_timerVal[1], DBLSIZE, DBLSIZE);
  40c9e2:	f9b5 290a 	ldrsh.w	r2, [r5, #2314]	; 0x90a
  40c9e6:	2128      	movs	r1, #40	; 0x28
  40c9e8:	4623      	mov	r3, r4
  40c9ea:	2029      	movs	r0, #41	; 0x29
  40c9ec:	9400      	str	r4, [sp, #0]
  40c9ee:	f7f6 fc59 	bl	4032a4 <_Z8putsTimehhshh>
    putsTmrMode(s_timerVal[1] >= 0 ? 20-FW/2+5 : 20-FW/2-2, FH*6, g_model.timers[1].mode, SWCONDENSED);
  40c9f2:	f9b5 090a 	ldrsh.w	r0, [r5, #2314]	; 0x90a
  40c9f6:	f995 2149 	ldrsb.w	r2, [r5, #329]	; 0x149
  40c9fa:	2800      	cmp	r0, #0
  40c9fc:	bfb4      	ite	lt
  40c9fe:	200f      	movlt	r0, #15
  40ca00:	2016      	movge	r0, #22
  40ca02:	2130      	movs	r1, #48	; 0x30
  40ca04:	2380      	movs	r3, #128	; 0x80
  }
#endif

  DISPLAY_PROGRESS_BAR(20*FW+1);

}
  40ca06:	b007      	add	sp, #28
  40ca08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
  }
  else { // timer2
    putsTime(33+FW+2, FH*5, s_timerVal[1], DBLSIZE, DBLSIZE);
    putsTmrMode(s_timerVal[1] >= 0 ? 20-FW/2+5 : 20-FW/2-2, FH*6, g_model.timers[1].mode, SWCONDENSED);
  40ca0c:	f7f6 be34 	b.w	403678 <_Z11putsTmrModehhah>
        V_BAR(SCREEN_WIDTH/2-V_BAR_W*6+5+V_BAR_W*i, SCREEN_HEIGHT-8, len)
#endif //EXTRA_ROTARY_ENCODERS
      }
#endif //PCBV4
      for (uint8_t i=0; i<12; i++) {
        if ((i%6) < 3) lcd_puts(i<6 ? 2*FW-2 : 16*FW-2, (i%3)*FH+4*FH, STR_SW);
  40ca10:	f64a 25ab 	movw	r5, #43691	; 0xaaab
        putsSwitches(i<3 ? 2*FW-2: 17*FW-1, (i%3)*FH+4*FH, sw2, getSwitch(sw1, 0) ? INVERS : 0);
      }
    }
    else {
      // virtual inputs
      for (uint8_t i=0; i<8; i++) {
  40ca14:	2400      	movs	r4, #0
        V_BAR(SCREEN_WIDTH/2-V_BAR_W*6+5+V_BAR_W*i, SCREEN_HEIGHT-8, len)
#endif //EXTRA_ROTARY_ENCODERS
      }
#endif //PCBV4
      for (uint8_t i=0; i<12; i++) {
        if ((i%6) < 3) lcd_puts(i<6 ? 2*FW-2 : 16*FW-2, (i%3)*FH+4*FH, STR_SW);
  40ca16:	f6ca 25aa 	movt	r5, #43690	; 0xaaaa
  40ca1a:	e028      	b.n	40ca6e <_Z12menuMainViewh+0x3ce>
  40ca1c:	1aa7      	subs	r7, r4, r2
  40ca1e:	b2ff      	uxtb	r7, r7
  40ca20:	3704      	adds	r7, #4
  40ca22:	00ff      	lsls	r7, r7, #3
  40ca24:	b2ff      	uxtb	r7, r7
        lcd_putcAtt((i<6 ? 2*FW-2 : 16*FW-2) + 2 * FW + ((i%6) < 3 ? 0 : FW), (i%3)*FH+4*FH, i<9 ? '1'+i : 'A'+i-9, getSwitch(10+i, 0) ? INVERS : 0);
  40ca26:	2c05      	cmp	r4, #5
  40ca28:	bf8c      	ite	hi
  40ca2a:	236a      	movhi	r3, #106	; 0x6a
  40ca2c:	2316      	movls	r3, #22
  40ca2e:	2e02      	cmp	r6, #2
  40ca30:	bf8c      	ite	hi
  40ca32:	2606      	movhi	r6, #6
  40ca34:	2600      	movls	r6, #0
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
  40ca36:	f104 000a 	add.w	r0, r4, #10
#endif //EXTRA_ROTARY_ENCODERS
      }
#endif //PCBV4
      for (uint8_t i=0; i<12; i++) {
        if ((i%6) < 3) lcd_puts(i<6 ? 2*FW-2 : 16*FW-2, (i%3)*FH+4*FH, STR_SW);
        lcd_putcAtt((i<6 ? 2*FW-2 : 16*FW-2) + 2 * FW + ((i%6) < 3 ? 0 : FW), (i%3)*FH+4*FH, i<9 ? '1'+i : 'A'+i-9, getSwitch(10+i, 0) ? INVERS : 0);
  40ca3a:	2c08      	cmp	r4, #8
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
  40ca3c:	bf94      	ite	ls
  40ca3e:	f104 0831 	addls.w	r8, r4, #49	; 0x31
  40ca42:	f104 0838 	addhi.w	r8, r4, #56	; 0x38
#endif //EXTRA_ROTARY_ENCODERS
      }
#endif //PCBV4
      for (uint8_t i=0; i<12; i++) {
        if ((i%6) < 3) lcd_puts(i<6 ? 2*FW-2 : 16*FW-2, (i%3)*FH+4*FH, STR_SW);
        lcd_putcAtt((i<6 ? 2*FW-2 : 16*FW-2) + 2 * FW + ((i%6) < 3 ? 0 : FW), (i%3)*FH+4*FH, i<9 ? '1'+i : 'A'+i-9, getSwitch(10+i, 0) ? INVERS : 0);
  40ca46:	b240      	sxtb	r0, r0
  40ca48:	2100      	movs	r1, #0
  40ca4a:	18f6      	adds	r6, r6, r3
  40ca4c:	f7f8 f900 	bl	404c50 <_Z9getSwitchab>
  40ca50:	2800      	cmp	r0, #0
  40ca52:	bf0c      	ite	eq
  40ca54:	4603      	moveq	r3, r0
  40ca56:	2302      	movne	r3, #2
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
  40ca58:	fa5f f888 	uxtb.w	r8, r8
#else //EXTRA_ROTARY_ENCODERS
        V_BAR(SCREEN_WIDTH/2-V_BAR_W*6+5+V_BAR_W*i, SCREEN_HEIGHT-8, len)
#endif //EXTRA_ROTARY_ENCODERS
      }
#endif //PCBV4
      for (uint8_t i=0; i<12; i++) {
  40ca5c:	3401      	adds	r4, #1
        if ((i%6) < 3) lcd_puts(i<6 ? 2*FW-2 : 16*FW-2, (i%3)*FH+4*FH, STR_SW);
        lcd_putcAtt((i<6 ? 2*FW-2 : 16*FW-2) + 2 * FW + ((i%6) < 3 ? 0 : FW), (i%3)*FH+4*FH, i<9 ? '1'+i : 'A'+i-9, getSwitch(10+i, 0) ? INVERS : 0);
  40ca5e:	4630      	mov	r0, r6
  40ca60:	4639      	mov	r1, r7
  40ca62:	4642      	mov	r2, r8
#else //EXTRA_ROTARY_ENCODERS
        V_BAR(SCREEN_WIDTH/2-V_BAR_W*6+5+V_BAR_W*i, SCREEN_HEIGHT-8, len)
#endif //EXTRA_ROTARY_ENCODERS
      }
#endif //PCBV4
      for (uint8_t i=0; i<12; i++) {
  40ca64:	b2e4      	uxtb	r4, r4
        if ((i%6) < 3) lcd_puts(i<6 ? 2*FW-2 : 16*FW-2, (i%3)*FH+4*FH, STR_SW);
        lcd_putcAtt((i<6 ? 2*FW-2 : 16*FW-2) + 2 * FW + ((i%6) < 3 ? 0 : FW), (i%3)*FH+4*FH, i<9 ? '1'+i : 'A'+i-9, getSwitch(10+i, 0) ? INVERS : 0);
  40ca66:	f7f5 fe01 	bl	40266c <_Z11lcd_putcAtthhhh>
#else //EXTRA_ROTARY_ENCODERS
        V_BAR(SCREEN_WIDTH/2-V_BAR_W*6+5+V_BAR_W*i, SCREEN_HEIGHT-8, len)
#endif //EXTRA_ROTARY_ENCODERS
      }
#endif //PCBV4
      for (uint8_t i=0; i<12; i++) {
  40ca6a:	2c0c      	cmp	r4, #12
  40ca6c:	d06c      	beq.n	40cb48 <_Z12menuMainViewh+0x4a8>
        if ((i%6) < 3) lcd_puts(i<6 ? 2*FW-2 : 16*FW-2, (i%3)*FH+4*FH, STR_SW);
  40ca6e:	fba5 2304 	umull	r2, r3, r5, r4
  40ca72:	085a      	lsrs	r2, r3, #1
  40ca74:	089e      	lsrs	r6, r3, #2
  40ca76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40ca7a:	1aa7      	subs	r7, r4, r2
  40ca7c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40ca80:	b2ff      	uxtb	r7, r7
  40ca82:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
  40ca86:	3704      	adds	r7, #4
  40ca88:	b2f6      	uxtb	r6, r6
  40ca8a:	00ff      	lsls	r7, r7, #3
  40ca8c:	2e02      	cmp	r6, #2
  40ca8e:	b2ff      	uxtb	r7, r7
  40ca90:	d8c4      	bhi.n	40ca1c <_Z12menuMainViewh+0x37c>
  40ca92:	2c05      	cmp	r4, #5
  40ca94:	bf8c      	ite	hi
  40ca96:	205e      	movhi	r0, #94	; 0x5e
  40ca98:	200a      	movls	r0, #10
  40ca9a:	4639      	mov	r1, r7
  40ca9c:	4aaa      	ldr	r2, [pc, #680]	; (40cd48 <_Z12menuMainViewh+0x6a8>)
  40ca9e:	f7f5 ff13 	bl	4028c8 <_Z8lcd_putshhPKc>
  40caa2:	e7c0      	b.n	40ca26 <_Z12menuMainViewh+0x386>
    }
  }
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
      // hardware inputs
      doMainScreenGrphics();
  40caa4:	f7f6 fa76 	bl	402f94 <_Z19doMainScreenGrphicsv>
      for (uint8_t i=0; i<6; i++) {
        int8_t sw1 = (i<3 ? 1+i : 4+i);
        int8_t sw2 = (sw1 == 9 ? (getSwitch(4, 0) ? 4 : (getSwitch(5, 0) ? 5 : 6)) : sw1);
        putsSwitches(i<3 ? 2*FW-2: 17*FW-1, (i%3)*FH+4*FH, sw2, getSwitch(sw1, 0) ? INVERS : 0);
  40caa8:	f64a 27ab 	movw	r7, #43691	; 0xaaab
    }
  }
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
      // hardware inputs
      doMainScreenGrphics();
  40caac:	2501      	movs	r5, #1
  40caae:	2600      	movs	r6, #0
      for (uint8_t i=0; i<6; i++) {
        int8_t sw1 = (i<3 ? 1+i : 4+i);
        int8_t sw2 = (sw1 == 9 ? (getSwitch(4, 0) ? 4 : (getSwitch(5, 0) ? 5 : 6)) : sw1);
        putsSwitches(i<3 ? 2*FW-2: 17*FW-1, (i%3)*FH+4*FH, sw2, getSwitch(sw1, 0) ? INVERS : 0);
  40cab0:	f6ca 27aa 	movt	r7, #43690	; 0xaaaa
    }
  }
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
      // hardware inputs
      doMainScreenGrphics();
  40cab4:	fa5f f886 	uxtb.w	r8, r6
      for (uint8_t i=0; i<6; i++) {
        int8_t sw1 = (i<3 ? 1+i : 4+i);
  40cab8:	fa5f fa84 	uxtb.w	sl, r4
  40cabc:	f1b8 0f02 	cmp.w	r8, #2
        int8_t sw2 = (sw1 == 9 ? (getSwitch(4, 0) ? 4 : (getSwitch(5, 0) ? 5 : 6)) : sw1);
  40cac0:	fa4f f98a 	sxtb.w	r9, sl
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
      // hardware inputs
      doMainScreenGrphics();
      for (uint8_t i=0; i<6; i++) {
        int8_t sw1 = (i<3 ? 1+i : 4+i);
  40cac4:	bf9e      	ittt	ls
  40cac6:	fa5f fa85 	uxtbls.w	sl, r5
        int8_t sw2 = (sw1 == 9 ? (getSwitch(4, 0) ? 4 : (getSwitch(5, 0) ? 5 : 6)) : sw1);
        putsSwitches(i<3 ? 2*FW-2: 17*FW-1, (i%3)*FH+4*FH, sw2, getSwitch(sw1, 0) ? INVERS : 0);
  40caca:	f04f 0b0a 	movls.w	fp, #10
  40cace:	fa4f f98a 	sxtbls.w	r9, sl
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
      // hardware inputs
      doMainScreenGrphics();
      for (uint8_t i=0; i<6; i++) {
        int8_t sw1 = (i<3 ? 1+i : 4+i);
  40cad2:	d915      	bls.n	40cb00 <_Z12menuMainViewh+0x460>
        int8_t sw2 = (sw1 == 9 ? (getSwitch(4, 0) ? 4 : (getSwitch(5, 0) ? 5 : 6)) : sw1);
  40cad4:	f1b9 0f09 	cmp.w	r9, #9
  40cad8:	d110      	bne.n	40cafc <_Z12menuMainViewh+0x45c>
  40cada:	2100      	movs	r1, #0
  40cadc:	2004      	movs	r0, #4
  40cade:	f7f8 f8b7 	bl	404c50 <_Z9getSwitchab>
  40cae2:	f04f 0a04 	mov.w	sl, #4
  40cae6:	4601      	mov	r1, r0
  40cae8:	b940      	cbnz	r0, 40cafc <_Z12menuMainViewh+0x45c>
  40caea:	2005      	movs	r0, #5
  40caec:	f7f8 f8b0 	bl	404c50 <_Z9getSwitchab>
  40caf0:	2800      	cmp	r0, #0
  40caf2:	bf0c      	ite	eq
  40caf4:	f04f 0a06 	moveq.w	sl, #6
  40caf8:	f04f 0a05 	movne.w	sl, #5
        putsSwitches(i<3 ? 2*FW-2: 17*FW-1, (i%3)*FH+4*FH, sw2, getSwitch(sw1, 0) ? INVERS : 0);
  40cafc:	f04f 0b65 	mov.w	fp, #101	; 0x65
  40cb00:	fba7 0308 	umull	r0, r3, r7, r8
  40cb04:	085b      	lsrs	r3, r3, #1
  40cb06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40cb0a:	2100      	movs	r1, #0
  40cb0c:	4648      	mov	r0, r9
  40cb0e:	ebc3 0808 	rsb	r8, r3, r8
  40cb12:	f7f8 f89d 	bl	404c50 <_Z9getSwitchab>
  40cb16:	fa5f f888 	uxtb.w	r8, r8
  40cb1a:	f108 0804 	add.w	r8, r8, #4
  40cb1e:	2800      	cmp	r0, #0
  40cb20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  40cb24:	bf0c      	ite	eq
  40cb26:	4603      	moveq	r3, r0
  40cb28:	2302      	movne	r3, #2
  40cb2a:	fa5f f888 	uxtb.w	r8, r8
  40cb2e:	3501      	adds	r5, #1
  40cb30:	fa4f f28a 	sxtb.w	r2, sl
  40cb34:	4658      	mov	r0, fp
  40cb36:	4641      	mov	r1, r8
  40cb38:	b2ed      	uxtb	r5, r5
  40cb3a:	3401      	adds	r4, #1
  40cb3c:	f7f6 fcda 	bl	4034f4 <_Z12putsSwitcheshhah>
  40cb40:	3601      	adds	r6, #1
  }
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
      // hardware inputs
      doMainScreenGrphics();
      for (uint8_t i=0; i<6; i++) {
  40cb42:	2d07      	cmp	r5, #7
        int8_t sw1 = (i<3 ? 1+i : 4+i);
        int8_t sw2 = (sw1 == 9 ? (getSwitch(4, 0) ? 4 : (getSwitch(5, 0) ? 5 : 6)) : sw1);
        putsSwitches(i<3 ? 2*FW-2: 17*FW-1, (i%3)*FH+4*FH, sw2, getSwitch(sw1, 0) ? INVERS : 0);
  40cb44:	b2e4      	uxtb	r4, r4
  }
  else if (view_base == e_inputs) {
    if (view == e_inputs) {
      // hardware inputs
      doMainScreenGrphics();
      for (uint8_t i=0; i<6; i++) {
  40cb46:	d1b5      	bne.n	40cab4 <_Z12menuMainViewh+0x414>
  }
#endif

  DISPLAY_PROGRESS_BAR(20*FW+1);

}
  40cb48:	b007      	add	sp, #28
  40cb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
      lcd_square(xm-3, ym-3, 7, att);
    }
  }

  if (view_base < e_inputs) {
  40cb4e:	2400      	movs	r4, #0
          x0       = i<4 ? 128/4+2 : 128*3/4-2;
          y0       = 38+(i%4)*5;

          int8_t len = (abs(val) * WBAR2 + 512) / 1024;
          if(len>WBAR2)  len =  WBAR2;  // prevent bars from going over the end - comment for debugging
          lcd_hlineStip(x0-WBAR2, y0, WBAR2*2+1, DOTTED);
  40cb50:	46a2      	mov	sl, r4
  40cb52:	469b      	mov	fp, r3
  40cb54:	e021      	b.n	40cb9a <_Z12menuMainViewh+0x4fa>
          x0 = (i%4*9+3)*FW/2;
          y0 = i/4*FH+40;
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
  40cb56:	b23b      	sxth	r3, r7
  40cb58:	2b00      	cmp	r3, #0
  40cb5a:	f103 027f 	add.w	r2, r3, #127	; 0x7f
  40cb5e:	bfa8      	it	ge
  40cb60:	461a      	movge	r2, r3
      int16_t val = g_chans512[(g_eeGeneral.view & ALTERNATE_VIEW) ? 8+i : i];

      switch(view_base)
      {
        case e_outputValues:
          x0 = (i%4*9+3)*FW/2;
  40cb62:	f006 0003 	and.w	r0, r6, #3
          y0 = i/4*FH+40;
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
  40cb66:	f103 0e1f 	add.w	lr, r3, #31
  40cb6a:	bfb8      	it	lt
  40cb6c:	4673      	movlt	r3, lr
      int16_t val = g_chans512[(g_eeGeneral.view & ALTERNATE_VIEW) ? 8+i : i];

      switch(view_base)
      {
        case e_outputValues:
          x0 = (i%4*9+3)*FW/2;
  40cb6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          y0 = i/4*FH+40;
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
  40cb72:	11d2      	asrs	r2, r2, #7

      switch(view_base)
      {
        case e_outputValues:
          x0 = (i%4*9+3)*FW/2;
          y0 = i/4*FH+40;
  40cb74:	ea4f 0196 	mov.w	r1, r6, lsr #2
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
  40cb78:	eba2 1363 	sub.w	r3, r2, r3, asr #5
      int16_t val = g_chans512[(g_eeGeneral.view & ALTERNATE_VIEW) ? 8+i : i];

      switch(view_base)
      {
        case e_outputValues:
          x0 = (i%4*9+3)*FW/2;
  40cb7c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
          y0 = i/4*FH+40;
  40cb80:	3105      	adds	r1, #5
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
  40cb82:	19df      	adds	r7, r3, r7
  40cb84:	3021      	adds	r0, #33	; 0x21

      switch(view_base)
      {
        case e_outputValues:
          x0 = (i%4*9+3)*FW/2;
          y0 = i/4*FH+40;
  40cb86:	00c9      	lsls	r1, r1, #3
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
  40cb88:	b2c9      	uxtb	r1, r1
  40cb8a:	b23a      	sxth	r2, r7
  40cb8c:	b2c0      	uxtb	r0, r0
  40cb8e:	2320      	movs	r3, #32
  40cb90:	f7f6 f952 	bl	402e38 <_Z13lcd_outdezAtthhsh>
          }else{
            x0-=len;
          }
          lcd_hline(x0,y0+1,len);
          lcd_hline(x0,y0-1,len);
          break;
  40cb94:	3401      	adds	r4, #1
      lcd_square(xm-3, ym-3, 7, att);
    }
  }

  if (view_base < e_inputs) {
    for (uint8_t i=0; i<8; i++) {
  40cb96:	2c08      	cmp	r4, #8
  40cb98:	d0d6      	beq.n	40cb48 <_Z12menuMainViewh+0x4a8>
      uint8_t x0,y0;
      int16_t val = g_chans512[(g_eeGeneral.view & ALTERNATE_VIEW) ? 8+i : i];
  40cb9a:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
      }
      lcd_square(xm-3, ym-3, 7, att);
    }
  }

  if (view_base < e_inputs) {
  40cb9e:	b2e6      	uxtb	r6, r4
    for (uint8_t i=0; i<8; i++) {
      uint8_t x0,y0;
      int16_t val = g_chans512[(g_eeGeneral.view & ALTERNATE_VIEW) ? 8+i : i];
  40cba0:	06da      	lsls	r2, r3, #27
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
  40cba2:	bf4c      	ite	mi
  40cba4:	f104 0308 	addmi.w	r3, r4, #8
  }

  if (view_base < e_inputs) {
    for (uint8_t i=0; i<8; i++) {
      uint8_t x0,y0;
      int16_t val = g_chans512[(g_eeGeneral.view & ALTERNATE_VIEW) ? 8+i : i];
  40cba8:	4623      	movpl	r3, r4
  40cbaa:	eb05 0343 	add.w	r3, r5, r3, lsl #1

      switch(view_base)
  40cbae:	f1bb 0f01 	cmp.w	fp, #1
  }

  if (view_base < e_inputs) {
    for (uint8_t i=0; i<8; i++) {
      uint8_t x0,y0;
      int16_t val = g_chans512[(g_eeGeneral.view & ALTERNATE_VIEW) ? 8+i : i];
  40cbb2:	f8b3 79f0 	ldrh.w	r7, [r3, #2544]	; 0x9f0

      switch(view_base)
  40cbb6:	d1ce      	bne.n	40cb56 <_Z12menuMainViewh+0x4b6>
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  40cbb8:	b23f      	sxth	r7, r7
#endif
          break;

        case e_outputBars:
#define WBAR2 (50/2)
          x0       = i<4 ? 128/4+2 : 128*3/4-2;
  40cbba:	2e04      	cmp	r6, #4
  40cbbc:	bf34      	ite	cc
  40cbbe:	f04f 0822 	movcc.w	r8, #34	; 0x22
  40cbc2:	f04f 085e 	movcs.w	r8, #94	; 0x5e
  40cbc6:	bf34      	ite	cc
  40cbc8:	2009      	movcc	r0, #9
  40cbca:	2045      	movcs	r0, #69	; 0x45
  40cbcc:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
  40cbd0:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
          y0       = 38+(i%4)*5;

          int8_t len = (abs(val) * WBAR2 + 512) / 1024;
  40cbd4:	fa0f fe8e 	sxth.w	lr, lr
  40cbd8:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  40cbdc:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  40cbe0:	f50e 63be 	add.w	r3, lr, #1520	; 0x5f0
  40cbe4:	f103 030f 	add.w	r3, r3, #15
  40cbe8:	f51e 7e00 	adds.w	lr, lr, #512	; 0x200
  40cbec:	bf48      	it	mi
  40cbee:	469e      	movmi	lr, r3
          break;

        case e_outputBars:
#define WBAR2 (50/2)
          x0       = i<4 ? 128/4+2 : 128*3/4-2;
          y0       = 38+(i%4)*5;
  40cbf0:	f006 0603 	and.w	r6, r6, #3
  40cbf4:	eb06 0686 	add.w	r6, r6, r6, lsl #2

          int8_t len = (abs(val) * WBAR2 + 512) / 1024;
  40cbf8:	f34e 2e87 	sbfx	lr, lr, #10, #8
  40cbfc:	f1be 0f19 	cmp.w	lr, #25
  40cc00:	bfa8      	it	ge
  40cc02:	f04f 0e19 	movge.w	lr, #25
          if(len>WBAR2)  len =  WBAR2;  // prevent bars from going over the end - comment for debugging
          lcd_hlineStip(x0-WBAR2, y0, WBAR2*2+1, DOTTED);
  40cc06:	2355      	movs	r3, #85	; 0x55
  40cc08:	f106 0126 	add.w	r1, r6, #38	; 0x26
  40cc0c:	2233      	movs	r2, #51	; 0x33
  40cc0e:	b240      	sxtb	r0, r0
        case e_outputBars:
#define WBAR2 (50/2)
          x0       = i<4 ? 128/4+2 : 128*3/4-2;
          y0       = 38+(i%4)*5;

          int8_t len = (abs(val) * WBAR2 + 512) / 1024;
  40cc10:	fa5f f98e 	uxtb.w	r9, lr
          if(len>WBAR2)  len =  WBAR2;  // prevent bars from going over the end - comment for debugging
          lcd_hlineStip(x0-WBAR2, y0, WBAR2*2+1, DOTTED);
  40cc14:	f8cd a000 	str.w	sl, [sp]
  40cc18:	f7f5 fe9c 	bl	402954 <_Z13lcd_hlineStipahhhh>
          lcd_vline(x0,y0-2,5);
  40cc1c:	4640      	mov	r0, r8
  40cc1e:	f106 0124 	add.w	r1, r6, #36	; 0x24
  40cc22:	2205      	movs	r2, #5
  40cc24:	f7f5 ff94 	bl	402b50 <_Z9lcd_vlinehaa>
          if (val>0){
  40cc28:	2f00      	cmp	r7, #0
            x0+=1;
          }else{
            x0-=len;
  40cc2a:	bfd9      	ittee	le
  40cc2c:	fa5f f789 	uxtble.w	r7, r9
  40cc30:	ebc7 0808 	rsble	r8, r7, r8
          int8_t len = (abs(val) * WBAR2 + 512) / 1024;
          if(len>WBAR2)  len =  WBAR2;  // prevent bars from going over the end - comment for debugging
          lcd_hlineStip(x0-WBAR2, y0, WBAR2*2+1, DOTTED);
          lcd_vline(x0,y0-2,5);
          if (val>0){
            x0+=1;
  40cc34:	f108 0801 	addgt.w	r8, r8, #1
  40cc38:	fa5f f789 	uxtbgt.w	r7, r9
          }else{
            x0-=len;
  40cc3c:	bfd8      	it	le
  40cc3e:	fa5f f888 	uxtble.w	r8, r8
          }
          lcd_hline(x0,y0+1,len);
  40cc42:	f106 0127 	add.w	r1, r6, #39	; 0x27
  40cc46:	463a      	mov	r2, r7
  40cc48:	4640      	mov	r0, r8
  40cc4a:	f7f5 fed1 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
          lcd_hline(x0,y0-1,len);
  40cc4e:	f106 0125 	add.w	r1, r6, #37	; 0x25
  40cc52:	4640      	mov	r0, r8
  40cc54:	463a      	mov	r2, r7
  40cc56:	f7f5 fecb 	bl	4029f0 <_Z9lcd_hlinehhhh.constprop.52>
          break;
  40cc5a:	e79b      	b.n	40cb94 <_Z12menuMainViewh+0x4f4>
/// return to last menu in menustack
void popMenu();
///deliver address of last menu which was popped from
inline MenuFuncP lastPopMenu()
{
  return g_menuStack[g_menuStackPtr+1];
  40cc5c:	4c3b      	ldr	r4, [pc, #236]	; (40cd4c <_Z12menuMainViewh+0x6ac>)
  40cc5e:	f894 3ba4 	ldrb.w	r3, [r4, #2980]	; 0xba4
  40cc62:	9402      	str	r4, [sp, #8]
  40cc64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
        AUDIO_KEYPAD_UP();
      }
    break;
    */
    case EVT_KEY_LONG(KEY_MENU):// go to last menu
      pushMenu(lastPopMenu());
  40cc68:	f8d3 0a9c 	ldr.w	r0, [r3, #2716]	; 0xa9c
  40cc6c:	f7fa fc9e 	bl	4075ac <_Z8pushMenuPFvhE>
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  40cc70:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
  40cc74:	2263      	movs	r2, #99	; 0x63
  40cc76:	f36f 1305 	bfc	r3, #4, #2
  40cc7a:	f885 20a2 	strb.w	r2, [r5, #162]	; 0xa2
  40cc7e:	f885 30a0 	strb.w	r3, [r5, #160]	; 0xa0
  40cc82:	e54b      	b.n	40c71c <_Z12menuMainViewh+0x7c>
      g_eeGeneral.view = (event == EVT_KEY_BREAK(KEY_UP) ? (view_base == MAIN_VIEW_MAX ? 0 : view_base + 1) : (view_base == 0 ? MAIN_VIEW_MAX : view_base - 1));
      eeDirty(EE_GENERAL);
      AUDIO_KEYPAD_UP();
      break;
    case EVT_KEY_LONG(KEY_UP):
      chainMenu(menuProcStatistic);
  40cc84:	4832      	ldr	r0, [pc, #200]	; (40cd50 <_Z12menuMainViewh+0x6b0>)
  40cc86:	f7f9 fcdb 	bl	406640 <_Z9chainMenuPFvhE>
  40cc8a:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
  40cc8e:	4c2f      	ldr	r4, [pc, #188]	; (40cd4c <_Z12menuMainViewh+0x6ac>)
  40cc90:	f36f 1305 	bfc	r3, #4, #2
  40cc94:	2263      	movs	r2, #99	; 0x63
  40cc96:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
  40cc9a:	f885 20ab 	strb.w	r2, [r5, #171]	; 0xab
  40cc9e:	9402      	str	r4, [sp, #8]
  40cca0:	e53c      	b.n	40c71c <_Z12menuMainViewh+0x7c>
    case EVT_KEY_LONG(KEY_RIGHT):
      pushMenu(menuProcModelSelect);
      killEvents(event);
      break;
    case EVT_KEY_LONG(KEY_LEFT):
      pushMenu(menuProcSetup);
  40cca2:	482c      	ldr	r0, [pc, #176]	; (40cd54 <_Z12menuMainViewh+0x6b4>)
  40cca4:	f7fa fc82 	bl	4075ac <_Z8pushMenuPFvhE>
  40cca8:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
  40ccac:	4c27      	ldr	r4, [pc, #156]	; (40cd4c <_Z12menuMainViewh+0x6ac>)
  40ccae:	f36f 1305 	bfc	r3, #4, #2
  40ccb2:	2263      	movs	r2, #99	; 0x63
  40ccb4:	f885 30af 	strb.w	r3, [r5, #175]	; 0xaf
  40ccb8:	f885 20b1 	strb.w	r2, [r5, #177]	; 0xb1
  40ccbc:	9402      	str	r4, [sp, #8]
  40ccbe:	e52d      	b.n	40c71c <_Z12menuMainViewh+0x7c>
        resetTimer(0);
      }
      AUDIO_KEYPAD_UP();
      break;
    case EVT_KEY_LONG(KEY_EXIT):
      resetAll();
  40ccc0:	f7f7 fe72 	bl	4049a8 <_Z8resetAllv>
      AUDIO_KEYPAD_UP();
  40ccc4:	2003      	movs	r0, #3
  40ccc6:	f7f9 fc21 	bl	40650c <_Z13audioDefeventh>
  40ccca:	e525      	b.n	40c718 <_Z12menuMainViewh+0x78>
      pushMenu(lastPopMenu());
      killEvents(event);
      break;
    case EVT_KEY_BREAK(KEY_RIGHT):
    case EVT_KEY_BREAK(KEY_LEFT):
      if (view_base <= e_inputs) {
  40cccc:	9c04      	ldr	r4, [sp, #16]
  40ccce:	2c02      	cmp	r4, #2
  40ccd0:	f63f ad22 	bhi.w	40c718 <_Z12menuMainViewh+0x78>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40ccd4:	f895 29a8 	ldrb.w	r2, [r5, #2472]	; 0x9a8
        g_eeGeneral.view ^= ALTERNATE_VIEW;
  40ccd8:	9c05      	ldr	r4, [sp, #20]
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40ccda:	f8b5 39aa 	ldrh.w	r3, [r5, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40ccde:	f042 0201 	orr.w	r2, r2, #1
  40cce2:	f084 0110 	eor.w	r1, r4, #16
  40cce6:	e624      	b.n	40c932 <_Z12menuMainViewh+0x292>
      chainMenu(menuProcDebug);
#endif
      killEvents(event);
      break;
    case EVT_KEY_FIRST(KEY_EXIT):
      if(s_timerState[0]==TMR_BEEPING) {
  40cce8:	f895 39e8 	ldrb.w	r3, [r5, #2536]	; 0x9e8
  40ccec:	2b02      	cmp	r3, #2
  40ccee:	d027      	beq.n	40cd40 <_Z12menuMainViewh+0x6a0>
#if defined(ROTARY_ENCODERS)
      else if (s_warning) {
        s_warning = NULL;
      }
#endif
      else if (view == e_timer2) {
  40ccf0:	9c05      	ldr	r4, [sp, #20]
  40ccf2:	2c03      	cmp	r4, #3
  40ccf4:	d014      	beq.n	40cd20 <_Z12menuMainViewh+0x680>
uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  s_timerVal[idx] = g_model.timers[idx].val;
  40ccf6:	f895 2147 	ldrb.w	r2, [r5, #327]	; 0x147
  40ccfa:	f895 1148 	ldrb.w	r1, [r5, #328]	; 0x148

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  40ccfe:	2300      	movs	r3, #0
  s_timerVal[idx] = g_model.timers[idx].val;
  40cd00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  40cd04:	f885 39e8 	strb.w	r3, [r5, #2536]	; 0x9e8
  s_timerVal[idx] = g_model.timers[idx].val;
  40cd08:	f8a5 2908 	strh.w	r2, [r5, #2312]	; 0x908
  s_timerVal_10ms[idx] = 0 ;
  40cd0c:	f885 39ec 	strb.w	r3, [r5, #2540]	; 0x9ec
  40cd10:	4c0e      	ldr	r4, [pc, #56]	; (40cd4c <_Z12menuMainViewh+0x6ac>)
        resetTimer(1);
      }
      else {
        resetTimer(0);
      }
      AUDIO_KEYPAD_UP();
  40cd12:	2003      	movs	r0, #3
  40cd14:	f7f9 fbfa 	bl	40650c <_Z13audioDefeventh>
  40cd18:	9402      	str	r4, [sp, #8]
      break;
  40cd1a:	e4ff      	b.n	40c71c <_Z12menuMainViewh+0x7c>
      pushMenu(menuProcSetup);
      killEvents(event);
      break;
    case EVT_KEY_BREAK(KEY_UP):
    case EVT_KEY_BREAK(KEY_DOWN):
      g_eeGeneral.view = (event == EVT_KEY_BREAK(KEY_UP) ? (view_base == MAIN_VIEW_MAX ? 0 : view_base + 1) : (view_base == 0 ? MAIN_VIEW_MAX : view_base - 1));
  40cd1c:	2103      	movs	r1, #3
  40cd1e:	e602      	b.n	40c926 <_Z12menuMainViewh+0x286>
uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  s_timerVal[idx] = g_model.timers[idx].val;
  40cd20:	f8b5 014a 	ldrh.w	r0, [r5, #330]	; 0x14a

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  40cd24:	2300      	movs	r3, #0
  40cd26:	f885 39e9 	strb.w	r3, [r5, #2537]	; 0x9e9
  s_timerVal[idx] = g_model.timers[idx].val;
  40cd2a:	f8a5 090a 	strh.w	r0, [r5, #2314]	; 0x90a
  s_timerVal_10ms[idx] = 0 ;
  40cd2e:	f885 39ed 	strb.w	r3, [r5, #2541]	; 0x9ed
  40cd32:	e7ed      	b.n	40cd10 <_Z12menuMainViewh+0x670>
  40cd34:	1c61      	adds	r1, r4, #1
  40cd36:	2c03      	cmp	r4, #3
  40cd38:	f47f adf5 	bne.w	40c926 <_Z12menuMainViewh+0x286>
  40cd3c:	2100      	movs	r1, #0
  40cd3e:	e5f2      	b.n	40c926 <_Z12menuMainViewh+0x286>
#endif
      killEvents(event);
      break;
    case EVT_KEY_FIRST(KEY_EXIT):
      if(s_timerState[0]==TMR_BEEPING) {
        s_timerState[0] = TMR_STOPPED;
  40cd40:	2303      	movs	r3, #3
  40cd42:	f885 39e8 	strb.w	r3, [r5, #2536]	; 0x9e8
  40cd46:	e7e3      	b.n	40cd10 <_Z12menuMainViewh+0x670>
  40cd48:	00410bfc 	.word	0x00410bfc
  40cd4c:	20001200 	.word	0x20001200
  40cd50:	00406665 	.word	0x00406665
  40cd54:	004081f1 	.word	0x004081f1

0040cd58 <_Z18moveTrimsToOffsetsv>:
  STORE_MODELVARS;
  AUDIO_WARNING2();
}

void moveTrimsToOffsets() // copy state of 3 primary to subtrim
{
  40cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cd5c:	b093      	sub	sp, #76	; 0x4c
  int16_t zeros[NUM_CHNOUT];
  uint8_t phase = getFlightPhase();
  40cd5e:	f7f8 f80b 	bl	404d78 <_Z14getFlightPhasev>

  s_perout_mode = e_perout_mode_zeros;
  40cd62:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40ced4 <_Z18moveTrimsToOffsetsv+0x17c>
  40cd66:	2302      	movs	r3, #2
  40cd68:	f889 3afc 	strb.w	r3, [r9, #2812]	; 0xafc
}

void moveTrimsToOffsets() // copy state of 3 primary to subtrim
{
  int16_t zeros[NUM_CHNOUT];
  uint8_t phase = getFlightPhase();
  40cd6c:	9001      	str	r0, [sp, #4]

  s_perout_mode = e_perout_mode_zeros;
  perOut(phase); // do output loop - zero input sticks and trims
  40cd6e:	f7fa fe41 	bl	4079f4 <_Z6perOuth>
  40cd72:	f509 6742 	add.w	r7, r9, #3104	; 0xc20
  40cd76:	3714      	adds	r7, #20
  40cd78:	f10d 0806 	add.w	r8, sp, #6
  40cd7c:	4646      	mov	r6, r8
  40cd7e:	463d      	mov	r5, r7
  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40cd80:	2400      	movs	r4, #0
    zeros[i] = applyLimits(i, chans[i]);
  40cd82:	4620      	mov	r0, r4
  40cd84:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40cd88:	f7f3 ff0c 	bl	400ba4 <_Z11applyLimitshl>
  int16_t zeros[NUM_CHNOUT];
  uint8_t phase = getFlightPhase();

  s_perout_mode = e_perout_mode_zeros;
  perOut(phase); // do output loop - zero input sticks and trims
  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40cd8c:	3401      	adds	r4, #1
  40cd8e:	b2e4      	uxtb	r4, r4
  40cd90:	2c20      	cmp	r4, #32
    zeros[i] = applyLimits(i, chans[i]);
  40cd92:	f826 0f02 	strh.w	r0, [r6, #2]!
  int16_t zeros[NUM_CHNOUT];
  uint8_t phase = getFlightPhase();

  s_perout_mode = e_perout_mode_zeros;
  perOut(phase); // do output loop - zero input sticks and trims
  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40cd96:	d1f4      	bne.n	40cd82 <_Z18moveTrimsToOffsetsv+0x2a>
    zeros[i] = applyLimits(i, chans[i]);
  }

  s_perout_mode = e_perout_mode_trims;
  40cd98:	2301      	movs	r3, #1
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;
  40cd9a:	4e4d      	ldr	r6, [pc, #308]	; (40ced0 <_Z18moveTrimsToOffsetsv+0x178>)
  perOut(phase); // do output loop - zero input sticks and trims
  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    zeros[i] = applyLimits(i, chans[i]);
  }

  s_perout_mode = e_perout_mode_trims;
  40cd9c:	f889 3afc 	strb.w	r3, [r9, #2812]	; 0xafc
  perOut(phase); // do output loop - only trims
  40cda0:	9801      	ldr	r0, [sp, #4]
  s_perout_mode = e_perout_mode_normal;
  40cda2:	2400      	movs	r4, #0
  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    zeros[i] = applyLimits(i, chans[i]);
  }

  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  40cda4:	f7fa fe26 	bl	4079f4 <_Z6perOuth>
  40cda8:	f5a6 759e 	sub.w	r5, r6, #316	; 0x13c
  s_perout_mode = e_perout_mode_normal;
  40cdac:	f889 4afc 	strb.w	r4, [r9, #2812]	; 0xafc
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  40cdb0:	f240 39e7 	movw	r9, #999	; 0x3e7

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    int16_t output = applyLimits(i, chans[i]) - zeros[i];
  40cdb4:	f857 1f04 	ldr.w	r1, [r7, #4]!
  40cdb8:	b2e0      	uxtb	r0, r4
  40cdba:	f7f3 fef3 	bl	400ba4 <_Z11applyLimitshl>
    int16_t v = g_model.limitData[i].offset;
  40cdbe:	00a2      	lsls	r2, r4, #2
  40cdc0:	1911      	adds	r1, r2, r4
  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    int16_t output = applyLimits(i, chans[i]) - zeros[i];
  40cdc2:	f838 cf02 	ldrh.w	ip, [r8, #2]!
    int16_t v = g_model.limitData[i].offset;
  40cdc6:	1869      	adds	r1, r5, r1
  40cdc8:	f891 e514 	ldrb.w	lr, [r1, #1300]	; 0x514
  40cdcc:	f891 a515 	ldrb.w	sl, [r1, #1301]	; 0x515
  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    int16_t output = applyLimits(i, chans[i]) - zeros[i];
  40cdd0:	ebcc 0c00 	rsb	ip, ip, r0
    int16_t v = g_model.limitData[i].offset;
    if (g_model.limitData[i].revert) output = -output;
  40cdd4:	f896 13d7 	ldrb.w	r1, [r6, #983]	; 0x3d7
  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    int16_t output = applyLimits(i, chans[i]) - zeros[i];
  40cdd8:	fa1f fc8c 	uxth.w	ip, ip
    int16_t v = g_model.limitData[i].offset;
    if (g_model.limitData[i].revert) output = -output;
  40cddc:	f1cc 0000 	rsb	r0, ip, #0
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    int16_t output = applyLimits(i, chans[i]) - zeros[i];
    int16_t v = g_model.limitData[i].offset;
  40cde0:	ea4e 2e0a 	orr.w	lr, lr, sl, lsl #8
  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    int16_t output = applyLimits(i, chans[i]) - zeros[i];
  40cde4:	fa1f f38c 	uxth.w	r3, ip
    int16_t v = g_model.limitData[i].offset;
    if (g_model.limitData[i].revert) output = -output;
  40cde8:	b101      	cbz	r1, 40cdec <_Z18moveTrimsToOffsetsv+0x94>
  40cdea:	b283      	uxth	r3, r0
    v += output;
  40cdec:	4473      	add	r3, lr
  40cdee:	b29b      	uxth	r3, r3
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  40cdf0:	b219      	sxth	r1, r3
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
  40cdf2:	4549      	cmp	r1, r9
  40cdf4:	bfc8      	it	gt
  40cdf6:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  40cdfa:	f511 7f7a 	cmn.w	r1, #1000	; 0x3e8
  40cdfe:	bfb8      	it	lt
  40ce00:	f64f 4318 	movwlt	r3, #64536	; 0xfc18
    // TODO * 125 / 128 ?
    g_model.limitData[i].offset = limit((int16_t)-1000, (int16_t)v, (int16_t)1000); // make sure the offset doesn't go haywire
  40ce04:	1912      	adds	r2, r2, r4
  40ce06:	3401      	adds	r4, #1
  40ce08:	18aa      	adds	r2, r5, r2
  40ce0a:	0a19      	lsrs	r1, r3, #8
  40ce0c:	3605      	adds	r6, #5

  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40ce0e:	2c20      	cmp	r4, #32
    int16_t output = applyLimits(i, chans[i]) - zeros[i];
    int16_t v = g_model.limitData[i].offset;
    if (g_model.limitData[i].revert) output = -output;
    v += output;
    // TODO * 125 / 128 ?
    g_model.limitData[i].offset = limit((int16_t)-1000, (int16_t)v, (int16_t)1000); // make sure the offset doesn't go haywire
  40ce10:	f882 3514 	strb.w	r3, [r2, #1300]	; 0x514
  40ce14:	f882 1515 	strb.w	r1, [r2, #1301]	; 0x515

  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40ce18:	d1cc      	bne.n	40cdb4 <_Z18moveTrimsToOffsetsv+0x5c>
  40ce1a:	f04f 0a00 	mov.w	sl, #0
  40ce1e:	fa5f f78a 	uxtb.w	r7, sl
    g_model.limitData[i].offset = limit((int16_t)-1000, (int16_t)v, (int16_t)1000); // make sure the offset doesn't go haywire
  }

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
  40ce22:	2f02      	cmp	r7, #2

  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40ce24:	f04f 0b01 	mov.w	fp, #1
    g_model.limitData[i].offset = limit((int16_t)-1000, (int16_t)v, (int16_t)1000); // make sure the offset doesn't go haywire
  }

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
  40ce28:	d03a      	beq.n	40cea0 <_Z18moveTrimsToOffsetsv+0x148>
      int16_t original_trim = getTrimValue(phase, i);
  40ce2a:	9801      	ldr	r0, [sp, #4]
  40ce2c:	4639      	mov	r1, r7
  40ce2e:	f7f4 f87f 	bl	400f30 <_Z12getTrimValuehh>
  else {
    PhaseData *p = phaseaddress(phase);
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  40ce32:	4b27      	ldr	r3, [pc, #156]	; (40ced0 <_Z18moveTrimsToOffsetsv+0x178>)
  }

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
      int16_t original_trim = getTrimValue(phase, i);
  40ce34:	4681      	mov	r9, r0
  40ce36:	2400      	movs	r4, #0
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  40ce38:	eb05 0687 	add.w	r6, r5, r7, lsl #2
  else {
    PhaseData *p = phaseaddress(phase);
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  40ce3c:	eb03 0847 	add.w	r8, r3, r7, lsl #1
  40ce40:	e00b      	b.n	40ce5a <_Z18moveTrimsToOffsetsv+0x102>

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  40ce42:	f993 2000 	ldrsb.w	r2, [r3]
  40ce46:	b292      	uxth	r2, r2
    if (i!=THR_STICK || !g_model.thrTrim) {
      int16_t original_trim = getTrimValue(phase, i);
      for (uint8_t phase=0; phase<MAX_PHASES; phase++) {
        int16_t trim = getRawTrimValue(phase, i);
        if (trim <= TRIM_EXTENDED_MAX)
          setTrimValue(phase, i, trim - original_trim);
  40ce48:	ebc9 0202 	rsb	r2, r9, r2
  40ce4c:	b212      	sxth	r2, r2
  40ce4e:	4639      	mov	r1, r7
  40ce50:	3401      	adds	r4, #1
  40ce52:	f7f4 f801 	bl	400e58 <_Z12setTrimValuehhs>

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
      int16_t original_trim = getTrimValue(phase, i);
      for (uint8_t phase=0; phase<MAX_PHASES; phase++) {
  40ce56:	2c09      	cmp	r4, #9
  40ce58:	d015      	beq.n	40ce86 <_Z18moveTrimsToOffsetsv+0x12e>
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  40ce5a:	f8d6 3998 	ldr.w	r3, [r6, #2456]	; 0x998
  }

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
      int16_t original_trim = getTrimValue(phase, i);
  40ce5e:	b2e0      	uxtb	r0, r4
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  40ce60:	2b00      	cmp	r3, #0
  40ce62:	d1ee      	bne.n	40ce42 <_Z18moveTrimsToOffsetsv+0xea>
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  40ce64:	0123      	lsls	r3, r4, #4
  40ce66:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  40ce6a:	eb08 0103 	add.w	r1, r8, r3
  40ce6e:	784a      	ldrb	r2, [r1, #1]
  40ce70:	f818 3003 	ldrb.w	r3, [r8, r3]
  40ce74:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
      int16_t original_trim = getTrimValue(phase, i);
      for (uint8_t phase=0; phase<MAX_PHASES; phase++) {
        int16_t trim = getRawTrimValue(phase, i);
        if (trim <= TRIM_EXTENDED_MAX)
  40ce78:	b213      	sxth	r3, r2
  40ce7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40ce7e:	dde3      	ble.n	40ce48 <_Z18moveTrimsToOffsetsv+0xf0>
          setTrimValue(phase, i, trim - original_trim);
  40ce80:	3401      	adds	r4, #1

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
      int16_t original_trim = getTrimValue(phase, i);
      for (uint8_t phase=0; phase<MAX_PHASES; phase++) {
  40ce82:	2c09      	cmp	r4, #9
  40ce84:	d1e9      	bne.n	40ce5a <_Z18moveTrimsToOffsetsv+0x102>
    // TODO * 125 / 128 ?
    g_model.limitData[i].offset = limit((int16_t)-1000, (int16_t)v, (int16_t)1000); // make sure the offset doesn't go haywire
  }

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
  40ce86:	f1bb 0f04 	cmp.w	fp, #4
  40ce8a:	d011      	beq.n	40ceb0 <_Z18moveTrimsToOffsetsv+0x158>

  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40ce8c:	f10a 0a01 	add.w	sl, sl, #1
  40ce90:	fa5f f78a 	uxtb.w	r7, sl
  40ce94:	f10b 0b01 	add.w	fp, fp, #1
    g_model.limitData[i].offset = limit((int16_t)-1000, (int16_t)v, (int16_t)1000); // make sure the offset doesn't go haywire
  }

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
  40ce98:	2f02      	cmp	r7, #2

  s_perout_mode = e_perout_mode_trims;
  perOut(phase); // do output loop - only trims
  s_perout_mode = e_perout_mode_normal;

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
  40ce9a:	fa5f fb8b 	uxtb.w	fp, fp
    g_model.limitData[i].offset = limit((int16_t)-1000, (int16_t)v, (int16_t)1000); // make sure the offset doesn't go haywire
  }

  // reset all trims, except throttle (if throttle trim)
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK || !g_model.thrTrim) {
  40ce9e:	d1c4      	bne.n	40ce2a <_Z18moveTrimsToOffsetsv+0xd2>
  40cea0:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
  40cea4:	f003 0308 	and.w	r3, r3, #8
  40cea8:	b2db      	uxtb	r3, r3
  40ceaa:	2b00      	cmp	r3, #0
  40ceac:	d1ee      	bne.n	40ce8c <_Z18moveTrimsToOffsetsv+0x134>
  40ceae:	e7bc      	b.n	40ce2a <_Z18moveTrimsToOffsetsv+0xd2>
  40ceb0:	f895 29a8 	ldrb.w	r2, [r5, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40ceb4:	f8b5 39aa 	ldrh.w	r3, [r5, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40ceb8:	f042 0202 	orr.w	r2, r2, #2
      }
    }
  }

  STORE_MODELVARS;
  AUDIO_WARNING2();
  40cebc:	2008      	movs	r0, #8
  40cebe:	f885 29a8 	strb.w	r2, [r5, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40cec2:	f8a5 39ac 	strh.w	r3, [r5, #2476]	; 0x9ac
}
  40cec6:	b013      	add	sp, #76	; 0x4c
  40cec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
  }

  STORE_MODELVARS;
  AUDIO_WARNING2();
  40cecc:	f7f9 bb1e 	b.w	40650c <_Z13audioDefeventh>
  40ced0:	20000244 	.word	0x20000244
  40ced4:	20001200 	.word	0x20001200

0040ced8 <_Z14menuProcLimitsh>:
{
  return menuProcExpoMix(0, event);
}

void menuProcLimits(uint8_t event)
{
  40ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#define LIMITS_ITEMS_COUNT 4
#else
#define LIMITS_ITEMS_COUNT 3
#endif

  MENU(STR_MENULIMITS, menuTabModel, e_Limits, 1+NUM_CHNOUT+1, {0, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, 0});
  40cedc:	4ca2      	ldr	r4, [pc, #648]	; (40d168 <_Z14menuProcLimitsh+0x290>)
{
  return menuProcExpoMix(0, event);
}

void menuProcLimits(uint8_t event)
{
  40cede:	b08b      	sub	sp, #44	; 0x2c
#define LIMITS_ITEMS_COUNT 4
#else
#define LIMITS_ITEMS_COUNT 3
#endif

  MENU(STR_MENULIMITS, menuTabModel, e_Limits, 1+NUM_CHNOUT+1, {0, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, 0});
  40cee0:	2511      	movs	r5, #17
  40cee2:	9501      	str	r5, [sp, #4]
  40cee4:	2105      	movs	r1, #5
  40cee6:	2521      	movs	r5, #33	; 0x21
  40cee8:	f5a4 725f 	sub.w	r2, r4, #892	; 0x37c
  40ceec:	230b      	movs	r3, #11
{
  return menuProcExpoMix(0, event);
}

void menuProcLimits(uint8_t event)
{
  40ceee:	9006      	str	r0, [sp, #24]
#define LIMITS_ITEMS_COUNT 4
#else
#define LIMITS_ITEMS_COUNT 3
#endif

  MENU(STR_MENULIMITS, menuTabModel, e_Limits, 1+NUM_CHNOUT+1, {0, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, 0});
  40cef0:	9400      	str	r4, [sp, #0]
  40cef2:	9502      	str	r5, [sp, #8]
  40cef4:	f7fb f810 	bl	407f18 <_Z5checkhhPKPFvhEhPKhhh>
  40cef8:	b910      	cbnz	r0, 40cf00 <_Z14menuProcLimitsh+0x28>
          break;
#endif
      }
    }
  }
}
  40cefa:	b00b      	add	sp, #44	; 0x2c
  40cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#define LIMITS_ITEMS_COUNT 4
#else
#define LIMITS_ITEMS_COUNT 3
#endif

  MENU(STR_MENULIMITS, menuTabModel, e_Limits, 1+NUM_CHNOUT+1, {0, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, LIMITS_ITEMS_COUNT, 0});
  40cf00:	2000      	movs	r0, #0
  40cf02:	4601      	mov	r1, r0
  40cf04:	2302      	movs	r3, #2
  40cf06:	f104 0214 	add.w	r2, r4, #20
  40cf0a:	f7f5 fcd5 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  int8_t sub = m_posVert - 1;
  40cf0e:	f241 2000 	movw	r0, #4608	; 0x1200
  40cf12:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40cf16:	f890 3c34 	ldrb.w	r3, [r0, #3124]	; 0xc34
  40cf1a:	2708      	movs	r7, #8
  40cf1c:	3b01      	subs	r3, #1
  40cf1e:	b25b      	sxtb	r3, r3
    lcd_outdezAtt(12*FW, 0, PPM_CENTER+g_model.servoCenter[sub]+g_chans512[sub]/2, 0);
    lcd_puts(12*FW, 0, STR_US);
  }
#endif

  for (uint8_t i=0; i<7; i++) {
  40cf20:	f04f 0b00 	mov.w	fp, #0
  40cf24:	9305      	str	r3, [sp, #20]
    uint8_t y = (i+1)*FH;
    uint8_t k = i+s_pgOfs;
  40cf26:	f241 2100 	movw	r1, #4608	; 0x1200
  40cf2a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40cf2e:	f891 6e7d 	ldrb.w	r6, [r1, #3709]	; 0xe7d
  40cf32:	445e      	add	r6, fp
  40cf34:	b2f6      	uxtb	r6, r6

    if (k==NUM_CHNOUT) {
  40cf36:	2e20      	cmp	r6, #32
  40cf38:	f000 811e 	beq.w	40d178 <_Z14menuProcLimitsh+0x2a0>
        moveTrimsToOffsets(); // if highlighted and menu pressed - move trims to offsets
      }
      return;
    }

    LimitData *ld = limitaddress(k) ;
  40cf3c:	498b      	ldr	r1, [pc, #556]	; (40d16c <_Z14menuProcLimitsh+0x294>)
  40cf3e:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  40cf42:	194d      	adds	r5, r1, r5
  40cf44:	f505 7574 	add.w	r5, r5, #976	; 0x3d0
  40cf48:	3505      	adds	r5, #5
#ifdef PPM_CENTER_ADJUSTABLE
#define LIMITS_MAX_POS 16*FW
    int8_t limit = ((g_model.extendedLimits && !g_model.servoCenter[k]) ? 125 : 100);
#else
#define LIMITS_MAX_POS 17*FW
    int16_t v = (ld->revert) ? -ld->offset : ld->offset;
  40cf4a:	78ea      	ldrb	r2, [r5, #3]
  40cf4c:	7929      	ldrb	r1, [r5, #4]
  40cf4e:	78ab      	ldrb	r3, [r5, #2]
  40cf50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40cf54:	b10b      	cbz	r3, 40cf5a <_Z14menuProcLimitsh+0x82>
  40cf56:	4252      	negs	r2, r2
  40cf58:	b292      	uxth	r2, r2

    char swVal = '-';  // '-', '<', '>'
    if((g_chans512[k] - v) > 50) swVal = (ld->revert ? 127 : 126); // Switch to raw inputs?  - remove trim!
  40cf5a:	f8df a218 	ldr.w	sl, [pc, #536]	; 40d174 <_Z14menuProcLimitsh+0x29c>
  40cf5e:	0070      	lsls	r0, r6, #1
  40cf60:	eb0a 0100 	add.w	r1, sl, r0
  40cf64:	f9b1 19f0 	ldrsh.w	r1, [r1, #2544]	; 0x9f0
  40cf68:	b212      	sxth	r2, r2
  40cf6a:	1a8a      	subs	r2, r1, r2
  40cf6c:	2b00      	cmp	r3, #0
  40cf6e:	bf14      	ite	ne
  40cf70:	f04f 087f 	movne.w	r8, #127	; 0x7f
  40cf74:	f04f 087e 	moveq.w	r8, #126	; 0x7e
  40cf78:	2a32      	cmp	r2, #50	; 0x32
  40cf7a:	9007      	str	r0, [sp, #28]
  40cf7c:	dc0a      	bgt.n	40cf94 <_Z14menuProcLimitsh+0xbc>
    if((g_chans512[k] - v) < -50) swVal = (ld->revert ? 126 : 127);
  40cf7e:	3232      	adds	r2, #50	; 0x32
    int8_t limit = ((g_model.extendedLimits && !g_model.servoCenter[k]) ? 125 : 100);
#else
#define LIMITS_MAX_POS 17*FW
    int16_t v = (ld->revert) ? -ld->offset : ld->offset;

    char swVal = '-';  // '-', '<', '>'
  40cf80:	bfa8      	it	ge
  40cf82:	f04f 082d 	movge.w	r8, #45	; 0x2d
    if((g_chans512[k] - v) > 50) swVal = (ld->revert ? 127 : 126); // Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal = (ld->revert ? 126 : 127);
  40cf86:	da05      	bge.n	40cf94 <_Z14menuProcLimitsh+0xbc>
  40cf88:	2b00      	cmp	r3, #0
  40cf8a:	bf0c      	ite	eq
  40cf8c:	f04f 087f 	moveq.w	r8, #127	; 0x7f
  40cf90:	f04f 087e 	movne.w	r8, #126	; 0x7e
    putsChn(0, y, k+1, 0);
  40cf94:	1c74      	adds	r4, r6, #1
  40cf96:	2000      	movs	r0, #0
  40cf98:	b2e4      	uxtb	r4, r4
  40cf9a:	4622      	mov	r2, r4
  40cf9c:	4603      	mov	r3, r0
  40cf9e:	4639      	mov	r1, r7
  40cfa0:	f7f6 fa6c 	bl	40347c <_Z7putsChnhhhh>
    lcd_putcAtt(12*FW+5, y, swVal, 0);
  40cfa4:	204d      	movs	r0, #77	; 0x4d
  40cfa6:	4642      	mov	r2, r8
  40cfa8:	2300      	movs	r3, #0
  40cfaa:	4639      	mov	r1, r7
  40cfac:	f7f5 fb5e 	bl	40266c <_Z11lcd_putcAtthhhh>

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
  40cfb0:	f89a 314d 	ldrb.w	r3, [sl, #333]	; 0x14d
#endif

    putsChn(0, y, k+1, 0);
  40cfb4:	2000      	movs	r0, #0
    if((g_chans512[k] - v) > 50) swVal = (ld->revert ? 127 : 126); // Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal = (ld->revert ? 126 : 127);
    putsChn(0, y, k+1, 0);
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
  40cfb6:	f003 0320 	and.w	r3, r3, #32
  40cfba:	b2db      	uxtb	r3, r3
  40cfbc:	4283      	cmp	r3, r0
  40cfbe:	bf0c      	ite	eq
  40cfc0:	2364      	moveq	r3, #100	; 0x64
  40cfc2:	237d      	movne	r3, #125	; 0x7d
#endif

    putsChn(0, y, k+1, 0);
  40cfc4:	4622      	mov	r2, r4
    if((g_chans512[k] - v) > 50) swVal = (ld->revert ? 127 : 126); // Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal = (ld->revert ? 126 : 127);
    putsChn(0, y, k+1, 0);
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
  40cfc6:	9308      	str	r3, [sp, #32]
#endif

    putsChn(0, y, k+1, 0);
  40cfc8:	4639      	mov	r1, r7
  40cfca:	4603      	mov	r3, r0
  40cfcc:	f7f6 fa56 	bl	40347c <_Z7putsChnhhhh>
          lcd_outdezAtt(12*FW+1, y, (((int16_t)ld->min-100)*128) / 25, attr | INFLIGHT(ld->min));
#else
          lcd_outdezAtt(12*FW, y, (int8_t)(ld->min-100), attr | INFLIGHT(ld->min));
#endif
          if (active) {
            CHECK_INFLIGHT_INCDEC_MODELVAR(event, ld->min, -limit, 25, +100, STR_MINLIMIT);
  40cfd0:	9908      	ldr	r1, [sp, #32]
#endif

    putsChn(0, y, k+1, 0);

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40cfd2:	9a05      	ldr	r2, [sp, #20]
          lcd_outdezAtt(12*FW+1, y, (((int16_t)ld->min-100)*128) / 25, attr | INFLIGHT(ld->min));
#else
          lcd_outdezAtt(12*FW, y, (int8_t)(ld->min-100), attr | INFLIGHT(ld->min));
#endif
          if (active) {
            CHECK_INFLIGHT_INCDEC_MODELVAR(event, ld->min, -limit, 25, +100, STR_MINLIMIT);
  40cfd4:	424b      	negs	r3, r1
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
#endif

    putsChn(0, y, k+1, 0);
  40cfd6:	2401      	movs	r4, #1
          lcd_outdezAtt(12*FW+1, y, (((int16_t)ld->min-100)*128) / 25, attr | INFLIGHT(ld->min));
#else
          lcd_outdezAtt(12*FW, y, (int8_t)(ld->min-100), attr | INFLIGHT(ld->min));
#endif
          if (active) {
            CHECK_INFLIGHT_INCDEC_MODELVAR(event, ld->min, -limit, 25, +100, STR_MINLIMIT);
  40cfd8:	b25b      	sxtb	r3, r3
  40cfda:	46b0      	mov	r8, r6
  40cfdc:	9309      	str	r3, [sp, #36]	; 0x24
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
#endif

    putsChn(0, y, k+1, 0);
  40cfde:	1e63      	subs	r3, r4, #1

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40cfe0:	4590      	cmp	r8, r2
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
#endif

    putsChn(0, y, k+1, 0);
  40cfe2:	b2db      	uxtb	r3, r3

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40cfe4:	d04a      	beq.n	40d07c <_Z14menuProcLimitsh+0x1a4>
  40cfe6:	2600      	movs	r6, #0
      uint8_t active = (attr && (s_editMode>0 || p1valdiff)) ;
      switch(j)
  40cfe8:	2b02      	cmp	r3, #2
#endif

    putsChn(0, y, k+1, 0);

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40cfea:	f04f 0900 	mov.w	r9, #0
      uint8_t active = (attr && (s_editMode>0 || p1valdiff)) ;
      switch(j)
  40cfee:	d057      	beq.n	40d0a0 <_Z14menuProcLimitsh+0x1c8>
  40cff0:	2b03      	cmp	r3, #3
  40cff2:	d06d      	beq.n	40d0d0 <_Z14menuProcLimitsh+0x1f8>
  40cff4:	2b01      	cmp	r3, #1
  40cff6:	f000 808b 	beq.w	40d110 <_Z14menuProcLimitsh+0x238>
      {
        case 0:
#ifdef PPM_LIMITS_UNIT_US
          lcd_outdezAtt(  8*FW, y,  ((int32_t)ld->offset*128) / 25, attr|PREC1);
#else
          lcd_outdezAtt(  8*FW, y,  ld->offset, attr|PREC1);
  40cffa:	7929      	ldrb	r1, [r5, #4]
  40cffc:	78ea      	ldrb	r2, [r5, #3]
  40cffe:	f046 0320 	orr.w	r3, r6, #32
  40d002:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40d006:	b212      	sxth	r2, r2
  40d008:	2030      	movs	r0, #48	; 0x30
  40d00a:	4639      	mov	r1, r7
  40d00c:	f7f5 ff14 	bl	402e38 <_Z13lcd_outdezAtthhsh>
#endif
          if (active) {
  40d010:	f1b9 0f00 	cmp.w	r9, #0
  40d014:	f040 8092 	bne.w	40d13c <_Z14menuProcLimitsh+0x264>
            ld->offset = checkIncDec(event, ld->offset, -1000, 1000, EE_MODEL|NO_INCDEC_MARKS);
          }
          else if (attr && event==EVT_KEY_LONG(KEY_MENU)) {
  40d018:	9a06      	ldr	r2, [sp, #24]
  40d01a:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
  40d01e:	424b      	negs	r3, r1
  40d020:	eb43 0301 	adc.w	r3, r3, r1
  40d024:	2e00      	cmp	r6, #0
  40d026:	bf0c      	ite	eq
  40d028:	2600      	moveq	r6, #0
  40d02a:	f003 0601 	andne.w	r6, r3, #1
  40d02e:	b1e6      	cbz	r6, 40d06a <_Z14menuProcLimitsh+0x192>
            int16_t zero = g_chans512[k];
  40d030:	9807      	ldr	r0, [sp, #28]
            ld->offset = (ld->revert) ? -zero : zero;
  40d032:	78aa      	ldrb	r2, [r5, #2]
#endif
          if (active) {
            ld->offset = checkIncDec(event, ld->offset, -1000, 1000, EE_MODEL|NO_INCDEC_MARKS);
          }
          else if (attr && event==EVT_KEY_LONG(KEY_MENU)) {
            int16_t zero = g_chans512[k];
  40d034:	eb0a 0300 	add.w	r3, sl, r0
  40d038:	f8b3 39f0 	ldrh.w	r3, [r3, #2544]	; 0x9f0
            ld->offset = (ld->revert) ? -zero : zero;
  40d03c:	b10a      	cbz	r2, 40d042 <_Z14menuProcLimitsh+0x16a>
  40d03e:	425b      	negs	r3, r3
  40d040:	b29b      	uxth	r3, r3
  40d042:	0a1a      	lsrs	r2, r3, #8
  40d044:	70eb      	strb	r3, [r5, #3]
  40d046:	712a      	strb	r2, [r5, #4]
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40d048:	f89a 29a8 	ldrb.w	r2, [sl, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40d04c:	f8ba 39aa 	ldrh.w	r3, [sl, #2474]	; 0x9aa
            s_editMode = 0;
  40d050:	f241 2000 	movw	r0, #4608	; 0x1200
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40d054:	f042 0202 	orr.w	r2, r2, #2
  40d058:	2100      	movs	r1, #0
  40d05a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40d05e:	f880 1c2c 	strb.w	r1, [r0, #3116]	; 0xc2c
  40d062:	f88a 29a8 	strb.w	r2, [sl, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40d066:	f8aa 39ac 	strh.w	r3, [sl, #2476]	; 0x9ac
    int8_t limit = (g_model.extendedLimits ? 125 : 100);
#endif

    putsChn(0, y, k+1, 0);

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
  40d06a:	2c04      	cmp	r4, #4
  40d06c:	d045      	beq.n	40d0fa <_Z14menuProcLimitsh+0x222>
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
#endif

    putsChn(0, y, k+1, 0);
  40d06e:	3401      	adds	r4, #1

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40d070:	9a05      	ldr	r2, [sp, #20]
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
#endif

    putsChn(0, y, k+1, 0);
  40d072:	b2e4      	uxtb	r4, r4
  40d074:	1e63      	subs	r3, r4, #1

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40d076:	4590      	cmp	r8, r2
    lcd_putcAtt(12*FW+5, y, swVal, 0);

    int8_t limit = (g_model.extendedLimits ? 125 : 100);
#endif

    putsChn(0, y, k+1, 0);
  40d078:	b2db      	uxtb	r3, r3

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40d07a:	d1b4      	bne.n	40cfe6 <_Z14menuProcLimitsh+0x10e>
  40d07c:	f241 2000 	movw	r0, #4608	; 0x1200
  40d080:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40d084:	f890 2c35 	ldrb.w	r2, [r0, #3125]	; 0xc35
  40d088:	429a      	cmp	r2, r3
  40d08a:	d1ac      	bne.n	40cfe6 <_Z14menuProcLimitsh+0x10e>
  40d08c:	f990 2c2c 	ldrsb.w	r2, [r0, #3116]	; 0xc2c
  40d090:	2602      	movs	r6, #2
  40d092:	2a00      	cmp	r2, #0
  40d094:	dda8      	ble.n	40cfe8 <_Z14menuProcLimitsh+0x110>
  40d096:	2603      	movs	r6, #3
      uint8_t active = (attr && (s_editMode>0 || p1valdiff)) ;
      switch(j)
  40d098:	2b02      	cmp	r3, #2
#endif

    putsChn(0, y, k+1, 0);

    for (uint8_t j=0; j<=LIMITS_ITEMS_COUNT; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? ((s_editMode>0) ? BLINK|INVERS : INVERS) : 0);
  40d09a:	f04f 0901 	mov.w	r9, #1
      uint8_t active = (attr && (s_editMode>0 || p1valdiff)) ;
      switch(j)
  40d09e:	d1a7      	bne.n	40cff0 <_Z14menuProcLimitsh+0x118>
          break;
        case 2:
#ifdef PPM_LIMITS_UNIT_US
          lcd_outdezAtt(16*FW, y, (((int16_t)ld->max+100)*128) / 25, attr | INFLIGHT(ld->max));
#else
          lcd_outdezAtt(LIMITS_MAX_POS, y, (int8_t)(ld->max+100), attr | INFLIGHT(ld->max));
  40d0a0:	786a      	ldrb	r2, [r5, #1]
  40d0a2:	2066      	movs	r0, #102	; 0x66
  40d0a4:	3264      	adds	r2, #100	; 0x64
  40d0a6:	b252      	sxtb	r2, r2
  40d0a8:	4639      	mov	r1, r7
  40d0aa:	4633      	mov	r3, r6
  40d0ac:	f7f5 fec4 	bl	402e38 <_Z13lcd_outdezAtthhsh>
#endif
          if (active) {
  40d0b0:	f1b9 0f00 	cmp.w	r9, #0
  40d0b4:	d0d9      	beq.n	40d06a <_Z14menuProcLimitsh+0x192>
            CHECK_INFLIGHT_INCDEC_MODELVAR(event, ld->max, -25, limit, -100, STR_MAXLIMIT);
  40d0b6:	7869      	ldrb	r1, [r5, #1]
  40d0b8:	9a08      	ldr	r2, [sp, #32]
  40d0ba:	3164      	adds	r1, #100	; 0x64
  40d0bc:	b253      	sxtb	r3, r2
  40d0be:	b249      	sxtb	r1, r1
  40d0c0:	9806      	ldr	r0, [sp, #24]
  40d0c2:	f06f 0218 	mvn.w	r2, #24
  40d0c6:	f7fa f8cf 	bl	407268 <_Z16checkIncDecModelhaaa>
  40d0ca:	3864      	subs	r0, #100	; 0x64
  40d0cc:	7068      	strb	r0, [r5, #1]
  40d0ce:	e7ce      	b.n	40d06e <_Z14menuProcLimitsh+0x196>
          break;
        case 3:
#ifdef PPM_CENTER_ADJUSTABLE
          lcd_putcAtt(17*FW-2, y, ld->revert ? 127 : 126, attr);
#else
          lcd_putsiAtt(18*FW, y, STR_MMMINV, ld->revert, attr);
  40d0d0:	78ab      	ldrb	r3, [r5, #2]
  40d0d2:	206c      	movs	r0, #108	; 0x6c
  40d0d4:	4639      	mov	r1, r7
  40d0d6:	4a26      	ldr	r2, [pc, #152]	; (40d170 <_Z14menuProcLimitsh+0x298>)
  40d0d8:	9600      	str	r6, [sp, #0]
  40d0da:	f7f5 fbc9 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
#endif
          if (active) {
  40d0de:	f1b9 0f00 	cmp.w	r9, #0
  40d0e2:	d0c2      	beq.n	40d06a <_Z14menuProcLimitsh+0x192>
            CHECK_INCDEC_MODELVAR(event, ld->revert, 0, 1);
  40d0e4:	2200      	movs	r2, #0
  40d0e6:	2301      	movs	r3, #1
  40d0e8:	f995 1002 	ldrsb.w	r1, [r5, #2]
  40d0ec:	9806      	ldr	r0, [sp, #24]
  40d0ee:	f7fa f8bb 	bl	407268 <_Z16checkIncDecModelhaaa>
  40d0f2:	3000      	adds	r0, #0
  40d0f4:	bf18      	it	ne
  40d0f6:	2001      	movne	r0, #1
  40d0f8:	70a8      	strb	r0, [r5, #2]
    lcd_outdezAtt(12*FW, 0, PPM_CENTER+g_model.servoCenter[sub]+g_chans512[sub]/2, 0);
    lcd_puts(12*FW, 0, STR_US);
  }
#endif

  for (uint8_t i=0; i<7; i++) {
  40d0fa:	f10b 0b01 	add.w	fp, fp, #1
  40d0fe:	fa5f fb8b 	uxtb.w	fp, fp
  40d102:	3708      	adds	r7, #8
  40d104:	f1bb 0f07 	cmp.w	fp, #7
  40d108:	b2ff      	uxtb	r7, r7
  40d10a:	f47f af0c 	bne.w	40cf26 <_Z14menuProcLimitsh+0x4e>
  40d10e:	e6f4      	b.n	40cefa <_Z14menuProcLimitsh+0x22>
          break;
        case 1:
#ifdef PPM_LIMITS_UNIT_US
          lcd_outdezAtt(12*FW+1, y, (((int16_t)ld->min-100)*128) / 25, attr | INFLIGHT(ld->min));
#else
          lcd_outdezAtt(12*FW, y, (int8_t)(ld->min-100), attr | INFLIGHT(ld->min));
  40d110:	782a      	ldrb	r2, [r5, #0]
  40d112:	2048      	movs	r0, #72	; 0x48
  40d114:	3a64      	subs	r2, #100	; 0x64
  40d116:	b252      	sxtb	r2, r2
  40d118:	4639      	mov	r1, r7
  40d11a:	4633      	mov	r3, r6
  40d11c:	f7f5 fe8c 	bl	402e38 <_Z13lcd_outdezAtthhsh>
#endif
          if (active) {
  40d120:	f1b9 0f00 	cmp.w	r9, #0
  40d124:	d0a1      	beq.n	40d06a <_Z14menuProcLimitsh+0x192>
            CHECK_INFLIGHT_INCDEC_MODELVAR(event, ld->min, -limit, 25, +100, STR_MINLIMIT);
  40d126:	7829      	ldrb	r1, [r5, #0]
  40d128:	9806      	ldr	r0, [sp, #24]
  40d12a:	3964      	subs	r1, #100	; 0x64
  40d12c:	b249      	sxtb	r1, r1
  40d12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d130:	2319      	movs	r3, #25
  40d132:	f7fa f899 	bl	407268 <_Z16checkIncDecModelhaaa>
  40d136:	3064      	adds	r0, #100	; 0x64
  40d138:	7028      	strb	r0, [r5, #0]
  40d13a:	e798      	b.n	40d06e <_Z14menuProcLimitsh+0x196>
          lcd_outdezAtt(  8*FW, y,  ((int32_t)ld->offset*128) / 25, attr|PREC1);
#else
          lcd_outdezAtt(  8*FW, y,  ld->offset, attr|PREC1);
#endif
          if (active) {
            ld->offset = checkIncDec(event, ld->offset, -1000, 1000, EE_MODEL|NO_INCDEC_MARKS);
  40d13c:	78eb      	ldrb	r3, [r5, #3]
  40d13e:	7929      	ldrb	r1, [r5, #4]
  40d140:	f64f 4218 	movw	r2, #64536	; 0xfc18
  40d144:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  40d148:	b209      	sxth	r1, r1
  40d14a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40d14e:	9806      	ldr	r0, [sp, #24]
  40d150:	f6cf 72ff 	movt	r2, #65535	; 0xffff
  40d154:	2606      	movs	r6, #6
  40d156:	9600      	str	r6, [sp, #0]
  40d158:	f7f9 ff12 	bl	406f80 <_Z11checkIncDechsssh>
  40d15c:	b280      	uxth	r0, r0
  40d15e:	0a03      	lsrs	r3, r0, #8
  40d160:	70e8      	strb	r0, [r5, #3]
  40d162:	712b      	strb	r3, [r5, #4]
  40d164:	e781      	b.n	40d06a <_Z14menuProcLimitsh+0x192>
  40d166:	bf00      	nop
  40d168:	00410e90 	.word	0x00410e90
  40d16c:	20000244 	.word	0x20000244
  40d170:	004102e3 	.word	0x004102e3
  40d174:	20000108 	.word	0x20000108
    uint8_t y = (i+1)*FH;
    uint8_t k = i+s_pgOfs;

    if (k==NUM_CHNOUT) {
      // last line available - add the "copy trim menu" line
      uint8_t attr = (sub==NUM_CHNOUT) ? INVERS : 0;
  40d178:	9a05      	ldr	r2, [sp, #20]
  40d17a:	2400      	movs	r4, #0
  40d17c:	2a20      	cmp	r2, #32
  40d17e:	4623      	mov	r3, r4
  40d180:	d025      	beq.n	40d1ce <_Z14menuProcLimitsh+0x2f6>
      lcd_putsAtt(3*FW, y, STR_TRIMS2OFFSETS, s_noHi ? 0 : attr);
  40d182:	f241 2000 	movw	r0, #4608	; 0x1200
  40d186:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40d18a:	f890 2eb4 	ldrb.w	r2, [r0, #3764]	; 0xeb4
  40d18e:	4639      	mov	r1, r7
  40d190:	2a00      	cmp	r2, #0
  40d192:	bf18      	it	ne
  40d194:	2300      	movne	r3, #0
  40d196:	2012      	movs	r0, #18
  40d198:	4a11      	ldr	r2, [pc, #68]	; (40d1e0 <_Z14menuProcLimitsh+0x308>)
  40d19a:	f7f5 fb8d 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
      if (attr && event==EVT_KEY_LONG(KEY_MENU)) {
  40d19e:	2c00      	cmp	r4, #0
  40d1a0:	f43f aeab 	beq.w	40cefa <_Z14menuProcLimitsh+0x22>
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  40d1a4:	4b0f      	ldr	r3, [pc, #60]	; (40d1e4 <_Z14menuProcLimitsh+0x30c>)
        s_noHi = NO_HI_LEN;
  40d1a6:	f241 2000 	movw	r0, #4608	; 0x1200
  40d1aa:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
  40d1ae:	2119      	movs	r1, #25
  40d1b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40d1b4:	f880 1eb4 	strb.w	r1, [r0, #3764]	; 0xeb4
  40d1b8:	f36f 1205 	bfc	r2, #4, #2
  40d1bc:	2163      	movs	r1, #99	; 0x63
  40d1be:	f883 10a2 	strb.w	r1, [r3, #162]	; 0xa2
  40d1c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          break;
#endif
      }
    }
  }
}
  40d1c6:	b00b      	add	sp, #44	; 0x2c
  40d1c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      uint8_t attr = (sub==NUM_CHNOUT) ? INVERS : 0;
      lcd_putsAtt(3*FW, y, STR_TRIMS2OFFSETS, s_noHi ? 0 : attr);
      if (attr && event==EVT_KEY_LONG(KEY_MENU)) {
        s_noHi = NO_HI_LEN;
        killEvents(event);
        moveTrimsToOffsets(); // if highlighted and menu pressed - move trims to offsets
  40d1cc:	e5c4      	b.n	40cd58 <_Z18moveTrimsToOffsetsv>
    uint8_t y = (i+1)*FH;
    uint8_t k = i+s_pgOfs;

    if (k==NUM_CHNOUT) {
      // last line available - add the "copy trim menu" line
      uint8_t attr = (sub==NUM_CHNOUT) ? INVERS : 0;
  40d1ce:	9b06      	ldr	r3, [sp, #24]
  40d1d0:	f1a3 0080 	sub.w	r0, r3, #128	; 0x80
  40d1d4:	4244      	negs	r4, r0
  40d1d6:	eb44 0400 	adc.w	r4, r4, r0
  40d1da:	2302      	movs	r3, #2
  40d1dc:	e7d1      	b.n	40d182 <_Z14menuProcLimitsh+0x2aa>
  40d1de:	bf00      	nop
  40d1e0:	00410eac 	.word	0x00410eac
  40d1e4:	20000108 	.word	0x20000108

0040d1e8 <_Z11instantTrimv>:
    | ((uint32_t)t.tm_sec >> 1);
}
#endif

void instantTrim()
{
  40d1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t phase = getFlightPhase();
  40d1ec:	f7f7 fdc4 	bl	404d78 <_Z14getFlightPhasev>
  40d1f0:	2400      	movs	r4, #0
  40d1f2:	4e24      	ldr	r6, [pc, #144]	; (40d284 <_Z11instantTrimv+0x9c>)
  40d1f4:	4607      	mov	r7, r0
  40d1f6:	2501      	movs	r5, #1

  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK) {
      // don't instant trim the throttle stick
      uint8_t trim_phase = getTrimFlightPhase(phase, i);
      s_perout_mode = e_instant_trim;
  40d1f8:	f04f 0903 	mov.w	r9, #3
      evalSticks(phase);
      s_perout_mode = e_perout_mode_normal;
  40d1fc:	46a0      	mov	r8, r4
}
#endif

void instantTrim()
{
  uint8_t phase = getFlightPhase();
  40d1fe:	fa5f fa84 	uxtb.w	sl, r4

  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK) {
  40d202:	f1ba 0f02 	cmp.w	sl, #2
      // don't instant trim the throttle stick
      uint8_t trim_phase = getTrimFlightPhase(phase, i);
  40d206:	4638      	mov	r0, r7
  40d208:	4651      	mov	r1, sl
void instantTrim()
{
  uint8_t phase = getFlightPhase();

  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK) {
  40d20a:	d037      	beq.n	40d27c <_Z11instantTrimv+0x94>
      // don't instant trim the throttle stick
      uint8_t trim_phase = getTrimFlightPhase(phase, i);
  40d20c:	f7f3 fe52 	bl	400eb4 <_Z18getTrimFlightPhasehh>
  40d210:	4683      	mov	fp, r0
      s_perout_mode = e_instant_trim;
      evalSticks(phase);
  40d212:	4638      	mov	r0, r7

  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (i!=THR_STICK) {
      // don't instant trim the throttle stick
      uint8_t trim_phase = getTrimFlightPhase(phase, i);
      s_perout_mode = e_instant_trim;
  40d214:	f886 9afc 	strb.w	r9, [r6, #2812]	; 0xafc
      evalSticks(phase);
  40d218:	f7f7 fe68 	bl	404eec <_Z10evalSticksh>
      s_perout_mode = e_perout_mode_normal;
      int16_t trim = (anas[i] + trims[i]) / 2;
  40d21c:	eb06 034a 	add.w	r3, r6, sl, lsl #1
  40d220:	f9b3 2b00 	ldrsh.w	r2, [r3, #2816]	; 0xb00
  40d224:	f9b3 3b0c 	ldrsh.w	r3, [r3, #2828]	; 0xb0c
    if (i!=THR_STICK) {
      // don't instant trim the throttle stick
      uint8_t trim_phase = getTrimFlightPhase(phase, i);
      s_perout_mode = e_instant_trim;
      evalSticks(phase);
      s_perout_mode = e_perout_mode_normal;
  40d228:	f886 8afc 	strb.w	r8, [r6, #2812]	; 0xafc
      int16_t trim = (anas[i] + trims[i]) / 2;
  40d22c:	18d2      	adds	r2, r2, r3
  40d22e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
      if (trim < TRIM_EXTENDED_MIN) {
  40d232:	f342 024f 	sbfx	r2, r2, #1, #16
  40d236:	f512 7ffa 	cmn.w	r2, #500	; 0x1f4
  40d23a:	bfbc      	itt	lt
  40d23c:	f64f 620c 	movwlt	r2, #65036	; 0xfe0c
  40d240:	f6cf 72ff 	movtlt	r2, #65535	; 0xffff
  40d244:	db04      	blt.n	40d250 <_Z11instantTrimv+0x68>
  40d246:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  40d24a:	bfa8      	it	ge
  40d24c:	f44f 72fa 	movge.w	r2, #500	; 0x1f4
        trim = TRIM_EXTENDED_MIN;
      }
      if (trim > TRIM_EXTENDED_MAX) {
        trim = TRIM_EXTENDED_MAX;
      }
      setTrimValue(trim_phase, i, trim);
  40d250:	4658      	mov	r0, fp
  40d252:	4651      	mov	r1, sl
  40d254:	f7f3 fe00 	bl	400e58 <_Z12setTrimValuehhs>

void instantTrim()
{
  uint8_t phase = getFlightPhase();

  for (uint8_t i=0; i<NUM_STICKS; i++) {
  40d258:	2d04      	cmp	r5, #4
  40d25a:	d10f      	bne.n	40d27c <_Z11instantTrimv+0x94>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40d25c:	4b0a      	ldr	r3, [pc, #40]	; (40d288 <_Z11instantTrimv+0xa0>)
      setTrimValue(trim_phase, i, trim);
    }
  }

  STORE_MODELVARS;
  AUDIO_WARNING2();
  40d25e:	2008      	movs	r0, #8
  40d260:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40d264:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40d268:	f041 0102 	orr.w	r1, r1, #2
  40d26c:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40d270:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
}
  40d274:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      setTrimValue(trim_phase, i, trim);
    }
  }

  STORE_MODELVARS;
  AUDIO_WARNING2();
  40d278:	f7f9 b948 	b.w	40650c <_Z13audioDefeventh>
}
#endif

void instantTrim()
{
  uint8_t phase = getFlightPhase();
  40d27c:	3501      	adds	r5, #1
  40d27e:	3401      	adds	r4, #1
  40d280:	b2ed      	uxtb	r5, r5
  40d282:	e7bc      	b.n	40d1fe <_Z11instantTrimv+0x16>
  40d284:	20001200 	.word	0x20001200
  40d288:	20000108 	.word	0x20000108

0040d28c <_Z9checkTrimh>:
}

int8_t *s_trimPtr[NUM_STICKS] = { NULL, NULL, NULL, NULL };

uint8_t checkTrim(uint8_t event)
{
  40d28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
  int8_t  s = g_model.trimInc;
  40d290:	f8df 8224 	ldr.w	r8, [pc, #548]	; 40d4b8 <_Z9checkTrimh+0x22c>

int8_t *s_trimPtr[NUM_STICKS] = { NULL, NULL, NULL, NULL };

uint8_t checkTrim(uint8_t event)
{
  int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
  40d294:	f000 060f 	and.w	r6, r0, #15
  40d298:	f1a6 0906 	sub.w	r9, r6, #6
  int8_t  s = g_model.trimInc;
  40d29c:	f898 414d 	ldrb.w	r4, [r8, #333]	; 0x14d

int8_t *s_trimPtr[NUM_STICKS] = { NULL, NULL, NULL, NULL };

uint8_t checkTrim(uint8_t event)
{
  int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
  40d2a0:	fa5f f989 	uxtb.w	r9, r9
  int8_t  s = g_model.trimInc;

  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
  40d2a4:	f1b9 0f07 	cmp.w	r9, #7
int8_t *s_trimPtr[NUM_STICKS] = { NULL, NULL, NULL, NULL };

uint8_t checkTrim(uint8_t event)
{
  int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
  int8_t  s = g_model.trimInc;
  40d2a8:	f3c4 0402 	ubfx	r4, r4, #0, #3

  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
  40d2ac:	f200 8091 	bhi.w	40d3d2 <_Z9checkTrimh+0x146>
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = CONVERT_MODE(1+k/2) - 1;
  40d2b0:	4b7d      	ldr	r3, [pc, #500]	; (40d4a8 <_Z9checkTrimh+0x21c>)
  40d2b2:	f349 0246 	sbfx	r2, r9, #1, #7
  40d2b6:	f893 1a86 	ldrb.w	r1, [r3, #2694]	; 0xa86
  40d2ba:	4b7c      	ldr	r3, [pc, #496]	; (40d4ac <_Z9checkTrimh+0x220>)
  40d2bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40d2c0:	189b      	adds	r3, r3, r2
  40d2c2:	f813 5c9c 	ldrb.w	r5, [r3, #-156]
    uint8_t phase = getTrimFlightPhase(getFlightPhase(), idx);
  40d2c6:	f7f7 fd57 	bl	404d78 <_Z14getFlightPhasev>
  int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
  int8_t  s = g_model.trimInc;

  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = CONVERT_MODE(1+k/2) - 1;
  40d2ca:	3d01      	subs	r5, #1
  40d2cc:	b2ed      	uxtb	r5, r5
    uint8_t phase = getTrimFlightPhase(getFlightPhase(), idx);
  40d2ce:	4629      	mov	r1, r5
  40d2d0:	f7f3 fdf0 	bl	400eb4 <_Z18getTrimFlightPhasehh>
#endif

int16_t getRawTrimValue(uint8_t phase, uint8_t idx)
{
  int16_t result;
  if (s_trimPtr[idx]) {
  40d2d4:	eb08 0385 	add.w	r3, r8, r5, lsl #2
  40d2d8:	f8d3 3998 	ldr.w	r3, [r3, #2456]	; 0x998
  40d2dc:	2b00      	cmp	r3, #0
  40d2de:	f000 80c5 	beq.w	40d46c <_Z9checkTrimh+0x1e0>
    result = *s_trimPtr[idx];
  40d2e2:	f993 e000 	ldrsb.w	lr, [r3]
  40d2e6:	fa1f fe8e 	uxth.w	lr, lr
int8_t *s_trimPtr[NUM_STICKS] = { NULL, NULL, NULL, NULL };

uint8_t checkTrim(uint8_t event)
{
  int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
  int8_t  s = g_model.trimInc;
  40d2ea:	b2e3      	uxtb	r3, r4
  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = CONVERT_MODE(1+k/2) - 1;
    uint8_t phase = getTrimFlightPhase(getFlightPhase(), idx);
    int16_t before = getRawTrimValue(phase, idx);
    int8_t  v = (s==0) ? min(32, abs(before)/4+1) : 1 << (s-1); // 1=>1  2=>2  3=>4  4=>8
  40d2ec:	2b00      	cmp	r3, #0
  40d2ee:	d072      	beq.n	40d3d6 <_Z9checkTrimh+0x14a>
  40d2f0:	b264      	sxtb	r4, r4
  40d2f2:	3c01      	subs	r4, #1
  40d2f4:	2301      	movs	r3, #1
  40d2f6:	fa13 f404 	lsls.w	r4, r3, r4
    bool thro = (idx==THR_STICK && g_model.thrTrim);
  40d2fa:	2d02      	cmp	r5, #2
  40d2fc:	fa0f f18e 	sxth.w	r1, lr
  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = CONVERT_MODE(1+k/2) - 1;
    uint8_t phase = getTrimFlightPhase(getFlightPhase(), idx);
    int16_t before = getRawTrimValue(phase, idx);
    int8_t  v = (s==0) ? min(32, abs(before)/4+1) : 1 << (s-1); // 1=>1  2=>2  3=>4  4=>8
  40d300:	b2e4      	uxtb	r4, r4
    bool thro = (idx==THR_STICK && g_model.thrTrim);
  40d302:	d07c      	beq.n	40d3fe <_Z9checkTrimh+0x172>
      killEvents(event);
      AUDIO_TRIM_MIDDLE();
    }
    else {
#if defined (AUDIO)
      audio.event(AU_TRIM_MOVE, after);
  40d304:	b264      	sxtb	r4, r4
  40d306:	b2a4      	uxth	r4, r4
}

int8_t *s_trimPtr[NUM_STICKS] = { NULL, NULL, NULL, NULL };

uint8_t checkTrim(uint8_t event)
{
  40d308:	f04f 0c00 	mov.w	ip, #0
    uint8_t phase = getTrimFlightPhase(getFlightPhase(), idx);
    int16_t before = getRawTrimValue(phase, idx);
    int8_t  v = (s==0) ? min(32, abs(before)/4+1) : 1 << (s-1); // 1=>1  2=>2  3=>4  4=>8
    bool thro = (idx==THR_STICK && g_model.thrTrim);
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1
  40d30c:	f019 0f01 	tst.w	r9, #1
  40d310:	bf0b      	itete	eq
  40d312:	ebc4 040e 	rsbeq	r4, r4, lr
  40d316:	4474      	addne	r4, lr
  40d318:	b2a4      	uxtheq	r4, r4
  40d31a:	b2a4      	uxthne	r4, r4

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
  40d31c:	f64f 7383 	movw	r3, #65411	; 0xff83
  40d320:	2700      	movs	r7, #0
  40d322:	b224      	sxth	r4, r4
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
  40d324:	b91b      	cbnz	r3, 40d32e <_Z9checkTrimh+0xa2>
    bool thro = (idx==THR_STICK && g_model.thrTrim);
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
  40d326:	f1bc 0f00 	cmp.w	ip, #0
  40d32a:	bf18      	it	ne
  40d32c:	237d      	movne	r3, #125	; 0x7d
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
  40d32e:	b21a      	sxth	r2, r3
  40d330:	f112 097d 	adds.w	r9, r2, #125	; 0x7d
  40d334:	bf18      	it	ne
  40d336:	f04f 0901 	movne.w	r9, #1
  40d33a:	4294      	cmp	r4, r2
  40d33c:	bfb4      	ite	lt
  40d33e:	f04f 0900 	movlt.w	r9, #0
  40d342:	f009 0901 	andge.w	r9, r9, #1
  40d346:	f1b9 0f00 	cmp.w	r9, #0
  40d34a:	d07a      	beq.n	40d442 <_Z9checkTrimh+0x1b6>
  40d34c:	4291      	cmp	r1, r2
  40d34e:	da78      	bge.n	40d442 <_Z9checkTrimh+0x1b6>
        after = mark;
        beepTrim = true;
  40d350:	2701      	movs	r7, #1
  40d352:	4614      	mov	r4, r2
    bool thro = (idx==THR_STICK && g_model.thrTrim);
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
  40d354:	337d      	adds	r3, #125	; 0x7d
  40d356:	b29b      	uxth	r3, r3
  40d358:	b21a      	sxth	r2, r3
  40d35a:	2a7d      	cmp	r2, #125	; 0x7d
  40d35c:	dde2      	ble.n	40d324 <_Z9checkTrimh+0x98>
        after = mark;
        beepTrim = true;
      }
    }

    if ((before<after && after>TRIM_MAX) || (before>after && after<TRIM_MIN)) {
  40d35e:	42a1      	cmp	r1, r4
  40d360:	bfac      	ite	ge
  40d362:	2300      	movge	r3, #0
  40d364:	2301      	movlt	r3, #1
  40d366:	2c7d      	cmp	r4, #125	; 0x7d
  40d368:	bfd4      	ite	le
  40d36a:	2300      	movle	r3, #0
  40d36c:	f003 0301 	andgt.w	r3, r3, #1
  40d370:	2b00      	cmp	r3, #0
  40d372:	d150      	bne.n	40d416 <_Z9checkTrimh+0x18a>
  40d374:	f114 0f7d 	cmn.w	r4, #125	; 0x7d
  40d378:	bfac      	ite	ge
  40d37a:	2300      	movge	r3, #0
  40d37c:	2301      	movlt	r3, #1
  40d37e:	42a1      	cmp	r1, r4
  40d380:	bfd4      	ite	le
  40d382:	2100      	movle	r1, #0
  40d384:	f003 0101 	andgt.w	r1, r3, #1
  40d388:	2900      	cmp	r1, #0
  40d38a:	d144      	bne.n	40d416 <_Z9checkTrimh+0x18a>
      if (!g_model.extendedTrims) after = before;
      beepTrim = true; // no repetition, it could be dangerous
    }

    if (after < TRIM_EXTENDED_MIN) {
  40d38c:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
  40d390:	db4e      	blt.n	40d430 <_Z9checkTrimh+0x1a4>
      after = TRIM_EXTENDED_MIN;
    }
    if (after > TRIM_EXTENDED_MAX) {
  40d392:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
      after = TRIM_EXTENDED_MAX;
    }

    setTrimValue(phase, idx, after);
  40d396:	4629      	mov	r1, r5
    }

    if (after < TRIM_EXTENDED_MIN) {
      after = TRIM_EXTENDED_MIN;
    }
    if (after > TRIM_EXTENDED_MAX) {
  40d398:	dd76      	ble.n	40d488 <_Z9checkTrimh+0x1fc>
      after = TRIM_EXTENDED_MAX;
    }

    setTrimValue(phase, idx, after);
  40d39a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40d39e:	f7f3 fd5b 	bl	400e58 <_Z12setTrimValuehhs>
      }
    }

    if ((before<after && after>TRIM_MAX) || (before>after && after<TRIM_MIN)) {
      if (!g_model.extendedTrims) after = before;
      beepTrim = true; // no repetition, it could be dangerous
  40d3a2:	225b      	movs	r2, #91	; 0x5b
      after = TRIM_MIN;
    after /= 4;
    after += 60;
#endif

    if (beepTrim) {
  40d3a4:	b17f      	cbz	r7, 40d3c6 <_Z9checkTrimh+0x13a>
  40d3a6:	4b42      	ldr	r3, [pc, #264]	; (40d4b0 <_Z9checkTrimh+0x224>)
  40d3a8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40d3ac:	199a      	adds	r2, r3, r6
  40d3ae:	2163      	movs	r1, #99	; 0x63
  40d3b0:	7091      	strb	r1, [r2, #2]
  40d3b2:	5d9a      	ldrb	r2, [r3, r6]
      killEvents(event);
      AUDIO_TRIM_MIDDLE();
  40d3b4:	200a      	movs	r0, #10
  40d3b6:	f36f 1205 	bfc	r2, #4, #2
  40d3ba:	559a      	strb	r2, [r3, r6]
  40d3bc:	f7f9 f8a6 	bl	40650c <_Z13audioDefeventh>
#else
      if (event & _MSK_KEY_REPT) warble = true;
      AUDIO_TRIM();
#endif
    }
    return 0;
  40d3c0:	2000      	movs	r0, #0
  40d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      killEvents(event);
      AUDIO_TRIM_MIDDLE();
    }
    else {
#if defined (AUDIO)
      audio.event(AU_TRIM_MOVE, after);
  40d3c6:	483b      	ldr	r0, [pc, #236]	; (40d4b4 <_Z9checkTrimh+0x228>)
  40d3c8:	b2d2      	uxtb	r2, r2
  40d3ca:	2106      	movs	r1, #6
  40d3cc:	f7f8 fd9a 	bl	405f04 <_ZN10audioQueue5eventEhh>
#else
      if (event & _MSK_KEY_REPT) warble = true;
      AUDIO_TRIM();
#endif
    }
    return 0;
  40d3d0:	4638      	mov	r0, r7
  }
  return event;
}
  40d3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#ifndef NOINLINE
#define NOINLINE __attribute__ ((noinline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
  40d3d6:	fa0f f18e 	sxth.w	r1, lr
  40d3da:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
  40d3de:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = CONVERT_MODE(1+k/2) - 1;
    uint8_t phase = getTrimFlightPhase(getFlightPhase(), idx);
    int16_t before = getRawTrimValue(phase, idx);
    int8_t  v = (s==0) ? min(32, abs(before)/4+1) : 1 << (s-1); // 1=>1  2=>2  3=>4  4=>8
  40d3e2:	b21b      	sxth	r3, r3
  40d3e4:	1cdc      	adds	r4, r3, #3
  40d3e6:	ea33 0323 	bics.w	r3, r3, r3, asr #32
  40d3ea:	bf28      	it	cs
  40d3ec:	4623      	movcs	r3, r4
  40d3ee:	109c      	asrs	r4, r3, #2
  40d3f0:	3401      	adds	r4, #1
  40d3f2:	2c20      	cmp	r4, #32
  40d3f4:	bfa8      	it	ge
  40d3f6:	2420      	movge	r4, #32
    bool thro = (idx==THR_STICK && g_model.thrTrim);
  40d3f8:	2d02      	cmp	r5, #2
  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = CONVERT_MODE(1+k/2) - 1;
    uint8_t phase = getTrimFlightPhase(getFlightPhase(), idx);
    int16_t before = getRawTrimValue(phase, idx);
    int8_t  v = (s==0) ? min(32, abs(before)/4+1) : 1 << (s-1); // 1=>1  2=>2  3=>4  4=>8
  40d3fa:	b2e4      	uxtb	r4, r4
    bool thro = (idx==THR_STICK && g_model.thrTrim);
  40d3fc:	d182      	bne.n	40d304 <_Z9checkTrimh+0x78>
  40d3fe:	f898 314c 	ldrb.w	r3, [r8, #332]	; 0x14c
  40d402:	f003 0308 	and.w	r3, r3, #8
  40d406:	b2db      	uxtb	r3, r3
  40d408:	2b00      	cmp	r3, #0
  40d40a:	f43f af7b 	beq.w	40d304 <_Z9checkTrimh+0x78>
  40d40e:	2404      	movs	r4, #4
  40d410:	f04f 0c01 	mov.w	ip, #1
  40d414:	e77a      	b.n	40d30c <_Z9checkTrimh+0x80>
        beepTrim = true;
      }
    }

    if ((before<after && after>TRIM_MAX) || (before>after && after<TRIM_MIN)) {
      if (!g_model.extendedTrims) after = before;
  40d416:	f898 314d 	ldrb.w	r3, [r8, #333]	; 0x14d
      beepTrim = true; // no repetition, it could be dangerous
  40d41a:	2701      	movs	r7, #1
        beepTrim = true;
      }
    }

    if ((before<after && after>TRIM_MAX) || (before>after && after<TRIM_MIN)) {
      if (!g_model.extendedTrims) after = before;
  40d41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40d420:	b2db      	uxtb	r3, r3
  40d422:	2b00      	cmp	r3, #0
  40d424:	d1b2      	bne.n	40d38c <_Z9checkTrimh+0x100>
  40d426:	fa0f f48e 	sxth.w	r4, lr
      beepTrim = true; // no repetition, it could be dangerous
    }

    if (after < TRIM_EXTENDED_MIN) {
  40d42a:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
  40d42e:	dab0      	bge.n	40d392 <_Z9checkTrimh+0x106>
    }
    if (after > TRIM_EXTENDED_MAX) {
      after = TRIM_EXTENDED_MAX;
    }

    setTrimValue(phase, idx, after);
  40d430:	f64f 620c 	movw	r2, #65036	; 0xfe0c
  40d434:	f6cf 72ff 	movt	r2, #65535	; 0xffff
  40d438:	4629      	mov	r1, r5
  40d43a:	f7f3 fd0d 	bl	400e58 <_Z12setTrimValuehhs>
  40d43e:	221d      	movs	r2, #29
  40d440:	e7b0      	b.n	40d3a4 <_Z9checkTrimh+0x118>
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
  40d442:	f1b2 097d 	subs.w	r9, r2, #125	; 0x7d
  40d446:	bf18      	it	ne
  40d448:	f04f 0901 	movne.w	r9, #1
  40d44c:	4294      	cmp	r4, r2
  40d44e:	bfcc      	ite	gt
  40d450:	f04f 0900 	movgt.w	r9, #0
  40d454:	f009 0901 	andle.w	r9, r9, #1
  40d458:	f1b9 0f00 	cmp.w	r9, #0
  40d45c:	f43f af7a 	beq.w	40d354 <_Z9checkTrimh+0xc8>
  40d460:	4291      	cmp	r1, r2
  40d462:	f77f af77 	ble.w	40d354 <_Z9checkTrimh+0xc8>
  40d466:	b21c      	sxth	r4, r3
        after = mark;
        beepTrim = true;
  40d468:	2701      	movs	r7, #1
  40d46a:	e773      	b.n	40d354 <_Z9checkTrimh+0xc8>
  int16_t result;
  if (s_trimPtr[idx]) {
    result = *s_trimPtr[idx];
  }
  else {
    PhaseData *p = phaseaddress(phase);
  40d46c:	f508 729e 	add.w	r2, r8, #316	; 0x13c
  40d470:	0103      	lsls	r3, r0, #4
  40d472:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
#if defined(PCBSTD)
    result = (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
#else
    result = p->trim[idx];
  40d476:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  40d47a:	18d1      	adds	r1, r2, r3
  40d47c:	f891 e001 	ldrb.w	lr, [r1, #1]
  40d480:	5cd3      	ldrb	r3, [r2, r3]
  40d482:	ea43 2e0e 	orr.w	lr, r3, lr, lsl #8
  40d486:	e730      	b.n	40d2ea <_Z9checkTrimh+0x5e>
    }
    if (after > TRIM_EXTENDED_MAX) {
      after = TRIM_EXTENDED_MAX;
    }

    setTrimValue(phase, idx, after);
  40d488:	4622      	mov	r2, r4
  40d48a:	f7f3 fce5 	bl	400e58 <_Z12setTrimValuehhs>

#if defined (AUDIO)
    // toneFreq higher/lower according to trim position
    // limit the frequency, range -125 to 125 = toneFreq: 19 to 101
    if (after > TRIM_MAX)
  40d48e:	2c7d      	cmp	r4, #125	; 0x7d
  40d490:	dc87      	bgt.n	40d3a2 <_Z9checkTrimh+0x116>
      after = TRIM_MAX;
    if (after < TRIM_MIN)
  40d492:	221d      	movs	r2, #29
  40d494:	f114 0f7d 	cmn.w	r4, #125	; 0x7d
  40d498:	db84      	blt.n	40d3a4 <_Z9checkTrimh+0x118>
  40d49a:	2204      	movs	r2, #4
  40d49c:	fb94 f2f2 	sdiv	r2, r4, r2
  40d4a0:	323c      	adds	r2, #60	; 0x3c
  40d4a2:	b292      	uxth	r2, r2
  40d4a4:	e77e      	b.n	40d3a4 <_Z9checkTrimh+0x118>
  40d4a6:	bf00      	nop
  40d4a8:	20001200 	.word	0x20001200
  40d4ac:	00410828 	.word	0x00410828
  40d4b0:	200001a8 	.word	0x200001a8
  40d4b4:	20001d28 	.word	0x20001d28
  40d4b8:	20000108 	.word	0x20000108

0040d4bc <_Z13evalFunctionsv>:
#endif

uint16_t active_functions = 0; // current max = 16 functions

void evalFunctions()
{
  40d4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    safetyCh[i] = -128; // not defined

  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
    if (sd->swtch) {
      uint16_t mask = (sd->func >= FUNC_TRAINER ? (1 << (sd->func-FUNC_TRAINER)) : 0);
  40d4c0:	4b53      	ldr	r3, [pc, #332]	; (40d610 <_Z13evalFunctionsv+0x154>)
void evalFunctions()
{
  assert((int)(sizeof(active_functions)*8) > (int)(FUNC_MAX-NUM_CHNOUT));

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    safetyCh[i] = -128; // not defined
  40d4c2:	2180      	movs	r1, #128	; 0x80
}
#endif

uint16_t active_functions = 0; // current max = 16 functions

void evalFunctions()
  40d4c4:	f103 0220 	add.w	r2, r3, #32
{
  assert((int)(sizeof(active_functions)*8) > (int)(FUNC_MAX-NUM_CHNOUT));

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    safetyCh[i] = -128; // not defined
  40d4c8:	f803 1f01 	strb.w	r1, [r3, #1]!

void evalFunctions()
{
  assert((int)(sizeof(active_functions)*8) > (int)(FUNC_MAX-NUM_CHNOUT));

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
  40d4cc:	4293      	cmp	r3, r2
  40d4ce:	d1fb      	bne.n	40d4c8 <_Z13evalFunctionsv+0xc>
  40d4d0:	4f50      	ldr	r7, [pc, #320]	; (40d614 <_Z13evalFunctionsv+0x158>)
#endif

        active_functions |= mask;
      }
      else {
        active_functions &= (~mask);
  40d4d2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 40d628 <_Z13evalFunctionsv+0x16c>

void evalFunctions()
{
  assert((int)(sizeof(active_functions)*8) > (int)(FUNC_MAX-NUM_CHNOUT));

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
  40d4d6:	2400      	movs	r4, #0

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  40d4d8:	f5a7 7a9e 	sub.w	sl, r7, #316	; 0x13c
  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
    if (sd->swtch) {
      uint16_t mask = (sd->func >= FUNC_TRAINER ? (1 << (sd->func-FUNC_TRAINER)) : 0);
      if (getSwitch(sd->swtch, 0)) {
        if (sd->func < FUNC_TRAINER  && (g_menuStack[g_menuStackPtr] != menuProcFunctionSwitches || m_posVert != (i+1) || m_posHorz > 1)) {
  40d4dc:	46cb      	mov	fp, r9
  40d4de:	e002      	b.n	40d4e6 <_Z13evalFunctionsv+0x2a>
  40d4e0:	3401      	adds	r4, #1
  assert((int)(sizeof(active_functions)*8) > (int)(FUNC_MAX-NUM_CHNOUT));

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    safetyCh[i] = -128; // not defined

  for (uint8_t i=0; i<NUM_FSW; i++) {
  40d4e2:	2c20      	cmp	r4, #32
  40d4e4:	d030      	beq.n	40d548 <_Z13evalFunctionsv+0x8c>
    FuncSwData *sd = &g_model.funcSw[i];
  40d4e6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  40d4ea:	f505 65c4 	add.w	r5, r5, #1568	; 0x620
  40d4ee:	197d      	adds	r5, r7, r5
    if (sd->swtch) {
  40d4f0:	7968      	ldrb	r0, [r5, #5]

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    safetyCh[i] = -128; // not defined

  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
  40d4f2:	3505      	adds	r5, #5
    if (sd->swtch) {
  40d4f4:	2800      	cmp	r0, #0
  40d4f6:	d0f3      	beq.n	40d4e0 <_Z13evalFunctionsv+0x24>
      uint16_t mask = (sd->func >= FUNC_TRAINER ? (1 << (sd->func-FUNC_TRAINER)) : 0);
  40d4f8:	786e      	ldrb	r6, [r5, #1]
  40d4fa:	2e0f      	cmp	r6, #15
  40d4fc:	d92e      	bls.n	40d55c <_Z13evalFunctionsv+0xa0>
  40d4fe:	3e10      	subs	r6, #16
  40d500:	2301      	movs	r3, #1
  40d502:	fa13 f606 	lsls.w	r6, r3, r6
  40d506:	b2b6      	uxth	r6, r6
      if (getSwitch(sd->swtch, 0)) {
  40d508:	b240      	sxtb	r0, r0
  40d50a:	2100      	movs	r1, #0
  40d50c:	f7f7 fba0 	bl	404c50 <_Z9getSwitchab>
  40d510:	b1e0      	cbz	r0, 40d54c <_Z13evalFunctionsv+0x90>
        if (sd->func < FUNC_TRAINER  && (g_menuStack[g_menuStackPtr] != menuProcFunctionSwitches || m_posVert != (i+1) || m_posHorz > 1)) {
  40d512:	786b      	ldrb	r3, [r5, #1]
  40d514:	2b0f      	cmp	r3, #15
  40d516:	d923      	bls.n	40d560 <_Z13evalFunctionsv+0xa4>
  40d518:	f8df 810c 	ldr.w	r8, [pc, #268]	; 40d628 <_Z13evalFunctionsv+0x16c>
  40d51c:	3401      	adds	r4, #1
          safetyCh[sd->func] = (int8_t)sd->param;
        }

        if (~active_functions & mask) {
  40d51e:	f8b8 2afe 	ldrh.w	r2, [r8, #2814]	; 0xafe
  40d522:	ea36 0202 	bics.w	r2, r6, r2
  40d526:	d003      	beq.n	40d530 <_Z13evalFunctionsv+0x74>

          if (sd->func == FUNC_INSTANT_TRIM) {
  40d528:	2b15      	cmp	r3, #21
  40d52a:	d032      	beq.n	40d592 <_Z13evalFunctionsv+0xd6>
          if (sd->func == FUNC_TEST) {
            testFunc();
          }
#endif

          if (sd->func == FUNC_RESET) {
  40d52c:	2b18      	cmp	r3, #24
  40d52e:	d029      	beq.n	40d584 <_Z13evalFunctionsv+0xc8>
#endif
            }
          }
        }

        if (sd->func == FUNC_PLAY_SOUND) {
  40d530:	2b16      	cmp	r3, #22
  40d532:	d03f      	beq.n	40d5b4 <_Z13evalFunctionsv+0xf8>
          beep(3);
#endif
        }

#if defined(HAPTIC)
        if (sd->func == FUNC_HAPTIC) {
  40d534:	2b17      	cmp	r3, #23
  40d536:	d038      	beq.n	40d5aa <_Z13evalFunctionsv+0xee>
          haptic.event(sd->param);
        }
#endif

        active_functions |= mask;
  40d538:	f8b8 3afe 	ldrh.w	r3, [r8, #2814]	; 0xafe
  assert((int)(sizeof(active_functions)*8) > (int)(FUNC_MAX-NUM_CHNOUT));

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    safetyCh[i] = -128; // not defined

  for (uint8_t i=0; i<NUM_FSW; i++) {
  40d53c:	2c20      	cmp	r4, #32
        if (sd->func == FUNC_HAPTIC) {
          haptic.event(sd->param);
        }
#endif

        active_functions |= mask;
  40d53e:	ea46 0603 	orr.w	r6, r6, r3
  40d542:	f8a8 6afe 	strh.w	r6, [r8, #2814]	; 0xafe
  assert((int)(sizeof(active_functions)*8) > (int)(FUNC_MAX-NUM_CHNOUT));

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    safetyCh[i] = -128; // not defined

  for (uint8_t i=0; i<NUM_FSW; i++) {
  40d546:	d1ce      	bne.n	40d4e6 <_Z13evalFunctionsv+0x2a>
      else {
        active_functions &= (~mask);
      }
    }
  }
}
  40d548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif

        active_functions |= mask;
      }
      else {
        active_functions &= (~mask);
  40d54c:	f8b9 3afe 	ldrh.w	r3, [r9, #2814]	; 0xafe
  40d550:	3401      	adds	r4, #1
  40d552:	ea23 0606 	bic.w	r6, r3, r6
  40d556:	f8a9 6afe 	strh.w	r6, [r9, #2814]	; 0xafe
  40d55a:	e7c2      	b.n	40d4e2 <_Z13evalFunctionsv+0x26>
    safetyCh[i] = -128; // not defined

  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
    if (sd->swtch) {
      uint16_t mask = (sd->func >= FUNC_TRAINER ? (1 << (sd->func-FUNC_TRAINER)) : 0);
  40d55c:	2600      	movs	r6, #0
  40d55e:	e7d3      	b.n	40d508 <_Z13evalFunctionsv+0x4c>
      if (getSwitch(sd->swtch, 0)) {
        if (sd->func < FUNC_TRAINER  && (g_menuStack[g_menuStackPtr] != menuProcFunctionSwitches || m_posVert != (i+1) || m_posHorz > 1)) {
  40d560:	f899 2ba4 	ldrb.w	r2, [r9, #2980]	; 0xba4
  40d564:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 40d628 <_Z13evalFunctionsv+0x16c>
  40d568:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  40d56c:	f8d2 1a98 	ldr.w	r1, [r2, #2712]	; 0xa98
  40d570:	4a29      	ldr	r2, [pc, #164]	; (40d618 <_Z13evalFunctionsv+0x15c>)
  40d572:	4291      	cmp	r1, r2
  40d574:	d025      	beq.n	40d5c2 <_Z13evalFunctionsv+0x106>
  40d576:	3401      	adds	r4, #1
          safetyCh[sd->func] = (int8_t)sd->param;
  40d578:	78a9      	ldrb	r1, [r5, #2]
  40d57a:	eb0a 0203 	add.w	r2, sl, r3
  40d57e:	f882 1898 	strb.w	r1, [r2, #2200]	; 0x898
  40d582:	e7cc      	b.n	40d51e <_Z13evalFunctionsv+0x62>
            testFunc();
          }
#endif

          if (sd->func == FUNC_RESET) {
            switch (sd->param) {
  40d584:	78ab      	ldrb	r3, [r5, #2]
  40d586:	2b03      	cmp	r3, #3
  40d588:	d8d6      	bhi.n	40d538 <_Z13evalFunctionsv+0x7c>
  40d58a:	e8df f003 	tbb	[pc, r3]
  40d58e:	2c2c      	.short	0x2c2c
  40d590:	2428      	.short	0x2428
        }

        if (~active_functions & mask) {

          if (sd->func == FUNC_INSTANT_TRIM) {
            if (g_menuStack[0] == menuMainView
  40d592:	f8d9 3a98 	ldr.w	r3, [r9, #2712]	; 0xa98
  40d596:	4a21      	ldr	r2, [pc, #132]	; (40d61c <_Z13evalFunctionsv+0x160>)
  40d598:	4293      	cmp	r3, r2
  40d59a:	d002      	beq.n	40d5a2 <_Z13evalFunctionsv+0xe6>
  40d59c:	4a20      	ldr	r2, [pc, #128]	; (40d620 <_Z13evalFunctionsv+0x164>)
  40d59e:	4293      	cmp	r3, r2
  40d5a0:	d1ca      	bne.n	40d538 <_Z13evalFunctionsv+0x7c>
#if defined(FRSKY)
                || g_menuStack[0] == menuProcFrsky
#endif
                )
            instantTrim();
  40d5a2:	f7ff fe21 	bl	40d1e8 <_Z11instantTrimv>
  40d5a6:	786b      	ldrb	r3, [r5, #1]
  40d5a8:	e7c0      	b.n	40d52c <_Z13evalFunctionsv+0x70>
#endif
        }

#if defined(HAPTIC)
        if (sd->func == FUNC_HAPTIC) {
          haptic.event(sd->param);
  40d5aa:	78a9      	ldrb	r1, [r5, #2]
  40d5ac:	481d      	ldr	r0, [pc, #116]	; (40d624 <_Z13evalFunctionsv+0x168>)
  40d5ae:	f7f8 ff79 	bl	4064a4 <_ZN11hapticQueue5eventEh>
  40d5b2:	e7c1      	b.n	40d538 <_Z13evalFunctionsv+0x7c>
          }
        }

        if (sd->func == FUNC_PLAY_SOUND) {
#if defined(AUDIO)
          audioDefevent(AU_FRSKY_FIRST+sd->param);
  40d5b4:	78a8      	ldrb	r0, [r5, #2]
  40d5b6:	3014      	adds	r0, #20
  40d5b8:	b2c0      	uxtb	r0, r0
  40d5ba:	f7f8 ffa7 	bl	40650c <_Z13audioDefeventh>
  40d5be:	786b      	ldrb	r3, [r5, #1]
  40d5c0:	e7b8      	b.n	40d534 <_Z13evalFunctionsv+0x78>
  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
    if (sd->swtch) {
      uint16_t mask = (sd->func >= FUNC_TRAINER ? (1 << (sd->func-FUNC_TRAINER)) : 0);
      if (getSwitch(sd->swtch, 0)) {
        if (sd->func < FUNC_TRAINER  && (g_menuStack[g_menuStackPtr] != menuProcFunctionSwitches || m_posVert != (i+1) || m_posHorz > 1)) {
  40d5c2:	f89b 2c34 	ldrb.w	r2, [fp, #3124]	; 0xc34
}
#endif

uint16_t active_functions = 0; // current max = 16 functions

void evalFunctions()
  40d5c6:	3401      	adds	r4, #1
  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
    if (sd->swtch) {
      uint16_t mask = (sd->func >= FUNC_TRAINER ? (1 << (sd->func-FUNC_TRAINER)) : 0);
      if (getSwitch(sd->swtch, 0)) {
        if (sd->func < FUNC_TRAINER  && (g_menuStack[g_menuStackPtr] != menuProcFunctionSwitches || m_posVert != (i+1) || m_posHorz > 1)) {
  40d5c8:	42a2      	cmp	r2, r4
  40d5ca:	d1d5      	bne.n	40d578 <_Z13evalFunctionsv+0xbc>
  40d5cc:	f89b 2c35 	ldrb.w	r2, [fp, #3125]	; 0xc35
  40d5d0:	2a01      	cmp	r2, #1
  40d5d2:	d8d1      	bhi.n	40d578 <_Z13evalFunctionsv+0xbc>
  40d5d4:	e7a3      	b.n	40d51e <_Z13evalFunctionsv+0x62>
              case 2:
                resetAll();
                break;
#ifdef FRSKY
                case 3:
                resetTelemetry();
  40d5d6:	f7f7 f99b 	bl	404910 <_Z14resetTelemetryv>
  40d5da:	786b      	ldrb	r3, [r5, #1]
                break;
  40d5dc:	e7a8      	b.n	40d530 <_Z13evalFunctionsv+0x74>
              case 0:
              case 1:
                resetTimer(sd->param);
                break;
              case 2:
                resetAll();
  40d5de:	f7f7 f9e3 	bl	4049a8 <_Z8resetAllv>
  40d5e2:	786b      	ldrb	r3, [r5, #1]
                break;
  40d5e4:	e7a4      	b.n	40d530 <_Z13evalFunctionsv+0x74>
uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  s_timerVal[idx] = g_model.timers[idx].val;
  40d5e6:	0058      	lsls	r0, r3, #1

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  40d5e8:	eb0a 0203 	add.w	r2, sl, r3
  40d5ec:	2100      	movs	r1, #0
  s_timerVal[idx] = g_model.timers[idx].val;
  40d5ee:	18c3      	adds	r3, r0, r3

uint8_t  trimsCheckTimer = 0;

void resetTimer(uint8_t idx)
{
  s_timerState[idx] = TMR_OFF; // is changed to RUNNING dep from mode
  40d5f0:	f882 19e8 	strb.w	r1, [r2, #2536]	; 0x9e8
  s_timerVal[idx] = g_model.timers[idx].val;
  40d5f4:	4453      	add	r3, sl
  40d5f6:	f893 5147 	ldrb.w	r5, [r3, #327]	; 0x147
  40d5fa:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  40d5fe:	4450      	add	r0, sl
  40d600:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
  40d604:	f8a0 3908 	strh.w	r3, [r0, #2312]	; 0x908
  s_timerVal_10ms[idx] = 0 ;
  40d608:	f882 19ec 	strb.w	r1, [r2, #2540]	; 0x9ec
  40d60c:	e794      	b.n	40d538 <_Z13evalFunctionsv+0x7c>
  40d60e:	bf00      	nop
  40d610:	2000099f 	.word	0x2000099f
  40d614:	20000244 	.word	0x20000244
  40d618:	0040975d 	.word	0x0040975d
  40d61c:	0040c6a1 	.word	0x0040c6a1
  40d620:	00406791 	.word	0x00406791
  40d624:	20001d18 	.word	0x20001d18
  40d628:	20001200 	.word	0x20001200

0040d62c <_Z7perMainv>:
#define TIME_TO_WRITE s_eeDirtyMsk
#endif

int32_t sum_chans512[NUM_CHNOUT] = {0};
void perMain()
{
  40d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static uint16_t lastTMR;
  uint16_t tmr10ms = get_tmr10ms();
  40d630:	4d55      	ldr	r5, [pc, #340]	; (40d788 <_Z7perMainv+0x15c>)
  tick10ms = (tmr10ms != lastTMR);
  40d632:	4c56      	ldr	r4, [pc, #344]	; (40d78c <_Z7perMainv+0x160>)

int32_t sum_chans512[NUM_CHNOUT] = {0};
void perMain()
{
  static uint16_t lastTMR;
  uint16_t tmr10ms = get_tmr10ms();
  40d634:	f8b5 29aa 	ldrh.w	r2, [r5, #2474]	; 0x9aa
  tick10ms = (tmr10ms != lastTMR);
  40d638:	f8b4 3eb6 	ldrh.w	r3, [r4, #3766]	; 0xeb6

int32_t sum_chans512[NUM_CHNOUT] = {0};
void perMain()
{
  static uint16_t lastTMR;
  uint16_t tmr10ms = get_tmr10ms();
  40d63c:	b292      	uxth	r2, r2
  tick10ms = (tmr10ms != lastTMR);
  40d63e:	1a9b      	subs	r3, r3, r2
  40d640:	bf18      	it	ne
  40d642:	2301      	movne	r3, #1
#define TIME_TO_WRITE s_eeDirtyMsk
#endif

int32_t sum_chans512[NUM_CHNOUT] = {0};
void perMain()
{
  40d644:	b08b      	sub	sp, #44	; 0x2c
  static uint16_t lastTMR;
  uint16_t tmr10ms = get_tmr10ms();
  40d646:	9207      	str	r2, [sp, #28]
  tick10ms = (tmr10ms != lastTMR);
  40d648:	f884 3d78 	strb.w	r3, [r4, #3448]	; 0xd78
  lastTMR = tmr10ms;
  40d64c:	f8a4 2eb6 	strh.w	r2, [r4, #3766]	; 0xeb6
#define MAX_ACT 0xffff
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
  40d650:	f7f7 fb92 	bl	404d78 <_Z14getFlightPhasev>
  int32_t weight = 0;

  if (s_last_phase != phase) {
  40d654:	4a4e      	ldr	r2, [pc, #312]	; (40d790 <_Z7perMainv+0x164>)
#define MAX_ACT 0xffff
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
  40d656:	9006      	str	r0, [sp, #24]
  int32_t weight = 0;

  if (s_last_phase != phase) {
  40d658:	f892 3102 	ldrb.w	r3, [r2, #258]	; 0x102
  40d65c:	4283      	cmp	r3, r0
  40d65e:	bf08      	it	eq
  40d660:	f894 6eb8 	ldrbeq.w	r6, [r4, #3768]	; 0xeb8
  40d664:	d02f      	beq.n	40d6c6 <_Z7perMainv+0x9a>
    if (s_last_phase == 255) {
  40d666:	2bff      	cmp	r3, #255	; 0xff
  40d668:	f000 8354 	beq.w	40dd14 <_Z7perMainv+0x6e8>
      fp_act[phase] = MAX_ACT;
    }
    else {
      uint8_t fadeTime = max(g_model.phaseData[s_last_phase].fadeOut, g_model.phaseData[phase].fadeIn);
  40d66c:	f8dd a018 	ldr.w	sl, [sp, #24]
  40d670:	eb05 1003 	add.w	r0, r5, r3, lsl #4
  40d674:	eb05 110a 	add.w	r1, r5, sl, lsl #4
  40d678:	f890 07d3 	ldrb.w	r0, [r0, #2003]	; 0x7d3
  40d67c:	f891 17d3 	ldrb.w	r1, [r1, #2003]	; 0x7d3
  40d680:	0900      	lsrs	r0, r0, #4
  40d682:	f001 010f 	and.w	r1, r1, #15
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
  40d686:	4288      	cmp	r0, r1
  40d688:	f200 82d0 	bhi.w	40dc2c <_Z7perMainv+0x600>
      if (fadeTime) {
  40d68c:	2900      	cmp	r1, #0
  40d68e:	f040 82cc 	bne.w	40dc2a <_Z7perMainv+0x5fe>
        delta = (MAX_ACT / 100) / fadeTime;
      }
      else {
        fp_act[s_last_phase] = 0;
        fp_act[phase] = MAX_ACT;
        s_fade_flight_phases &= ~((1<<s_last_phase) + (1<<phase));
  40d692:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40d696:	2001      	movs	r0, #1
  40d698:	fa00 f709 	lsl.w	r7, r0, r9
  40d69c:	4098      	lsls	r0, r3
  40d69e:	f894 6eb8 	ldrb.w	r6, [r4, #3768]	; 0xeb8
  40d6a2:	183f      	adds	r7, r7, r0
      if (fadeTime) {
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
        delta = (MAX_ACT / 100) / fadeTime;
      }
      else {
        fp_act[s_last_phase] = 0;
  40d6a4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
        fp_act[phase] = MAX_ACT;
  40d6a8:	eb04 0049 	add.w	r0, r4, r9, lsl #1
        s_fade_flight_phases &= ~((1<<s_last_phase) + (1<<phase));
  40d6ac:	ea26 0607 	bic.w	r6, r6, r7
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
        delta = (MAX_ACT / 100) / fadeTime;
      }
      else {
        fp_act[s_last_phase] = 0;
        fp_act[phase] = MAX_ACT;
  40d6b0:	f04f 3aff 	mov.w	sl, #4294967295
      if (fadeTime) {
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
        delta = (MAX_ACT / 100) / fadeTime;
      }
      else {
        fp_act[s_last_phase] = 0;
  40d6b4:	f8a3 1ebc 	strh.w	r1, [r3, #3772]	; 0xebc
        fp_act[phase] = MAX_ACT;
        s_fade_flight_phases &= ~((1<<s_last_phase) + (1<<phase));
  40d6b8:	f884 6eb8 	strb.w	r6, [r4, #3768]	; 0xeb8
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
        delta = (MAX_ACT / 100) / fadeTime;
      }
      else {
        fp_act[s_last_phase] = 0;
        fp_act[phase] = MAX_ACT;
  40d6bc:	f8a0 aebc 	strh.w	sl, [r0, #3772]	; 0xebc
        s_fade_flight_phases &= ~((1<<s_last_phase) + (1<<phase));
      }
    }
    s_last_phase = phase;
  40d6c0:	9b06      	ldr	r3, [sp, #24]
  40d6c2:	f882 3102 	strb.w	r3, [r2, #258]	; 0x102
  }

  if (s_fade_flight_phases) {
  40d6c6:	2e00      	cmp	r6, #0
  40d6c8:	f000 82a7 	beq.w	40dc1a <_Z7perMainv+0x5ee>
    memset(sum_chans512, 0, sizeof(sum_chans512));
    weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        perOut(p);
  40d6cc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40d79c <_Z7perMainv+0x170>
    }
    s_last_phase = phase;
  }

  if (s_fade_flight_phases) {
    memset(sum_chans512, 0, sizeof(sum_chans512));
  40d6d0:	4830      	ldr	r0, [pc, #192]	; (40d794 <_Z7perMainv+0x168>)
  40d6d2:	2100      	movs	r1, #0
  40d6d4:	2280      	movs	r2, #128	; 0x80
  40d6d6:	f04f 0800 	mov.w	r8, #0
  40d6da:	f001 febb 	bl	40f454 <memset>
    weight = 0;
  40d6de:	46c2      	mov	sl, r8
  40d6e0:	f5a9 7721 	sub.w	r7, r9, #644	; 0x284
  40d6e4:	e004      	b.n	40d6f0 <_Z7perMainv+0xc4>
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        perOut(p);
        for (uint8_t i=0; i<NUM_CHNOUT; i++)
          sum_chans512[i] += (chans[i] / 16) * fp_act[p];
        weight += fp_act[p];
  40d6e6:	f108 0801 	add.w	r8, r8, #1
  }

  if (s_fade_flight_phases) {
    memset(sum_chans512, 0, sizeof(sum_chans512));
    weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
  40d6ea:	f1b8 0f09 	cmp.w	r8, #9
  40d6ee:	d020      	beq.n	40d732 <_Z7perMainv+0x106>
      if (s_fade_flight_phases & (1<<p)) {
  40d6f0:	fa46 f308 	asr.w	r3, r6, r8
  40d6f4:	07db      	lsls	r3, r3, #31
    }
    s_last_phase = phase;
  }

  if (s_fade_flight_phases) {
    memset(sum_chans512, 0, sizeof(sum_chans512));
  40d6f6:	fa5f f088 	uxtb.w	r0, r8
    weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
  40d6fa:	d5f4      	bpl.n	40d6e6 <_Z7perMainv+0xba>
        perOut(p);
  40d6fc:	f7fa f97a 	bl	4079f4 <_Z6perOuth>
  40d700:	f839 c018 	ldrh.w	ip, [r9, r8, lsl #1]
  40d704:	4923      	ldr	r1, [pc, #140]	; (40d794 <_Z7perMainv+0x168>)
#else
#define TIME_TO_WRITE s_eeDirtyMsk
#endif

int32_t sum_chans512[NUM_CHNOUT] = {0};
void perMain()
  40d706:	2300      	movs	r3, #0
    weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        perOut(p);
        for (uint8_t i=0; i<NUM_CHNOUT; i++)
          sum_chans512[i] += (chans[i] / 16) * fp_act[p];
  40d708:	58fa      	ldr	r2, [r7, r3]
  40d70a:	58c8      	ldr	r0, [r1, r3]
  40d70c:	f102 0e0f 	add.w	lr, r2, #15
  40d710:	ea32 0222 	bics.w	r2, r2, r2, asr #32
  40d714:	bf28      	it	cs
  40d716:	4672      	movcs	r2, lr
  40d718:	1112      	asrs	r2, r2, #4
  40d71a:	fb02 000c 	mla	r0, r2, ip, r0
  40d71e:	50c8      	str	r0, [r1, r3]
  40d720:	3304      	adds	r3, #4
    memset(sum_chans512, 0, sizeof(sum_chans512));
    weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        perOut(p);
        for (uint8_t i=0; i<NUM_CHNOUT; i++)
  40d722:	2b80      	cmp	r3, #128	; 0x80
  40d724:	d1f0      	bne.n	40d708 <_Z7perMainv+0xdc>
          sum_chans512[i] += (chans[i] / 16) * fp_act[p];
        weight += fp_act[p];
  40d726:	f108 0801 	add.w	r8, r8, #1
  }

  if (s_fade_flight_phases) {
    memset(sum_chans512, 0, sizeof(sum_chans512));
    weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
  40d72a:	f1b8 0f09 	cmp.w	r8, #9
      if (s_fade_flight_phases & (1<<p)) {
        perOut(p);
        for (uint8_t i=0; i<NUM_CHNOUT; i++)
          sum_chans512[i] += (chans[i] / 16) * fp_act[p];
        weight += fp_act[p];
  40d72e:	44e2      	add	sl, ip
  }

  if (s_fade_flight_phases) {
    memset(sum_chans512, 0, sizeof(sum_chans512));
    weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
  40d730:	d1de      	bne.n	40d6f0 <_Z7perMainv+0xc4>
    // later we multiply by the limit (up to 100) and then we need to normalize
    // at the end chans[i] = chans[i]/100 =>  -1024..1024
    // interpolate value with min/max so we get smooth motion from center to stop
    // this limits based on v original values and min=-1024, max=1024  RESX=1024
    //printf("chans%d=%d\n", i, chans[i]);fflush(stdout);
    int32_t q = (s_fade_flight_phases ? (sum_chans512[i] / weight) * 16 : chans[i]);
  40d732:	f8df e064 	ldr.w	lr, [pc, #100]	; 40d798 <_Z7perMainv+0x16c>
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
  int32_t weight = 0;
  40d736:	2700      	movs	r7, #0
    // at the end chans[i] = chans[i]/100 =>  -1024..1024
    // interpolate value with min/max so we get smooth motion from center to stop
    // this limits based on v original values and min=-1024, max=1024  RESX=1024
    //printf("chans%d=%d\n", i, chans[i]);fflush(stdout);
    int32_t q = (s_fade_flight_phases ? (sum_chans512[i] / weight) * 16 : chans[i]);
    ex_chans[i] = q / 100; // for the next perMain
  40d738:	f248 591f 	movw	r9, #34079	; 0x851f
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
  int32_t weight = 0;
  40d73c:	463e      	mov	r6, r7
    // later we multiply by the limit (up to 100) and then we need to normalize
    // at the end chans[i] = chans[i]/100 =>  -1024..1024
    // interpolate value with min/max so we get smooth motion from center to stop
    // this limits based on v original values and min=-1024, max=1024  RESX=1024
    //printf("chans%d=%d\n", i, chans[i]);fflush(stdout);
    int32_t q = (s_fade_flight_phases ? (sum_chans512[i] / weight) * 16 : chans[i]);
  40d73e:	f50e 7b26 	add.w	fp, lr, #664	; 0x298
    ex_chans[i] = q / 100; // for the next perMain
  40d742:	f2c5 19eb 	movt	r9, #20971	; 0x51eb
  40d746:	e016      	b.n	40d776 <_Z7perMainv+0x14a>
    // later we multiply by the limit (up to 100) and then we need to normalize
    // at the end chans[i] = chans[i]/100 =>  -1024..1024
    // interpolate value with min/max so we get smooth motion from center to stop
    // this limits based on v original values and min=-1024, max=1024  RESX=1024
    //printf("chans%d=%d\n", i, chans[i]);fflush(stdout);
    int32_t q = (s_fade_flight_phases ? (sum_chans512[i] / weight) * 16 : chans[i]);
  40d748:	f857 100b 	ldr.w	r1, [r7, fp]
  40d74c:	fb91 f1fa 	sdiv	r1, r1, sl
  40d750:	0109      	lsls	r1, r1, #4
    ex_chans[i] = q / 100; // for the next perMain
  40d752:	fb89 3201 	smull	r3, r2, r9, r1
  40d756:	17cb      	asrs	r3, r1, #31
  40d758:	eb05 0846 	add.w	r8, r5, r6, lsl #1
  40d75c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  40d760:	f8a8 38c8 	strh.w	r3, [r8, #2248]	; 0x8c8

    int16_t value = applyLimits(i, q);
  40d764:	f7f3 fa1e 	bl	400ba4 <_Z11applyLimitshl>

    cli();
    g_chans512[i] = value;  // copy consistent word to int-level
  40d768:	3601      	adds	r6, #1
  40d76a:	3704      	adds	r7, #4
  else {
    perOut(phase);
  }

  //========== LIMITS ===============
  for (uint8_t i=0;i<NUM_CHNOUT;i++) {
  40d76c:	2e20      	cmp	r6, #32
    ex_chans[i] = q / 100; // for the next perMain

    int16_t value = applyLimits(i, q);

    cli();
    g_chans512[i] = value;  // copy consistent word to int-level
  40d76e:	f8a8 09f0 	strh.w	r0, [r8, #2544]	; 0x9f0
    // at the end chans[i] = chans[i]/100 =>  -1024..1024
    // interpolate value with min/max so we get smooth motion from center to stop
    // this limits based on v original values and min=-1024, max=1024  RESX=1024
    //printf("chans%d=%d\n", i, chans[i]);fflush(stdout);
    int32_t q = (s_fade_flight_phases ? (sum_chans512[i] / weight) * 16 : chans[i]);
    ex_chans[i] = q / 100; // for the next perMain
  40d772:	4b05      	ldr	r3, [pc, #20]	; (40d788 <_Z7perMainv+0x15c>)
  else {
    perOut(phase);
  }

  //========== LIMITS ===============
  for (uint8_t i=0;i<NUM_CHNOUT;i++) {
  40d774:	d014      	beq.n	40d7a0 <_Z7perMainv+0x174>
    // later we multiply by the limit (up to 100) and then we need to normalize
    // at the end chans[i] = chans[i]/100 =>  -1024..1024
    // interpolate value with min/max so we get smooth motion from center to stop
    // this limits based on v original values and min=-1024, max=1024  RESX=1024
    //printf("chans%d=%d\n", i, chans[i]);fflush(stdout);
    int32_t q = (s_fade_flight_phases ? (sum_chans512[i] / weight) * 16 : chans[i]);
  40d776:	f894 3eb8 	ldrb.w	r3, [r4, #3768]	; 0xeb8
    }
    // printf("sum=%d, weight=%d ", sum_chans512[2], weight); fflush(stdout);
    assert(weight);
  }
  else {
    perOut(phase);
  40d77a:	b2f0      	uxtb	r0, r6
    // later we multiply by the limit (up to 100) and then we need to normalize
    // at the end chans[i] = chans[i]/100 =>  -1024..1024
    // interpolate value with min/max so we get smooth motion from center to stop
    // this limits based on v original values and min=-1024, max=1024  RESX=1024
    //printf("chans%d=%d\n", i, chans[i]);fflush(stdout);
    int32_t q = (s_fade_flight_phases ? (sum_chans512[i] / weight) * 16 : chans[i]);
  40d77c:	2b00      	cmp	r3, #0
  40d77e:	d1e3      	bne.n	40d748 <_Z7perMainv+0x11c>
  40d780:	4a05      	ldr	r2, [pc, #20]	; (40d798 <_Z7perMainv+0x16c>)
  40d782:	58b9      	ldr	r1, [r7, r2]
  40d784:	e7e5      	b.n	40d752 <_Z7perMainv+0x126>
  40d786:	bf00      	nop
  40d788:	20000108 	.word	0x20000108
  40d78c:	20001200 	.word	0x20001200
  40d790:	20000000 	.word	0x20000000
  40d794:	200020d0 	.word	0x200020d0
  40d798:	20001e38 	.word	0x20001e38
  40d79c:	200020bc 	.word	0x200020bc
    sei();
  }

// TODO same code here + integrate the timer which could be common
#if defined(PCBARM)
  if (Tenms) {
  40d7a0:	f8d4 2b98 	ldr.w	r2, [r4, #2968]	; 0xb98
  40d7a4:	49b5      	ldr	r1, [pc, #724]	; (40da7c <_Z7perMainv+0x450>)
  40d7a6:	b14a      	cbz	r2, 40d7bc <_Z7perMainv+0x190>
    Tenms = 0 ;
    if (Eeprom32_process_state != E32_IDLE)
  40d7a8:	f891 23fc 	ldrb.w	r2, [r1, #1020]	; 0x3fc
  }

// TODO same code here + integrate the timer which could be common
#if defined(PCBARM)
  if (Tenms) {
    Tenms = 0 ;
  40d7ac:	2000      	movs	r0, #0
    if (Eeprom32_process_state != E32_IDLE)
  40d7ae:	2a01      	cmp	r2, #1
  }

// TODO same code here + integrate the timer which could be common
#if defined(PCBARM)
  if (Tenms) {
    Tenms = 0 ;
  40d7b0:	f8c1 0b98 	str.w	r0, [r1, #2968]	; 0xb98
    if (Eeprom32_process_state != E32_IDLE)
  40d7b4:	f000 824e 	beq.w	40dc54 <_Z7perMainv+0x628>
      ee32_process();
  40d7b8:	f7f4 fca6 	bl	402108 <_Z12ee32_processv>
    else if (TIME_TO_WRITE)
      eeCheck();
  }
#endif

  if (!tick10ms) return; //make sure the rest happen only every 10ms.
  40d7bc:	f894 3d78 	ldrb.w	r3, [r4, #3448]	; 0xd78
  40d7c0:	2b00      	cmp	r3, #0
  40d7c2:	f000 8259 	beq.w	40dc78 <_Z7perMainv+0x64c>

  int16_t val;

  if (g_model.thrTraceSrc == 0) {
  40d7c6:	f895 386c 	ldrb.w	r3, [r5, #2156]	; 0x86c
  40d7ca:	4aad      	ldr	r2, [pc, #692]	; (40da80 <_Z7perMainv+0x454>)
  40d7cc:	2b00      	cmp	r3, #0
  40d7ce:	f000 8229 	beq.w	40dc24 <_Z7perMainv+0x5f8>
    val = calibratedStick[THR_STICK]; // get throttle channel value
  }
  else if (g_model.thrTraceSrc > NUM_POTS) {
  40d7d2:	2b03      	cmp	r3, #3
    val = g_chans512[g_model.thrTraceSrc-NUM_POTS-1];
  40d7d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40d7d8:	bf8c      	ite	hi
  40d7da:	f8b3 b9e8 	ldrhhi.w	fp, [r3, #2536]	; 0x9e8
  }
  else {
    val = calibratedStick[g_model.thrTraceSrc+NUM_STICKS-1];
  40d7de:	f8b3 b8be 	ldrhls.w	fp, [r3, #2238]	; 0x8be
  }

  val += RESX;
  40d7e2:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
  val /= (RESX/16); // calibrate it
  40d7e6:	fa0f fb8b 	sxth.w	fp, fp
  40d7ea:	f10b 033f 	add.w	r3, fp, #63	; 0x3f
  static uint16_t s_sum_10s;

  s_cnt_1s++;
  s_sum_1s += val;

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
  40d7ee:	f8b4 0f54 	ldrh.w	r0, [r4, #3924]	; 0xf54
  40d7f2:	f8dd 901c 	ldr.w	r9, [sp, #28]
  else {
    val = calibratedStick[g_model.thrTraceSrc+NUM_STICKS-1];
  }

  val += RESX;
  val /= (RESX/16); // calibrate it
  40d7f6:	ea3b 0b2b 	bics.w	fp, fp, fp, asr #32
  40d7fa:	bf28      	it	cs
  40d7fc:	469b      	movcs	fp, r3
  static uint8_t s_cnt_1s;
  static uint16_t s_sum_1s;
  static uint16_t s_cnt_10s;
  static uint16_t s_sum_10s;

  s_cnt_1s++;
  40d7fe:	f894 1f50 	ldrb.w	r1, [r4, #3920]	; 0xf50
  s_sum_1s += val;
  40d802:	f8b4 2f52 	ldrh.w	r2, [r4, #3922]	; 0xf52
  else {
    val = calibratedStick[g_model.thrTraceSrc+NUM_STICKS-1];
  }

  val += RESX;
  val /= (RESX/16); // calibrate it
  40d806:	f3cb 1b8f 	ubfx	fp, fp, #6, #16
  static uint16_t s_sum_10s;

  s_cnt_1s++;
  s_sum_1s += val;

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
  40d80a:	ebc0 0609 	rsb	r6, r0, r9
  static uint8_t s_cnt_1s;
  static uint16_t s_sum_1s;
  static uint16_t s_cnt_10s;
  static uint16_t s_sum_10s;

  s_cnt_1s++;
  40d80e:	3101      	adds	r1, #1
  s_sum_1s += val;
  40d810:	445a      	add	r2, fp

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
  40d812:	b2b6      	uxth	r6, r6
  static uint8_t s_cnt_1s;
  static uint16_t s_sum_1s;
  static uint16_t s_cnt_10s;
  static uint16_t s_sum_10s;

  s_cnt_1s++;
  40d814:	b2c9      	uxtb	r1, r1
  s_sum_1s += val;
  40d816:	b292      	uxth	r2, r2

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
  40d818:	2e63      	cmp	r6, #99	; 0x63
  static uint8_t s_cnt_1s;
  static uint16_t s_sum_1s;
  static uint16_t s_cnt_10s;
  static uint16_t s_sum_10s;

  s_cnt_1s++;
  40d81a:	f884 1f50 	strb.w	r1, [r4, #3920]	; 0xf50
  s_sum_1s += val;
  40d81e:	f8a4 2f52 	strh.w	r2, [r4, #3922]	; 0xf52
  static uint8_t s_cnt_1s;
  static uint16_t s_sum_1s;
  static uint16_t s_cnt_10s;
  static uint16_t s_sum_10s;

  s_cnt_1s++;
  40d822:	4b96      	ldr	r3, [pc, #600]	; (40da7c <_Z7perMainv+0x450>)
  s_sum_1s += val;

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
  40d824:	d939      	bls.n	40d89a <_Z7perMainv+0x26e>
    s_time_tot += 100;
    s_timeCumTot += 1;

    val = s_sum_1s / s_cnt_1s;
  40d826:	fb92 fbf1 	sdiv	fp, r2, r1
  s_cnt_1s++;
  s_sum_1s += val;

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
    s_time_tot += 100;
    s_timeCumTot += 1;
  40d82a:	f8b3 7baa 	ldrh.w	r7, [r3, #2986]	; 0xbaa

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
  40d82e:	f8b3 eba8 	ldrh.w	lr, [r3, #2984]	; 0xba8
  40d832:	fa0f f68b 	sxth.w	r6, fp
  40d836:	eb06 76d6 	add.w	r6, r6, r6, lsr #31

  s_cnt_1s++;
  s_sum_1s += val;

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
    s_time_tot += 100;
  40d83a:	3064      	adds	r0, #100	; 0x64
    s_timeCumTot += 1;
  40d83c:	3701      	adds	r7, #1

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
  40d83e:	eb0e 0666 	add.w	r6, lr, r6, asr #1

  s_cnt_1s++;
  s_sum_1s += val;

  if ((uint16_t)(tmr10ms - s_time_tot) >= 100) { // 1sec
    s_time_tot += 100;
  40d842:	f8a3 0f54 	strh.w	r0, [r3, #3924]	; 0xf54
    s_timeCumTot += 1;
  40d846:	f8a3 7baa 	strh.w	r7, [r3, #2986]	; 0xbaa

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
  40d84a:	f8a3 6ba8 	strh.w	r6, [r3, #2984]	; 0xba8
    if (val) s_timeCumThr += 1;
  40d84e:	f1bb 0f00 	cmp.w	fp, #0
  40d852:	d004      	beq.n	40d85e <_Z7perMainv+0x232>
  40d854:	f8b3 0ba6 	ldrh.w	r0, [r3, #2982]	; 0xba6
  40d858:	3001      	adds	r0, #1
  40d85a:	f8a3 0ba6 	strh.w	r0, [r3, #2982]	; 0xba6
    s_cnt_10s += s_cnt_1s;
    s_sum_10s += s_sum_1s;
    s_cnt_1s = 0;
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
  40d85e:	f8b4 6f5a 	ldrh.w	r6, [r4, #3930]	; 0xf5a
  40d862:	f8dd a01c 	ldr.w	sl, [sp, #28]

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
  40d866:	f8b4 0f56 	ldrh.w	r0, [r4, #3926]	; 0xf56
    s_sum_10s += s_sum_1s;
  40d86a:	f8b4 3f58 	ldrh.w	r3, [r4, #3928]	; 0xf58
    s_cnt_1s = 0;
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
  40d86e:	ebc6 070a 	rsb	r7, r6, sl
    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
    s_sum_10s += s_sum_1s;
  40d872:	18d2      	adds	r2, r2, r3

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
  40d874:	1809      	adds	r1, r1, r0
    s_sum_10s += s_sum_1s;
    s_cnt_1s = 0;
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
  40d876:	b2bf      	uxth	r7, r7
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
    s_sum_10s += s_sum_1s;
    s_cnt_1s = 0;
  40d878:	2300      	movs	r3, #0
    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
    s_sum_10s += s_sum_1s;
  40d87a:	b290      	uxth	r0, r2

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
  40d87c:	b289      	uxth	r1, r1
    s_sum_10s += s_sum_1s;
    s_cnt_1s = 0;
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
  40d87e:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
  40d882:	f8a4 1f56 	strh.w	r1, [r4, #3926]	; 0xf56
    s_sum_10s += s_sum_1s;
  40d886:	f8a4 0f58 	strh.w	r0, [r4, #3928]	; 0xf58
    s_cnt_1s = 0;
  40d88a:	f884 3f50 	strb.w	r3, [r4, #3920]	; 0xf50
    s_sum_1s = 0;
  40d88e:	f8a4 3f52 	strh.w	r3, [r4, #3922]	; 0xf52

    val = s_sum_1s / s_cnt_1s;
    s_timeCum16ThrP += val / 2;
    if (val) s_timeCumThr += 1;

    s_cnt_10s += s_cnt_1s;
  40d892:	4a7a      	ldr	r2, [pc, #488]	; (40da7c <_Z7perMainv+0x450>)
    s_sum_10s += s_sum_1s;
    s_cnt_1s = 0;
    s_sum_1s = 0;
  40d894:	469e      	mov	lr, r3

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
  40d896:	f080 825e 	bcs.w	40dd56 <_Z7perMainv+0x72a>
      s_sum_10s = 0;
      s_cnt_10s = 0;

      s_traceBuf[s_traceWr++] = val;
      if (s_traceWr >= MAXTRACE) s_traceWr = 0;
      if (s_traceCnt >= 0) s_traceCnt++; // TODO to be checked
  40d89a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 40da94 <_Z7perMainv+0x468>
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
  int32_t weight = 0;
  40d89e:	2700      	movs	r7, #0
  for (uint8_t i=0; i<2; i++) {
    int8_t tm = g_model.timers[i].mode;
    uint16_t tv = g_model.timers[i].val;

    if (tm) {
      if (s_timerState[i] == TMR_OFF) {
  40d8a0:	f508 6a0a 	add.w	sl, r8, #2208	; 0x8a0
  40d8a4:	f10a 0a0c 	add.w	sl, sl, #12
        s_cnt[i]++;
        s_sum[i]+=val;
      }

      if (atm>=(TMR_VAROFS+MAX_SWITCH)){ // toggeled switch
        if(!(sw_toggled[i] | s_sum[i] | s_cnt[i] | lastSwPos[i])) lastSwPos[i] = tm < 0;  // if initializing then init the lastSwPos
  40d8a8:	465a      	mov	r2, fp
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
  int32_t weight = 0;
  40d8aa:	463e      	mov	r6, r7
        uint8_t swPos = getSwitch(tm>0 ? tm-(TMR_VAROFS+MAX_SWITCH-1) : tm+(TMR_VAROFS+MAX_SWITCH-1), 0);
        if (swPos && !lastSwPos[i]) sw_toggled[i] = !sw_toggled[i];  // if switch is flipped first time -> change counter state
        lastSwPos[i] = swPos;
      }

      if ( (s_timerVal_10ms[i] += 1 ) >= 100 ) {
  40d8ac:	f508 6c0b 	add.w	ip, r8, #2224	; 0x8b0
        s_cnt[i]++;
        s_sum[i]+=val;
      }

      if (atm>=(TMR_VAROFS+MAX_SWITCH)){ // toggeled switch
        if(!(sw_toggled[i] | s_sum[i] | s_cnt[i] | lastSwPos[i])) lastSwPos[i] = tm < 0;  // if initializing then init the lastSwPos
  40d8b0:	46d3      	mov	fp, sl
  // Throttle trace end

  // Timers start
  for (uint8_t i=0; i<2; i++) {
    int8_t tm = g_model.timers[i].mode;
    uint16_t tv = g_model.timers[i].val;
  40d8b2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
  40d8b6:	1869      	adds	r1, r5, r1
  40d8b8:	f891 3147 	ldrb.w	r3, [r1, #327]	; 0x147
  }
  // Throttle trace end

  // Timers start
  for (uint8_t i=0; i<2; i++) {
    int8_t tm = g_model.timers[i].mode;
  40d8bc:	f898 900a 	ldrb.w	r9, [r8, #10]
    uint16_t tv = g_model.timers[i].val;
  40d8c0:	f891 1148 	ldrb.w	r1, [r1, #328]	; 0x148
  40d8c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

    if (tm) {
  40d8c8:	f1b9 0f00 	cmp.w	r9, #0
  40d8cc:	f000 80a9 	beq.w	40da22 <_Z7perMainv+0x3f6>
      if (s_timerState[i] == TMR_OFF) {
  40d8d0:	f81b 1006 	ldrb.w	r1, [fp, r6]
  40d8d4:	b969      	cbnz	r1, 40d8f2 <_Z7perMainv+0x2c6>
        s_timerState[i] = TMR_RUNNING;
        s_cnt[i] = 0;
  40d8d6:	486b      	ldr	r0, [pc, #428]	; (40da84 <_Z7perMainv+0x458>)
    int8_t tm = g_model.timers[i].mode;
    uint16_t tv = g_model.timers[i].val;

    if (tm) {
      if (s_timerState[i] == TMR_OFF) {
        s_timerState[i] = TMR_RUNNING;
  40d8d8:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 40da98 <_Z7perMainv+0x46c>
  40d8dc:	f04f 0a01 	mov.w	sl, #1
        s_cnt[i] = 0;
  40d8e0:	5239      	strh	r1, [r7, r0]
    int8_t tm = g_model.timers[i].mode;
    uint16_t tv = g_model.timers[i].val;

    if (tm) {
      if (s_timerState[i] == TMR_OFF) {
        s_timerState[i] = TMR_RUNNING;
  40d8e2:	f806 a00e 	strb.w	sl, [r6, lr]
        s_cnt[i] = 0;
        s_sum[i] = 0;
  40d8e6:	f100 0e04 	add.w	lr, r0, #4
        s_time_cum_16[i] = 0;
  40d8ea:	3008      	adds	r0, #8

    if (tm) {
      if (s_timerState[i] == TMR_OFF) {
        s_timerState[i] = TMR_RUNNING;
        s_cnt[i] = 0;
        s_sum[i] = 0;
  40d8ec:	f827 100e 	strh.w	r1, [r7, lr]
        s_time_cum_16[i] = 0;
  40d8f0:	5239      	strh	r1, [r7, r0]
      }

      uint8_t atm = (tm >= 0 ? tm : TMR_VAROFS-tm-1);
  40d8f2:	fa4f fa89 	sxtb.w	sl, r9
  40d8f6:	f1ba 0f00 	cmp.w	sl, #0
  40d8fa:	f8cd a020 	str.w	sl, [sp, #32]
  40d8fe:	bfb6      	itet	lt
  40d900:	f1c9 0a04 	rsblt	sl, r9, #4
  40d904:	fa5f fa89 	uxtbge.w	sl, r9
  40d908:	fa5f fa8a 	uxtblt.w	sl, sl

      // value for time described in timer->mode
      // OFFABSTHsTH%THt
      if (atm == TMRMODE_THR_REL) {
  40d90c:	f1ba 0f03 	cmp.w	sl, #3
  40d910:	f000 8261 	beq.w	40ddd6 <_Z7perMainv+0x7aa>
        s_cnt[i]++;
        s_sum[i]+=val;
      }

      if (atm>=(TMR_VAROFS+MAX_SWITCH)){ // toggeled switch
  40d914:	f1ba 0f2d 	cmp.w	sl, #45	; 0x2d
  40d918:	d93a      	bls.n	40d990 <_Z7perMainv+0x364>
        if(!(sw_toggled[i] | s_sum[i] | s_cnt[i] | lastSwPos[i])) lastSwPos[i] = tm < 0;  // if initializing then init the lastSwPos
  40d91a:	f8df e180 	ldr.w	lr, [pc, #384]	; 40da9c <_Z7perMainv+0x470>
  40d91e:	f10e 0108 	add.w	r1, lr, #8
  40d922:	5d89      	ldrb	r1, [r1, r6]
  40d924:	f83e 0007 	ldrh.w	r0, [lr, r7]
  40d928:	9109      	str	r1, [sp, #36]	; 0x24
  40d92a:	f1ae 0104 	sub.w	r1, lr, #4
  40d92e:	5a79      	ldrh	r1, [r7, r1]
  40d930:	f10e 0e0c 	add.w	lr, lr, #12
  40d934:	f81e e006 	ldrb.w	lr, [lr, r6]
  40d938:	9102      	str	r1, [sp, #8]
  40d93a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d93c:	f8cd e000 	str.w	lr, [sp]
  40d940:	f8dd e008 	ldr.w	lr, [sp, #8]
  40d944:	4308      	orrs	r0, r1
  40d946:	ea40 010e 	orr.w	r1, r0, lr
  40d94a:	9800      	ldr	r0, [sp, #0]
  40d94c:	4308      	orrs	r0, r1
  40d94e:	bf08      	it	eq
  40d950:	f8df e134 	ldreq.w	lr, [pc, #308]	; 40da88 <_Z7perMainv+0x45c>
        uint8_t swPos = getSwitch(tm>0 ? tm-(TMR_VAROFS+MAX_SWITCH-1) : tm+(TMR_VAROFS+MAX_SWITCH-1), 0);
  40d954:	9808      	ldr	r0, [sp, #32]
        s_cnt[i]++;
        s_sum[i]+=val;
      }

      if (atm>=(TMR_VAROFS+MAX_SWITCH)){ // toggeled switch
        if(!(sw_toggled[i] | s_sum[i] | s_cnt[i] | lastSwPos[i])) lastSwPos[i] = tm < 0;  // if initializing then init the lastSwPos
  40d956:	bf04      	itt	eq
  40d958:	ea4f 11d9 	moveq.w	r1, r9, lsr #7
  40d95c:	f806 100e 	strbeq.w	r1, [r6, lr]
        uint8_t swPos = getSwitch(tm>0 ? tm-(TMR_VAROFS+MAX_SWITCH-1) : tm+(TMR_VAROFS+MAX_SWITCH-1), 0);
  40d960:	2800      	cmp	r0, #0
  40d962:	bfcc      	ite	gt
  40d964:	f1a9 002d 	subgt.w	r0, r9, #45	; 0x2d
  40d968:	f109 002d 	addle.w	r0, r9, #45	; 0x2d
  40d96c:	b2c0      	uxtb	r0, r0
  40d96e:	b240      	sxtb	r0, r0
  40d970:	2100      	movs	r1, #0
  40d972:	9203      	str	r2, [sp, #12]
  40d974:	9305      	str	r3, [sp, #20]
  40d976:	f8cd c010 	str.w	ip, [sp, #16]
  40d97a:	f7f7 f969 	bl	404c50 <_Z9getSwitchab>
        if (swPos && !lastSwPos[i]) sw_toggled[i] = !sw_toggled[i];  // if switch is flipped first time -> change counter state
  40d97e:	9a03      	ldr	r2, [sp, #12]
  40d980:	9b05      	ldr	r3, [sp, #20]
  40d982:	f8dd c010 	ldr.w	ip, [sp, #16]
  40d986:	2800      	cmp	r0, #0
  40d988:	f040 81d3 	bne.w	40dd32 <_Z7perMainv+0x706>
        lastSwPos[i] = swPos;
  40d98c:	493e      	ldr	r1, [pc, #248]	; (40da88 <_Z7perMainv+0x45c>)
  40d98e:	5588      	strb	r0, [r1, r6]
      }

      if ( (s_timerVal_10ms[i] += 1 ) >= 100 ) {
  40d990:	f816 000c 	ldrb.w	r0, [r6, ip]
  40d994:	1c41      	adds	r1, r0, #1
  40d996:	b2c9      	uxtb	r1, r1
  40d998:	2963      	cmp	r1, #99	; 0x63
  40d99a:	f806 100c 	strb.w	r1, [r6, ip]
  40d99e:	d940      	bls.n	40da22 <_Z7perMainv+0x3f6>
        s_timerVal_10ms[i] -= 100 ;
  40d9a0:	3863      	subs	r0, #99	; 0x63
  40d9a2:	f806 000c 	strb.w	r0, [r6, ip]

        if (tv) s_timerVal[i] = tv - s_timerVal[i];
  40d9a6:	2b00      	cmp	r3, #0
  40d9a8:	f040 81be 	bne.w	40dd28 <_Z7perMainv+0x6fc>

        if (atm==TMRMODE_ABS) {
  40d9ac:	f1ba 0f01 	cmp.w	sl, #1
  40d9b0:	d026      	beq.n	40da00 <_Z7perMainv+0x3d4>
          s_timerVal[i]++;
        }
        else if (atm==TMRMODE_THR) {
  40d9b2:	f1ba 0f02 	cmp.w	sl, #2
  40d9b6:	f000 81fb 	beq.w	40ddb0 <_Z7perMainv+0x784>
          if (val) s_timerVal[i]++;
        }
        else if (atm==TMRMODE_THR_REL) {
  40d9ba:	f1ba 0f03 	cmp.w	sl, #3
  40d9be:	f000 82ae 	beq.w	40df1e <_Z7perMainv+0x8f2>
              s_timerVal[i] ++;
              s_time_cum_16[i] -= 16;
            }
          }
        }
        else if (atm==TMRMODE_THR_TRG) {
  40d9c2:	f1ba 0f04 	cmp.w	sl, #4
  40d9c6:	f000 82e2 	beq.w	40df8e <_Z7perMainv+0x962>
          if (val || s_timerVal[i] > 0)
            s_timerVal[i]++;
        }
        else {
          if (atm<(TMR_VAROFS+MAX_SWITCH))
  40d9ca:	f1ba 0f2d 	cmp.w	sl, #45	; 0x2d
  40d9ce:	f200 828a 	bhi.w	40dee6 <_Z7perMainv+0x8ba>
            sw_toggled[i] = tm>0 ? getSwitch(tm-(TMR_VAROFS-1), 0) : !getSwitch(-tm, 0); // normal switch
  40d9d2:	f8dd a020 	ldr.w	sl, [sp, #32]
  40d9d6:	f1ba 0f00 	cmp.w	sl, #0
  40d9da:	f340 82e4 	ble.w	40dfa6 <_Z7perMainv+0x97a>
  40d9de:	f1a9 0004 	sub.w	r0, r9, #4
  40d9e2:	b240      	sxtb	r0, r0
  40d9e4:	2100      	movs	r1, #0
  40d9e6:	9203      	str	r2, [sp, #12]
  40d9e8:	9305      	str	r3, [sp, #20]
  40d9ea:	f8cd c010 	str.w	ip, [sp, #16]
  40d9ee:	f7f7 f92f 	bl	404c50 <_Z9getSwitchab>
  40d9f2:	9a03      	ldr	r2, [sp, #12]
  40d9f4:	9b05      	ldr	r3, [sp, #20]
  40d9f6:	f8dd c010 	ldr.w	ip, [sp, #16]
  40d9fa:	4924      	ldr	r1, [pc, #144]	; (40da8c <_Z7perMainv+0x460>)
  40d9fc:	5470      	strb	r0, [r6, r1]
          if (sw_toggled[i])
  40d9fe:	b118      	cbz	r0, 40da08 <_Z7perMainv+0x3dc>
            s_timerVal[i]++;
  40da00:	4923      	ldr	r1, [pc, #140]	; (40da90 <_Z7perMainv+0x464>)
  40da02:	5a78      	ldrh	r0, [r7, r1]
  40da04:	3001      	adds	r0, #1
  40da06:	5278      	strh	r0, [r7, r1]
        }

        switch(s_timerState[i])
  40da08:	f81b 1006 	ldrb.w	r1, [fp, r6]
  40da0c:	2901      	cmp	r1, #1
  40da0e:	f000 825a 	beq.w	40dec6 <_Z7perMainv+0x89a>
  40da12:	2902      	cmp	r1, #2
  40da14:	f000 81d4 	beq.w	40ddc0 <_Z7perMainv+0x794>
          case TMR_BEEPING:
            if (s_timerVal[i] >= (int16_t)tv + MAX_ALERT_TIME) s_timerState[i]=TMR_STOPPED;
            break;
        }

        if (tv) s_timerVal[i] = tv - s_timerVal[i]; //if counting backwards - display backwards
  40da18:	b11b      	cbz	r3, 40da22 <_Z7perMainv+0x3f6>
  40da1a:	491d      	ldr	r1, [pc, #116]	; (40da90 <_Z7perMainv+0x464>)
  40da1c:	5bc8      	ldrh	r0, [r1, r7]
  40da1e:	1a1b      	subs	r3, r3, r0
  40da20:	53cb      	strh	r3, [r1, r7]
  40da22:	3601      	adds	r6, #1
  40da24:	3702      	adds	r7, #2
    }
  }
  // Throttle trace end

  // Timers start
  for (uint8_t i=0; i<2; i++) {
  40da26:	2e02      	cmp	r6, #2
          case TMR_BEEPING:
            if (s_timerVal[i] >= (int16_t)tv + MAX_ALERT_TIME) s_timerState[i]=TMR_STOPPED;
            break;
        }

        if (tv) s_timerVal[i] = tv - s_timerVal[i]; //if counting backwards - display backwards
  40da28:	f108 0803 	add.w	r8, r8, #3
    }
  }
  // Throttle trace end

  // Timers start
  for (uint8_t i=0; i<2; i++) {
  40da2c:	f47f af41 	bne.w	40d8b2 <_Z7perMainv+0x286>
      }
    }
  };

  static int16_t last_tmr;
  if (last_tmr != s_timerVal[0]) { // beep only if seconds advance
  40da30:	f8b5 3908 	ldrh.w	r3, [r5, #2312]	; 0x908
  40da34:	f9b4 1f6e 	ldrsh.w	r1, [r4, #3950]	; 0xf6e
  40da38:	b21a      	sxth	r2, r3
  40da3a:	4291      	cmp	r1, r2
  40da3c:	4e10      	ldr	r6, [pc, #64]	; (40da80 <_Z7perMainv+0x454>)
  40da3e:	d009      	beq.n	40da54 <_Z7perMainv+0x428>
    if (s_timerState[0] == TMR_RUNNING) {
  40da40:	f896 19e8 	ldrb.w	r1, [r6, #2536]	; 0x9e8
  40da44:	2901      	cmp	r1, #1
  40da46:	f000 81e9 	beq.w	40de1c <_Z7perMainv+0x7f0>

      if (g_eeGeneral.minuteBeep && (((g_model.timers[0].val ? g_model.timers[0].val-s_timerVal[0] : s_timerVal[0])%60)==0)) { // short beep every minute
        AUDIO_MINUTE_BEEP();
      }
    }
    else if(s_timerState[0] == TMR_BEEPING) {
  40da4a:	2902      	cmp	r1, #2
  40da4c:	f000 8251 	beq.w	40def2 <_Z7perMainv+0x8c6>
      AUDIO_WARNING1();
    }
    last_tmr = s_timerVal[0];
  40da50:	f8a4 3f6e 	strh.w	r3, [r4, #3950]	; 0xf6e
  }
  // Timers end

  if (s_fade_flight_phases) {
  40da54:	f894 1eb8 	ldrb.w	r1, [r4, #3768]	; 0xeb8
  40da58:	4b08      	ldr	r3, [pc, #32]	; (40da7c <_Z7perMainv+0x450>)
  40da5a:	2900      	cmp	r1, #0
  40da5c:	d058      	beq.n	40db10 <_Z7perMainv+0x4e4>
            fp_act[p] = MAX_ACT;
            s_fade_flight_phases -= (1<<p);
          }
        }
        else {
          if (fp_act[p] > delta)
  40da5e:	f503 6e6a 	add.w	lr, r3, #3744	; 0xea0

  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        if (p == phase) {
          if (MAX_ACT - fp_act[p] > delta)
  40da62:	2200      	movs	r2, #0
  40da64:	f8b3 cece 	ldrh.w	ip, [r3, #3790]	; 0xece
  40da68:	460f      	mov	r7, r1
  40da6a:	4613      	mov	r3, r2
            fp_act[p] = MAX_ACT;
            s_fade_flight_phases -= (1<<p);
          }
        }
        else {
          if (fp_act[p] > delta)
  40da6c:	f10e 0e1c 	add.w	lr, lr, #28
            fp_act[p] -= delta;
          else {
            fp_act[p] = 0;
            s_fade_flight_phases -= (1<<p);
  40da70:	f04f 0801 	mov.w	r8, #1
  40da74:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40da78:	e029      	b.n	40dace <_Z7perMainv+0x4a2>
  40da7a:	bf00      	nop
  40da7c:	20001200 	.word	0x20001200
  40da80:	20000108 	.word	0x20000108
  40da84:	2000215c 	.word	0x2000215c
  40da88:	2000216c 	.word	0x2000216c
  40da8c:	20002168 	.word	0x20002168
  40da90:	20000a10 	.word	0x20000a10
  40da94:	20000244 	.word	0x20000244
  40da98:	20000af0 	.word	0x20000af0
  40da9c:	20002160 	.word	0x20002160
            fp_act[p] = MAX_ACT;
            s_fade_flight_phases -= (1<<p);
          }
        }
        else {
          if (fp_act[p] > delta)
  40daa0:	f832 000e 	ldrh.w	r0, [r2, lr]
  40daa4:	4584      	cmp	ip, r0
            fp_act[p] -= delta;
          else {
            fp_act[p] = 0;
            s_fade_flight_phases -= (1<<p);
  40daa6:	bf29      	itett	cs
  40daa8:	fa08 f003 	lslcs.w	r0, r8, r3
            s_fade_flight_phases -= (1<<p);
          }
        }
        else {
          if (fp_act[p] > delta)
            fp_act[p] -= delta;
  40daac:	ebcc 0000 	rsbcc	r0, ip, r0
          else {
            fp_act[p] = 0;
            s_fade_flight_phases -= (1<<p);
  40dab0:	ebc0 0101 	rsbcs	r1, r0, r1
        }
        else {
          if (fp_act[p] > delta)
            fp_act[p] -= delta;
          else {
            fp_act[p] = 0;
  40dab4:	f04f 0a00 	movcs.w	sl, #0
            s_fade_flight_phases -= (1<<p);
          }
        }
        else {
          if (fp_act[p] > delta)
            fp_act[p] -= delta;
  40dab8:	bf32      	itee	cc
  40daba:	f822 000e 	strhcc.w	r0, [r2, lr]
          else {
            fp_act[p] = 0;
  40dabe:	f822 a00e 	strhcs.w	sl, [r2, lr]
            s_fade_flight_phases -= (1<<p);
  40dac2:	b2cf      	uxtbcs	r7, r1
  40dac4:	3301      	adds	r3, #1
  40dac6:	3202      	adds	r2, #2
    last_tmr = s_timerVal[0];
  }
  // Timers end

  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
  40dac8:	2b09      	cmp	r3, #9
  40daca:	d01f      	beq.n	40db0c <_Z7perMainv+0x4e0>
  40dacc:	4639      	mov	r1, r7
      if (s_fade_flight_phases & (1<<p)) {
  40dace:	fa51 f003 	asrs.w	r0, r1, r3
  40dad2:	07c0      	lsls	r0, r0, #31
        if (p == phase) {
  40dad4:	b2de      	uxtb	r6, r3
  }
  // Timers end

  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
  40dad6:	d5f5      	bpl.n	40dac4 <_Z7perMainv+0x498>
        if (p == phase) {
  40dad8:	454e      	cmp	r6, r9
  40dada:	d1e1      	bne.n	40daa0 <_Z7perMainv+0x474>
          if (MAX_ACT - fp_act[p] > delta)
  40dadc:	f832 600e 	ldrh.w	r6, [r2, lr]
  40dae0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40dae4:	1b80      	subs	r0, r0, r6
  40dae6:	4560      	cmp	r0, ip
            fp_act[p] += delta;
          else {
            fp_act[p] = MAX_ACT;
            s_fade_flight_phases -= (1<<p);
  40dae8:	bfd7      	itett	le
  40daea:	fa08 f003 	lslle.w	r0, r8, r3
  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        if (p == phase) {
          if (MAX_ACT - fp_act[p] > delta)
            fp_act[p] += delta;
  40daee:	4466      	addgt	r6, ip
          else {
            fp_act[p] = MAX_ACT;
            s_fade_flight_phases -= (1<<p);
  40daf0:	ebc0 0101 	rsble	r1, r0, r1
      if (s_fade_flight_phases & (1<<p)) {
        if (p == phase) {
          if (MAX_ACT - fp_act[p] > delta)
            fp_act[p] += delta;
          else {
            fp_act[p] = MAX_ACT;
  40daf4:	f04f 36ff 	movle.w	r6, #4294967295
  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        if (p == phase) {
          if (MAX_ACT - fp_act[p] > delta)
            fp_act[p] += delta;
  40daf8:	bfce      	itee	gt
  40dafa:	f822 600e 	strhgt.w	r6, [r2, lr]
          else {
            fp_act[p] = MAX_ACT;
  40dafe:	f822 600e 	strhle.w	r6, [r2, lr]
            s_fade_flight_phases -= (1<<p);
  40db02:	b2cf      	uxtble	r7, r1
        else {
          if (fp_act[p] > delta)
            fp_act[p] -= delta;
          else {
            fp_act[p] = 0;
            s_fade_flight_phases -= (1<<p);
  40db04:	3301      	adds	r3, #1
  40db06:	3202      	adds	r2, #2
    last_tmr = s_timerVal[0];
  }
  // Timers end

  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
  40db08:	2b09      	cmp	r3, #9
  40db0a:	d1df      	bne.n	40dacc <_Z7perMainv+0x4a0>
  40db0c:	f884 7eb8 	strb.w	r7, [r4, #3768]	; 0xeb8
        }
      }
    }
  }
  
  evalFunctions();
  40db10:	f7ff fcd4 	bl	40d4bc <_Z13evalFunctionsv>

  if (s_noHi) s_noHi--;
  40db14:	f894 3eb4 	ldrb.w	r3, [r4, #3764]	; 0xeb4
  40db18:	b11b      	cbz	r3, 40db22 <_Z7perMainv+0x4f6>
  40db1a:	4ab7      	ldr	r2, [pc, #732]	; (40ddf8 <_Z7perMainv+0x7cc>)
  40db1c:	3b01      	subs	r3, #1
  40db1e:	f882 3eb4 	strb.w	r3, [r2, #3764]	; 0xeb4
  if (trimsCheckTimer) trimsCheckTimer --;
  40db22:	f894 3b08 	ldrb.w	r3, [r4, #2824]	; 0xb08
  40db26:	b11b      	cbz	r3, 40db30 <_Z7perMainv+0x504>
  40db28:	4ab3      	ldr	r2, [pc, #716]	; (40ddf8 <_Z7perMainv+0x7cc>)
  40db2a:	3b01      	subs	r3, #1
  40db2c:	f882 3b08 	strb.w	r3, [r2, #2824]	; 0xb08

  if (g_eeGeneral.inactivityTimer && g_vbat100mV>50) {
  40db30:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
  40db34:	b312      	cbz	r2, 40db7c <_Z7perMainv+0x550>
  40db36:	f8b4 3a8e 	ldrh.w	r3, [r4, #2702]	; 0xa8e
  40db3a:	49af      	ldr	r1, [pc, #700]	; (40ddf8 <_Z7perMainv+0x7cc>)
  40db3c:	2b32      	cmp	r3, #50	; 0x32
  40db3e:	d91d      	bls.n	40db7c <_Z7perMainv+0x550>
    inacCounter++;
  40db40:	f8d1 7a90 	ldr.w	r7, [r1, #2704]	; 0xa90
  40db44:	4bad      	ldr	r3, [pc, #692]	; (40ddfc <_Z7perMainv+0x7d0>)
  40db46:	3701      	adds	r7, #1
  40db48:	f8c1 7a90 	str.w	r7, [r1, #2704]	; 0xa90
#else
#define TIME_TO_WRITE s_eeDirtyMsk
#endif

int32_t sum_chans512[NUM_CHNOUT] = {0};
void perMain()
  40db4c:	1d1e      	adds	r6, r3, #4
  if (s_noHi) s_noHi--;
  if (trimsCheckTimer) trimsCheckTimer --;

  if (g_eeGeneral.inactivityTimer && g_vbat100mV>50) {
    inacCounter++;
    uint16_t tsum = 0;
  40db4e:	2100      	movs	r1, #0
#endif
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  40db50:	f813 0b01 	ldrb.w	r0, [r3], #1
  return *p;
  40db54:	eb05 0040 	add.w	r0, r5, r0, lsl #1
  40db58:	f8b0 09b0 	ldrh.w	r0, [r0, #2480]	; 0x9b0
  if (trimsCheckTimer) trimsCheckTimer --;

  if (g_eeGeneral.inactivityTimer && g_vbat100mV>50) {
    inacCounter++;
    uint16_t tsum = 0;
    for(uint8_t i=0;i<4;i++) tsum += anaIn(i)/64;  // reduce sensitivity
  40db5c:	42b3      	cmp	r3, r6
  40db5e:	eb01 1190 	add.w	r1, r1, r0, lsr #6
  40db62:	b289      	uxth	r1, r1
  40db64:	d1f4      	bne.n	40db50 <_Z7perMainv+0x524>
    if(tsum!=inacSum){
  40db66:	f8b4 0f70 	ldrh.w	r0, [r4, #3952]	; 0xf70
  40db6a:	4ba3      	ldr	r3, [pc, #652]	; (40ddf8 <_Z7perMainv+0x7cc>)
  40db6c:	4288      	cmp	r0, r1
  40db6e:	f000 81c6 	beq.w	40defe <_Z7perMainv+0x8d2>
      inacSum = tsum;
      inacCounter=0;
  40db72:	2200      	movs	r2, #0
  if (g_eeGeneral.inactivityTimer && g_vbat100mV>50) {
    inacCounter++;
    uint16_t tsum = 0;
    for(uint8_t i=0;i<4;i++) tsum += anaIn(i)/64;  // reduce sensitivity
    if(tsum!=inacSum){
      inacSum = tsum;
  40db74:	f8a3 1f70 	strh.w	r1, [r3, #3952]	; 0xf70
      inacCounter=0;
  40db78:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
      f_putc(userDataRxBuffer[byt], &g_oLogFile);

  }
#endif

  lcd_clear();
  40db7c:	f7f4 fd28 	bl	4025d0 <_Z9lcd_clearv>
  s_evt = evt;
}
uint8_t getEvent()
{
  uint8_t evt = s_evt;
  s_evt=0;
  40db80:	2300      	movs	r3, #0
{
  s_evt = evt;
}
uint8_t getEvent()
{
  uint8_t evt = s_evt;
  40db82:	f895 09ae 	ldrb.w	r0, [r5, #2478]	; 0x9ae
  s_evt=0;
  40db86:	f885 39ae 	strb.w	r3, [r5, #2478]	; 0x9ae
  uint8_t evt = getEvent();
  evt = checkTrim(evt);
  40db8a:	f7ff fb7f 	bl	40d28c <_Z9checkTrimh>

  // TODO port lightOnStickMove from er9x + flash saving, call checkBacklight()
  if(g_LightOffCounter) g_LightOffCounter--;
  40db8e:	f8b4 3b16 	ldrh.w	r3, [r4, #2838]	; 0xb16
  }
#endif

  lcd_clear();
  uint8_t evt = getEvent();
  evt = checkTrim(evt);
  40db92:	4606      	mov	r6, r0

  // TODO port lightOnStickMove from er9x + flash saving, call checkBacklight()
  if(g_LightOffCounter) g_LightOffCounter--;
  40db94:	b11b      	cbz	r3, 40db9e <_Z7perMainv+0x572>
  40db96:	4a98      	ldr	r2, [pc, #608]	; (40ddf8 <_Z7perMainv+0x7cc>)
  40db98:	3b01      	subs	r3, #1
  40db9a:	f8a2 3b16 	strh.w	r3, [r2, #2838]	; 0xb16
  if(evt) g_LightOffCounter = g_eeGeneral.lightAutoOff*500; // on keypress turn the light on 5*100
  40db9e:	b146      	cbz	r6, 40dbb2 <_Z7perMainv+0x586>
  40dba0:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
  40dba4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
  40dba8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40dbac:	009b      	lsls	r3, r3, #2
  40dbae:	f8a4 3b16 	strh.w	r3, [r4, #2838]	; 0xb16

  if (getSwitch(g_eeGeneral.lightSw,0) || g_LightOffCounter)
  40dbb2:	f995 0055 	ldrsb.w	r0, [r5, #85]	; 0x55
  40dbb6:	2100      	movs	r1, #0
  40dbb8:	f7f7 f84a 	bl	404c50 <_Z9getSwitchab>
  40dbbc:	2800      	cmp	r0, #0
  40dbbe:	d05e      	beq.n	40dc7e <_Z7perMainv+0x652>
    BACKLIGHT_ON;
  40dbc0:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
  40dbc4:	2300      	movs	r3, #0
  40dbc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
  40dbca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  else
    BACKLIGHT_OFF;

#if defined(PCBARM) && defined(FRSKY)
  check_frsky();
  40dbce:	f7fe fbf3 	bl	40c3b8 <_Z11check_frskyv>
#endif

  g_menuStack[g_menuStackPtr](evt);
  40dbd2:	f894 3ba4 	ldrb.w	r3, [r4, #2980]	; 0xba4
  40dbd6:	4630      	mov	r0, r6
  40dbd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40dbdc:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
  40dbe0:	4798      	blx	r3
  refreshDisplay();
  40dbe2:	f7f6 f803 	bl	403bec <_Z14refreshDisplayv>

#if defined(PCBARM)
  if ( check_soft_power() == e_power_trainer ) {          // On trainer power
  40dbe6:	f7f2 fb4d 	bl	400284 <_Z16check_soft_powerv>
    PIOC->PIO_PDR = PIO_PC22 ;                            // Disable bit C22 Assign to peripheral
  40dbea:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  else{
    PORTG |=  (1<<OUT_G_SIM_CTL); // 1=ppm-in
  }
#endif

  switch( tmr10ms & 0x1f ) { //alle 10ms*32
  40dbee:	9e07      	ldr	r6, [sp, #28]
  g_menuStack[g_menuStackPtr](evt);
  refreshDisplay();

#if defined(PCBARM)
  if ( check_soft_power() == e_power_trainer ) {          // On trainer power
    PIOC->PIO_PDR = PIO_PC22 ;                            // Disable bit C22 Assign to peripheral
  40dbf0:	f2c4 030e 	movt	r3, #16398	; 0x400e

  g_menuStack[g_menuStackPtr](evt);
  refreshDisplay();

#if defined(PCBARM)
  if ( check_soft_power() == e_power_trainer ) {          // On trainer power
  40dbf4:	2801      	cmp	r0, #1
    PIOC->PIO_PDR = PIO_PC22 ;                            // Disable bit C22 Assign to peripheral
  40dbf6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40dbfa:	bf0c      	ite	eq
  40dbfc:	605a      	streq	r2, [r3, #4]
  }
  else {
    PIOC->PIO_PER = PIO_PC22 ;                            // Enable bit C22 as input
  40dbfe:	601a      	strne	r2, [r3, #0]
  else{
    PORTG |=  (1<<OUT_G_SIM_CTL); // 1=ppm-in
  }
#endif

  switch( tmr10ms & 0x1f ) { //alle 10ms*32
  40dc00:	f006 031f 	and.w	r3, r6, #31
  40dc04:	2b02      	cmp	r3, #2
  40dc06:	d045      	beq.n	40dc94 <_Z7perMainv+0x668>
      }
      break;
  }

#if defined(PCBARM)
  HAPTIC_HEARTBEAT();
  40dc08:	487d      	ldr	r0, [pc, #500]	; (40de00 <_Z7perMainv+0x7d4>)
  40dc0a:	f7f8 fbcb 	bl	4063a4 <_ZN11hapticQueue9heartbeatEv>
  AUDIO_HEARTBEAT();  // the queue processing
  40dc0e:	487d      	ldr	r0, [pc, #500]	; (40de04 <_Z7perMainv+0x7d8>)
#endif

}
  40dc10:	b00b      	add	sp, #44	; 0x2c
  40dc12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      break;
  }

#if defined(PCBARM)
  HAPTIC_HEARTBEAT();
  AUDIO_HEARTBEAT();  // the queue processing
  40dc16:	f7f8 b879 	b.w	405d0c <_ZN10audioQueue9heartbeatEv>
    }
    // printf("sum=%d, weight=%d ", sum_chans512[2], weight); fflush(stdout);
    assert(weight);
  }
  else {
    perOut(phase);
  40dc1a:	9806      	ldr	r0, [sp, #24]
  40dc1c:	f7f9 feea 	bl	4079f4 <_Z6perOuth>
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
  int32_t weight = 0;
  40dc20:	46b2      	mov	sl, r6
  40dc22:	e586      	b.n	40d732 <_Z7perMainv+0x106>
  if (!tick10ms) return; //make sure the rest happen only every 10ms.

  int16_t val;

  if (g_model.thrTraceSrc == 0) {
    val = calibratedStick[THR_STICK]; // get throttle channel value
  40dc24:	f8b2 b8bc 	ldrh.w	fp, [r2, #2236]	; 0x8bc
  40dc28:	e5db      	b.n	40d7e2 <_Z7perMainv+0x1b6>
    if (s_last_phase == 255) {
      fp_act[phase] = MAX_ACT;
    }
    else {
      uint8_t fadeTime = max(g_model.phaseData[s_last_phase].fadeOut, g_model.phaseData[phase].fadeIn);
      if (fadeTime) {
  40dc2a:	4608      	mov	r0, r1
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
  40dc2c:	9e06      	ldr	r6, [sp, #24]
  40dc2e:	2101      	movs	r1, #1
  40dc30:	fa11 f706 	lsls.w	r7, r1, r6
  40dc34:	fa11 f303 	lsls.w	r3, r1, r3
  40dc38:	f894 6eb8 	ldrb.w	r6, [r4, #3768]	; 0xeb8
  40dc3c:	18fb      	adds	r3, r7, r3
  40dc3e:	431e      	orrs	r6, r3
        delta = (MAX_ACT / 100) / fadeTime;
  40dc40:	f240 238f 	movw	r3, #655	; 0x28f
      fp_act[phase] = MAX_ACT;
    }
    else {
      uint8_t fadeTime = max(g_model.phaseData[s_last_phase].fadeOut, g_model.phaseData[phase].fadeIn);
      if (fadeTime) {
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
  40dc44:	b2f6      	uxtb	r6, r6
        delta = (MAX_ACT / 100) / fadeTime;
  40dc46:	fb93 f0f0 	sdiv	r0, r3, r0
      fp_act[phase] = MAX_ACT;
    }
    else {
      uint8_t fadeTime = max(g_model.phaseData[s_last_phase].fadeOut, g_model.phaseData[phase].fadeIn);
      if (fadeTime) {
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
  40dc4a:	f884 6eb8 	strb.w	r6, [r4, #3768]	; 0xeb8
        delta = (MAX_ACT / 100) / fadeTime;
  40dc4e:	f8a4 0ece 	strh.w	r0, [r4, #3790]	; 0xece
  40dc52:	e535      	b.n	40d6c0 <_Z7perMainv+0x94>
#if defined(PCBARM)
  if (Tenms) {
    Tenms = 0 ;
    if (Eeprom32_process_state != E32_IDLE)
      ee32_process();
    else if (TIME_TO_WRITE)
  40dc54:	f893 29a8 	ldrb.w	r2, [r3, #2472]	; 0x9a8
  40dc58:	2a00      	cmp	r2, #0
  40dc5a:	f43f adaf 	beq.w	40d7bc <_Z7perMainv+0x190>
  40dc5e:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
  40dc62:	f8b3 39ac 	ldrh.w	r3, [r3, #2476]	; 0x9ac
  40dc66:	b292      	uxth	r2, r2
  40dc68:	1ad3      	subs	r3, r2, r3
  40dc6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40dc6e:	f6ff ada5 	blt.w	40d7bc <_Z7perMainv+0x190>
      eeCheck();
  40dc72:	f7f4 fb53 	bl	40231c <_Z7eeCheckb>
  40dc76:	e5a1      	b.n	40d7bc <_Z7perMainv+0x190>
#if defined(PCBARM)
  HAPTIC_HEARTBEAT();
  AUDIO_HEARTBEAT();  // the queue processing
#endif

}
  40dc78:	b00b      	add	sp, #44	; 0x2c
  40dc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // TODO port lightOnStickMove from er9x + flash saving, call checkBacklight()
  if(g_LightOffCounter) g_LightOffCounter--;
  if(evt) g_LightOffCounter = g_eeGeneral.lightAutoOff*500; // on keypress turn the light on 5*100

  if (getSwitch(g_eeGeneral.lightSw,0) || g_LightOffCounter)
  40dc7e:	f8b4 3b16 	ldrh.w	r3, [r4, #2838]	; 0xb16
  40dc82:	2b00      	cmp	r3, #0
  40dc84:	d19c      	bne.n	40dbc0 <_Z7perMainv+0x594>
    BACKLIGHT_ON;
  else
    BACKLIGHT_OFF;
  40dc86:	2300      	movs	r3, #0
  40dc88:	f2c4 0302 	movt	r3, #16386	; 0x4002
  40dc8c:	2264      	movs	r2, #100	; 0x64
  40dc8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  40dc92:	e79c      	b.n	40dbce <_Z7perMainv+0x5a2>
#else
  static const pm_char crossAna[] PROGMEM ={3,1,2,0,4,5,6,7};
#endif

  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
  return *p;
  40dc94:	f8b5 29b6 	ldrh.w	r2, [r5, #2486]	; 0x9b6

    case 2:
      {
        int32_t instant_vbat = anaIn(7);
#if defined(PCBARM)
        instant_vbat = ( instant_vbat + instant_vbat*(g_eeGeneral.vBatCalib)/128 ) * 4191 ;
  40dc98:	f995 3054 	ldrsb.w	r3, [r5, #84]	; 0x54
        instant_vbat /= 55296  ;
  40dc9c:	f241 21f7 	movw	r1, #4855	; 0x12f7

    case 2:
      {
        int32_t instant_vbat = anaIn(7);
#if defined(PCBARM)
        instant_vbat = ( instant_vbat + instant_vbat*(g_eeGeneral.vBatCalib)/128 ) * 4191 ;
  40dca0:	fb02 f303 	mul.w	r3, r2, r3
  40dca4:	f103 007f 	add.w	r0, r3, #127	; 0x7f
  40dca8:	ea33 0323 	bics.w	r3, r3, r3, asr #32
  40dcac:	bf28      	it	cs
  40dcae:	4603      	movcs	r3, r0
  40dcb0:	eb02 12e3 	add.w	r2, r2, r3, asr #7
  40dcb4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
  40dcb8:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
        instant_vbat /= 55296  ;
  40dcbc:	f6c4 31da 	movt	r1, #19418	; 0x4bda
  40dcc0:	fb81 9102 	smull	r9, r1, r1, r2
#elif defined(PCBV4)
        instant_vbat = ((uint32_t)instant_vbat*1112 + (int32_t)instant_vbat*g_eeGeneral.vBatCalib + (BandGap<<2)) / (BandGap<<3);
#else
        instant_vbat = (instant_vbat*16 + instant_vbat*g_eeGeneral.vBatCalib/8) / BandGap;
#endif
        if (g_vbat100mV == 0 || g_menuStack[g_menuStackPtr] != menuMainView) g_vbat100mV = instant_vbat;
  40dcc4:	f8b4 3a8e 	ldrh.w	r3, [r4, #2702]	; 0xa8e
    case 2:
      {
        int32_t instant_vbat = anaIn(7);
#if defined(PCBARM)
        instant_vbat = ( instant_vbat + instant_vbat*(g_eeGeneral.vBatCalib)/128 ) * 4191 ;
        instant_vbat /= 55296  ;
  40dcc8:	17d2      	asrs	r2, r2, #31
  40dcca:	ebc2 32a1 	rsb	r2, r2, r1, asr #14
#elif defined(PCBV4)
        instant_vbat = ((uint32_t)instant_vbat*1112 + (int32_t)instant_vbat*g_eeGeneral.vBatCalib + (BandGap<<2)) / (BandGap<<3);
#else
        instant_vbat = (instant_vbat*16 + instant_vbat*g_eeGeneral.vBatCalib/8) / BandGap;
#endif
        if (g_vbat100mV == 0 || g_menuStack[g_menuStackPtr] != menuMainView) g_vbat100mV = instant_vbat;
  40dcce:	494a      	ldr	r1, [pc, #296]	; (40ddf8 <_Z7perMainv+0x7cc>)
  40dcd0:	2b00      	cmp	r3, #0
  40dcd2:	d163      	bne.n	40dd9c <_Z7perMainv+0x770>
  40dcd4:	b293      	uxth	r3, r2
        g_vbat100mV = (instant_vbat + g_vbat100mV*7) / 8;
  40dcd6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40dcda:	189b      	adds	r3, r3, r2

        static uint8_t s_batCheck;
        s_batCheck+=32;
  40dcdc:	f894 1f72 	ldrb.w	r1, [r4, #3954]	; 0xf72
        instant_vbat = ((uint32_t)instant_vbat*1112 + (int32_t)instant_vbat*g_eeGeneral.vBatCalib + (BandGap<<2)) / (BandGap<<3);
#else
        instant_vbat = (instant_vbat*16 + instant_vbat*g_eeGeneral.vBatCalib/8) / BandGap;
#endif
        if (g_vbat100mV == 0 || g_menuStack[g_menuStackPtr] != menuMainView) g_vbat100mV = instant_vbat;
        g_vbat100mV = (instant_vbat + g_vbat100mV*7) / 8;
  40dce0:	1dda      	adds	r2, r3, #7
  40dce2:	ea33 0323 	bics.w	r3, r3, r3, asr #32
  40dce6:	bf28      	it	cs
  40dce8:	4613      	movcs	r3, r2

        static uint8_t s_batCheck;
        s_batCheck+=32;
  40dcea:	3120      	adds	r1, #32
        instant_vbat = ((uint32_t)instant_vbat*1112 + (int32_t)instant_vbat*g_eeGeneral.vBatCalib + (BandGap<<2)) / (BandGap<<3);
#else
        instant_vbat = (instant_vbat*16 + instant_vbat*g_eeGeneral.vBatCalib/8) / BandGap;
#endif
        if (g_vbat100mV == 0 || g_menuStack[g_menuStackPtr] != menuMainView) g_vbat100mV = instant_vbat;
        g_vbat100mV = (instant_vbat + g_vbat100mV*7) / 8;
  40dcec:	f3c3 02cf 	ubfx	r2, r3, #3, #16

        static uint8_t s_batCheck;
        s_batCheck+=32;
  40dcf0:	b2cb      	uxtb	r3, r1
        instant_vbat = ((uint32_t)instant_vbat*1112 + (int32_t)instant_vbat*g_eeGeneral.vBatCalib + (BandGap<<2)) / (BandGap<<3);
#else
        instant_vbat = (instant_vbat*16 + instant_vbat*g_eeGeneral.vBatCalib/8) / BandGap;
#endif
        if (g_vbat100mV == 0 || g_menuStack[g_menuStackPtr] != menuMainView) g_vbat100mV = instant_vbat;
        g_vbat100mV = (instant_vbat + g_vbat100mV*7) / 8;
  40dcf2:	f8a4 2a8e 	strh.w	r2, [r4, #2702]	; 0xa8e

        static uint8_t s_batCheck;
        s_batCheck+=32;
  40dcf6:	f884 3f72 	strb.w	r3, [r4, #3954]	; 0xf72
        if (s_batCheck==0 && g_vbat100mV<g_eeGeneral.vBatWarn && g_vbat100mV>50) {
  40dcfa:	2b00      	cmp	r3, #0
  40dcfc:	d184      	bne.n	40dc08 <_Z7perMainv+0x5dc>
  40dcfe:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
  40dd02:	4293      	cmp	r3, r2
  40dd04:	d980      	bls.n	40dc08 <_Z7perMainv+0x5dc>
  40dd06:	2a32      	cmp	r2, #50	; 0x32
  40dd08:	f67f af7e 	bls.w	40dc08 <_Z7perMainv+0x5dc>
          AUDIO_ERROR(); // TODO AUDIO_TX_BATTERY_LOW()
  40dd0c:	2002      	movs	r0, #2
  40dd0e:	f7f8 fbfd 	bl	40650c <_Z13audioDefeventh>
  40dd12:	e779      	b.n	40dc08 <_Z7perMainv+0x5dc>
  uint8_t phase = getFlightPhase();
  int32_t weight = 0;

  if (s_last_phase != phase) {
    if (s_last_phase == 255) {
      fp_act[phase] = MAX_ACT;
  40dd14:	9e06      	ldr	r6, [sp, #24]
  40dd16:	f04f 39ff 	mov.w	r9, #4294967295
  40dd1a:	eb04 0346 	add.w	r3, r4, r6, lsl #1
  40dd1e:	f8a3 9ebc 	strh.w	r9, [r3, #3772]	; 0xebc
  40dd22:	f894 6eb8 	ldrb.w	r6, [r4, #3768]	; 0xeb8
  40dd26:	e4cb      	b.n	40d6c0 <_Z7perMainv+0x94>
      }

      if ( (s_timerVal_10ms[i] += 1 ) >= 100 ) {
        s_timerVal_10ms[i] -= 100 ;

        if (tv) s_timerVal[i] = tv - s_timerVal[i];
  40dd28:	4937      	ldr	r1, [pc, #220]	; (40de08 <_Z7perMainv+0x7dc>)
  40dd2a:	5a78      	ldrh	r0, [r7, r1]
  40dd2c:	1a18      	subs	r0, r3, r0
  40dd2e:	5278      	strh	r0, [r7, r1]
  40dd30:	e63c      	b.n	40d9ac <_Z7perMainv+0x380>
      }

      if (atm>=(TMR_VAROFS+MAX_SWITCH)){ // toggeled switch
        if(!(sw_toggled[i] | s_sum[i] | s_cnt[i] | lastSwPos[i])) lastSwPos[i] = tm < 0;  // if initializing then init the lastSwPos
        uint8_t swPos = getSwitch(tm>0 ? tm-(TMR_VAROFS+MAX_SWITCH-1) : tm+(TMR_VAROFS+MAX_SWITCH-1), 0);
        if (swPos && !lastSwPos[i]) sw_toggled[i] = !sw_toggled[i];  // if switch is flipped first time -> change counter state
  40dd32:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 40de14 <_Z7perMainv+0x7e8>
  40dd36:	f81e 1006 	ldrb.w	r1, [lr, r6]
  40dd3a:	2900      	cmp	r1, #0
  40dd3c:	f47f ae26 	bne.w	40d98c <_Z7perMainv+0x360>
  40dd40:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  40dd44:	f1de 0101 	rsbs	r1, lr, #1
  40dd48:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 40de18 <_Z7perMainv+0x7ec>
  40dd4c:	bf38      	it	cc
  40dd4e:	2100      	movcc	r1, #0
  40dd50:	f80e 1006 	strb.w	r1, [lr, r6]
  40dd54:	e61a      	b.n	40d98c <_Z7perMainv+0x360>
      s_time_trace += 1000;
      val = s_sum_10s / s_cnt_10s;
      s_sum_10s = 0;
      s_cnt_10s = 0;

      s_traceBuf[s_traceWr++] = val;
  40dd56:	f892 7bad 	ldrb.w	r7, [r2, #2989]	; 0xbad
    s_cnt_1s = 0;
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
      s_time_trace += 1000;
      val = s_sum_10s / s_cnt_10s;
  40dd5a:	fbb0 fbf1 	udiv	fp, r0, r1
      s_sum_10s = 0;
      s_cnt_10s = 0;

      s_traceBuf[s_traceWr++] = val;
  40dd5e:	f107 0c01 	add.w	ip, r7, #1
  40dd62:	fa5f f18c 	uxtb.w	r1, ip
      if (s_traceWr >= MAXTRACE) s_traceWr = 0;
  40dd66:	2977      	cmp	r1, #119	; 0x77
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
      s_time_trace += 1000;
      val = s_sum_10s / s_cnt_10s;
      s_sum_10s = 0;
  40dd68:	f8a2 3f58 	strh.w	r3, [r2, #3928]	; 0xf58
      s_cnt_10s = 0;
  40dd6c:	f8a2 3f56 	strh.w	r3, [r2, #3926]	; 0xf56

      s_traceBuf[s_traceWr++] = val;
  40dd70:	f882 1bad 	strb.w	r1, [r2, #2989]	; 0xbad
      if (s_traceWr >= MAXTRACE) s_traceWr = 0;
  40dd74:	bf88      	it	hi
  40dd76:	f882 3bad 	strbhi.w	r3, [r2, #2989]	; 0xbad
      if (s_traceCnt >= 0) s_traceCnt++; // TODO to be checked
  40dd7a:	f894 3bac 	ldrb.w	r3, [r4, #2988]	; 0xbac
    s_sum_10s += s_sum_1s;
    s_cnt_1s = 0;
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
      s_time_trace += 1000;
  40dd7e:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
      val = s_sum_10s / s_cnt_10s;
      s_sum_10s = 0;
      s_cnt_10s = 0;

      s_traceBuf[s_traceWr++] = val;
  40dd82:	19d7      	adds	r7, r2, r7
    s_sum_10s += s_sum_1s;
    s_cnt_1s = 0;
    s_sum_1s = 0;

    if ((uint16_t)(tmr10ms - s_time_trace) >= 1000) {// 10sec
      s_time_trace += 1000;
  40dd84:	f8a2 6f5a 	strh.w	r6, [r2, #3930]	; 0xf5a
      s_sum_10s = 0;
      s_cnt_10s = 0;

      s_traceBuf[s_traceWr++] = val;
      if (s_traceWr >= MAXTRACE) s_traceWr = 0;
      if (s_traceCnt >= 0) s_traceCnt++; // TODO to be checked
  40dd88:	061e      	lsls	r6, r3, #24
      s_time_trace += 1000;
      val = s_sum_10s / s_cnt_10s;
      s_sum_10s = 0;
      s_cnt_10s = 0;

      s_traceBuf[s_traceWr++] = val;
  40dd8a:	f887 bbb0 	strb.w	fp, [r7, #2992]	; 0xbb0
      if (s_traceWr >= MAXTRACE) s_traceWr = 0;
      if (s_traceCnt >= 0) s_traceCnt++; // TODO to be checked
  40dd8e:	f53f ad84 	bmi.w	40d89a <_Z7perMainv+0x26e>
  40dd92:	4a19      	ldr	r2, [pc, #100]	; (40ddf8 <_Z7perMainv+0x7cc>)
  40dd94:	3301      	adds	r3, #1
  40dd96:	f882 3bac 	strb.w	r3, [r2, #2988]	; 0xbac
  40dd9a:	e57e      	b.n	40d89a <_Z7perMainv+0x26e>
#elif defined(PCBV4)
        instant_vbat = ((uint32_t)instant_vbat*1112 + (int32_t)instant_vbat*g_eeGeneral.vBatCalib + (BandGap<<2)) / (BandGap<<3);
#else
        instant_vbat = (instant_vbat*16 + instant_vbat*g_eeGeneral.vBatCalib/8) / BandGap;
#endif
        if (g_vbat100mV == 0 || g_menuStack[g_menuStackPtr] != menuMainView) g_vbat100mV = instant_vbat;
  40dd9c:	f891 0ba4 	ldrb.w	r0, [r1, #2980]	; 0xba4
  40dda0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  40dda4:	f8d1 0a98 	ldr.w	r0, [r1, #2712]	; 0xa98
  40dda8:	4918      	ldr	r1, [pc, #96]	; (40de0c <_Z7perMainv+0x7e0>)
  40ddaa:	4288      	cmp	r0, r1
  40ddac:	d192      	bne.n	40dcd4 <_Z7perMainv+0x6a8>
  40ddae:	e792      	b.n	40dcd6 <_Z7perMainv+0x6aa>

        if (atm==TMRMODE_ABS) {
          s_timerVal[i]++;
        }
        else if (atm==TMRMODE_THR) {
          if (val) s_timerVal[i]++;
  40ddb0:	2a00      	cmp	r2, #0
  40ddb2:	f43f ae29 	beq.w	40da08 <_Z7perMainv+0x3dc>
  40ddb6:	4914      	ldr	r1, [pc, #80]	; (40de08 <_Z7perMainv+0x7dc>)
  40ddb8:	5a78      	ldrh	r0, [r7, r1]
  40ddba:	3001      	adds	r0, #1
  40ddbc:	5278      	strh	r0, [r7, r1]
  40ddbe:	e623      	b.n	40da08 <_Z7perMainv+0x3dc>
        {
          case TMR_RUNNING:
            if (tv && s_timerVal[i]>=(int16_t)tv) s_timerState[i]=TMR_BEEPING;
            break;
          case TMR_BEEPING:
            if (s_timerVal[i] >= (int16_t)tv + MAX_ALERT_TIME) s_timerState[i]=TMR_STOPPED;
  40ddc0:	4911      	ldr	r1, [pc, #68]	; (40de08 <_Z7perMainv+0x7dc>)
  40ddc2:	b218      	sxth	r0, r3
  40ddc4:	5e79      	ldrsh	r1, [r7, r1]
  40ddc6:	303b      	adds	r0, #59	; 0x3b
  40ddc8:	4288      	cmp	r0, r1
  40ddca:	f6bf ae25 	bge.w	40da18 <_Z7perMainv+0x3ec>
  40ddce:	2103      	movs	r1, #3
  40ddd0:	f806 100b 	strb.w	r1, [r6, fp]
  40ddd4:	e620      	b.n	40da18 <_Z7perMainv+0x3ec>
      uint8_t atm = (tm >= 0 ? tm : TMR_VAROFS-tm-1);

      // value for time described in timer->mode
      // OFFABSTHsTH%THt
      if (atm == TMRMODE_THR_REL) {
        s_cnt[i]++;
  40ddd6:	490e      	ldr	r1, [pc, #56]	; (40de10 <_Z7perMainv+0x7e4>)
  40ddd8:	5a78      	ldrh	r0, [r7, r1]
        s_sum[i]+=val;
  40ddda:	f101 0e04 	add.w	lr, r1, #4
      uint8_t atm = (tm >= 0 ? tm : TMR_VAROFS-tm-1);

      // value for time described in timer->mode
      // OFFABSTHsTH%THt
      if (atm == TMRMODE_THR_REL) {
        s_cnt[i]++;
  40ddde:	3001      	adds	r0, #1
  40dde0:	9009      	str	r0, [sp, #36]	; 0x24
        s_sum[i]+=val;
  40dde2:	f837 000e 	ldrh.w	r0, [r7, lr]
  40dde6:	1810      	adds	r0, r2, r0
  40dde8:	9002      	str	r0, [sp, #8]
      uint8_t atm = (tm >= 0 ? tm : TMR_VAROFS-tm-1);

      // value for time described in timer->mode
      // OFFABSTHsTH%THt
      if (atm == TMRMODE_THR_REL) {
        s_cnt[i]++;
  40ddea:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ddec:	5278      	strh	r0, [r7, r1]
        s_sum[i]+=val;
  40ddee:	9902      	ldr	r1, [sp, #8]
  40ddf0:	f827 100e 	strh.w	r1, [r7, lr]
  40ddf4:	e5cc      	b.n	40d990 <_Z7perMainv+0x364>
  40ddf6:	bf00      	nop
  40ddf8:	20001200 	.word	0x20001200
  40ddfc:	0040f750 	.word	0x0040f750
  40de00:	20001d18 	.word	0x20001d18
  40de04:	20001d28 	.word	0x20001d28
  40de08:	20000a10 	.word	0x20000a10
  40de0c:	0040c6a1 	.word	0x0040c6a1
  40de10:	2000215c 	.word	0x2000215c
  40de14:	2000216c 	.word	0x2000216c
  40de18:	20002168 	.word	0x20002168
  };

  static int16_t last_tmr;
  if (last_tmr != s_timerVal[0]) { // beep only if seconds advance
    if (s_timerState[0] == TMR_RUNNING) {
      if (g_eeGeneral.preBeep && g_model.timers[0].val) { // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
  40de1c:	f896 106a 	ldrb.w	r1, [r6, #106]	; 0x6a
  40de20:	f001 0004 	and.w	r0, r1, #4
  40de24:	b2c0      	uxtb	r0, r0
  40de26:	b1d8      	cbz	r0, 40de60 <_Z7perMainv+0x834>
  40de28:	f896 0147 	ldrb.w	r0, [r6, #327]	; 0x147
  40de2c:	f896 7148 	ldrb.w	r7, [r6, #328]	; 0x148
  40de30:	ea50 2707 	orrs.w	r7, r0, r7, lsl #8
  40de34:	d014      	beq.n	40de60 <_Z7perMainv+0x834>
        if(s_timerVal[0]==30) AUDIO_TIMER_30(); //beep three times
  40de36:	2a1e      	cmp	r2, #30
  40de38:	f000 80d5 	beq.w	40dfe6 <_Z7perMainv+0x9ba>
        if(s_timerVal[0]==20) AUDIO_TIMER_20(); //beep two times
  40de3c:	2a14      	cmp	r2, #20
  40de3e:	f000 80cb 	beq.w	40dfd8 <_Z7perMainv+0x9ac>
        if(s_timerVal[0]==10) AUDIO_TIMER_10();
  40de42:	2a0a      	cmp	r2, #10
  40de44:	f000 80c1 	beq.w	40dfca <_Z7perMainv+0x99e>
        if(s_timerVal[0]<= 3) AUDIO_TIMER_LT3();
  40de48:	2a03      	cmp	r2, #3
  40de4a:	bfc8      	it	gt
  40de4c:	f895 106a 	ldrbgt.w	r1, [r5, #106]	; 0x6a
  40de50:	dc06      	bgt.n	40de60 <_Z7perMainv+0x834>
  40de52:	2013      	movs	r0, #19
  40de54:	f7f8 fb5a 	bl	40650c <_Z13audioDefeventh>
  40de58:	f895 106a 	ldrb.w	r1, [r5, #106]	; 0x6a
  40de5c:	f8b5 3908 	ldrh.w	r3, [r5, #2312]	; 0x908
      }

      if (g_eeGeneral.minuteBeep && (((g_model.timers[0].val ? g_model.timers[0].val-s_timerVal[0] : s_timerVal[0])%60)==0)) { // short beep every minute
  40de60:	f001 0202 	and.w	r2, r1, #2
  40de64:	b2d2      	uxtb	r2, r2
  40de66:	2a00      	cmp	r2, #0
  40de68:	f43f adf2 	beq.w	40da50 <_Z7perMainv+0x424>
  40de6c:	f895 1148 	ldrb.w	r1, [r5, #328]	; 0x148
  40de70:	f895 2147 	ldrb.w	r2, [r5, #327]	; 0x147
  40de74:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
  40de78:	bf17      	itett	ne
  40de7a:	f648 0189 	movwne	r1, #34953	; 0x8889
  40de7e:	f648 0189 	movweq	r1, #34953	; 0x8889
  40de82:	b218      	sxthne	r0, r3
  40de84:	ebc0 0202 	rsbne	r2, r0, r2
  40de88:	bf0b      	itete	eq
  40de8a:	b21a      	sxtheq	r2, r3
  40de8c:	f6c8 0188 	movtne	r1, #34952	; 0x8888
  40de90:	f6c8 0188 	movteq	r1, #34952	; 0x8888
  40de94:	fb81 e102 	smullne	lr, r1, r1, r2
  40de98:	bf08      	it	eq
  40de9a:	fb81 0102 	smulleq	r0, r1, r1, r2
  40de9e:	17d0      	asrs	r0, r2, #31
  40dea0:	1889      	adds	r1, r1, r2
  40dea2:	ebc0 1161 	rsb	r1, r0, r1, asr #5
  40dea6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
  40deaa:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
  40deae:	bf14      	ite	ne
  40deb0:	2200      	movne	r2, #0
  40deb2:	2201      	moveq	r2, #1
  40deb4:	2a00      	cmp	r2, #0
  40deb6:	f43f adcb 	beq.w	40da50 <_Z7perMainv+0x424>
        AUDIO_MINUTE_BEEP();
  40deba:	2007      	movs	r0, #7
  40debc:	f7f8 fb26 	bl	40650c <_Z13audioDefeventh>
  40dec0:	f8b5 3908 	ldrh.w	r3, [r5, #2312]	; 0x908
  40dec4:	e5c4      	b.n	40da50 <_Z7perMainv+0x424>
        }

        switch(s_timerState[i])
        {
          case TMR_RUNNING:
            if (tv && s_timerVal[i]>=(int16_t)tv) s_timerState[i]=TMR_BEEPING;
  40dec6:	2b00      	cmp	r3, #0
  40dec8:	f43f adab 	beq.w	40da22 <_Z7perMainv+0x3f6>
  40decc:	4949      	ldr	r1, [pc, #292]	; (40dff4 <_Z7perMainv+0x9c8>)
  40dece:	fa0f fe83 	sxth.w	lr, r3
  40ded2:	5bc8      	ldrh	r0, [r1, r7]
  40ded4:	fa0f f980 	sxth.w	r9, r0
  40ded8:	45f1      	cmp	r9, lr
  40deda:	bfa4      	itt	ge
  40dedc:	f04f 0e02 	movge.w	lr, #2
  40dee0:	f806 e00b 	strbge.w	lr, [r6, fp]
  40dee4:	e59b      	b.n	40da1e <_Z7perMainv+0x3f2>
        else if (atm==TMRMODE_THR_TRG) {
          if (val || s_timerVal[i] > 0)
            s_timerVal[i]++;
        }
        else {
          if (atm<(TMR_VAROFS+MAX_SWITCH))
  40dee6:	4944      	ldr	r1, [pc, #272]	; (40dff8 <_Z7perMainv+0x9cc>)
  40dee8:	5c70      	ldrb	r0, [r6, r1]
            sw_toggled[i] = tm>0 ? getSwitch(tm-(TMR_VAROFS-1), 0) : !getSwitch(-tm, 0); // normal switch
          if (sw_toggled[i])
  40deea:	2800      	cmp	r0, #0
  40deec:	f43f ad8c 	beq.w	40da08 <_Z7perMainv+0x3dc>
  40def0:	e586      	b.n	40da00 <_Z7perMainv+0x3d4>
      if (g_eeGeneral.minuteBeep && (((g_model.timers[0].val ? g_model.timers[0].val-s_timerVal[0] : s_timerVal[0])%60)==0)) { // short beep every minute
        AUDIO_MINUTE_BEEP();
      }
    }
    else if(s_timerState[0] == TMR_BEEPING) {
      AUDIO_WARNING1();
  40def2:	2007      	movs	r0, #7
  40def4:	f7f8 fb0a 	bl	40650c <_Z13audioDefeventh>
  40def8:	f8b6 3908 	ldrh.w	r3, [r6, #2312]	; 0x908
  40defc:	e5a8      	b.n	40da50 <_Z7perMainv+0x424>
    for(uint8_t i=0;i<4;i++) tsum += anaIn(i)/64;  // reduce sensitivity
    if(tsum!=inacSum){
      inacSum = tsum;
      inacCounter=0;
    }
    if(inacCounter>((uint32_t)g_eeGeneral.inactivityTimer*100*60))
  40defe:	f241 7370 	movw	r3, #6000	; 0x1770
  40df02:	fb03 f202 	mul.w	r2, r3, r2
  40df06:	4297      	cmp	r7, r2
  40df08:	f67f ae38 	bls.w	40db7c <_Z7perMainv+0x550>
      if((inacCounter&0x3F)==10) AUDIO_INACTIVITY();
  40df0c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  40df10:	2f0a      	cmp	r7, #10
  40df12:	f47f ae33 	bne.w	40db7c <_Z7perMainv+0x550>
  40df16:	2000      	movs	r0, #0
  40df18:	f7f8 faf8 	bl	40650c <_Z13audioDefeventh>
  40df1c:	e62e      	b.n	40db7c <_Z7perMainv+0x550>
        }
        else if (atm==TMRMODE_THR) {
          if (val) s_timerVal[i]++;
        }
        else if (atm==TMRMODE_THR_REL) {
          if (s_cnt[i]) {
  40df1e:	4837      	ldr	r0, [pc, #220]	; (40dffc <_Z7perMainv+0x9d0>)
  40df20:	f837 e000 	ldrh.w	lr, [r7, r0]
  40df24:	f1be 0f00 	cmp.w	lr, #0
  40df28:	f43f ad6e 	beq.w	40da08 <_Z7perMainv+0x3dc>
            val       = s_sum[i]/s_cnt[i];
  40df2c:	1d02      	adds	r2, r0, #4
  40df2e:	5aba      	ldrh	r2, [r7, r2]
            s_sum[i] -= val*s_cnt[i]; //rest
            s_cnt[i]  = 0;
            s_time_cum_16[i] += val/2;
  40df30:	f100 0108 	add.w	r1, r0, #8
        else if (atm==TMRMODE_THR) {
          if (val) s_timerVal[i]++;
        }
        else if (atm==TMRMODE_THR_REL) {
          if (s_cnt[i]) {
            val       = s_sum[i]/s_cnt[i];
  40df34:	9208      	str	r2, [sp, #32]
  40df36:	fbb2 f9fe 	udiv	r9, r2, lr
            s_sum[i] -= val*s_cnt[i]; //rest
  40df3a:	f8dd a020 	ldr.w	sl, [sp, #32]
        else if (atm==TMRMODE_THR) {
          if (val) s_timerVal[i]++;
        }
        else if (atm==TMRMODE_THR_REL) {
          if (s_cnt[i]) {
            val       = s_sum[i]/s_cnt[i];
  40df3e:	fa1f f289 	uxth.w	r2, r9
            s_sum[i] -= val*s_cnt[i]; //rest
  40df42:	fb0e a919 	mls	r9, lr, r9, sl
            s_cnt[i]  = 0;
            s_time_cum_16[i] += val/2;
  40df46:	f837 a001 	ldrh.w	sl, [r7, r1]
  40df4a:	fa0f fe82 	sxth.w	lr, r2
  40df4e:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
  40df52:	eb0a 0e6e 	add.w	lr, sl, lr, asr #1
  40df56:	fa1f fe8e 	uxth.w	lr, lr
          if (val) s_timerVal[i]++;
        }
        else if (atm==TMRMODE_THR_REL) {
          if (s_cnt[i]) {
            val       = s_sum[i]/s_cnt[i];
            s_sum[i] -= val*s_cnt[i]; //rest
  40df5a:	f100 0a04 	add.w	sl, r0, #4
  40df5e:	f827 900a 	strh.w	r9, [r7, sl]
            s_cnt[i]  = 0;
            s_time_cum_16[i] += val/2;
            if (s_time_cum_16[i] >= 16) {
  40df62:	f1be 0f0f 	cmp.w	lr, #15
        }
        else if (atm==TMRMODE_THR_REL) {
          if (s_cnt[i]) {
            val       = s_sum[i]/s_cnt[i];
            s_sum[i] -= val*s_cnt[i]; //rest
            s_cnt[i]  = 0;
  40df66:	f04f 0900 	mov.w	r9, #0
  40df6a:	f827 9000 	strh.w	r9, [r7, r0]
            s_time_cum_16[i] += val/2;
  40df6e:	f827 e001 	strh.w	lr, [r7, r1]
            if (s_time_cum_16[i] >= 16) {
  40df72:	f67f ad49 	bls.w	40da08 <_Z7perMainv+0x3dc>
              s_timerVal[i] ++;
  40df76:	481f      	ldr	r0, [pc, #124]	; (40dff4 <_Z7perMainv+0x9c8>)
              s_time_cum_16[i] -= 16;
  40df78:	f1ae 0e10 	sub.w	lr, lr, #16
            val       = s_sum[i]/s_cnt[i];
            s_sum[i] -= val*s_cnt[i]; //rest
            s_cnt[i]  = 0;
            s_time_cum_16[i] += val/2;
            if (s_time_cum_16[i] >= 16) {
              s_timerVal[i] ++;
  40df7c:	f837 9000 	ldrh.w	r9, [r7, r0]
              s_time_cum_16[i] -= 16;
  40df80:	f827 e001 	strh.w	lr, [r7, r1]
            val       = s_sum[i]/s_cnt[i];
            s_sum[i] -= val*s_cnt[i]; //rest
            s_cnt[i]  = 0;
            s_time_cum_16[i] += val/2;
            if (s_time_cum_16[i] >= 16) {
              s_timerVal[i] ++;
  40df84:	f109 0901 	add.w	r9, r9, #1
  40df88:	f827 9000 	strh.w	r9, [r7, r0]
  40df8c:	e53c      	b.n	40da08 <_Z7perMainv+0x3dc>
              s_time_cum_16[i] -= 16;
            }
          }
        }
        else if (atm==TMRMODE_THR_TRG) {
          if (val || s_timerVal[i] > 0)
  40df8e:	4919      	ldr	r1, [pc, #100]	; (40dff4 <_Z7perMainv+0x9c8>)
  40df90:	5bc8      	ldrh	r0, [r1, r7]
  40df92:	2a00      	cmp	r2, #0
  40df94:	f47f ad36 	bne.w	40da04 <_Z7perMainv+0x3d8>
  40df98:	fa0f fe80 	sxth.w	lr, r0
  40df9c:	f1be 0f00 	cmp.w	lr, #0
  40dfa0:	f73f ad30 	bgt.w	40da04 <_Z7perMainv+0x3d8>
  40dfa4:	e530      	b.n	40da08 <_Z7perMainv+0x3dc>
            s_timerVal[i]++;
        }
        else {
          if (atm<(TMR_VAROFS+MAX_SWITCH))
            sw_toggled[i] = tm>0 ? getSwitch(tm-(TMR_VAROFS-1), 0) : !getSwitch(-tm, 0); // normal switch
  40dfa6:	f1c9 0000 	rsb	r0, r9, #0
  40dfaa:	b240      	sxtb	r0, r0
  40dfac:	2100      	movs	r1, #0
  40dfae:	9203      	str	r2, [sp, #12]
  40dfb0:	9305      	str	r3, [sp, #20]
  40dfb2:	f8cd c010 	str.w	ip, [sp, #16]
  40dfb6:	f7f6 fe4b 	bl	404c50 <_Z9getSwitchab>
  40dfba:	f080 0001 	eor.w	r0, r0, #1
  40dfbe:	b2c0      	uxtb	r0, r0
  40dfc0:	f8dd c010 	ldr.w	ip, [sp, #16]
  40dfc4:	9b05      	ldr	r3, [sp, #20]
  40dfc6:	9a03      	ldr	r2, [sp, #12]
  40dfc8:	e517      	b.n	40d9fa <_Z7perMainv+0x3ce>
  if (last_tmr != s_timerVal[0]) { // beep only if seconds advance
    if (s_timerState[0] == TMR_RUNNING) {
      if (g_eeGeneral.preBeep && g_model.timers[0].val) { // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
        if(s_timerVal[0]==30) AUDIO_TIMER_30(); //beep three times
        if(s_timerVal[0]==20) AUDIO_TIMER_20(); //beep two times
        if(s_timerVal[0]==10) AUDIO_TIMER_10();
  40dfca:	2012      	movs	r0, #18
  40dfcc:	f7f8 fa9e 	bl	40650c <_Z13audioDefeventh>
  40dfd0:	f8b5 3908 	ldrh.w	r3, [r5, #2312]	; 0x908
  40dfd4:	b21a      	sxth	r2, r3
  40dfd6:	e737      	b.n	40de48 <_Z7perMainv+0x81c>
  static int16_t last_tmr;
  if (last_tmr != s_timerVal[0]) { // beep only if seconds advance
    if (s_timerState[0] == TMR_RUNNING) {
      if (g_eeGeneral.preBeep && g_model.timers[0].val) { // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
        if(s_timerVal[0]==30) AUDIO_TIMER_30(); //beep three times
        if(s_timerVal[0]==20) AUDIO_TIMER_20(); //beep two times
  40dfd8:	2011      	movs	r0, #17
  40dfda:	f7f8 fa97 	bl	40650c <_Z13audioDefeventh>
  40dfde:	f8b5 3908 	ldrh.w	r3, [r5, #2312]	; 0x908
  40dfe2:	b21a      	sxth	r2, r3
  40dfe4:	e72d      	b.n	40de42 <_Z7perMainv+0x816>

  static int16_t last_tmr;
  if (last_tmr != s_timerVal[0]) { // beep only if seconds advance
    if (s_timerState[0] == TMR_RUNNING) {
      if (g_eeGeneral.preBeep && g_model.timers[0].val) { // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
        if(s_timerVal[0]==30) AUDIO_TIMER_30(); //beep three times
  40dfe6:	2010      	movs	r0, #16
  40dfe8:	f7f8 fa90 	bl	40650c <_Z13audioDefeventh>
  40dfec:	f8b6 3908 	ldrh.w	r3, [r6, #2312]	; 0x908
  40dff0:	b21a      	sxth	r2, r3
  40dff2:	e723      	b.n	40de3c <_Z7perMainv+0x810>
  40dff4:	20000a10 	.word	0x20000a10
  40dff8:	20002168 	.word	0x20002168
  40dffc:	2000215c 	.word	0x2000215c

0040e000 <_Z7setDesthb>:
 */

#include "open9x.h"

MixData* setDest(uint8_t dch, bool clear=false)
{
  40e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e002:	4d1c      	ldr	r5, [pc, #112]	; (40e074 <_Z7setDesthb+0x74>)
  40e004:	4604      	mov	r4, r0
  40e006:	460f      	mov	r7, r1
    uint8_t i = 0;
  40e008:	2600      	movs	r6, #0
    while (i<MAX_MIXERS && g_model.mixData[i].srcRaw && g_model.mixData[i].destCh <= dch) {
  40e00a:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
  40e00e:	18eb      	adds	r3, r5, r3
  40e010:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
  40e014:	b152      	cbz	r2, 40e02c <_Z7setDesthb+0x2c>
  40e016:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
  40e01a:	42a3      	cmp	r3, r4
  40e01c:	d806      	bhi.n	40e02c <_Z7setDesthb+0x2c>
      if (clear && g_model.mixData[i].destCh == dch)
  40e01e:	b10f      	cbz	r7, 40e024 <_Z7setDesthb+0x24>
  40e020:	42a3      	cmp	r3, r4
  40e022:	d021      	beq.n	40e068 <_Z7setDesthb+0x68>
        deleteExpoMix(0, i);
      else
        i++;
  40e024:	3601      	adds	r6, #1
  40e026:	b2f6      	uxtb	r6, r6
#include "open9x.h"

MixData* setDest(uint8_t dch, bool clear=false)
{
    uint8_t i = 0;
    while (i<MAX_MIXERS && g_model.mixData[i].srcRaw && g_model.mixData[i].destCh <= dch) {
  40e028:	2e3f      	cmp	r6, #63	; 0x3f
  40e02a:	d9ee      	bls.n	40e00a <_Z7setDesthb+0xa>
      if (clear && g_model.mixData[i].destCh == dch)
        deleteExpoMix(0, i);
      else
        i++;
    }
    if(i==MAX_MIXERS) return &g_model.mixData[0];
  40e02c:	2e40      	cmp	r6, #64	; 0x40
  40e02e:	d018      	beq.n	40e062 <_Z7setDesthb+0x62>

    memmove(&g_model.mixData[i+1],&g_model.mixData[i],
            (MAX_MIXERS-(i+1))*sizeof(MixData) );
  40e030:	4b11      	ldr	r3, [pc, #68]	; (40e078 <_Z7setDesthb+0x78>)
  40e032:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
  40e036:	19d9      	adds	r1, r3, r7
  40e038:	43f2      	mvns	r2, r6
  40e03a:	3240      	adds	r2, #64	; 0x40
  40e03c:	f101 0615 	add.w	r6, r1, #21
  40e040:	f101 0024 	add.w	r0, r1, #36	; 0x24
  40e044:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  40e048:	4631      	mov	r1, r6
  40e04a:	f001 f99f 	bl	40f38c <memmove>
    memset(&g_model.mixData[i],0,sizeof(MixData));
    g_model.mixData[i].destCh = dch;
  40e04e:	19ed      	adds	r5, r5, r7
    }
    if(i==MAX_MIXERS) return &g_model.mixData[0];

    memmove(&g_model.mixData[i+1],&g_model.mixData[i],
            (MAX_MIXERS-(i+1))*sizeof(MixData) );
    memset(&g_model.mixData[i],0,sizeof(MixData));
  40e050:	4630      	mov	r0, r6
  40e052:	2100      	movs	r1, #0
  40e054:	220f      	movs	r2, #15
  40e056:	f001 f9fd 	bl	40f454 <memset>
    g_model.mixData[i].destCh = dch;
  40e05a:	f885 4151 	strb.w	r4, [r5, #337]	; 0x151
    return &g_model.mixData[i];
}
  40e05e:	4630      	mov	r0, r6
  40e060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (clear && g_model.mixData[i].destCh == dch)
        deleteExpoMix(0, i);
      else
        i++;
    }
    if(i==MAX_MIXERS) return &g_model.mixData[0];
  40e062:	4e06      	ldr	r6, [pc, #24]	; (40e07c <_Z7setDesthb+0x7c>)
    memmove(&g_model.mixData[i+1],&g_model.mixData[i],
            (MAX_MIXERS-(i+1))*sizeof(MixData) );
    memset(&g_model.mixData[i],0,sizeof(MixData));
    g_model.mixData[i].destCh = dch;
    return &g_model.mixData[i];
}
  40e064:	4630      	mov	r0, r6
  40e066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
MixData* setDest(uint8_t dch, bool clear=false)
{
    uint8_t i = 0;
    while (i<MAX_MIXERS && g_model.mixData[i].srcRaw && g_model.mixData[i].destCh <= dch) {
      if (clear && g_model.mixData[i].destCh == dch)
        deleteExpoMix(0, i);
  40e068:	2000      	movs	r0, #0
  40e06a:	4631      	mov	r1, r6
  40e06c:	f7f3 fc1a 	bl	4018a4 <_Z13deleteExpoMixhh>
  40e070:	e7da      	b.n	40e028 <_Z7setDesthb+0x28>
  40e072:	bf00      	nop
  40e074:	20000108 	.word	0x20000108
  40e078:	20000244 	.word	0x20000244
  40e07c:	20000259 	.word	0x20000259

0040e080 <_Z10clearMixesv>:
    g_model.mixData[i].destCh = dch;
    return &g_model.mixData[i];
}

void clearMixes()
{
  40e080:	b510      	push	{r4, lr}
    memset(g_model.mixData,0,sizeof(g_model.mixData)); //clear all mixes
  40e082:	f240 1408 	movw	r4, #264	; 0x108
  40e086:	f2c2 0400 	movt	r4, #8192	; 0x2000
  40e08a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
  40e08e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
  40e092:	3001      	adds	r0, #1
  40e094:	2100      	movs	r1, #0
  40e096:	f001 f9dd 	bl	40f454 <memset>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40e09a:	f894 29a8 	ldrb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40e09e:	f8b4 39aa 	ldrh.w	r3, [r4, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40e0a2:	f042 0202 	orr.w	r2, r2, #2
  40e0a6:	f884 29a8 	strb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40e0aa:	f8a4 39ac 	strh.w	r3, [r4, #2476]	; 0x9ac
    STORE_MODELVARS;
}
  40e0ae:	bd10      	pop	{r4, pc}

0040e0b0 <_Z11clearCurvesv>:

void clearCurves()
{
  40e0b0:	b510      	push	{r4, lr}
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
  40e0b2:	4c08      	ldr	r4, [pc, #32]	; (40e0d4 <_Z11clearCurvesv+0x24>)
  40e0b4:	2100      	movs	r1, #0
  40e0b6:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
  40e0ba:	2228      	movs	r2, #40	; 0x28
  40e0bc:	3005      	adds	r0, #5
  40e0be:	f001 f9c9 	bl	40f454 <memset>
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
  40e0c2:	f504 60ae 	add.w	r0, r4, #1392	; 0x570
  40e0c6:	300d      	adds	r0, #13
  40e0c8:	2100      	movs	r1, #0
  40e0ca:	2248      	movs	r2, #72	; 0x48
}
  40e0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void clearCurves()
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
  40e0d0:	f001 b9c0 	b.w	40f454 <memset>
  40e0d4:	20000244 	.word	0x20000244

0040e0d8 <_Z8setCurvehPKa>:
}

void setCurve(uint8_t c, const pm_int8_t ar[])
{
    if(c<MAX_CURVE5) //5 pt curve
  40e0d8:	2807      	cmp	r0, #7
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
{
  40e0da:	b410      	push	{r4}
    if(c<MAX_CURVE5) //5 pt curve
  40e0dc:	d90e      	bls.n	40e0fc <_Z8setCurvehPKa+0x24>
  40e0de:	3808      	subs	r0, #8
  40e0e0:	4a0d      	ldr	r2, [pc, #52]	; (40e118 <_Z8setCurvehPKa+0x40>)
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
  40e0e2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
{
    if(c<MAX_CURVE5) //5 pt curve
  40e0e6:	2300      	movs	r3, #0
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
  40e0e8:	1810      	adds	r0, r2, r0
{
    if(c<MAX_CURVE5) //5 pt curve
        for(uint8_t i=0; i<5; i++) g_model.curves5[c][i] = pgm_read_byte(&ar[i]);
    else  //9 pt curve
        for(uint8_t i=0; i<9; i++) g_model.curves9[c-MAX_CURVE5][i] = pgm_read_byte(&ar[i]);
  40e0ea:	5ccc      	ldrb	r4, [r1, r3]
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
  40e0ec:	18c2      	adds	r2, r0, r3
{
    if(c<MAX_CURVE5) //5 pt curve
        for(uint8_t i=0; i<5; i++) g_model.curves5[c][i] = pgm_read_byte(&ar[i]);
    else  //9 pt curve
        for(uint8_t i=0; i<9; i++) g_model.curves9[c-MAX_CURVE5][i] = pgm_read_byte(&ar[i]);
  40e0ee:	3301      	adds	r3, #1
  40e0f0:	2b09      	cmp	r3, #9
  40e0f2:	f882 457d 	strb.w	r4, [r2, #1405]	; 0x57d
  40e0f6:	d1f8      	bne.n	40e0ea <_Z8setCurvehPKa+0x12>
}
  40e0f8:	bc10      	pop	{r4}
  40e0fa:	4770      	bx	lr
  40e0fc:	4a06      	ldr	r2, [pc, #24]	; (40e118 <_Z8setCurvehPKa+0x40>)
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
  40e0fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
{
    if(c<MAX_CURVE5) //5 pt curve
  40e102:	2300      	movs	r3, #0
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
  40e104:	1810      	adds	r0, r2, r0
{
    if(c<MAX_CURVE5) //5 pt curve
        for(uint8_t i=0; i<5; i++) g_model.curves5[c][i] = pgm_read_byte(&ar[i]);
  40e106:	5ccc      	ldrb	r4, [r1, r3]
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
  40e108:	18c2      	adds	r2, r0, r3
{
    if(c<MAX_CURVE5) //5 pt curve
        for(uint8_t i=0; i<5; i++) g_model.curves5[c][i] = pgm_read_byte(&ar[i]);
  40e10a:	3301      	adds	r3, #1
  40e10c:	2b05      	cmp	r3, #5
  40e10e:	f882 4555 	strb.w	r4, [r2, #1365]	; 0x555
  40e112:	d1f8      	bne.n	40e106 <_Z8setCurvehPKa+0x2e>
  40e114:	e7f0      	b.n	40e0f8 <_Z8setCurvehPKa+0x20>
  40e116:	bf00      	nop
  40e118:	20000244 	.word	0x20000244

0040e11c <_Z9setSwitchhhaa>:
    else  //9 pt curve
        for(uint8_t i=0; i<9; i++) g_model.curves9[c-MAX_CURVE5][i] = pgm_read_byte(&ar[i]);
}

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  40e11c:	b410      	push	{r4}
    g_model.customSw[idx-1].func = func;
  40e11e:	3801      	subs	r0, #1
  40e120:	4c04      	ldr	r4, [pc, #16]	; (40e134 <_Z9setSwitchhhaa+0x18>)
  40e122:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40e126:	1900      	adds	r0, r0, r4
  40e128:	71c1      	strb	r1, [r0, #7]
    g_model.customSw[idx-1].v1   = v1;
  40e12a:	7142      	strb	r2, [r0, #5]
    g_model.customSw[idx-1].v2   = v2;
  40e12c:	7183      	strb	r3, [r0, #6]
}
  40e12e:	bc10      	pop	{r4}
  40e130:	4770      	bx	lr
  40e132:	bf00      	nop
  40e134:	20000804 	.word	0x20000804

0040e138 <_Z13applyTemplateh>:
const pm_int8_t heli_ar3[] PROGMEM = {-20, -20, 0, 60, 100};
const pm_int8_t heli_ar4[] PROGMEM = {-100, -60, 0, 60, 100};
const pm_int8_t heli_ar5[] PROGMEM = {-100, 0, 0, 0, 100};

void applyTemplate(uint8_t idx)
{
  40e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MixData *md = &g_model.mixData[0];

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
  40e13c:	4c90      	ldr	r4, [pc, #576]	; (40e380 <_Z13applyTemplateh+0x248>)
  40e13e:	4991      	ldr	r1, [pc, #580]	; (40e384 <_Z13applyTemplateh+0x24c>)
  40e140:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
  40e144:	2300      	movs	r3, #0
  40e146:	5c8f      	ldrb	r7, [r1, r2]
  40e148:	2206      	movs	r2, #6
    for (uint8_t i=0; i<4; i++) //generate inverse array
  40e14a:	fa57 f102 	asrs.w	r1, r7, r2
const pm_int8_t heli_ar3[] PROGMEM = {-20, -20, 0, 60, 100};
const pm_int8_t heli_ar4[] PROGMEM = {-100, -60, 0, 60, 100};
const pm_int8_t heli_ar5[] PROGMEM = {-100, 0, 0, 0, 100};

void applyTemplate(uint8_t idx)
{
  40e14e:	b087      	sub	sp, #28

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for (uint8_t i=0; i<4; i++) //generate inverse array
  40e150:	1c5d      	adds	r5, r3, #1
  40e152:	f001 0103 	and.w	r1, r1, #3
    MixData *md = &g_model.mixData[0];

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
  40e156:	9305      	str	r3, [sp, #20]
    for (uint8_t i=0; i<4; i++) //generate inverse array
  40e158:	b2ed      	uxtb	r5, r5
      for(uint8_t j=0; j<4; j++) if(CC(i+1)==j+1) icc[j]=i;
  40e15a:	1c4e      	adds	r6, r1, #1
  40e15c:	b1d1      	cbz	r1, 40e194 <_Z13applyTemplateh+0x5c>
  40e15e:	2e02      	cmp	r6, #2
  40e160:	bf08      	it	eq
  40e162:	f88d 3015 	strbeq.w	r3, [sp, #21]
  40e166:	d008      	beq.n	40e17a <_Z13applyTemplateh+0x42>
  40e168:	2e03      	cmp	r6, #3
  40e16a:	bf08      	it	eq
  40e16c:	f88d 3016 	strbeq.w	r3, [sp, #22]
  40e170:	d003      	beq.n	40e17a <_Z13applyTemplateh+0x42>
  40e172:	2e04      	cmp	r6, #4
  40e174:	bf08      	it	eq
  40e176:	f88d 3017 	strbeq.w	r3, [sp, #23]
  40e17a:	3a02      	subs	r2, #2

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for (uint8_t i=0; i<4; i++) //generate inverse array
  40e17c:	2d04      	cmp	r5, #4
  40e17e:	d00e      	beq.n	40e19e <_Z13applyTemplateh+0x66>
  40e180:	fa57 f102 	asrs.w	r1, r7, r2
      for(uint8_t j=0; j<4; j++) if(CC(i+1)==j+1) icc[j]=i;
  40e184:	462b      	mov	r3, r5

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for (uint8_t i=0; i<4; i++) //generate inverse array
  40e186:	1c5d      	adds	r5, r3, #1
  40e188:	f001 0103 	and.w	r1, r1, #3
  40e18c:	b2ed      	uxtb	r5, r5
      for(uint8_t j=0; j<4; j++) if(CC(i+1)==j+1) icc[j]=i;
  40e18e:	1c4e      	adds	r6, r1, #1
  40e190:	2900      	cmp	r1, #0
  40e192:	d1e4      	bne.n	40e15e <_Z13applyTemplateh+0x26>
  40e194:	3a02      	subs	r2, #2

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for (uint8_t i=0; i<4; i++) //generate inverse array
  40e196:	2d04      	cmp	r5, #4
      for(uint8_t j=0; j<4; j++) if(CC(i+1)==j+1) icc[j]=i;
  40e198:	f88d 3014 	strb.w	r3, [sp, #20]

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for (uint8_t i=0; i<4; i++) //generate inverse array
  40e19c:	d1f0      	bne.n	40e180 <_Z13applyTemplateh+0x48>
      for(uint8_t j=0; j<4; j++) if(CC(i+1)==j+1) icc[j]=i;

    switch (idx) {
  40e19e:	2807      	cmp	r0, #7
  40e1a0:	d80b      	bhi.n	40e1ba <_Z13applyTemplateh+0x82>
  40e1a2:	e8df f010 	tbh	[pc, r0, lsl #1]
  40e1a6:	0008      	.short	0x0008
  40e1a8:	00570030 	.word	0x00570030
  40e1ac:	00860065 	.word	0x00860065
  40e1b0:	00f100aa 	.word	0x00f100aa
  40e1b4:	0017      	.short	0x0017
      // Clear Mixes
      case TMPL_CLEAR_MIXES:
        clearMixes();
  40e1b6:	f7ff ff63 	bl	40e080 <_Z10clearMixesv>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40e1ba:	f894 29a8 	ldrb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40e1be:	f8b4 39aa 	ldrh.w	r3, [r4, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40e1c2:	f042 0202 	orr.w	r2, r2, #2
  40e1c6:	f884 29a8 	strb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40e1ca:	f8a4 39ac 	strh.w	r3, [r4, #2476]	; 0x9ac
        break;

    }

    STORE_MODELVARS;
}
  40e1ce:	b007      	add	sp, #28
  40e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setCurve(CURVE5(5), heli_ar5);
        break;

      // Servo Test
      case TMPL_SERVO_TEST:
        md=setDest(15, true); md->srcRaw=MIXSRC_SW1;  md->weight=110; md->mltpx=MLTPX_ADD; md->delayUp = 6; md->delayDown = 6; md->speedUp = 8; md->speedDown = 8;
  40e1d4:	2101      	movs	r1, #1
  40e1d6:	200f      	movs	r0, #15
  40e1d8:	f7ff ff12 	bl	40e000 <_Z7setDesthb>
  40e1dc:	2513      	movs	r5, #19
  40e1de:	2208      	movs	r2, #8
  40e1e0:	72c5      	strb	r5, [r0, #11]
  40e1e2:	7242      	strb	r2, [r0, #9]
  40e1e4:	7282      	strb	r2, [r0, #10]
  40e1e6:	2300      	movs	r3, #0
  40e1e8:	2106      	movs	r1, #6
        for(uint8_t i=0; i<9; i++) g_model.curves9[c-MAX_CURVE5][i] = pgm_read_byte(&ar[i]);
}

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
    g_model.customSw[idx-1].func = func;
  40e1ea:	2202      	movs	r2, #2
        setCurve(CURVE5(5), heli_ar5);
        break;

      // Servo Test
      case TMPL_SERVO_TEST:
        md=setDest(15, true); md->srcRaw=MIXSRC_SW1;  md->weight=110; md->mltpx=MLTPX_ADD; md->delayUp = 6; md->delayDown = 6; md->speedUp = 8; md->speedDown = 8;
  40e1ec:	256e      	movs	r5, #110	; 0x6e
  40e1ee:	7085      	strb	r5, [r0, #2]
  40e1f0:	7103      	strb	r3, [r0, #4]
  40e1f2:	71c1      	strb	r1, [r0, #7]
  40e1f4:	7201      	strb	r1, [r0, #8]
        for(uint8_t i=0; i<9; i++) g_model.curves9[c-MAX_CURVE5][i] = pgm_read_byte(&ar[i]);
}

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
    g_model.customSw[idx-1].func = func;
  40e1f6:	f884 2703 	strb.w	r2, [r4, #1795]	; 0x703
    g_model.customSw[idx-1].v1   = v1;
  40e1fa:	2224      	movs	r2, #36	; 0x24
  40e1fc:	f884 2701 	strb.w	r2, [r4, #1793]	; 0x701
    g_model.customSw[idx-1].v2   = v2;
  40e200:	f884 3702 	strb.w	r3, [r4, #1794]	; 0x702
  40e204:	e7d9      	b.n	40e1ba <_Z13applyTemplateh+0x82>
        clearMixes();
        break;

      // Simple 4-Ch
      case TMPL_SIMPLE_4CH:
        clearMixes();
  40e206:	f7ff ff3b 	bl	40e080 <_Z10clearMixesv>
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Rud;  md->weight=100;
  40e20a:	2100      	movs	r1, #0
  40e20c:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40e210:	f7ff fef6 	bl	40e000 <_Z7setDesthb>
  40e214:	2564      	movs	r5, #100	; 0x64
  40e216:	4603      	mov	r3, r0
  40e218:	2201      	movs	r2, #1
  40e21a:	72da      	strb	r2, [r3, #11]
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ele;  md->weight=100;
  40e21c:	2100      	movs	r1, #0
        break;

      // Simple 4-Ch
      case TMPL_SIMPLE_4CH:
        clearMixes();
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Rud;  md->weight=100;
  40e21e:	709d      	strb	r5, [r3, #2]
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ele;  md->weight=100;
  40e220:	f89d 0015 	ldrb.w	r0, [sp, #21]
  40e224:	f7ff feec 	bl	40e000 <_Z7setDesthb>
  40e228:	2202      	movs	r2, #2
  40e22a:	4603      	mov	r3, r0
  40e22c:	72da      	strb	r2, [r3, #11]
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight=100;
  40e22e:	2100      	movs	r1, #0

      // Simple 4-Ch
      case TMPL_SIMPLE_4CH:
        clearMixes();
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Rud;  md->weight=100;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ele;  md->weight=100;
  40e230:	709d      	strb	r5, [r3, #2]
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight=100;
  40e232:	f89d 0016 	ldrb.w	r0, [sp, #22]
  40e236:	f7ff fee3 	bl	40e000 <_Z7setDesthb>
  40e23a:	2203      	movs	r2, #3
  40e23c:	4603      	mov	r3, r0
  40e23e:	72da      	strb	r2, [r3, #11]
  40e240:	709d      	strb	r5, [r3, #2]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight=100;
  40e242:	f89d 0017 	ldrb.w	r0, [sp, #23]
  40e246:	2100      	movs	r1, #0
  40e248:	f7ff feda 	bl	40e000 <_Z7setDesthb>
  40e24c:	2304      	movs	r3, #4
  40e24e:	72c3      	strb	r3, [r0, #11]
  40e250:	7085      	strb	r5, [r0, #2]
        break;
  40e252:	e7b2      	b.n	40e1ba <_Z13applyTemplateh+0x82>

      // T-Cut
      case TMPL_THR_CUT:
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_MAX;  md->weight=-100;  md->swtch=DSW_THR;  md->mltpx=MLTPX_REP;
  40e254:	f89d 0016 	ldrb.w	r0, [sp, #22]
  40e258:	2100      	movs	r1, #0
  40e25a:	f7ff fed1 	bl	40e000 <_Z7setDesthb>
  40e25e:	2308      	movs	r3, #8
  40e260:	72c3      	strb	r3, [r0, #11]
  40e262:	239c      	movs	r3, #156	; 0x9c
  40e264:	7083      	strb	r3, [r0, #2]
  40e266:	2301      	movs	r3, #1
  40e268:	70c3      	strb	r3, [r0, #3]
  40e26a:	2302      	movs	r3, #2
  40e26c:	7103      	strb	r3, [r0, #4]
        break;
  40e26e:	e7a4      	b.n	40e1ba <_Z13applyTemplateh+0x82>

      // V-Tail
      case TMPL_V_TAIL:
        md=setDest(ICC(STK_RUD), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
  40e270:	f89d 7014 	ldrb.w	r7, [sp, #20]
  40e274:	2101      	movs	r1, #1
  40e276:	4638      	mov	r0, r7
  40e278:	f7ff fec2 	bl	40e000 <_Z7setDesthb>
  40e27c:	2601      	movs	r6, #1
  40e27e:	2564      	movs	r5, #100	; 0x64
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Ele;  md->weight=-100;
  40e280:	2100      	movs	r1, #0
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_MAX;  md->weight=-100;  md->swtch=DSW_THR;  md->mltpx=MLTPX_REP;
        break;

      // V-Tail
      case TMPL_V_TAIL:
        md=setDest(ICC(STK_RUD), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
  40e282:	72c6      	strb	r6, [r0, #11]
  40e284:	7085      	strb	r5, [r0, #2]
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Ele;  md->weight=-100;
  40e286:	4638      	mov	r0, r7
  40e288:	f7ff feba 	bl	40e000 <_Z7setDesthb>
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
  40e28c:	f89d 8015 	ldrb.w	r8, [sp, #21]
        break;

      // V-Tail
      case TMPL_V_TAIL:
        md=setDest(ICC(STK_RUD), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Ele;  md->weight=-100;
  40e290:	239c      	movs	r3, #156	; 0x9c
  40e292:	2702      	movs	r7, #2
  40e294:	7083      	strb	r3, [r0, #2]
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
  40e296:	4631      	mov	r1, r6
        break;

      // V-Tail
      case TMPL_V_TAIL:
        md=setDest(ICC(STK_RUD), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Ele;  md->weight=-100;
  40e298:	72c7      	strb	r7, [r0, #11]
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
  40e29a:	4640      	mov	r0, r8
  40e29c:	f7ff feb0 	bl	40e000 <_Z7setDesthb>
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2a0:	2100      	movs	r1, #0

      // V-Tail
      case TMPL_V_TAIL:
        md=setDest(ICC(STK_RUD), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Ele;  md->weight=-100;
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Rud;  md->weight= 100;
  40e2a2:	72c6      	strb	r6, [r0, #11]
  40e2a4:	7085      	strb	r5, [r0, #2]
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2a6:	4640      	mov	r0, r8
  40e2a8:	f7ff feaa 	bl	40e000 <_Z7setDesthb>
  40e2ac:	72c7      	strb	r7, [r0, #11]
  40e2ae:	7085      	strb	r5, [r0, #2]
        break;
  40e2b0:	e783      	b.n	40e1ba <_Z13applyTemplateh+0x82>

      // Elevon\\Delta
      case TMPL_ELEVON_DELTA:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2b2:	f89d 6015 	ldrb.w	r6, [sp, #21]
  40e2b6:	2101      	movs	r1, #1
  40e2b8:	4630      	mov	r0, r6
  40e2ba:	f7ff fea1 	bl	40e000 <_Z7setDesthb>
  40e2be:	2564      	movs	r5, #100	; 0x64
  40e2c0:	f04f 0802 	mov.w	r8, #2
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ail;  md->weight= 100;
  40e2c4:	2100      	movs	r1, #0
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
        break;

      // Elevon\\Delta
      case TMPL_ELEVON_DELTA:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2c6:	f880 800b 	strb.w	r8, [r0, #11]
  40e2ca:	7085      	strb	r5, [r0, #2]
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ail;  md->weight= 100;
  40e2cc:	4630      	mov	r0, r6
  40e2ce:	f7ff fe97 	bl	40e000 <_Z7setDesthb>
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2d2:	f89d 7017 	ldrb.w	r7, [sp, #23]
        break;

      // Elevon\\Delta
      case TMPL_ELEVON_DELTA:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ail;  md->weight= 100;
  40e2d6:	2604      	movs	r6, #4
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2d8:	2101      	movs	r1, #1
        break;

      // Elevon\\Delta
      case TMPL_ELEVON_DELTA:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ail;  md->weight= 100;
  40e2da:	72c6      	strb	r6, [r0, #11]
  40e2dc:	7085      	strb	r5, [r0, #2]
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2de:	4638      	mov	r0, r7
  40e2e0:	f7ff fe8e 	bl	40e000 <_Z7setDesthb>
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight=-100;
  40e2e4:	2100      	movs	r1, #0

      // Elevon\\Delta
      case TMPL_ELEVON_DELTA:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Ail;  md->weight= 100;
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 100;
  40e2e6:	f880 800b 	strb.w	r8, [r0, #11]
  40e2ea:	7085      	strb	r5, [r0, #2]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight=-100;
  40e2ec:	4638      	mov	r0, r7
  40e2ee:	f7ff fe87 	bl	40e000 <_Z7setDesthb>
  40e2f2:	239c      	movs	r3, #156	; 0x9c
  40e2f4:	72c6      	strb	r6, [r0, #11]
  40e2f6:	7083      	strb	r3, [r0, #2]
        break;
  40e2f8:	e75f      	b.n	40e1ba <_Z13applyTemplateh+0x82>

      // eCCPM
      case TMPL_ECCPM:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
  40e2fa:	f89d 5015 	ldrb.w	r5, [sp, #21]
  40e2fe:	2101      	movs	r1, #1
  40e300:	4628      	mov	r0, r5
  40e302:	f7ff fe7d 	bl	40e000 <_Z7setDesthb>
  40e306:	2702      	movs	r7, #2
  40e308:	2348      	movs	r3, #72	; 0x48
  40e30a:	7083      	strb	r3, [r0, #2]
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e30c:	2100      	movs	r1, #0
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight=-100;
        break;

      // eCCPM
      case TMPL_ECCPM:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
  40e30e:	72c7      	strb	r7, [r0, #11]
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e310:	4628      	mov	r0, r5
  40e312:	f7ff fe75 	bl	40e000 <_Z7setDesthb>
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight=-36;
  40e316:	f89d 8017 	ldrb.w	r8, [sp, #23]
        break;

      // eCCPM
      case TMPL_ECCPM:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e31a:	2603      	movs	r6, #3
  40e31c:	2537      	movs	r5, #55	; 0x37
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight=-36;
  40e31e:	2101      	movs	r1, #1
        break;

      // eCCPM
      case TMPL_ECCPM:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e320:	72c6      	strb	r6, [r0, #11]
  40e322:	7085      	strb	r5, [r0, #2]
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight=-36;
  40e324:	4640      	mov	r0, r8
  40e326:	f7ff fe6b 	bl	40e000 <_Z7setDesthb>
  40e32a:	f04f 0adc 	mov.w	sl, #220	; 0xdc
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight= 62;
  40e32e:	2100      	movs	r1, #0

      // eCCPM
      case TMPL_ECCPM:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight=-36;
  40e330:	72c7      	strb	r7, [r0, #11]
  40e332:	f880 a002 	strb.w	sl, [r0, #2]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight= 62;
  40e336:	4640      	mov	r0, r8
  40e338:	f7ff fe62 	bl	40e000 <_Z7setDesthb>
  40e33c:	f04f 0904 	mov.w	r9, #4
  40e340:	233e      	movs	r3, #62	; 0x3e
  40e342:	7083      	strb	r3, [r0, #2]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e344:	2100      	movs	r1, #0
      // eCCPM
      case TMPL_ECCPM:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight=-36;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight= 62;
  40e346:	f880 900b 	strb.w	r9, [r0, #11]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e34a:	4640      	mov	r0, r8
  40e34c:	f7ff fe58 	bl	40e000 <_Z7setDesthb>
        md=setDest(5, true);       md->srcRaw=MIXSRC_Ele;  md->weight=-36;
  40e350:	2101      	movs	r1, #1
      case TMPL_ECCPM:
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight=-36;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight= 62;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e352:	72c6      	strb	r6, [r0, #11]
  40e354:	7085      	strb	r5, [r0, #2]
        md=setDest(5, true);       md->srcRaw=MIXSRC_Ele;  md->weight=-36;
  40e356:	2005      	movs	r0, #5
  40e358:	f7ff fe52 	bl	40e000 <_Z7setDesthb>
        md=setDest(5);             md->srcRaw=MIXSRC_Ail;  md->weight=-62;
  40e35c:	2100      	movs	r1, #0
        md=setDest(ICC(STK_ELE), true);  md->srcRaw=MIXSRC_Ele;  md->weight= 72;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
        md=setDest(ICC(STK_AIL), true);  md->srcRaw=MIXSRC_Ele;  md->weight=-36;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Ail;  md->weight= 62;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_Thr;  md->weight= 55;
        md=setDest(5, true);       md->srcRaw=MIXSRC_Ele;  md->weight=-36;
  40e35e:	72c7      	strb	r7, [r0, #11]
  40e360:	f880 a002 	strb.w	sl, [r0, #2]
        md=setDest(5);             md->srcRaw=MIXSRC_Ail;  md->weight=-62;
  40e364:	2005      	movs	r0, #5
  40e366:	f7ff fe4b 	bl	40e000 <_Z7setDesthb>
  40e36a:	23c2      	movs	r3, #194	; 0xc2
  40e36c:	f880 900b 	strb.w	r9, [r0, #11]
  40e370:	7083      	strb	r3, [r0, #2]
        md=setDest(5);             md->srcRaw=MIXSRC_Thr;  md->weight= 55;
  40e372:	2100      	movs	r1, #0
  40e374:	2005      	movs	r0, #5
  40e376:	f7ff fe43 	bl	40e000 <_Z7setDesthb>
  40e37a:	72c6      	strb	r6, [r0, #11]
  40e37c:	7085      	strb	r5, [r0, #2]
        break;
  40e37e:	e71c      	b.n	40e1ba <_Z13applyTemplateh+0x82>
  40e380:	20000108 	.word	0x20000108
  40e384:	0040f730 	.word	0x0040f730

      // Heli Setup
      case TMPL_HELI_SETUP:
        clearMixes();  //This time we want a clean slate
  40e388:	f7ff fe7a 	bl	40e080 <_Z10clearMixesv>
        clearCurves();
  40e38c:	f7ff fe90 	bl	40e0b0 <_Z11clearCurvesv>

        //Set up Mixes
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH9;   md->weight=  50;
  40e390:	f89d 5017 	ldrb.w	r5, [sp, #23]
  40e394:	2100      	movs	r1, #0
  40e396:	4628      	mov	r0, r5
  40e398:	f7ff fe32 	bl	40e000 <_Z7setDesthb>
  40e39c:	f04f 0b32 	mov.w	fp, #50	; 0x32
  40e3a0:	f880 b00b 	strb.w	fp, [r0, #11]
  40e3a4:	f880 b002 	strb.w	fp, [r0, #2]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH10;  md->weight=-100;
  40e3a8:	2100      	movs	r1, #0
  40e3aa:	4628      	mov	r0, r5
  40e3ac:	f7ff fe28 	bl	40e000 <_Z7setDesthb>
  40e3b0:	2233      	movs	r2, #51	; 0x33
  40e3b2:	f06f 0363 	mvn.w	r3, #99	; 0x63
  40e3b6:	72c2      	strb	r2, [r0, #11]
  40e3b8:	7083      	strb	r3, [r0, #2]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH11;  md->weight= 100; md->carryTrim=TRIM_OFF;
  40e3ba:	2100      	movs	r1, #0
  40e3bc:	4628      	mov	r0, r5
  40e3be:	f7ff fe1f 	bl	40e000 <_Z7setDesthb>

        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_CH9;   md->weight=-100;
  40e3c2:	f89d 6015 	ldrb.w	r6, [sp, #21]
        clearCurves();

        //Set up Mixes
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH9;   md->weight=  50;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH10;  md->weight=-100;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH11;  md->weight= 100; md->carryTrim=TRIM_OFF;
  40e3c6:	2501      	movs	r5, #1
  40e3c8:	f04f 0964 	mov.w	r9, #100	; 0x64
  40e3cc:	2334      	movs	r3, #52	; 0x34
  40e3ce:	72c3      	strb	r3, [r0, #11]
  40e3d0:	f880 9002 	strb.w	r9, [r0, #2]
  40e3d4:	7345      	strb	r5, [r0, #13]

        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_CH9;   md->weight=-100;
  40e3d6:	2100      	movs	r1, #0
  40e3d8:	4630      	mov	r0, r6
  40e3da:	9300      	str	r3, [sp, #0]
  40e3dc:	f7ff fe10 	bl	40e000 <_Z7setDesthb>
  40e3e0:	f06f 0163 	mvn.w	r1, #99	; 0x63
  40e3e4:	f880 b00b 	strb.w	fp, [r0, #11]
  40e3e8:	7081      	strb	r1, [r0, #2]
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_CH11;  md->weight= 100; md->carryTrim=TRIM_OFF;
  40e3ea:	2100      	movs	r1, #0
  40e3ec:	4630      	mov	r0, r6
  40e3ee:	f7ff fe07 	bl	40e000 <_Z7setDesthb>
  40e3f2:	9b00      	ldr	r3, [sp, #0]

        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight= 100; md->swtch=DSW_ID0; md->curve=CV(1); md->carryTrim=TRIM_OFF;
  40e3f4:	f89d 2016 	ldrb.w	r2, [sp, #22]
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH9;   md->weight=  50;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH10;  md->weight=-100;
        md=setDest(ICC(STK_AIL));  md->srcRaw=MIXSRC_CH11;  md->weight= 100; md->carryTrim=TRIM_OFF;

        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_CH9;   md->weight=-100;
        md=setDest(ICC(STK_ELE));  md->srcRaw=MIXSRC_CH11;  md->weight= 100; md->carryTrim=TRIM_OFF;
  40e3f8:	72c3      	strb	r3, [r0, #11]
  40e3fa:	f880 9002 	strb.w	r9, [r0, #2]
  40e3fe:	7345      	strb	r5, [r0, #13]

        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight= 100; md->swtch=DSW_ID0; md->curve=CV(1); md->carryTrim=TRIM_OFF;
  40e400:	2100      	movs	r1, #0
  40e402:	4610      	mov	r0, r2
  40e404:	9300      	str	r3, [sp, #0]
  40e406:	9203      	str	r2, [sp, #12]
  40e408:	f7ff fdfa 	bl	40e000 <_Z7setDesthb>
  40e40c:	2603      	movs	r6, #3
  40e40e:	f04f 0c07 	mov.w	ip, #7
  40e412:	2704      	movs	r7, #4
  40e414:	f880 c005 	strb.w	ip, [r0, #5]
  40e418:	72c6      	strb	r6, [r0, #11]
  40e41a:	f880 9002 	strb.w	r9, [r0, #2]
  40e41e:	70c7      	strb	r7, [r0, #3]
  40e420:	7345      	strb	r5, [r0, #13]
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight= 100; md->swtch=DSW_ID1; md->curve=CV(2); md->carryTrim=TRIM_OFF;
  40e422:	2100      	movs	r1, #0
  40e424:	9803      	ldr	r0, [sp, #12]
  40e426:	f8cd c004 	str.w	ip, [sp, #4]
  40e42a:	f7ff fde9 	bl	40e000 <_Z7setDesthb>
  40e42e:	f04f 0808 	mov.w	r8, #8
  40e432:	f04f 0a05 	mov.w	sl, #5
  40e436:	72c6      	strb	r6, [r0, #11]
  40e438:	f880 9002 	strb.w	r9, [r0, #2]
  40e43c:	f880 a003 	strb.w	sl, [r0, #3]
  40e440:	f880 8005 	strb.w	r8, [r0, #5]
  40e444:	7345      	strb	r5, [r0, #13]
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight= 110; md->swtch=DSW_ID2; md->curve=CV(2); md->carryTrim=TRIM_OFF;
  40e446:	2100      	movs	r1, #0
  40e448:	9803      	ldr	r0, [sp, #12]
  40e44a:	f7ff fdd9 	bl	40e000 <_Z7setDesthb>
  40e44e:	226e      	movs	r2, #110	; 0x6e
  40e450:	2106      	movs	r1, #6
  40e452:	72c6      	strb	r6, [r0, #11]
  40e454:	7082      	strb	r2, [r0, #2]
  40e456:	70c1      	strb	r1, [r0, #3]
  40e458:	f880 8005 	strb.w	r8, [r0, #5]
  40e45c:	7345      	strb	r5, [r0, #13]
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_MAX;      md->weight=-125; md->swtch=DSW_THR;  md->mltpx=MLTPX_REP; md->carryTrim=TRIM_OFF;
  40e45e:	2100      	movs	r1, #0
  40e460:	9803      	ldr	r0, [sp, #12]
  40e462:	f7ff fdcd 	bl	40e000 <_Z7setDesthb>
  40e466:	2183      	movs	r1, #131	; 0x83
  40e468:	4602      	mov	r2, r0
  40e46a:	7091      	strb	r1, [r2, #2]
  40e46c:	2102      	movs	r1, #2
  40e46e:	f882 800b 	strb.w	r8, [r2, #11]
  40e472:	70d5      	strb	r5, [r2, #3]
  40e474:	7111      	strb	r1, [r2, #4]
  40e476:	7355      	strb	r5, [r2, #13]

        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Rud; md->weight=100;
  40e478:	2100      	movs	r1, #0
  40e47a:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40e47e:	f7ff fdbf 	bl	40e000 <_Z7setDesthb>

        md=setDest(4);  md->srcRaw=MIXSRC_MAX; md->weight= 50; md->swtch=-DSW_GEA; md->carryTrim=TRIM_OFF;
  40e482:	2100      	movs	r1, #0
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight= 100; md->swtch=DSW_ID0; md->curve=CV(1); md->carryTrim=TRIM_OFF;
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight= 100; md->swtch=DSW_ID1; md->curve=CV(2); md->carryTrim=TRIM_OFF;
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_Thr;  md->weight= 110; md->swtch=DSW_ID2; md->curve=CV(2); md->carryTrim=TRIM_OFF;
        md=setDest(ICC(STK_THR));  md->srcRaw=MIXSRC_MAX;      md->weight=-125; md->swtch=DSW_THR;  md->mltpx=MLTPX_REP; md->carryTrim=TRIM_OFF;

        md=setDest(ICC(STK_RUD));  md->srcRaw=MIXSRC_Rud; md->weight=100;
  40e484:	72c5      	strb	r5, [r0, #11]
  40e486:	f880 9002 	strb.w	r9, [r0, #2]

        md=setDest(4);  md->srcRaw=MIXSRC_MAX; md->weight= 50; md->swtch=-DSW_GEA; md->carryTrim=TRIM_OFF;
  40e48a:	4638      	mov	r0, r7
  40e48c:	f7ff fdb8 	bl	40e000 <_Z7setDesthb>
  40e490:	22f8      	movs	r2, #248	; 0xf8
  40e492:	f880 800b 	strb.w	r8, [r0, #11]
  40e496:	f880 b002 	strb.w	fp, [r0, #2]
  40e49a:	70c2      	strb	r2, [r0, #3]
  40e49c:	7345      	strb	r5, [r0, #13]
        md=setDest(4);  md->srcRaw=MIXSRC_MAX; md->weight=-50; md->swtch= DSW_GEA; md->carryTrim=TRIM_OFF;
  40e49e:	2100      	movs	r1, #0
  40e4a0:	4638      	mov	r0, r7
  40e4a2:	f7ff fdad 	bl	40e000 <_Z7setDesthb>
  40e4a6:	22ce      	movs	r2, #206	; 0xce
  40e4a8:	7082      	strb	r2, [r0, #2]
  40e4aa:	f880 800b 	strb.w	r8, [r0, #11]
  40e4ae:	f880 8003 	strb.w	r8, [r0, #3]
  40e4b2:	7345      	strb	r5, [r0, #13]
        md=setDest(4);  md->srcRaw=STK_P3;  md->weight= 40; md->carryTrim=TRIM_OFF;
  40e4b4:	2100      	movs	r1, #0
  40e4b6:	4638      	mov	r0, r7
  40e4b8:	9202      	str	r2, [sp, #8]
  40e4ba:	f7ff fda1 	bl	40e000 <_Z7setDesthb>
  40e4be:	f8dd c004 	ldr.w	ip, [sp, #4]
  40e4c2:	2128      	movs	r1, #40	; 0x28
  40e4c4:	f880 c00b 	strb.w	ip, [r0, #11]
  40e4c8:	7081      	strb	r1, [r0, #2]
  40e4ca:	7345      	strb	r5, [r0, #13]

        md=setDest(5);  md->srcRaw=MIXSRC_CH9;   md->weight= -50;
  40e4cc:	2100      	movs	r1, #0
  40e4ce:	4650      	mov	r0, sl
  40e4d0:	f7ff fd96 	bl	40e000 <_Z7setDesthb>
  40e4d4:	f880 b00b 	strb.w	fp, [r0, #11]
  40e4d8:	9a02      	ldr	r2, [sp, #8]
        md=setDest(5);  md->srcRaw=MIXSRC_CH10;  md->weight=-100;
  40e4da:	2100      	movs	r1, #0

        md=setDest(4);  md->srcRaw=MIXSRC_MAX; md->weight= 50; md->swtch=-DSW_GEA; md->carryTrim=TRIM_OFF;
        md=setDest(4);  md->srcRaw=MIXSRC_MAX; md->weight=-50; md->swtch= DSW_GEA; md->carryTrim=TRIM_OFF;
        md=setDest(4);  md->srcRaw=STK_P3;  md->weight= 40; md->carryTrim=TRIM_OFF;

        md=setDest(5);  md->srcRaw=MIXSRC_CH9;   md->weight= -50;
  40e4dc:	7082      	strb	r2, [r0, #2]
        md=setDest(5);  md->srcRaw=MIXSRC_CH10;  md->weight=-100;
  40e4de:	4650      	mov	r0, sl
  40e4e0:	f7ff fd8e 	bl	40e000 <_Z7setDesthb>
  40e4e4:	2233      	movs	r2, #51	; 0x33
  40e4e6:	f06f 0163 	mvn.w	r1, #99	; 0x63
  40e4ea:	72c2      	strb	r2, [r0, #11]
  40e4ec:	7081      	strb	r1, [r0, #2]
        md=setDest(5);  md->srcRaw=MIXSRC_CH11;  md->weight=-100; md->carryTrim=TRIM_OFF;
  40e4ee:	2100      	movs	r1, #0
  40e4f0:	4650      	mov	r0, sl
  40e4f2:	f7ff fd85 	bl	40e000 <_Z7setDesthb>
  40e4f6:	9b00      	ldr	r3, [sp, #0]
  40e4f8:	f06f 0263 	mvn.w	r2, #99	; 0x63
  40e4fc:	7082      	strb	r2, [r0, #2]
  40e4fe:	72c3      	strb	r3, [r0, #11]
  40e500:	7345      	strb	r5, [r0, #13]

        md=setDest(8);  md->srcRaw=MIXSRC_Ele;  md->weight= 60;
  40e502:	2100      	movs	r1, #0
  40e504:	4640      	mov	r0, r8
  40e506:	f7ff fd7b 	bl	40e000 <_Z7setDesthb>
  40e50a:	2302      	movs	r3, #2
  40e50c:	72c3      	strb	r3, [r0, #11]
  40e50e:	233c      	movs	r3, #60	; 0x3c
  40e510:	7083      	strb	r3, [r0, #2]
        md=setDest(9);  md->srcRaw=MIXSRC_Ail;  md->weight=-52;
  40e512:	2100      	movs	r1, #0
  40e514:	2009      	movs	r0, #9
  40e516:	f7ff fd73 	bl	40e000 <_Z7setDesthb>
  40e51a:	23cc      	movs	r3, #204	; 0xcc
  40e51c:	72c7      	strb	r7, [r0, #11]
  40e51e:	7083      	strb	r3, [r0, #2]
        md=setDest(10); md->srcRaw=MIXSRC_Thr;  md->weight= 70; md->swtch=DSW_ID0; md->curve=CV(3); md->carryTrim=TRIM_OFF;
  40e520:	2100      	movs	r1, #0
  40e522:	200a      	movs	r0, #10
  40e524:	f7ff fd6c 	bl	40e000 <_Z7setDesthb>
  40e528:	f04f 0b46 	mov.w	fp, #70	; 0x46
  40e52c:	2309      	movs	r3, #9
  40e52e:	7143      	strb	r3, [r0, #5]
  40e530:	72c6      	strb	r6, [r0, #11]
  40e532:	f880 b002 	strb.w	fp, [r0, #2]
  40e536:	70c7      	strb	r7, [r0, #3]
  40e538:	7345      	strb	r5, [r0, #13]
        md=setDest(10); md->srcRaw=MIXSRC_Thr;  md->weight= 70; md->swtch=DSW_ID1; md->curve=CV(4); md->carryTrim=TRIM_OFF;
  40e53a:	2100      	movs	r1, #0
  40e53c:	200a      	movs	r0, #10
  40e53e:	f7ff fd5f 	bl	40e000 <_Z7setDesthb>
  40e542:	f04f 080a 	mov.w	r8, #10
  40e546:	72c6      	strb	r6, [r0, #11]
  40e548:	f880 b002 	strb.w	fp, [r0, #2]
  40e54c:	f880 a003 	strb.w	sl, [r0, #3]
  40e550:	f880 8005 	strb.w	r8, [r0, #5]
  40e554:	7345      	strb	r5, [r0, #13]
        md=setDest(10); md->srcRaw=MIXSRC_Thr;  md->weight= 70; md->swtch=DSW_ID2; md->curve=CV(4); md->carryTrim=TRIM_OFF;
  40e556:	2100      	movs	r1, #0
  40e558:	4640      	mov	r0, r8
  40e55a:	f7ff fd51 	bl	40e000 <_Z7setDesthb>
  40e55e:	2106      	movs	r1, #6
  40e560:	72c6      	strb	r6, [r0, #11]
  40e562:	f880 b002 	strb.w	fp, [r0, #2]
  40e566:	70c1      	strb	r1, [r0, #3]
  40e568:	f880 8005 	strb.w	r8, [r0, #5]
  40e56c:	7345      	strb	r5, [r0, #13]
        md=setDest(10); md->srcRaw=MIXSRC_Thr;  md->weight=100; md->swtch=DSW_THR; md->curve=CV(5); md->carryTrim=TRIM_OFF;  md->mltpx=MLTPX_REP;
  40e56e:	2100      	movs	r1, #0
  40e570:	4640      	mov	r0, r8
  40e572:	f7ff fd45 	bl	40e000 <_Z7setDesthb>
  40e576:	230b      	movs	r3, #11
  40e578:	2202      	movs	r2, #2
  40e57a:	7143      	strb	r3, [r0, #5]
  40e57c:	7102      	strb	r2, [r0, #4]
  40e57e:	72c6      	strb	r6, [r0, #11]
  40e580:	f880 9002 	strb.w	r9, [r0, #2]
  40e584:	70c5      	strb	r5, [r0, #3]
  40e586:	7345      	strb	r5, [r0, #13]

        //Set up Curves
        setCurve(CURVE5(1), heli_ar1);
  40e588:	490a      	ldr	r1, [pc, #40]	; (40e5b4 <_Z13applyTemplateh+0x47c>)
  40e58a:	2000      	movs	r0, #0
  40e58c:	f7ff fda4 	bl	40e0d8 <_Z8setCurvehPKa>
        setCurve(CURVE5(2), heli_ar2);
  40e590:	4628      	mov	r0, r5
  40e592:	4909      	ldr	r1, [pc, #36]	; (40e5b8 <_Z13applyTemplateh+0x480>)
  40e594:	f7ff fda0 	bl	40e0d8 <_Z8setCurvehPKa>
        setCurve(CURVE5(3), heli_ar3);
  40e598:	2002      	movs	r0, #2
  40e59a:	4908      	ldr	r1, [pc, #32]	; (40e5bc <_Z13applyTemplateh+0x484>)
  40e59c:	f7ff fd9c 	bl	40e0d8 <_Z8setCurvehPKa>
        setCurve(CURVE5(4), heli_ar4);
  40e5a0:	4630      	mov	r0, r6
  40e5a2:	4907      	ldr	r1, [pc, #28]	; (40e5c0 <_Z13applyTemplateh+0x488>)
  40e5a4:	f7ff fd98 	bl	40e0d8 <_Z8setCurvehPKa>
        setCurve(CURVE5(5), heli_ar5);
  40e5a8:	4638      	mov	r0, r7
  40e5aa:	4906      	ldr	r1, [pc, #24]	; (40e5c4 <_Z13applyTemplateh+0x48c>)
  40e5ac:	f7ff fd94 	bl	40e0d8 <_Z8setCurvehPKa>
        break;
  40e5b0:	e603      	b.n	40e1ba <_Z13applyTemplateh+0x82>
  40e5b2:	bf00      	nop
  40e5b4:	00410ec0 	.word	0x00410ec0
  40e5b8:	00410ec8 	.word	0x00410ec8
  40e5bc:	00410ed0 	.word	0x00410ed0
  40e5c0:	00410ed8 	.word	0x00410ed8
  40e5c4:	00410ee0 	.word	0x00410ee0

0040e5c8 <_Z12modelDefaulth>:
  STORE_MODELVARS;
}
#endif

void modelDefault(uint8_t id)
{
  40e5c8:	b508      	push	{r3, lr}
  memset(&g_model, 0, sizeof(g_model));
  40e5ca:	2100      	movs	r1, #0
  40e5cc:	f240 725a 	movw	r2, #1882	; 0x75a
  40e5d0:	4803      	ldr	r0, [pc, #12]	; (40e5e0 <_Z12modelDefaulth+0x18>)
  40e5d2:	f000 ff3f 	bl	40f454 <memset>
void applyTemplate(uint8_t idx);

#ifdef TEMPLATES
inline void applyDefaultTemplate()
{
  applyTemplate(TMPL_SIMPLE_4CH);
  40e5d6:	2001      	movs	r0, #1
  applyDefaultTemplate();
}
  40e5d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40e5dc:	e5ac      	b.n	40e138 <_Z13applyTemplateh>
  40e5de:	bf00      	nop
  40e5e0:	20000244 	.word	0x20000244

0040e5e4 <_Z11eeLoadModelh>:

void eeLoadModel(uint8_t id)
{
  uint16_t size ;

  if (id<MAX_MODELS) {
  40e5e4:	283b      	cmp	r0, #59	; 0x3b

  return false;
}

void eeLoadModel(uint8_t id)
{
  40e5e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e5ea:	4605      	mov	r5, r0
  uint16_t size ;

  if (id<MAX_MODELS) {
  40e5ec:	d901      	bls.n	40e5f2 <_Z11eeLoadModelh+0xe>
  40e5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    size =  File_system[id+1].size ;
  40e5f2:	1c46      	adds	r6, r0, #1
  40e5f4:	4c19      	ldr	r4, [pc, #100]	; (40e65c <_Z11eeLoadModelh+0x78>)
  40e5f6:	ea4f 0946 	mov.w	r9, r6, lsl #1
  40e5fa:	eb09 0306 	add.w	r3, r9, r6
  40e5fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2

    memset(&g_model, 0, sizeof(g_model));
  40e602:	f240 775a 	movw	r7, #1882	; 0x75a
{
  uint16_t size ;

  if (id<MAX_MODELS) {

    size =  File_system[id+1].size ;
  40e606:	f8b3 8ab4 	ldrh.w	r8, [r3, #2740]	; 0xab4

    memset(&g_model, 0, sizeof(g_model));
  40e60a:	2100      	movs	r1, #0
  40e60c:	463a      	mov	r2, r7
  40e60e:	f504 709e 	add.w	r0, r4, #316	; 0x13c
  40e612:	f000 ff1f 	bl	40f454 <memset>
    if (size > 0 && size != sizeof(g_model)) {
      printf("Model data read=%d bytes vs %d bytes\n", size, (int)sizeof(ModelData));
    }
#endif

    if (size > sizeof(g_model)) {
  40e616:	45b8      	cmp	r8, r7
  40e618:	bf88      	it	hi
  40e61a:	463a      	movhi	r2, r7
  40e61c:	d811      	bhi.n	40e642 <_Z11eeLoadModelh+0x5e>
      size = sizeof(g_model) ;
    }
			 
    if(size < 256) { // if not loaded a fair amount
  40e61e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40e622:	bf88      	it	hi
  40e624:	4642      	movhi	r2, r8
  40e626:	d80c      	bhi.n	40e642 <_Z11eeLoadModelh+0x5e>
      modelDefault(id) ;
  40e628:	4628      	mov	r0, r5
  40e62a:	f7ff ffcd 	bl	40e5c8 <_Z12modelDefaulth>
      eeCheck(true);
  40e62e:	2001      	movs	r0, #1
  40e630:	f7f3 fe74 	bl	40231c <_Z7eeCheckb>
  40e634:	2306      	movs	r3, #6
  40e636:	f884 3896 	strb.w	r3, [r4, #2198]	; 0x896

#ifdef SDCARD
    initLogs();
#endif
  }
}
  40e63a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    else {
      read32_eeprom_data( ( File_system[id+1].block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&g_model, size, 0 ) ;
    }

    resetProto();
    resetAll();
  40e63e:	f7f6 b9b3 	b.w	4049a8 <_Z8resetAllv>
    if(size < 256) { // if not loaded a fair amount
      modelDefault(id) ;
      eeCheck(true);
    }
    else {
      read32_eeprom_data( ( File_system[id+1].block_no << 12) + sizeof( struct t_eeprom_header), ( uint8_t *)&g_model, size, 0 ) ;
  40e642:	444e      	add	r6, r9
  40e644:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  40e648:	f8d6 0aac 	ldr.w	r0, [r6, #2732]	; 0xaac
  40e64c:	4904      	ldr	r1, [pc, #16]	; (40e660 <_Z11eeLoadModelh+0x7c>)
  40e64e:	0300      	lsls	r0, r0, #12
  40e650:	3008      	adds	r0, #8
  40e652:	2300      	movs	r3, #0
  40e654:	f7f3 fb74 	bl	401d40 <_Z18read32_eeprom_datamPhmm>
  40e658:	e7ec      	b.n	40e634 <_Z11eeLoadModelh+0x50>
  40e65a:	bf00      	nop
  40e65c:	20000108 	.word	0x20000108
  40e660:	20000244 	.word	0x20000244

0040e664 <_Z19menuProcModelSelecth>:
}

#endif

void menuProcModelSelect(uint8_t event)
{
  40e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TITLE(STR_MENUMODELSEL);
  40e668:	2100      	movs	r1, #0
}

#endif

void menuProcModelSelect(uint8_t event)
{
  40e66a:	b089      	sub	sp, #36	; 0x24
#if !defined(PCBARM)
  // flush eeprom write
  eeFlush();
#endif

  if (s_confirmation) {
  40e66c:	4db9      	ldr	r5, [pc, #740]	; (40e954 <_Z19menuProcModelSelecth+0x2f0>)
}

#endif

void menuProcModelSelect(uint8_t event)
{
  40e66e:	9006      	str	r0, [sp, #24]
  TITLE(STR_MENUMODELSEL);
  40e670:	2302      	movs	r3, #2
  40e672:	4608      	mov	r0, r1
  40e674:	4ab8      	ldr	r2, [pc, #736]	; (40e958 <_Z19menuProcModelSelecth+0x2f4>)
  40e676:	f7f4 f91f 	bl	4028b8 <_Z11lcd_putsAtthhPKch>
#if !defined(PCBARM)
  // flush eeprom write
  eeFlush();
#endif

  if (s_confirmation) {
  40e67a:	f895 3a87 	ldrb.w	r3, [r5, #2695]	; 0xa87
  40e67e:	2b00      	cmp	r3, #0
  40e680:	f040 815e 	bne.w	40e940 <_Z19menuProcModelSelecth+0x2dc>
  40e684:	f895 3e7e 	ldrb.w	r3, [r5, #3710]	; 0xe7e
  }

#if defined(SDCARD)
  uint8_t _event = (s_warning || s_sdcard_error || s_menu_count) ? 0 : event;
#else
  uint8_t _event = s_warning ? 0 : event;
  40e688:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 40e95c <_Z19menuProcModelSelecth+0x2f8>
  40e68c:	9806      	ldr	r0, [sp, #24]
  40e68e:	f8da 4a88 	ldr.w	r4, [sl, #2696]	; 0xa88
  40e692:	2c00      	cmp	r4, #0
  40e694:	bf18      	it	ne
  40e696:	2000      	movne	r0, #0
  40e698:	4604      	mov	r4, r0
#endif
  uint8_t _event_ = (IS_RE_NAVIGATION_EVT(_event) ? 0 : _event);

  if (s_copyMode || !eeModelExists(g_eeGeneral.currModel)) {
  40e69a:	2b00      	cmp	r3, #0
  40e69c:	f000 80d4 	beq.w	40e848 <_Z19menuProcModelSelecth+0x1e4>
    if ((_event & 0x1f) == KEY_EXIT)
  40e6a0:	f004 031f 	and.w	r3, r4, #31
      _event_ -= KEY_EXIT;
  40e6a4:	1e60      	subs	r0, r4, #1
  uint8_t _event = s_warning ? 0 : event;
#endif
  uint8_t _event_ = (IS_RE_NAVIGATION_EVT(_event) ? 0 : _event);

  if (s_copyMode || !eeModelExists(g_eeGeneral.currModel)) {
    if ((_event & 0x1f) == KEY_EXIT)
  40e6a6:	2b01      	cmp	r3, #1
      _event_ -= KEY_EXIT;
  40e6a8:	b2c0      	uxtb	r0, r0
  uint8_t _event = s_warning ? 0 : event;
#endif
  uint8_t _event_ = (IS_RE_NAVIGATION_EVT(_event) ? 0 : _event);

  if (s_copyMode || !eeModelExists(g_eeGeneral.currModel)) {
    if ((_event & 0x1f) == KEY_EXIT)
  40e6aa:	d000      	beq.n	40e6ae <_Z19menuProcModelSelecth+0x4a>
  40e6ac:	4620      	mov	r0, r4
      _event_ -= KEY_EXIT;
  }

  int8_t oldSub = m_posVert;
  if (!check_submenu_simple(_event_, MAX_MODELS-1)) return;
  40e6ae:	213b      	movs	r1, #59	; 0x3b
  if (s_copyMode || !eeModelExists(g_eeGeneral.currModel)) {
    if ((_event & 0x1f) == KEY_EXIT)
      _event_ -= KEY_EXIT;
  }

  int8_t oldSub = m_posVert;
  40e6b0:	f895 7c34 	ldrb.w	r7, [r5, #3124]	; 0xc34
  if (!check_submenu_simple(_event_, MAX_MODELS-1)) return;
  40e6b4:	f7fc fb9e 	bl	40adf4 <_Z20check_submenu_simplehh>
  if (s_copyMode || !eeModelExists(g_eeGeneral.currModel)) {
    if ((_event & 0x1f) == KEY_EXIT)
      _event_ -= KEY_EXIT;
  }

  int8_t oldSub = m_posVert;
  40e6b8:	4ba6      	ldr	r3, [pc, #664]	; (40e954 <_Z19menuProcModelSelecth+0x2f0>)
  if (!check_submenu_simple(_event_, MAX_MODELS-1)) return;
  40e6ba:	2800      	cmp	r0, #0
  40e6bc:	f000 80c1 	beq.w	40e842 <_Z19menuProcModelSelecth+0x1de>
#if defined(ROTARY_ENCODERS)
  if (m_posVert < 0) m_posVert = 0;
#endif

  int8_t sub = m_posVert;
  40e6c0:	f893 6c34 	ldrb.w	r6, [r3, #3124]	; 0xc34
    chainMenu(menuProcModel);
    return;
  }
#endif

  switch(_event)
  40e6c4:	2c65      	cmp	r4, #101	; 0x65
  if (!check_submenu_simple(_event_, MAX_MODELS-1)) return;
#if defined(ROTARY_ENCODERS)
  if (m_posVert < 0) m_posVert = 0;
#endif

  int8_t sub = m_posVert;
  40e6c6:	b2f1      	uxtb	r1, r6
  40e6c8:	9107      	str	r1, [sp, #28]
    chainMenu(menuProcModel);
    return;
  }
#endif

  switch(_event)
  40e6ca:	f240 80cb 	bls.w	40e864 <_Z19menuProcModelSelecth+0x200>
  40e6ce:	2c81      	cmp	r4, #129	; 0x81
  40e6d0:	f000 820e 	beq.w	40eaf0 <_Z19menuProcModelSelecth+0x48c>
  40e6d4:	2cbf      	cmp	r4, #191	; 0xbf
  40e6d6:	f000 8158 	beq.w	40e98a <_Z19menuProcModelSelecth+0x326>
  40e6da:	2c80      	cmp	r4, #128	; 0x80
  40e6dc:	f000 80cc 	beq.w	40e878 <_Z19menuProcModelSelecth+0x214>
  40e6e0:	9a07      	ldr	r2, [sp, #28]
  40e6e2:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
  40e6e6:	f895 8e7e 	ldrb.w	r8, [r5, #3710]	; 0xe7e
  40e6ea:	fa4f f982 	sxtb.w	r9, r2
#if !defined(PCBARM)
  lcd_puts(9*FW-(LEN_FREE-4)*FW, 0, STR_FREE);
  lcd_outdezAtt(  17*FW, 0, EeFsGetFree(),0);
#endif

  DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), (sub == g_eeGeneral.currModel) ? INVERS : 0);
  40e6ee:	2200      	movs	r2, #0
  40e6f0:	4589      	cmp	r9, r1
  40e6f2:	f000 81e8 	beq.w	40eac6 <_Z19menuProcModelSelecth+0x462>
  40e6f6:	2000      	movs	r0, #0
  40e6f8:	210b      	movs	r1, #11
  40e6fa:	f7f4 fba7 	bl	402e4c <_Z18DisplayScreenIndexhhh>

  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
  40e6fe:	f895 4e7d 	ldrb.w	r4, [r5, #3709]	; 0xe7d
  40e702:	4a94      	ldr	r2, [pc, #592]	; (40e954 <_Z19menuProcModelSelecth+0x2f0>)
  40e704:	ebc4 0309 	rsb	r3, r4, r9
  40e708:	2b00      	cmp	r3, #0
  40e70a:	f340 81e9 	ble.w	40eae0 <_Z19menuProcModelSelecth+0x47c>
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);
  40e70e:	2b05      	cmp	r3, #5
  40e710:	dd07      	ble.n	40e722 <_Z19menuProcModelSelecth+0xbe>
  40e712:	f1a9 0404 	sub.w	r4, r9, #4
  40e716:	2c35      	cmp	r4, #53	; 0x35
  40e718:	bfa8      	it	ge
  40e71a:	2435      	movge	r4, #53	; 0x35
  40e71c:	b2e4      	uxtb	r4, r4
  40e71e:	f882 4e7d 	strb.w	r4, [r2, #3709]	; 0xe7d

    k %= MAX_MODELS;

    if (eeModelExists(k)) {
#if defined(PCBARM)
      putsModelName(4*FW, y, ModelNames[k], k, 0);
  40e722:	f241 2200 	movw	r2, #4608	; 0x1200
  40e726:	f2c2 0200 	movt	r2, #8192	; 0x2000
        k += 1;
      else if (s_copyTgtOfs > 0 && ((k > sub && k <= sub+s_copyTgtOfs) || (k+MAX_MODELS > sub && k+MAX_MODELS <= sub+s_copyTgtOfs)))
        k += MAX_MODELS-1;
    }

    k %= MAX_MODELS;
  40e72a:	f648 0189 	movw	r1, #34953	; 0x8889

    if (eeModelExists(k)) {
#if defined(PCBARM)
      putsModelName(4*FW, y, ModelNames[k], k, 0);
  40e72e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
        k += 1;
      else if (s_copyTgtOfs > 0 && ((k > sub && k <= sub+s_copyTgtOfs) || (k+MAX_MODELS > sub && k+MAX_MODELS <= sub+s_copyTgtOfs)))
        k += MAX_MODELS-1;
    }

    k %= MAX_MODELS;
  40e732:	f6c8 0188 	movt	r1, #34952	; 0x8888

    if (eeModelExists(k)) {
#if defined(PCBARM)
      putsModelName(4*FW, y, ModelNames[k], k, 0);
  40e736:	3204      	adds	r2, #4
#if !defined(PCBARM)
  lcd_puts(9*FW-(LEN_FREE-4)*FW, 0, STR_FREE);
  lcd_outdezAtt(  17*FW, 0, EeFsGetFree(),0);
#endif

  DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), (sub == g_eeGeneral.currModel) ? INVERS : 0);
  40e738:	2708      	movs	r7, #8
  40e73a:	2600      	movs	r6, #0
        k += 1;
      else if (s_copyTgtOfs > 0 && ((k > sub && k <= sub+s_copyTgtOfs) || (k+MAX_MODELS > sub && k+MAX_MODELS <= sub+s_copyTgtOfs)))
        k += MAX_MODELS-1;
    }

    k %= MAX_MODELS;
  40e73c:	9104      	str	r1, [sp, #16]

    if (eeModelExists(k)) {
#if defined(PCBARM)
      putsModelName(4*FW, y, ModelNames[k], k, 0);
  40e73e:	9205      	str	r2, [sp, #20]
  40e740:	e034      	b.n	40e7ac <_Z19menuProcModelSelecth+0x148>
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);

  for (uint8_t i=0; i<7; i++) {
    uint8_t y=(i+1)*FH;
    uint8_t k=i+s_pgOfs;
    lcd_outdezNAtt(3*FW+2, y, k+1, LEADING0+((!s_copyMode && sub==k) ? INVERS : 0), 2);
  40e742:	45a1      	cmp	r9, r4
  40e744:	f000 8188 	beq.w	40ea58 <_Z19menuProcModelSelecth+0x3f4>
  40e748:	2302      	movs	r3, #2
  40e74a:	9300      	str	r3, [sp, #0]
  40e74c:	b212      	sxth	r2, r2
  40e74e:	2014      	movs	r0, #20
  40e750:	4639      	mov	r1, r7
  40e752:	2310      	movs	r3, #16
  40e754:	f7f4 f9fe 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
        k += 1;
      else if (s_copyTgtOfs > 0 && ((k > sub && k <= sub+s_copyTgtOfs) || (k+MAX_MODELS > sub && k+MAX_MODELS <= sub+s_copyTgtOfs)))
        k += MAX_MODELS-1;
    }

    k %= MAX_MODELS;
  40e758:	9804      	ldr	r0, [sp, #16]
  40e75a:	fba0 0304 	umull	r0, r3, r0, r4
  40e75e:	095b      	lsrs	r3, r3, #5
  40e760:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40e764:	eba4 0483 	sub.w	r4, r4, r3, lsl #2
  40e768:	b2e4      	uxtb	r4, r4
  }
}

bool eeModelExists(uint8_t id)
{
  return ( File_system[id+1].size > 0 ) ;
  40e76a:	1c63      	adds	r3, r4, #1
  40e76c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40e770:	eb0a 0383 	add.w	r3, sl, r3, lsl #2

    if (eeModelExists(k)) {
  40e774:	f8b3 3ab4 	ldrh.w	r3, [r3, #2740]	; 0xab4
  40e778:	2b00      	cmp	r3, #0
  40e77a:	f040 8130 	bne.w	40e9de <_Z19menuProcModelSelecth+0x37a>
      lcd_outdezAtt(20*FW, y, size, 0);
#endif
      if (k==g_eeGeneral.currModel && (s_copySrcRow<0 || i+s_pgOfs!=sub)) lcd_putc(1, y, '*');
    }

    if (s_copyMode && sub==i+s_pgOfs) {
  40e77e:	f895 4e7e 	ldrb.w	r4, [r5, #3710]	; 0xe7e
  40e782:	b14c      	cbz	r4, 40e798 <_Z19menuProcModelSelecth+0x134>
  40e784:	f241 2000 	movw	r0, #4608	; 0x1200
  40e788:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40e78c:	f890 3e7d 	ldrb.w	r3, [r0, #3709]	; 0xe7d
  40e790:	18f3      	adds	r3, r6, r3
  40e792:	4599      	cmp	r9, r3
  40e794:	f000 817b 	beq.w	40ea8e <_Z19menuProcModelSelecth+0x42a>
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
      lcd_rect(8, y-1, DISPLAY_W-1-7, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
  40e798:	3601      	adds	r6, #1
  40e79a:	3708      	adds	r7, #8
  DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), (sub == g_eeGeneral.currModel) ? INVERS : 0);

  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);

  for (uint8_t i=0; i<7; i++) {
  40e79c:	2e07      	cmp	r6, #7
      if (k==g_eeGeneral.currModel && (s_copySrcRow<0 || i+s_pgOfs!=sub)) lcd_putc(1, y, '*');
    }

    if (s_copyMode && sub==i+s_pgOfs) {
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
      lcd_rect(8, y-1, DISPLAY_W-1-7, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
  40e79e:	b2ff      	uxtb	r7, r7
  DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), (sub == g_eeGeneral.currModel) ? INVERS : 0);

  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);

  for (uint8_t i=0; i<7; i++) {
  40e7a0:	f000 8145 	beq.w	40ea2e <_Z19menuProcModelSelecth+0x3ca>
#endif

  DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), (sub == g_eeGeneral.currModel) ? INVERS : 0);

  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);
  40e7a4:	f895 4e7d 	ldrb.w	r4, [r5, #3709]	; 0xe7d
  40e7a8:	f895 8e7e 	ldrb.w	r8, [r5, #3710]	; 0xe7e

  for (uint8_t i=0; i<7; i++) {
    uint8_t y=(i+1)*FH;
    uint8_t k=i+s_pgOfs;
  40e7ac:	19a4      	adds	r4, r4, r6
  40e7ae:	b2e4      	uxtb	r4, r4
    lcd_outdezNAtt(3*FW+2, y, k+1, LEADING0+((!s_copyMode && sub==k) ? INVERS : 0), 2);
  40e7b0:	f104 0b01 	add.w	fp, r4, #1
  40e7b4:	fa1f f28b 	uxth.w	r2, fp
  40e7b8:	f1b8 0f00 	cmp.w	r8, #0
  40e7bc:	d0c1      	beq.n	40e742 <_Z19menuProcModelSelecth+0xde>
  40e7be:	2302      	movs	r3, #2
  40e7c0:	9300      	str	r3, [sp, #0]
  40e7c2:	2014      	movs	r0, #20
  40e7c4:	2310      	movs	r3, #16
  40e7c6:	b212      	sxth	r2, r2
  40e7c8:	4639      	mov	r1, r7
  40e7ca:	f7f4 f9c3 	bl	402b54 <_Z14lcd_outdezNAtthhshh>

    if (s_copyMode == MOVE_MODE || (s_copyMode == COPY_MODE && s_copySrcRow >= 0)) {
  40e7ce:	f1b8 0f02 	cmp.w	r8, #2
  40e7d2:	f040 80ee 	bne.w	40e9b2 <_Z19menuProcModelSelecth+0x34e>
      if (k == sub) {
  40e7d6:	45a1      	cmp	r9, r4
  40e7d8:	f000 80f7 	beq.w	40e9ca <_Z19menuProcModelSelecth+0x366>
        }
        else {
          k = sub + s_copyTgtOfs;
        }
      }
      else if (s_copyTgtOfs < 0 && ((k < sub && k >= sub+s_copyTgtOfs) || (k-MAX_MODELS < sub && k-MAX_MODELS >= sub+s_copyTgtOfs)))
  40e7dc:	f895 2e7f 	ldrb.w	r2, [r5, #3711]	; 0xe7f
  40e7e0:	b253      	sxtb	r3, r2
  40e7e2:	2b00      	cmp	r3, #0
  40e7e4:	f2c0 8141 	blt.w	40ea6a <_Z19menuProcModelSelecth+0x406>
        k += 1;
      else if (s_copyTgtOfs > 0 && ((k > sub && k <= sub+s_copyTgtOfs) || (k+MAX_MODELS > sub && k+MAX_MODELS <= sub+s_copyTgtOfs)))
  40e7e8:	2a00      	cmp	r2, #0
  40e7ea:	d0b5      	beq.n	40e758 <_Z19menuProcModelSelecth+0xf4>
  40e7ec:	45a1      	cmp	r9, r4
  40e7ee:	da06      	bge.n	40e7fe <_Z19menuProcModelSelecth+0x19a>
  40e7f0:	eb09 0203 	add.w	r2, r9, r3
  40e7f4:	4294      	cmp	r4, r2
  40e7f6:	bfd8      	it	le
  40e7f8:	f104 023b 	addle.w	r2, r4, #59	; 0x3b
  40e7fc:	dd06      	ble.n	40e80c <_Z19menuProcModelSelecth+0x1a8>
  40e7fe:	f104 023b 	add.w	r2, r4, #59	; 0x3b
  40e802:	4591      	cmp	r9, r2
  40e804:	dca8      	bgt.n	40e758 <_Z19menuProcModelSelecth+0xf4>
  40e806:	444b      	add	r3, r9
  40e808:	429a      	cmp	r2, r3
  40e80a:	daa5      	bge.n	40e758 <_Z19menuProcModelSelecth+0xf4>
        k += MAX_MODELS-1;
  40e80c:	b2d4      	uxtb	r4, r2
  40e80e:	e7a3      	b.n	40e758 <_Z19menuProcModelSelecth+0xf4>
              s_copySrcRow = cur;
            else if (cur == s_copySrcRow)
              s_copySrcRow = src;
          }

          if (s_copySrcRow != g_eeGeneral.currModel) {
  40e810:	f89a 2051 	ldrb.w	r2, [sl, #81]	; 0x51
  40e814:	4b51      	ldr	r3, [pc, #324]	; (40e95c <_Z19menuProcModelSelecth+0x2f8>)
  40e816:	4297      	cmp	r7, r2
  40e818:	d00b      	beq.n	40e832 <_Z19menuProcModelSelecth+0x1ce>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40e81a:	f893 19a8 	ldrb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40e81e:	f8b3 29aa 	ldrh.w	r2, [r3, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40e822:	f041 0101 	orr.w	r1, r1, #1
            g_eeGeneral.currModel = s_copySrcRow;
  40e826:	f883 8051 	strb.w	r8, [r3, #81]	; 0x51
  40e82a:	f883 19a8 	strb.w	r1, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40e82e:	f8a3 29ac 	strh.w	r2, [r3, #2476]	; 0x9ac
            STORE_GENERALVARS;
          }

          s_copyMode = 0; // TODO only this one?
  40e832:	2300      	movs	r3, #0
          s_copySrcRow = -1;
  40e834:	22ff      	movs	r2, #255	; 0xff
          if (s_copySrcRow != g_eeGeneral.currModel) {
            g_eeGeneral.currModel = s_copySrcRow;
            STORE_GENERALVARS;
          }

          s_copyMode = 0; // TODO only this one?
  40e836:	f885 3e7e 	strb.w	r3, [r5, #3710]	; 0xe7e
          s_copySrcRow = -1;
  40e83a:	f885 2e80 	strb.w	r2, [r5, #3712]	; 0xe80
          s_copyTgtOfs = 0;
  40e83e:	f885 3e7f 	strb.w	r3, [r5, #3711]	; 0xe7f
        s_sdcard_error = eeRestoreModel(sub, (char *)result);
      }
    }
  }
#endif
}
  40e842:	b009      	add	sp, #36	; 0x24
  40e844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
}

bool eeModelExists(uint8_t id)
{
  return ( File_system[id+1].size > 0 ) ;
  40e848:	f89a 3051 	ldrb.w	r3, [sl, #81]	; 0x51
  40e84c:	3301      	adds	r3, #1
  40e84e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40e852:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
#else
  uint8_t _event = s_warning ? 0 : event;
#endif
  uint8_t _event_ = (IS_RE_NAVIGATION_EVT(_event) ? 0 : _event);

  if (s_copyMode || !eeModelExists(g_eeGeneral.currModel)) {
  40e856:	f8b3 3ab4 	ldrh.w	r3, [r3, #2740]	; 0xab4
  40e85a:	2b00      	cmp	r3, #0
  40e85c:	f43f af20 	beq.w	40e6a0 <_Z19menuProcModelSelecth+0x3c>
    if ((_event & 0x1f) == KEY_EXIT)
  40e860:	4620      	mov	r0, r4
  40e862:	e724      	b.n	40e6ae <_Z19menuProcModelSelecth+0x4a>
    chainMenu(menuProcModel);
    return;
  }
#endif

  switch(_event)
  40e864:	2c64      	cmp	r4, #100	; 0x64
  40e866:	d27d      	bcs.n	40e964 <_Z19menuProcModelSelecth+0x300>
  40e868:	2c21      	cmp	r4, #33	; 0x21
  40e86a:	f000 81a7 	beq.w	40ebbc <_Z19menuProcModelSelecth+0x558>
  40e86e:	f200 816f 	bhi.w	40eb50 <_Z19menuProcModelSelecth+0x4ec>
  40e872:	2c20      	cmp	r4, #32
  40e874:	f47f af34 	bne.w	40e6e0 <_Z19menuProcModelSelecth+0x7c>
        if (!navigationRotaryEncoder(_event))
          break;
#endif
      case EVT_KEY_LONG(KEY_MENU):
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
  40e878:	f895 8e7e 	ldrb.w	r8, [r5, #3710]	; 0xe7e
  40e87c:	4b35      	ldr	r3, [pc, #212]	; (40e954 <_Z19menuProcModelSelecth+0x2f0>)
  40e87e:	f1b8 0f00 	cmp.w	r8, #0
  40e882:	f000 81ce 	beq.w	40ec22 <_Z19menuProcModelSelecth+0x5be>
  40e886:	f893 7e7f 	ldrb.w	r7, [r3, #3711]	; 0xe7f
  40e88a:	b927      	cbnz	r7, 40e896 <_Z19menuProcModelSelecth+0x232>
  40e88c:	f993 3e80 	ldrsb.w	r3, [r3, #3712]	; 0xe80
  40e890:	2b00      	cmp	r3, #0
  40e892:	f2c0 81c6 	blt.w	40ec22 <_Z19menuProcModelSelecth+0x5be>
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
  40e896:	f1b8 0f01 	cmp.w	r8, #1
  40e89a:	f000 828a 	beq.w	40edb2 <_Z19menuProcModelSelecth+0x74e>
  40e89e:	4830      	ldr	r0, [pc, #192]	; (40e960 <_Z19menuProcModelSelecth+0x2fc>)
  40e8a0:	f7f5 fa3c 	bl	403d1c <_Z12displayPopupPKc>
          eeCheck(true); // force writing of current model data before this is changed

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40e8a4:	9907      	ldr	r1, [sp, #28]
#endif
      case EVT_KEY_LONG(KEY_MENU):
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
          eeCheck(true); // force writing of current model data before this is changed
  40e8a6:	2001      	movs	r0, #1

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40e8a8:	fa4f f981 	sxtb.w	r9, r1
  40e8ac:	b27f      	sxtb	r7, r7
#endif
      case EVT_KEY_LONG(KEY_MENU):
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
          eeCheck(true); // force writing of current model data before this is changed
  40e8ae:	f7f3 fd35 	bl	40231c <_Z7eeCheckb>

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40e8b2:	f109 033c 	add.w	r3, r9, #60	; 0x3c
  40e8b6:	f648 0289 	movw	r2, #34953	; 0x8889
  40e8ba:	19db      	adds	r3, r3, r7
  40e8bc:	f6c8 0288 	movt	r2, #34952	; 0x8888
  40e8c0:	fb82 0203 	smull	r0, r2, r2, r3
  40e8c4:	17d9      	asrs	r1, r3, #31
  40e8c6:	18d2      	adds	r2, r2, r3
  40e8c8:	ebc1 1262 	rsb	r2, r1, r2, asr #5
  40e8cc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  40e8d0:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
  40e8d4:	b2de      	uxtb	r6, r3
          if (s_copyMode == COPY_MODE) {
            if (!eeCopyModel(cur, s_copySrcRow))
              cur = sub;
          }

          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
  40e8d6:	f89a 8051 	ldrb.w	r8, [sl, #81]	; 0x51
          while (sub != cur) {
            uint8_t src = cur;
            cur = (s_copyTgtOfs > 0 ? cur+MAX_MODELS-1 : cur+1) % MAX_MODELS;
  40e8da:	f648 0b89 	movw	fp, #34953	; 0x8889
          if (s_copyMode == COPY_MODE) {
            if (!eeCopyModel(cur, s_copySrcRow))
              cur = sub;
          }

          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
  40e8de:	f885 8e80 	strb.w	r8, [r5, #3712]	; 0xe80
  40e8e2:	fa4f f788 	sxtb.w	r7, r8
          while (sub != cur) {
            uint8_t src = cur;
            cur = (s_copyTgtOfs > 0 ? cur+MAX_MODELS-1 : cur+1) % MAX_MODELS;
  40e8e6:	f6c8 0b88 	movt	fp, #34952	; 0x8888
            if (!eeCopyModel(cur, s_copySrcRow))
              cur = sub;
          }

          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
          while (sub != cur) {
  40e8ea:	45b1      	cmp	r9, r6
  40e8ec:	d090      	beq.n	40e810 <_Z19menuProcModelSelecth+0x1ac>
            uint8_t src = cur;
            cur = (s_copyTgtOfs > 0 ? cur+MAX_MODELS-1 : cur+1) % MAX_MODELS;
  40e8ee:	f995 2e7f 	ldrsb.w	r2, [r5, #3711]	; 0xe7f
  40e8f2:	f106 033b 	add.w	r3, r6, #59	; 0x3b
  40e8f6:	2a00      	cmp	r2, #0
  40e8f8:	f340 81d5 	ble.w	40eca6 <_Z19menuProcModelSelecth+0x642>
  40e8fc:	fb8b 1403 	smull	r1, r4, fp, r3
  40e900:	17da      	asrs	r2, r3, #31
  40e902:	18e4      	adds	r4, r4, r3
  40e904:	ebc2 1464 	rsb	r4, r2, r4, asr #5
  40e908:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
  40e90c:	eba3 0484 	sub.w	r4, r3, r4, lsl #2
  40e910:	b2e4      	uxtb	r4, r4
            eeSwapModels(src, cur);
  40e912:	4630      	mov	r0, r6
  40e914:	4621      	mov	r1, r4
  40e916:	f7f3 fd91 	bl	40243c <_Z12eeSwapModelshh>
            if (src == s_copySrcRow)
  40e91a:	42be      	cmp	r6, r7
              s_copySrcRow = cur;
  40e91c:	bf02      	ittt	eq
  40e91e:	fa5f f884 	uxtbeq.w	r8, r4
  40e922:	f885 8e80 	strbeq.w	r8, [r5, #3712]	; 0xe80
  40e926:	fa4f f788 	sxtbeq.w	r7, r8
          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
          while (sub != cur) {
            uint8_t src = cur;
            cur = (s_copyTgtOfs > 0 ? cur+MAX_MODELS-1 : cur+1) % MAX_MODELS;
            eeSwapModels(src, cur);
            if (src == s_copySrcRow)
  40e92a:	d007      	beq.n	40e93c <_Z19menuProcModelSelecth+0x2d8>
              s_copySrcRow = cur;
            else if (cur == s_copySrcRow)
  40e92c:	42a7      	cmp	r7, r4
              s_copySrcRow = src;
  40e92e:	bf02      	ittt	eq
  40e930:	fa5f f886 	uxtbeq.w	r8, r6
  40e934:	f885 8e80 	strbeq.w	r8, [r5, #3712]	; 0xe80
  40e938:	fa4f f788 	sxtbeq.w	r7, r8
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
          eeCheck(true); // force writing of current model data before this is changed

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40e93c:	4626      	mov	r6, r4
  40e93e:	e7d4      	b.n	40e8ea <_Z19menuProcModelSelecth+0x286>
  // flush eeprom write
  eeFlush();
#endif

  if (s_confirmation) {
    eeDeleteModel(m_posVert); // delete file
  40e940:	f895 0c34 	ldrb.w	r0, [r5, #3124]	; 0xc34
  40e944:	f7f3 fdc8 	bl	4024d8 <_Z13eeDeleteModelh>
    s_confirmation = 0;
  40e948:	2300      	movs	r3, #0
  40e94a:	f885 3a87 	strb.w	r3, [r5, #2695]	; 0xa87
    s_copyMode = 0;
  40e94e:	f885 3e7e 	strb.w	r3, [r5, #3710]	; 0xe7e
  40e952:	e699      	b.n	40e688 <_Z19menuProcModelSelecth+0x24>
  40e954:	20001200 	.word	0x20001200
  40e958:	00410ee8 	.word	0x00410ee8
  40e95c:	20000108 	.word	0x20000108
  40e960:	00410f2c 	.word	0x00410f2c
          s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
        }
        break;
      case EVT_KEY_FIRST(KEY_LEFT):
      case EVT_KEY_FIRST(KEY_RIGHT):
        if (sub == g_eeGeneral.currModel) {
  40e964:	9907      	ldr	r1, [sp, #28]
  40e966:	f89a 2051 	ldrb.w	r2, [sl, #81]	; 0x51
  40e96a:	fa4f f981 	sxtb.w	r9, r1
  40e96e:	4591      	cmp	r9, r2
  40e970:	f000 8180 	beq.w	40ec74 <_Z19menuProcModelSelecth+0x610>
          chainMenu(_event == EVT_KEY_FIRST(KEY_RIGHT) ? menuProcModel : menuTabModel[DIM(menuTabModel)-1]);
          return;
        }
        AUDIO_WARNING2();
  40e974:	2008      	movs	r0, #8
  40e976:	9303      	str	r3, [sp, #12]
  40e978:	f7f7 fdc8 	bl	40650c <_Z13audioDefeventh>
  40e97c:	4ab8      	ldr	r2, [pc, #736]	; (40ec60 <_Z19menuProcModelSelecth+0x5fc>)
  40e97e:	9b03      	ldr	r3, [sp, #12]
  40e980:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
  40e984:	f893 8e7e 	ldrb.w	r8, [r3, #3710]	; 0xe7e
        break;
  40e988:	e6b1      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
#endif

  switch(_event)
  {
      case EVT_ENTRY:
        m_posVert = sub = g_eeGeneral.currModel;
  40e98a:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
        s_copyMode = 0; // TODO only this one?
  40e98e:	f04f 0800 	mov.w	r8, #0
        s_copyTgtOfs = 0;
        s_copySrcRow = -1;
  40e992:	22ff      	movs	r2, #255	; 0xff
#endif

  switch(_event)
  {
      case EVT_ENTRY:
        m_posVert = sub = g_eeGeneral.currModel;
  40e994:	b2c8      	uxtb	r0, r1
  40e996:	9007      	str	r0, [sp, #28]
  40e998:	f883 1c34 	strb.w	r1, [r3, #3124]	; 0xc34
        s_copyMode = 0; // TODO only this one?
  40e99c:	f883 8e7e 	strb.w	r8, [r3, #3710]	; 0xe7e
        s_copyTgtOfs = 0;
  40e9a0:	f883 8e7f 	strb.w	r8, [r3, #3711]	; 0xe7f
        s_copySrcRow = -1;
  40e9a4:	f883 2e80 	strb.w	r2, [r3, #3712]	; 0xe80
        s_editMode = -1;
  40e9a8:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
  40e9ac:	fa4f f980 	sxtb.w	r9, r0
        break;
  40e9b0:	e69d      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
  for (uint8_t i=0; i<7; i++) {
    uint8_t y=(i+1)*FH;
    uint8_t k=i+s_pgOfs;
    lcd_outdezNAtt(3*FW+2, y, k+1, LEADING0+((!s_copyMode && sub==k) ? INVERS : 0), 2);

    if (s_copyMode == MOVE_MODE || (s_copyMode == COPY_MODE && s_copySrcRow >= 0)) {
  40e9b2:	f1b8 0f01 	cmp.w	r8, #1
  40e9b6:	f47f aecf 	bne.w	40e758 <_Z19menuProcModelSelecth+0xf4>
  40e9ba:	f995 3e80 	ldrsb.w	r3, [r5, #3712]	; 0xe80
  40e9be:	2b00      	cmp	r3, #0
  40e9c0:	f6ff aeca 	blt.w	40e758 <_Z19menuProcModelSelecth+0xf4>
      if (k == sub) {
  40e9c4:	45a1      	cmp	r9, r4
  40e9c6:	f47f af09 	bne.w	40e7dc <_Z19menuProcModelSelecth+0x178>
        if (s_copyMode == COPY_MODE) {
  40e9ca:	f1b8 0f01 	cmp.w	r8, #1
  40e9ce:	f000 80b7 	beq.w	40eb40 <_Z19menuProcModelSelecth+0x4dc>
          k = s_copySrcRow;
          lcd_putc(20*FW+2, y, '+');
        }
        else {
          k = sub + s_copyTgtOfs;
  40e9d2:	f895 4e7f 	ldrb.w	r4, [r5, #3711]	; 0xe7f
  40e9d6:	9b07      	ldr	r3, [sp, #28]
  40e9d8:	191c      	adds	r4, r3, r4
  40e9da:	b2e4      	uxtb	r4, r4
  40e9dc:	e6bc      	b.n	40e758 <_Z19menuProcModelSelecth+0xf4>

    k %= MAX_MODELS;

    if (eeModelExists(k)) {
#if defined(PCBARM)
      putsModelName(4*FW, y, ModelNames[k], k, 0);
  40e9de:	9905      	ldr	r1, [sp, #20]
  40e9e0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40e9e4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  40e9e8:	2018      	movs	r0, #24
  40e9ea:	4623      	mov	r3, r4
  40e9ec:	f04f 0e00 	mov.w	lr, #0
  40e9f0:	4639      	mov	r1, r7
  40e9f2:	f8cd e000 	str.w	lr, [sp]
  40e9f6:	f7f4 fd5b 	bl	4034b0 <_Z13putsModelNamehhPchh>
#else
      uint16_t size = eeLoadModelName(k, reusableBuffer.model_name);
      putsModelName(4*FW, y, reusableBuffer.model_name, k, 0);
      lcd_outdezAtt(20*FW, y, size, 0);
#endif
      if (k==g_eeGeneral.currModel && (s_copySrcRow<0 || i+s_pgOfs!=sub)) lcd_putc(1, y, '*');
  40e9fa:	4b99      	ldr	r3, [pc, #612]	; (40ec60 <_Z19menuProcModelSelecth+0x5fc>)
  40e9fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
  40ea00:	42a3      	cmp	r3, r4
  40ea02:	f47f aebc 	bne.w	40e77e <_Z19menuProcModelSelecth+0x11a>
  40ea06:	f241 2200 	movw	r2, #4608	; 0x1200
  40ea0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40ea0e:	f992 3e80 	ldrsb.w	r3, [r2, #3712]	; 0xe80
  40ea12:	2b00      	cmp	r3, #0
  40ea14:	db05      	blt.n	40ea22 <_Z19menuProcModelSelecth+0x3be>
  40ea16:	f892 3e7d 	ldrb.w	r3, [r2, #3709]	; 0xe7d
  40ea1a:	18f3      	adds	r3, r6, r3
  40ea1c:	4599      	cmp	r9, r3
  40ea1e:	f43f aeae 	beq.w	40e77e <_Z19menuProcModelSelecth+0x11a>
  40ea22:	2001      	movs	r0, #1
  40ea24:	4639      	mov	r1, r7
  40ea26:	222a      	movs	r2, #42	; 0x2a
  40ea28:	f7f3 fedc 	bl	4027e4 <_Z8lcd_putchhh>
  40ea2c:	e6a7      	b.n	40e77e <_Z19menuProcModelSelecth+0x11a>
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
      lcd_rect(8, y-1, DISPLAY_W-1-7, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
    }
  }

  if (s_warning) {
  40ea2e:	f8da 3a88 	ldr.w	r3, [sl, #2696]	; 0xa88
  40ea32:	2b00      	cmp	r3, #0
  40ea34:	f43f af05 	beq.w	40e842 <_Z19menuProcModelSelecth+0x1de>
#if defined(PCBARM)
    s_warning_info = ModelNames[sub];
  40ea38:	4b8a      	ldr	r3, [pc, #552]	; (40ec64 <_Z19menuProcModelSelecth+0x600>)
  40ea3a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  40ea3e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
#else
    eeLoadModelName(sub, reusableBuffer.model_name);
    s_warning_info = reusableBuffer.model_name;
#endif
    s_warning_info_len = sizeof(g_model.name);
    displayConfirmation(event);
  40ea42:	9806      	ldr	r0, [sp, #24]
    }
  }

  if (s_warning) {
#if defined(PCBARM)
    s_warning_info = ModelNames[sub];
  40ea44:	f8c5 3a88 	str.w	r3, [r5, #2696]	; 0xa88
#else
    eeLoadModelName(sub, reusableBuffer.model_name);
    s_warning_info = reusableBuffer.model_name;
#endif
    s_warning_info_len = sizeof(g_model.name);
  40ea48:	230a      	movs	r3, #10
  40ea4a:	f885 3a8c 	strb.w	r3, [r5, #2700]	; 0xa8c
        s_sdcard_error = eeRestoreModel(sub, (char *)result);
      }
    }
  }
#endif
}
  40ea4e:	b009      	add	sp, #36	; 0x24
  40ea50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
    eeLoadModelName(sub, reusableBuffer.model_name);
    s_warning_info = reusableBuffer.model_name;
#endif
    s_warning_info_len = sizeof(g_model.name);
    displayConfirmation(event);
  40ea54:	f7f4 bbcc 	b.w	4031f0 <_Z19displayConfirmationh>
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);

  for (uint8_t i=0; i<7; i++) {
    uint8_t y=(i+1)*FH;
    uint8_t k=i+s_pgOfs;
    lcd_outdezNAtt(3*FW+2, y, k+1, LEADING0+((!s_copyMode && sub==k) ? INVERS : 0), 2);
  40ea58:	2302      	movs	r3, #2
  40ea5a:	9300      	str	r3, [sp, #0]
  40ea5c:	b212      	sxth	r2, r2
  40ea5e:	2014      	movs	r0, #20
  40ea60:	4639      	mov	r1, r7
  40ea62:	2312      	movs	r3, #18
  40ea64:	f7f4 f876 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
  40ea68:	e676      	b.n	40e758 <_Z19menuProcModelSelecth+0xf4>
        }
        else {
          k = sub + s_copyTgtOfs;
        }
      }
      else if (s_copyTgtOfs < 0 && ((k < sub && k >= sub+s_copyTgtOfs) || (k-MAX_MODELS < sub && k-MAX_MODELS >= sub+s_copyTgtOfs)))
  40ea6a:	45a1      	cmp	r9, r4
  40ea6c:	dd03      	ble.n	40ea76 <_Z19menuProcModelSelecth+0x412>
  40ea6e:	eb09 0203 	add.w	r2, r9, r3
  40ea72:	4294      	cmp	r4, r2
  40ea74:	da08      	bge.n	40ea88 <_Z19menuProcModelSelecth+0x424>
  40ea76:	f1a4 023b 	sub.w	r2, r4, #59	; 0x3b
  40ea7a:	4591      	cmp	r9, r2
  40ea7c:	f6ff ae6c 	blt.w	40e758 <_Z19menuProcModelSelecth+0xf4>
  40ea80:	444b      	add	r3, r9
  40ea82:	429a      	cmp	r2, r3
  40ea84:	f77f ae68 	ble.w	40e758 <_Z19menuProcModelSelecth+0xf4>
        k += 1;
  40ea88:	fa5f f48b 	uxtb.w	r4, fp
  40ea8c:	e664      	b.n	40e758 <_Z19menuProcModelSelecth+0xf4>
#endif
      if (k==g_eeGeneral.currModel && (s_copySrcRow<0 || i+s_pgOfs!=sub)) lcd_putc(1, y, '*');
    }

    if (s_copyMode && sub==i+s_pgOfs) {
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
  40ea8e:	b279      	sxtb	r1, r7
  40ea90:	f04f 0800 	mov.w	r8, #0
  40ea94:	2276      	movs	r2, #118	; 0x76
  40ea96:	2307      	movs	r3, #7
  40ea98:	2009      	movs	r0, #9
  40ea9a:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40ea9e:	f8cd e000 	str.w	lr, [sp]
  40eaa2:	f8cd 8004 	str.w	r8, [sp, #4]
  40eaa6:	f7f4 fb59 	bl	40315c <_Z15lcd_filled_recthahhhh>
  return s_menu_count;
}

#endif

void menuProcModelSelect(uint8_t event)
  40eaaa:	1e79      	subs	r1, r7, #1
      if (k==g_eeGeneral.currModel && (s_copySrcRow<0 || i+s_pgOfs!=sub)) lcd_putc(1, y, '*');
    }

    if (s_copyMode && sub==i+s_pgOfs) {
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
      lcd_rect(8, y-1, DISPLAY_W-1-7, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
  40eaac:	2c01      	cmp	r4, #1
  40eaae:	bf14      	ite	ne
  40eab0:	2455      	movne	r4, #85	; 0x55
  40eab2:	24ff      	moveq	r4, #255	; 0xff
  return s_menu_count;
}

#endif

void menuProcModelSelect(uint8_t event)
  40eab4:	b2c9      	uxtb	r1, r1
      if (k==g_eeGeneral.currModel && (s_copySrcRow<0 || i+s_pgOfs!=sub)) lcd_putc(1, y, '*');
    }

    if (s_copyMode && sub==i+s_pgOfs) {
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
      lcd_rect(8, y-1, DISPLAY_W-1-7, 9, s_copyMode == COPY_MODE ? SOLID : DOTTED);
  40eab6:	2008      	movs	r0, #8
  40eab8:	2278      	movs	r2, #120	; 0x78
  40eaba:	2309      	movs	r3, #9
  40eabc:	e88d 0110 	stmia.w	sp, {r4, r8}
  40eac0:	f7f4 fa22 	bl	402f08 <_Z8lcd_recthhhhhh>
  40eac4:	e668      	b.n	40e798 <_Z19menuProcModelSelecth+0x134>
#if !defined(PCBARM)
  lcd_puts(9*FW-(LEN_FREE-4)*FW, 0, STR_FREE);
  lcd_outdezAtt(  17*FW, 0, EeFsGetFree(),0);
#endif

  DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), (sub == g_eeGeneral.currModel) ? INVERS : 0);
  40eac6:	2202      	movs	r2, #2
  40eac8:	2000      	movs	r0, #0
  40eaca:	210b      	movs	r1, #11
  40eacc:	f7f4 f9be 	bl	402e4c <_Z18DisplayScreenIndexhhh>

  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
  40ead0:	f895 4e7d 	ldrb.w	r4, [r5, #3709]	; 0xe7d
  40ead4:	4a64      	ldr	r2, [pc, #400]	; (40ec68 <_Z19menuProcModelSelecth+0x604>)
  40ead6:	ebc4 0309 	rsb	r3, r4, r9
  40eada:	2b00      	cmp	r3, #0
  40eadc:	f73f ae17 	bgt.w	40e70e <_Z19menuProcModelSelecth+0xaa>
  40eae0:	f109 34ff 	add.w	r4, r9, #4294967295
  40eae4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40eae8:	b2e4      	uxtb	r4, r4
  40eaea:	f882 4e7d 	strb.w	r4, [r2, #3709]	; 0xe7d
  40eaee:	e618      	b.n	40e722 <_Z19menuProcModelSelecth+0xbe>
        s_copyTgtOfs = 0;
        s_copySrcRow = -1;
        s_editMode = -1;
        break;
      case EVT_KEY_LONG(KEY_EXIT):
        if (s_copyMode && s_copyTgtOfs == 0 && g_eeGeneral.currModel != sub && eeModelExists(sub)) {
  40eaf0:	f893 8e7e 	ldrb.w	r8, [r3, #3710]	; 0xe7e
  40eaf4:	f1b8 0f00 	cmp.w	r8, #0
  40eaf8:	f000 80ab 	beq.w	40ec52 <_Z19menuProcModelSelecth+0x5ee>
  40eafc:	f993 2e7f 	ldrsb.w	r2, [r3, #3711]	; 0xe7f
  40eb00:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
  40eb04:	2a00      	cmp	r2, #0
  40eb06:	d160      	bne.n	40ebca <_Z19menuProcModelSelecth+0x566>
  40eb08:	9b07      	ldr	r3, [sp, #28]
  40eb0a:	fa4f f983 	sxtb.w	r9, r3
  40eb0e:	4549      	cmp	r1, r9
  40eb10:	4b53      	ldr	r3, [pc, #332]	; (40ec60 <_Z19menuProcModelSelecth+0x5fc>)
  40eb12:	d05a      	beq.n	40ebca <_Z19menuProcModelSelecth+0x566>
  40eb14:	3601      	adds	r6, #1
  40eb16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40eb1a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
  40eb1e:	f8b0 0ab4 	ldrh.w	r0, [r0, #2740]	; 0xab4
  40eb22:	2800      	cmp	r0, #0
  40eb24:	d051      	beq.n	40ebca <_Z19menuProcModelSelecth+0x566>
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
  40eb26:	f893 10a3 	ldrb.w	r1, [r3, #163]	; 0xa3
          s_warning = STR_DELETEMODEL;
  40eb2a:	4850      	ldr	r0, [pc, #320]	; (40ec6c <_Z19menuProcModelSelecth+0x608>)
  40eb2c:	f362 1105 	bfi	r1, r2, #4, #2
  40eb30:	f8c3 0a88 	str.w	r0, [r3, #2696]	; 0xa88
  40eb34:	2063      	movs	r0, #99	; 0x63
  40eb36:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
  40eb3a:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
  40eb3e:	e5da      	b.n	40e6f6 <_Z19menuProcModelSelecth+0x92>

    if (s_copyMode == MOVE_MODE || (s_copyMode == COPY_MODE && s_copySrcRow >= 0)) {
      if (k == sub) {
        if (s_copyMode == COPY_MODE) {
          k = s_copySrcRow;
          lcd_putc(20*FW+2, y, '+');
  40eb40:	207a      	movs	r0, #122	; 0x7a
  40eb42:	4639      	mov	r1, r7
  40eb44:	222b      	movs	r2, #43	; 0x2b
    lcd_outdezNAtt(3*FW+2, y, k+1, LEADING0+((!s_copyMode && sub==k) ? INVERS : 0), 2);

    if (s_copyMode == MOVE_MODE || (s_copyMode == COPY_MODE && s_copySrcRow >= 0)) {
      if (k == sub) {
        if (s_copyMode == COPY_MODE) {
          k = s_copySrcRow;
  40eb46:	f895 4e80 	ldrb.w	r4, [r5, #3712]	; 0xe80
          lcd_putc(20*FW+2, y, '+');
  40eb4a:	f7f3 fe4b 	bl	4027e4 <_Z8lcd_putchhh>
  40eb4e:	e603      	b.n	40e758 <_Z19menuProcModelSelecth+0xf4>
    chainMenu(menuProcModel);
    return;
  }
#endif

  switch(_event)
  40eb50:	2c62      	cmp	r4, #98	; 0x62
  40eb52:	f4ff adc5 	bcc.w	40e6e0 <_Z19menuProcModelSelecth+0x7c>
        }
        AUDIO_WARNING2();
        break;
      case EVT_KEY_FIRST(KEY_UP):
      case EVT_KEY_FIRST(KEY_DOWN):
        if (s_copyMode) {
  40eb56:	f893 8e7e 	ldrb.w	r8, [r3, #3710]	; 0xe7e
  40eb5a:	f1b8 0f00 	cmp.w	r8, #0
  40eb5e:	d072      	beq.n	40ec46 <_Z19menuProcModelSelecth+0x5e2>
          int8_t next_ofs = (_event == EVT_KEY_FIRST(KEY_UP) ? s_copyTgtOfs+1 : s_copyTgtOfs-1);
  40eb60:	2c63      	cmp	r4, #99	; 0x63
  40eb62:	f893 3e7f 	ldrb.w	r3, [r3, #3711]	; 0xe7f
  40eb66:	f000 80f6 	beq.w	40ed56 <_Z19menuProcModelSelecth+0x6f2>
  40eb6a:	3b01      	subs	r3, #1
  40eb6c:	b2db      	uxtb	r3, r3
          if (next_ofs == MAX_MODELS || next_ofs == -MAX_MODELS)
  40eb6e:	b25a      	sxtb	r2, r3
  40eb70:	f112 0f3c 	cmn.w	r2, #60	; 0x3c
  40eb74:	bf14      	ite	ne
  40eb76:	2000      	movne	r0, #0
  40eb78:	2001      	moveq	r0, #1
            next_ofs = 0;

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
  40eb7a:	f995 1e80 	ldrsb.w	r1, [r5, #3712]	; 0xe80
        break;
      case EVT_KEY_FIRST(KEY_UP):
      case EVT_KEY_FIRST(KEY_DOWN):
        if (s_copyMode) {
          int8_t next_ofs = (_event == EVT_KEY_FIRST(KEY_UP) ? s_copyTgtOfs+1 : s_copyTgtOfs-1);
          if (next_ofs == MAX_MODELS || next_ofs == -MAX_MODELS)
  40eb7e:	2a3c      	cmp	r2, #60	; 0x3c
  40eb80:	bf14      	ite	ne
  40eb82:	4602      	movne	r2, r0
  40eb84:	f040 0201 	orreq.w	r2, r0, #1
            next_ofs = 0;
  40eb88:	2a00      	cmp	r2, #0
  40eb8a:	bf18      	it	ne
  40eb8c:	2300      	movne	r3, #0

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
  40eb8e:	2900      	cmp	r1, #0
  40eb90:	f2c0 80e4 	blt.w	40ed5c <_Z19menuProcModelSelecth+0x6f8>
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].killEvents();
  40eb94:	4a36      	ldr	r2, [pc, #216]	; (40ec70 <_Z19menuProcModelSelecth+0x60c>)
  40eb96:	f004 040f 	and.w	r4, r4, #15
  40eb9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  40eb9e:	1911      	adds	r1, r2, r4
  40eba0:	2063      	movs	r0, #99	; 0x63
  40eba2:	7088      	strb	r0, [r1, #2]
  40eba4:	5d11      	ldrb	r1, [r2, r4]
              s_copySrcRow = -1;
            }
            next_ofs = 0;
            sub = m_posVert;
          }
          s_copyTgtOfs = next_ofs;
  40eba6:	f885 3e7f 	strb.w	r3, [r5, #3711]	; 0xe7f
  40ebaa:	f36f 1105 	bfc	r1, #4, #2
  40ebae:	5511      	strb	r1, [r2, r4]
  40ebb0:	9807      	ldr	r0, [sp, #28]
  40ebb2:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
  40ebb6:	fa4f f980 	sxtb.w	r9, r0
  40ebba:	e598      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
          killEvents(_event);
          break;
        }
        // no break
      case EVT_KEY_BREAK(KEY_EXIT):
        if (s_copyMode) {
  40ebbc:	f893 8e7e 	ldrb.w	r8, [r3, #3710]	; 0xe7e
  40ebc0:	f1b8 0f00 	cmp.w	r8, #0
  40ebc4:	d069      	beq.n	40ec9a <_Z19menuProcModelSelecth+0x636>
  40ebc6:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
          sub = m_posVert = (s_copyMode == MOVE_MODE || s_copySrcRow<0) ? (MAX_MODELS+sub+s_copyTgtOfs) % MAX_MODELS : s_copySrcRow; // TODO reset s_copySrcRow?
  40ebca:	f1b8 0f02 	cmp.w	r8, #2
  40ebce:	d077      	beq.n	40ecc0 <_Z19menuProcModelSelecth+0x65c>
  40ebd0:	f895 3e80 	ldrb.w	r3, [r5, #3712]	; 0xe80
  40ebd4:	061a      	lsls	r2, r3, #24
  40ebd6:	bf58      	it	pl
  40ebd8:	b2db      	uxtbpl	r3, r3
  40ebda:	d471      	bmi.n	40ecc0 <_Z19menuProcModelSelecth+0x65c>
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  40ebdc:	f004 040f 	and.w	r4, r4, #15
          s_copyMode = 0; // TODO only this one?
  40ebe0:	f04f 0800 	mov.w	r8, #0
          s_copySrcRow = -1;
  40ebe4:	22ff      	movs	r2, #255	; 0xff
          break;
        }
        // no break
      case EVT_KEY_BREAK(KEY_EXIT):
        if (s_copyMode) {
          sub = m_posVert = (s_copyMode == MOVE_MODE || s_copySrcRow<0) ? (MAX_MODELS+sub+s_copyTgtOfs) % MAX_MODELS : s_copySrcRow; // TODO reset s_copySrcRow?
  40ebe6:	f885 3c34 	strb.w	r3, [r5, #3124]	; 0xc34
  if(event < (int)DIM(keys))  keys[event].killEvents();
  40ebea:	2c0d      	cmp	r4, #13
  40ebec:	b2db      	uxtb	r3, r3
          s_copyMode = 0; // TODO only this one?
  40ebee:	f885 8e7e 	strb.w	r8, [r5, #3710]	; 0xe7e
          s_copySrcRow = -1;
  40ebf2:	f885 2e80 	strb.w	r2, [r5, #3712]	; 0xe80
          s_copyTgtOfs = 0;
  40ebf6:	f885 8e7f 	strb.w	r8, [r5, #3711]	; 0xe7f
          break;
        }
        // no break
      case EVT_KEY_BREAK(KEY_EXIT):
        if (s_copyMode) {
          sub = m_posVert = (s_copyMode == MOVE_MODE || s_copySrcRow<0) ? (MAX_MODELS+sub+s_copyTgtOfs) % MAX_MODELS : s_copySrcRow; // TODO reset s_copySrcRow?
  40ebfa:	9307      	str	r3, [sp, #28]
  40ebfc:	bf88      	it	hi
  40ebfe:	fa4f f983 	sxtbhi.w	r9, r3
  40ec02:	f63f ad74 	bhi.w	40e6ee <_Z19menuProcModelSelecth+0x8a>
  40ec06:	4b1a      	ldr	r3, [pc, #104]	; (40ec70 <_Z19menuProcModelSelecth+0x60c>)
  40ec08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  40ec0c:	191a      	adds	r2, r3, r4
  40ec0e:	2063      	movs	r0, #99	; 0x63
  40ec10:	7090      	strb	r0, [r2, #2]
  40ec12:	5d1a      	ldrb	r2, [r3, r4]
  40ec14:	9807      	ldr	r0, [sp, #28]
  40ec16:	f368 1205 	bfi	r2, r8, #4, #2
  40ec1a:	fa4f f980 	sxtb.w	r9, r0
  40ec1e:	551a      	strb	r2, [r3, r4]
  40ec20:	e565      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
          s_copyMode = 0; // TODO only this one?
          s_copySrcRow = -1;
          s_copyTgtOfs = 0;
          return;
        }
        else if (_event == EVT_KEY_LONG(KEY_MENU) || IS_RE_NAVIGATION_EVT_TYPE(_event, EVT_KEY_LONG)) {
  40ec22:	2c80      	cmp	r4, #128	; 0x80
  40ec24:	d062      	beq.n	40ecec <_Z19menuProcModelSelecth+0x688>
  40ec26:	3601      	adds	r6, #1
  40ec28:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40ec2c:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
            eeLoadModel(sub);
            return;
#endif
          }
        }
        else if (eeModelExists(sub)) {
  40ec30:	f8b3 3ab4 	ldrh.w	r3, [r3, #2740]	; 0xab4
  40ec34:	2b00      	cmp	r3, #0
  40ec36:	d127      	bne.n	40ec88 <_Z19menuProcModelSelecth+0x624>
  40ec38:	9b07      	ldr	r3, [sp, #28]
  40ec3a:	fa4f f983 	sxtb.w	r9, r3
  40ec3e:	4b08      	ldr	r3, [pc, #32]	; (40ec60 <_Z19menuProcModelSelecth+0x5fc>)
  40ec40:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
  40ec44:	e553      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
        }
        AUDIO_WARNING2();
        break;
      case EVT_KEY_FIRST(KEY_UP):
      case EVT_KEY_FIRST(KEY_DOWN):
        if (s_copyMode) {
  40ec46:	9a07      	ldr	r2, [sp, #28]
  40ec48:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
  40ec4c:	fa4f f982 	sxtb.w	r9, r2
  40ec50:	e54d      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
        s_copyTgtOfs = 0;
        s_copySrcRow = -1;
        s_editMode = -1;
        break;
      case EVT_KEY_LONG(KEY_EXIT):
        if (s_copyMode && s_copyTgtOfs == 0 && g_eeGeneral.currModel != sub && eeModelExists(sub)) {
  40ec52:	9907      	ldr	r1, [sp, #28]
  40ec54:	fa4f f981 	sxtb.w	r9, r1
  40ec58:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
  40ec5c:	e547      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
  40ec5e:	bf00      	nop
  40ec60:	20000108 	.word	0x20000108
  40ec64:	20001614 	.word	0x20001614
  40ec68:	20001200 	.word	0x20001200
  40ec6c:	00410ef4 	.word	0x00410ef4
  40ec70:	200001a8 	.word	0x200001a8
        }
        break;
      case EVT_KEY_FIRST(KEY_LEFT):
      case EVT_KEY_FIRST(KEY_RIGHT):
        if (sub == g_eeGeneral.currModel) {
          chainMenu(_event == EVT_KEY_FIRST(KEY_RIGHT) ? menuProcModel : menuTabModel[DIM(menuTabModel)-1]);
  40ec74:	4b6e      	ldr	r3, [pc, #440]	; (40ee30 <_Z19menuProcModelSelecth+0x7cc>)
  40ec76:	486f      	ldr	r0, [pc, #444]	; (40ee34 <_Z19menuProcModelSelecth+0x7d0>)
  40ec78:	2c64      	cmp	r4, #100	; 0x64
  40ec7a:	bf18      	it	ne
  40ec7c:	4618      	movne	r0, r3
        s_sdcard_error = eeRestoreModel(sub, (char *)result);
      }
    }
  }
#endif
}
  40ec7e:	b009      	add	sp, #36	; 0x24
  40ec80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
        break;
      case EVT_KEY_FIRST(KEY_LEFT):
      case EVT_KEY_FIRST(KEY_RIGHT):
        if (sub == g_eeGeneral.currModel) {
          chainMenu(_event == EVT_KEY_FIRST(KEY_RIGHT) ? menuProcModel : menuTabModel[DIM(menuTabModel)-1]);
  40ec84:	f7f7 bcdc 	b.w	406640 <_Z9chainMenuPFvhE>
            return;
#endif
          }
        }
        else if (eeModelExists(sub)) {
          s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
  40ec88:	f1b8 0f01 	cmp.w	r8, #1
  40ec8c:	bf0c      	ite	eq
  40ec8e:	f04f 0802 	moveq.w	r8, #2
  40ec92:	f04f 0801 	movne.w	r8, #1
  40ec96:	f885 8e7e 	strb.w	r8, [r5, #3710]	; 0xe7e
  40ec9a:	9807      	ldr	r0, [sp, #28]
  40ec9c:	f89a 1051 	ldrb.w	r1, [sl, #81]	; 0x51
  40eca0:	fa4f f980 	sxtb.w	r9, r0
  40eca4:	e523      	b.n	40e6ee <_Z19menuProcModelSelecth+0x8a>
          }

          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
          while (sub != cur) {
            uint8_t src = cur;
            cur = (s_copyTgtOfs > 0 ? cur+MAX_MODELS-1 : cur+1) % MAX_MODELS;
  40eca6:	1c73      	adds	r3, r6, #1
  40eca8:	fb8b 0203 	smull	r0, r2, fp, r3
  40ecac:	17d9      	asrs	r1, r3, #31
  40ecae:	18d2      	adds	r2, r2, r3
  40ecb0:	ebc1 1262 	rsb	r2, r1, r2, asr #5
  40ecb4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  40ecb8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
  40ecbc:	b2dc      	uxtb	r4, r3
  40ecbe:	e628      	b.n	40e912 <_Z19menuProcModelSelecth+0x2ae>
          break;
        }
        // no break
      case EVT_KEY_BREAK(KEY_EXIT):
        if (s_copyMode) {
          sub = m_posVert = (s_copyMode == MOVE_MODE || s_copySrcRow<0) ? (MAX_MODELS+sub+s_copyTgtOfs) % MAX_MODELS : s_copySrcRow; // TODO reset s_copySrcRow?
  40ecc0:	9a07      	ldr	r2, [sp, #28]
  40ecc2:	f995 3e7f 	ldrsb.w	r3, [r5, #3711]	; 0xe7f
  40ecc6:	b250      	sxtb	r0, r2
  40ecc8:	303c      	adds	r0, #60	; 0x3c
  40ecca:	f648 0289 	movw	r2, #34953	; 0x8889
  40ecce:	18c3      	adds	r3, r0, r3
  40ecd0:	f6c8 0288 	movt	r2, #34952	; 0x8888
  40ecd4:	fb82 0203 	smull	r0, r2, r2, r3
  40ecd8:	17d8      	asrs	r0, r3, #31
  40ecda:	18d2      	adds	r2, r2, r3
  40ecdc:	ebc0 1262 	rsb	r2, r0, r2, asr #5
  40ece0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  40ece4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
  40ece8:	b2db      	uxtb	r3, r3
  40ecea:	e777      	b.n	40ebdc <_Z19menuProcModelSelecth+0x578>
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
  40ecec:	9906      	ldr	r1, [sp, #24]
        }
        else if (_event == EVT_KEY_LONG(KEY_MENU) || IS_RE_NAVIGATION_EVT_TYPE(_event, EVT_KEY_LONG)) {
#if defined(ROTARY_ENCODERS)
          s_editMode = -1;
#endif
          s_copyMode = 0;
  40ecee:	2200      	movs	r2, #0
  40ecf0:	f001 030f 	and.w	r3, r1, #15
  if(event < (int)DIM(keys))  keys[event].killEvents();
  40ecf4:	2b0d      	cmp	r3, #13
  40ecf6:	f885 2e7e 	strb.w	r2, [r5, #3710]	; 0xe7e
  40ecfa:	d809      	bhi.n	40ed10 <_Z19menuProcModelSelecth+0x6ac>
  40ecfc:	494e      	ldr	r1, [pc, #312]	; (40ee38 <_Z19menuProcModelSelecth+0x7d4>)
  40ecfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40ed02:	18c8      	adds	r0, r1, r3
  40ed04:	2463      	movs	r4, #99	; 0x63
  40ed06:	7084      	strb	r4, [r0, #2]
  40ed08:	5cc8      	ldrb	r0, [r1, r3]
  40ed0a:	f362 1005 	bfi	r0, r2, #4, #2
  40ed0e:	54c8      	strb	r0, [r1, r3]
          killEvents(event);
          if (g_eeGeneral.currModel != sub) {
  40ed10:	9a07      	ldr	r2, [sp, #28]
  40ed12:	f89a 3051 	ldrb.w	r3, [sl, #81]	; 0x51
  40ed16:	fa4f f982 	sxtb.w	r9, r2
  40ed1a:	454b      	cmp	r3, r9
  40ed1c:	4c47      	ldr	r4, [pc, #284]	; (40ee3c <_Z19menuProcModelSelecth+0x7d8>)
  40ed1e:	bf08      	it	eq
  40ed20:	f04f 0800 	moveq.w	r8, #0
  40ed24:	f43f aecf 	beq.w	40eac6 <_Z19menuProcModelSelecth+0x462>
            else {
              s_menu[s_menu_count++] = STR_CREATE_MODEL;
              s_menu[s_menu_count++] = STR_RESTORE_MODEL;;
            }
#else
            displayPopup(STR_LOADINGMODEL);
  40ed28:	4845      	ldr	r0, [pc, #276]	; (40ee40 <_Z19menuProcModelSelecth+0x7dc>)
  40ed2a:	f7f4 fff7 	bl	403d1c <_Z12displayPopupPKc>
            eeCheck(true); // force writing of current model data before this is changed
  40ed2e:	2001      	movs	r0, #1
  40ed30:	f7f3 faf4 	bl	40231c <_Z7eeCheckb>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40ed34:	f894 29a8 	ldrb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40ed38:	f8b4 39aa 	ldrh.w	r3, [r4, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40ed3c:	f042 0201 	orr.w	r2, r2, #1
            g_eeGeneral.currModel = sub;
            STORE_GENERALVARS;
            eeLoadModel(sub);
  40ed40:	4630      	mov	r0, r6
              s_menu[s_menu_count++] = STR_RESTORE_MODEL;;
            }
#else
            displayPopup(STR_LOADINGMODEL);
            eeCheck(true); // force writing of current model data before this is changed
            g_eeGeneral.currModel = sub;
  40ed42:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  40ed46:	f884 29a8 	strb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40ed4a:	f8a4 39ac 	strh.w	r3, [r4, #2476]	; 0x9ac
        s_sdcard_error = eeRestoreModel(sub, (char *)result);
      }
    }
  }
#endif
}
  40ed4e:	b009      	add	sp, #36	; 0x24
  40ed50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
            displayPopup(STR_LOADINGMODEL);
            eeCheck(true); // force writing of current model data before this is changed
            g_eeGeneral.currModel = sub;
            STORE_GENERALVARS;
            eeLoadModel(sub);
  40ed54:	e446      	b.n	40e5e4 <_Z11eeLoadModelh>
        AUDIO_WARNING2();
        break;
      case EVT_KEY_FIRST(KEY_UP):
      case EVT_KEY_FIRST(KEY_DOWN):
        if (s_copyMode) {
          int8_t next_ofs = (_event == EVT_KEY_FIRST(KEY_UP) ? s_copyTgtOfs+1 : s_copyTgtOfs-1);
  40ed56:	3301      	adds	r3, #1
  40ed58:	b2db      	uxtb	r3, r3
  40ed5a:	e708      	b.n	40eb6e <_Z19menuProcModelSelecth+0x50a>
          if (next_ofs == MAX_MODELS || next_ofs == -MAX_MODELS)
            next_ofs = 0;

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
  40ed5c:	f1b8 0f01 	cmp.w	r8, #1
  40ed60:	f47f af18 	bne.w	40eb94 <_Z19menuProcModelSelecth+0x530>
            s_copySrcRow = oldSub;
  40ed64:	4b37      	ldr	r3, [pc, #220]	; (40ee44 <_Z19menuProcModelSelecth+0x7e0>)
  if (s_copyMode || !eeModelExists(g_eeGeneral.currModel)) {
    if ((_event & 0x1f) == KEY_EXIT)
      _event_ -= KEY_EXIT;
  }

  int8_t oldSub = m_posVert;
  40ed66:	b2fa      	uxtb	r2, r7

inline int8_t eeFindEmptyModel(uint8_t id, bool down)
{
  int8_t i = id;
  for (;;) {
    i = (MAX_MODELS + (down ? i+1 : i-1)) % MAX_MODELS;
  40ed68:	f648 0089 	movw	r0, #34953	; 0x8889
          int8_t next_ofs = (_event == EVT_KEY_FIRST(KEY_UP) ? s_copyTgtOfs+1 : s_copyTgtOfs-1);
          if (next_ofs == MAX_MODELS || next_ofs == -MAX_MODELS)
            next_ofs = 0;

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
            s_copySrcRow = oldSub;
  40ed6c:	f883 2e80 	strb.w	r2, [r3, #3712]	; 0xe80

inline int8_t eeFindEmptyModel(uint8_t id, bool down)
{
  int8_t i = id;
  for (;;) {
    i = (MAX_MODELS + (down ? i+1 : i-1)) % MAX_MODELS;
  40ed70:	f6c8 0088 	movt	r0, #34952	; 0x8888
  40ed74:	b252      	sxtb	r2, r2
  40ed76:	e018      	b.n	40edaa <_Z19menuProcModelSelecth+0x746>
  40ed78:	323b      	adds	r2, #59	; 0x3b
  40ed7a:	fb80 3102 	smull	r3, r1, r0, r2
  40ed7e:	17d3      	asrs	r3, r2, #31
  40ed80:	1889      	adds	r1, r1, r2
  40ed82:	ebc3 1361 	rsb	r3, r3, r1, asr #5
  40ed86:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40ed8a:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
  40ed8e:	b2db      	uxtb	r3, r3
    if (!eeModelExists(i)) break;
    if (i == id) return -1; // no free space in directory left
  40ed90:	b25a      	sxtb	r2, r3
inline int8_t eeFindEmptyModel(uint8_t id, bool down)
{
  int8_t i = id;
  for (;;) {
    i = (MAX_MODELS + (down ? i+1 : i-1)) % MAX_MODELS;
    if (!eeModelExists(i)) break;
  40ed92:	b2db      	uxtb	r3, r3
  }
}

bool eeModelExists(uint8_t id)
{
  return ( File_system[id+1].size > 0 ) ;
  40ed94:	1c59      	adds	r1, r3, #1
  40ed96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40ed9a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
  40ed9e:	f8b1 1ab4 	ldrh.w	r1, [r1, #2740]	; 0xab4
  40eda2:	2900      	cmp	r1, #0
  40eda4:	d03e      	beq.n	40ee24 <_Z19menuProcModelSelecth+0x7c0>
    if (i == id) return -1; // no free space in directory left
  40eda6:	42ba      	cmp	r2, r7
  40eda8:	d028      	beq.n	40edfc <_Z19menuProcModelSelecth+0x798>

inline int8_t eeFindEmptyModel(uint8_t id, bool down)
{
  int8_t i = id;
  for (;;) {
    i = (MAX_MODELS + (down ? i+1 : i-1)) % MAX_MODELS;
  40edaa:	2c62      	cmp	r4, #98	; 0x62
  40edac:	d1e4      	bne.n	40ed78 <_Z19menuProcModelSelecth+0x714>
  40edae:	323d      	adds	r2, #61	; 0x3d
  40edb0:	e7e3      	b.n	40ed7a <_Z19menuProcModelSelecth+0x716>
          break;
#endif
      case EVT_KEY_LONG(KEY_MENU):
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
  40edb2:	4825      	ldr	r0, [pc, #148]	; (40ee48 <_Z19menuProcModelSelecth+0x7e4>)
  40edb4:	f7f4 ffb2 	bl	403d1c <_Z12displayPopupPKc>
          eeCheck(true); // force writing of current model data before this is changed

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40edb8:	9907      	ldr	r1, [sp, #28]
#endif
      case EVT_KEY_LONG(KEY_MENU):
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
          eeCheck(true); // force writing of current model data before this is changed
  40edba:	4640      	mov	r0, r8

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40edbc:	fa4f f981 	sxtb.w	r9, r1
  40edc0:	b27f      	sxtb	r7, r7
#endif
      case EVT_KEY_LONG(KEY_MENU):
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
          eeCheck(true); // force writing of current model data before this is changed
  40edc2:	f7f3 faab 	bl	40231c <_Z7eeCheckb>

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40edc6:	f109 033c 	add.w	r3, r9, #60	; 0x3c
  40edca:	f648 0289 	movw	r2, #34953	; 0x8889
  40edce:	19db      	adds	r3, r3, r7
  40edd0:	f6c8 0288 	movt	r2, #34952	; 0x8888
  40edd4:	fb82 0203 	smull	r0, r2, r2, r3
  40edd8:	17d9      	asrs	r1, r3, #31
  40edda:	18d2      	adds	r2, r2, r3
  40eddc:	ebc1 1262 	rsb	r2, r1, r2, asr #5
  40ede0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  40ede4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
  40ede8:	b2dc      	uxtb	r4, r3

          if (s_copyMode == COPY_MODE) {
            if (!eeCopyModel(cur, s_copySrcRow))
  40edea:	f895 1e80 	ldrb.w	r1, [r5, #3712]	; 0xe80
  40edee:	4620      	mov	r0, r4
  40edf0:	f7f3 fad8 	bl	4023a4 <_Z11eeCopyModelhh>
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
          displayPopup(s_copyMode==COPY_MODE ? STR_COPYINGMODEL : STR_MOVINGMODEL);
          eeCheck(true); // force writing of current model data before this is changed

          uint8_t cur = (MAX_MODELS + sub + s_copyTgtOfs) % MAX_MODELS;
  40edf4:	2800      	cmp	r0, #0
  40edf6:	bf18      	it	ne
  40edf8:	4626      	movne	r6, r4
  40edfa:	e56c      	b.n	40e8d6 <_Z19menuProcModelSelecth+0x272>
            next_ofs = 0;

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
            s_copySrcRow = oldSub;
            // find a hole (in the first empty slot above / below)
            m_posVert = eeFindEmptyModel(s_copySrcRow, _event==EVT_KEY_FIRST(KEY_DOWN));
  40edfc:	23ff      	movs	r3, #255	; 0xff
  40edfe:	f885 3c34 	strb.w	r3, [r5, #3124]	; 0xc34
            if (m_posVert == (uint8_t)-1) {
              // no free room for duplicating the model
              AUDIO_ERROR();
  40ee02:	2002      	movs	r0, #2
  40ee04:	f7f7 fb82 	bl	40650c <_Z13audioDefeventh>
              m_posVert = oldSub;
              s_copyMode = 0; // TODO only this one?
  40ee08:	f04f 0800 	mov.w	r8, #0
              s_copyTgtOfs = 0;
              s_copySrcRow = -1;
  40ee0c:	23ff      	movs	r3, #255	; 0xff
  40ee0e:	f885 3e80 	strb.w	r3, [r5, #3712]	; 0xe80
            // find a hole (in the first empty slot above / below)
            m_posVert = eeFindEmptyModel(s_copySrcRow, _event==EVT_KEY_FIRST(KEY_DOWN));
            if (m_posVert == (uint8_t)-1) {
              // no free room for duplicating the model
              AUDIO_ERROR();
              m_posVert = oldSub;
  40ee12:	f885 7c34 	strb.w	r7, [r5, #3124]	; 0xc34
              s_copyMode = 0; // TODO only this one?
  40ee16:	f885 8e7e 	strb.w	r8, [r5, #3710]	; 0xe7e
              s_copyTgtOfs = 0;
              s_copySrcRow = -1;
  40ee1a:	463b      	mov	r3, r7
            }
            next_ofs = 0;
            sub = m_posVert;
  40ee1c:	b2db      	uxtb	r3, r3
  40ee1e:	9307      	str	r3, [sp, #28]
              m_posVert = oldSub;
              s_copyMode = 0; // TODO only this one?
              s_copyTgtOfs = 0;
              s_copySrcRow = -1;
            }
            next_ofs = 0;
  40ee20:	2300      	movs	r3, #0
  40ee22:	e6b7      	b.n	40eb94 <_Z19menuProcModelSelecth+0x530>

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
            s_copySrcRow = oldSub;
            // find a hole (in the first empty slot above / below)
            m_posVert = eeFindEmptyModel(s_copySrcRow, _event==EVT_KEY_FIRST(KEY_DOWN));
            if (m_posVert == (uint8_t)-1) {
  40ee24:	2bff      	cmp	r3, #255	; 0xff
            next_ofs = 0;

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
            s_copySrcRow = oldSub;
            // find a hole (in the first empty slot above / below)
            m_posVert = eeFindEmptyModel(s_copySrcRow, _event==EVT_KEY_FIRST(KEY_DOWN));
  40ee26:	f885 3c34 	strb.w	r3, [r5, #3124]	; 0xc34
            if (m_posVert == (uint8_t)-1) {
  40ee2a:	d1f7      	bne.n	40ee1c <_Z19menuProcModelSelecth+0x7b8>
  40ee2c:	e7e9      	b.n	40ee02 <_Z19menuProcModelSelecth+0x79e>
  40ee2e:	bf00      	nop
  40ee30:	0040eecd 	.word	0x0040eecd
  40ee34:	0040b6d1 	.word	0x0040b6d1
  40ee38:	200001a8 	.word	0x200001a8
  40ee3c:	20000108 	.word	0x20000108
  40ee40:	00410f18 	.word	0x00410f18
  40ee44:	20001200 	.word	0x20001200
  40ee48:	00410f04 	.word	0x00410f04

0040ee4c <_Z9eeReadAllv>:
    }
  }
}

void eeReadAll()
{
  40ee4c:	b538      	push	{r3, r4, r5, lr}
  if (!ee32LoadGeneral() )
  40ee4e:	f7f3 f85f 	bl	401f10 <_Z15ee32LoadGeneralv>
  40ee52:	4605      	mov	r5, r0
  40ee54:	b170      	cbz	r0, 40ee74 <_Z9eeReadAllv+0x28>
    STORE_GENERALVARS;
    STORE_MODELVARS;
  }
  else
  {
    eeLoadModel(g_eeGeneral.currModel);
  40ee56:	4c19      	ldr	r4, [pc, #100]	; (40eebc <_Z9eeReadAllv+0x70>)
  40ee58:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  40ee5c:	f7ff fbc2 	bl	40e5e4 <_Z11eeLoadModelh>
    ee32_read_model_names() ;
  40ee60:	f7f3 fb7a 	bl	402558 <_Z21ee32_read_model_namesv>
  }

  stickMode = g_eeGeneral.stickMode; // TODO common!
  40ee64:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
  40ee68:	4b15      	ldr	r3, [pc, #84]	; (40eec0 <_Z9eeReadAllv+0x74>)
  40ee6a:	f3c2 0201 	ubfx	r2, r2, #0, #2
  40ee6e:	f883 2a86 	strb.w	r2, [r3, #2694]	; 0xa86
}
  40ee72:	bd38      	pop	{r3, r4, r5, pc}

void eeReadAll()
{
  if (!ee32LoadGeneral() )
  {
    generalDefault();
  40ee74:	f7f1 fd4e 	bl	400914 <_Z14generalDefaultv>

    alert(STR_BADEEPROMDATA);
  40ee78:	4812      	ldr	r0, [pc, #72]	; (40eec4 <_Z9eeReadAllv+0x78>)
  40ee7a:	f7f8 fac9 	bl	407410 <_Z5alertPKc>
    message(STR_MESSAGE, STR_EEPROMFORMATTING, NULL, NULL);
  40ee7e:	4912      	ldr	r1, [pc, #72]	; (40eec8 <_Z9eeReadAllv+0x7c>)
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40ee80:	4c0e      	ldr	r4, [pc, #56]	; (40eebc <_Z9eeReadAllv+0x70>)
  if (!ee32LoadGeneral() )
  {
    generalDefault();

    alert(STR_BADEEPROMDATA);
    message(STR_MESSAGE, STR_EEPROMFORMATTING, NULL, NULL);
  40ee82:	462a      	mov	r2, r5
  40ee84:	462b      	mov	r3, r5
  40ee86:	f1a1 000c 	sub.w	r0, r1, #12
  40ee8a:	f7f8 fa95 	bl	4073b8 <_Z7messagePKcS0_S0_S0_>

    modelDefault(0);
  40ee8e:	4628      	mov	r0, r5
  40ee90:	f7ff fb9a 	bl	40e5c8 <_Z12modelDefaulth>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40ee94:	f894 29a8 	ldrb.w	r2, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40ee98:	f8b4 39aa 	ldrh.w	r3, [r4, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40ee9c:	f042 0203 	orr.w	r2, r2, #3
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40eea0:	f8b4 39aa 	ldrh.w	r3, [r4, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40eea4:	f884 29a8 	strb.w	r2, [r4, #2472]	; 0x9a8
  {
    eeLoadModel(g_eeGeneral.currModel);
    ee32_read_model_names() ;
  }

  stickMode = g_eeGeneral.stickMode; // TODO common!
  40eea8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40eeac:	f8a4 39ac 	strh.w	r3, [r4, #2476]	; 0x9ac
  {
    eeLoadModel(g_eeGeneral.currModel);
    ee32_read_model_names() ;
  }

  stickMode = g_eeGeneral.stickMode; // TODO common!
  40eeb0:	4b03      	ldr	r3, [pc, #12]	; (40eec0 <_Z9eeReadAllv+0x74>)
  40eeb2:	f3c2 0201 	ubfx	r2, r2, #0, #2
  40eeb6:	f883 2a86 	strb.w	r2, [r3, #2694]	; 0xa86
}
  40eeba:	bd38      	pop	{r3, r4, r5, pc}
  40eebc:	20000108 	.word	0x20000108
  40eec0:	20001200 	.word	0x20001200
  40eec4:	00410f3c 	.word	0x00410f3c
  40eec8:	00410f58 	.word	0x00410f58

0040eecc <_Z17menuProcTemplatesh>:
#endif

#ifdef TEMPLATES
// TODO s_noHi needed?
void menuProcTemplates(uint8_t _event)
{
  40eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t event = (s_warning ? 0 : _event);
  40eed0:	f8df a11c 	ldr.w	sl, [pc, #284]	; 40eff0 <_Z17menuProcTemplatesh+0x124>
#endif

#ifdef TEMPLATES
// TODO s_noHi needed?
void menuProcTemplates(uint8_t _event)
{
  40eed4:	b085      	sub	sp, #20
  uint8_t event = (s_warning ? 0 : _event);
  40eed6:	f8da 4a88 	ldr.w	r4, [sl, #2696]	; 0xa88
#endif

#ifdef TEMPLATES
// TODO s_noHi needed?
void menuProcTemplates(uint8_t _event)
{
  40eeda:	4683      	mov	fp, r0
  uint8_t event = (s_warning ? 0 : _event);
  40eedc:	2c00      	cmp	r4, #0
  40eede:	bf0c      	ite	eq
  40eee0:	4604      	moveq	r4, r0
  40eee2:	2400      	movne	r4, #0

  SIMPLE_MENU(STR_MENUTEMPLATES, menuTabModel, e_Templates, 1+TMPL_COUNT);
  40eee4:	2508      	movs	r5, #8
  40eee6:	4620      	mov	r0, r4
  40eee8:	210a      	movs	r1, #10
  40eeea:	4a3d      	ldr	r2, [pc, #244]	; (40efe0 <_Z17menuProcTemplatesh+0x114>)
  40eeec:	230b      	movs	r3, #11
  40eeee:	9500      	str	r5, [sp, #0]
  40eef0:	f7fa feda 	bl	409ca8 <_Z12check_simplehhPKPFvhEhh>
  40eef4:	b910      	cbnz	r0, 40eefc <_Z17menuProcTemplatesh+0x30>
  }

  if (s_warning) {
    displayConfirmation(_event);
  }
}
  40eef6:	b005      	add	sp, #20
  40eef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  uint8_t event = (s_warning ? 0 : _event);

  SIMPLE_MENU(STR_MENUTEMPLATES, menuTabModel, e_Templates, 1+TMPL_COUNT);

  uint8_t sub = m_posVert - 1;
  40eefc:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 40eff4 <_Z17menuProcTemplatesh+0x128>
// TODO s_noHi needed?
void menuProcTemplates(uint8_t _event)
{
  uint8_t event = (s_warning ? 0 : _event);

  SIMPLE_MENU(STR_MENUTEMPLATES, menuTabModel, e_Templates, 1+TMPL_COUNT);
  40ef00:	2000      	movs	r0, #0
  40ef02:	2302      	movs	r3, #2
  40ef04:	4601      	mov	r1, r0
  40ef06:	4a37      	ldr	r2, [pc, #220]	; (40efe4 <_Z17menuProcTemplatesh+0x118>)
  40ef08:	f7f3 fcd6 	bl	4028b8 <_Z11lcd_putsAtthhPKch>

  uint8_t sub = m_posVert - 1;
  40ef0c:	f898 7c34 	ldrb.w	r7, [r8, #3124]	; 0xc34

  if (s_confirmation) {
  40ef10:	f898 3a87 	ldrb.w	r3, [r8, #2695]	; 0xa87
{
  uint8_t event = (s_warning ? 0 : _event);

  SIMPLE_MENU(STR_MENUTEMPLATES, menuTabModel, e_Templates, 1+TMPL_COUNT);

  uint8_t sub = m_posVert - 1;
  40ef14:	3f01      	subs	r7, #1
  40ef16:	b2ff      	uxtb	r7, r7

  if (s_confirmation) {
  40ef18:	b13b      	cbz	r3, 40ef2a <_Z17menuProcTemplatesh+0x5e>
    if (sub<TMPL_COUNT)
  40ef1a:	2f07      	cmp	r7, #7
  40ef1c:	d95c      	bls.n	40efd8 <_Z17menuProcTemplatesh+0x10c>
      applyTemplate(sub);
    s_confirmation = 0;
  40ef1e:	2300      	movs	r3, #0
    AUDIO_WARNING2();
  40ef20:	2008      	movs	r0, #8
  uint8_t sub = m_posVert - 1;

  if (s_confirmation) {
    if (sub<TMPL_COUNT)
      applyTemplate(sub);
    s_confirmation = 0;
  40ef22:	f888 3a87 	strb.w	r3, [r8, #2695]	; 0xa87
    AUDIO_WARNING2();
  40ef26:	f7f7 faf1 	bl	40650c <_Z13audioDefeventh>
  }

  switch(event)
  40ef2a:	2c60      	cmp	r4, #96	; 0x60
  40ef2c:	d112      	bne.n	40ef54 <_Z17menuProcTemplatesh+0x88>
  {
    case EVT_KEY_FIRST(KEY_MENU):
      s_warning = STR_VTEMPLATES+1 + (sub * LEN2_VTEMPLATES);
  40ef2e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
  40ef32:	4a2d      	ldr	r2, [pc, #180]	; (40efe8 <_Z17menuProcTemplatesh+0x11c>)
  40ef34:	f89a 30a0 	ldrb.w	r3, [sl, #160]	; 0xa0
  40ef38:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40ef3c:	188a      	adds	r2, r1, r2
  40ef3e:	f36f 1305 	bfc	r3, #4, #2
  40ef42:	f8ca 2a88 	str.w	r2, [sl, #2696]	; 0xa88
  40ef46:	2263      	movs	r2, #99	; 0x63
  40ef48:	f88a 20a2 	strb.w	r2, [sl, #162]	; 0xa2
  40ef4c:	f88a 30a0 	strb.w	r3, [sl, #160]	; 0xa0
      killEvents(event);
      _event = 0;
  40ef50:	f04f 0b00 	mov.w	fp, #0

  uint8_t y = 1*FH;
  uint8_t k = 0;
  for (uint8_t i=0; i<7 && k<TMPL_COUNT; i++) {
    k=i+s_pgOfs;
    lcd_outdezNAtt(3*FW, y, k, (sub==k ? INVERS : 0)|LEADING0, 2);
  40ef54:	b23b      	sxth	r3, r7
  switch(event)
  {
    case EVT_KEY_FIRST(KEY_MENU):
      s_warning = STR_VTEMPLATES+1 + (sub * LEN2_VTEMPLATES);
      killEvents(event);
      _event = 0;
  40ef56:	2600      	movs	r6, #0
  40ef58:	2508      	movs	r5, #8

  uint8_t y = 1*FH;
  uint8_t k = 0;
  for (uint8_t i=0; i<7 && k<TMPL_COUNT; i++) {
    k=i+s_pgOfs;
    lcd_outdezNAtt(3*FW, y, k, (sub==k ? INVERS : 0)|LEADING0, 2);
  40ef5a:	9303      	str	r3, [sp, #12]
  40ef5c:	f04f 0902 	mov.w	r9, #2
  40ef60:	e01e      	b.n	40efa0 <_Z17menuProcTemplatesh+0xd4>
  40ef62:	b222      	sxth	r2, r4
  40ef64:	2012      	movs	r0, #18
  40ef66:	2310      	movs	r3, #16
  40ef68:	f8cd 9000 	str.w	r9, [sp]
  40ef6c:	f7f3 fdf2 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
    lcd_putsiAtt(4*FW, y, STR_VTEMPLATES, k, (sub==k ? INVERS  : 0));
  40ef70:	f04f 0e00 	mov.w	lr, #0
  40ef74:	4623      	mov	r3, r4
  40ef76:	4629      	mov	r1, r5
  40ef78:	2018      	movs	r0, #24
  40ef7a:	4a1c      	ldr	r2, [pc, #112]	; (40efec <_Z17menuProcTemplatesh+0x120>)
  40ef7c:	f8cd e000 	str.w	lr, [sp]
  40ef80:	f7f3 fc76 	bl	402870 <_Z12lcd_putsiAtthhPKchh>
      break;
  }

  uint8_t y = 1*FH;
  uint8_t k = 0;
  for (uint8_t i=0; i<7 && k<TMPL_COUNT; i++) {
  40ef84:	3601      	adds	r6, #1
  40ef86:	b2f6      	uxtb	r6, r6
  40ef88:	2e06      	cmp	r6, #6
  40ef8a:	bf8c      	ite	hi
  40ef8c:	2300      	movhi	r3, #0
  40ef8e:	2301      	movls	r3, #1
  40ef90:	2c07      	cmp	r4, #7
  40ef92:	bf8c      	ite	hi
  40ef94:	2400      	movhi	r4, #0
  40ef96:	f003 0401 	andls.w	r4, r3, #1
    k=i+s_pgOfs;
    lcd_outdezNAtt(3*FW, y, k, (sub==k ? INVERS : 0)|LEADING0, 2);
    lcd_putsiAtt(4*FW, y, STR_VTEMPLATES, k, (sub==k ? INVERS  : 0));
    y+=FH;
  40ef9a:	3508      	adds	r5, #8
  40ef9c:	b2ed      	uxtb	r5, r5
      break;
  }

  uint8_t y = 1*FH;
  uint8_t k = 0;
  for (uint8_t i=0; i<7 && k<TMPL_COUNT; i++) {
  40ef9e:	b18c      	cbz	r4, 40efc4 <_Z17menuProcTemplatesh+0xf8>
    k=i+s_pgOfs;
  40efa0:	f898 4e7d 	ldrb.w	r4, [r8, #3709]	; 0xe7d
    lcd_outdezNAtt(3*FW, y, k, (sub==k ? INVERS : 0)|LEADING0, 2);
  40efa4:	4629      	mov	r1, r5
  }

  uint8_t y = 1*FH;
  uint8_t k = 0;
  for (uint8_t i=0; i<7 && k<TMPL_COUNT; i++) {
    k=i+s_pgOfs;
  40efa6:	1934      	adds	r4, r6, r4
  40efa8:	b2e4      	uxtb	r4, r4
    lcd_outdezNAtt(3*FW, y, k, (sub==k ? INVERS : 0)|LEADING0, 2);
  40efaa:	42a7      	cmp	r7, r4
  40efac:	d1d9      	bne.n	40ef62 <_Z17menuProcTemplatesh+0x96>
  40efae:	2012      	movs	r0, #18
  40efb0:	4629      	mov	r1, r5
  40efb2:	9a03      	ldr	r2, [sp, #12]
  40efb4:	4603      	mov	r3, r0
  40efb6:	f8cd 9000 	str.w	r9, [sp]
  40efba:	f7f3 fdcb 	bl	402b54 <_Z14lcd_outdezNAtthhshh>
    lcd_putsiAtt(4*FW, y, STR_VTEMPLATES, k, (sub==k ? INVERS  : 0));
  40efbe:	f04f 0e02 	mov.w	lr, #2
  40efc2:	e7d7      	b.n	40ef74 <_Z17menuProcTemplatesh+0xa8>
    y+=FH;
  }

  if (s_warning) {
  40efc4:	f8da 3a88 	ldr.w	r3, [sl, #2696]	; 0xa88
  40efc8:	2b00      	cmp	r3, #0
  40efca:	d094      	beq.n	40eef6 <_Z17menuProcTemplatesh+0x2a>
    displayConfirmation(_event);
  40efcc:	4658      	mov	r0, fp
  }
}
  40efce:	b005      	add	sp, #20
  40efd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lcd_putsiAtt(4*FW, y, STR_VTEMPLATES, k, (sub==k ? INVERS  : 0));
    y+=FH;
  }

  if (s_warning) {
    displayConfirmation(_event);
  40efd4:	f7f4 b90c 	b.w	4031f0 <_Z19displayConfirmationh>

  uint8_t sub = m_posVert - 1;

  if (s_confirmation) {
    if (sub<TMPL_COUNT)
      applyTemplate(sub);
  40efd8:	4638      	mov	r0, r7
  40efda:	f7ff f8ad 	bl	40e138 <_Z13applyTemplateh>
  40efde:	e79e      	b.n	40ef1e <_Z17menuProcTemplatesh+0x52>
  40efe0:	00410b14 	.word	0x00410b14
  40efe4:	00410f6c 	.word	0x00410f6c
  40efe8:	00410645 	.word	0x00410645
  40efec:	00410644 	.word	0x00410644
  40eff0:	20000108 	.word	0x20000108
  40eff4:	20001200 	.word	0x20001200

0040eff8 <__get_PSP>:
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, psp\n\t"
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  40eff8:	f3ef 8009 	mrs	r0, PSP
  40effc:	4600      	mov	r0, r0
  40effe:	4770      	bx	lr
  return(result);
}
  40f000:	4770      	bx	lr
  40f002:	bf00      	nop

0040f004 <__set_PSP>:
 */
/*void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) ); */
void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n\t"
                  "BX  lr     \n\t" : : "r" (topOfProcStack) );
  40f004:	f380 8809 	msr	PSP, r0
  40f008:	4770      	bx	lr
}
  40f00a:	4770      	bx	lr

0040f00c <__get_MSP>:
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, msp\n\t"
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  40f00c:	f3ef 8008 	mrs	r0, MSP
  40f010:	4600      	mov	r0, r0
  40f012:	4770      	bx	lr
  return(result);
}
  40f014:	4770      	bx	lr
  40f016:	bf00      	nop

0040f018 <__set_MSP>:
 */
/*void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) ); */
void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n\t"
                  "BX  lr     \n\t" : : "r" (topOfMainStack) );
  40f018:	f380 8808 	msr	MSP, r0
  40f01c:	4770      	bx	lr
}
  40f01e:	4770      	bx	lr

0040f020 <__get_BASEPRI>:
 */
uint32_t __get_BASEPRI(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
  40f020:	f3ef 8012 	mrs	r0, BASEPRI_MASK
  return(result);
}
  40f024:	4770      	bx	lr
  40f026:	bf00      	nop

0040f028 <__set_BASEPRI>:
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
  40f028:	f380 8811 	msr	BASEPRI, r0
}
  40f02c:	4770      	bx	lr
  40f02e:	bf00      	nop

0040f030 <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40f030:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
  40f034:	4770      	bx	lr
  40f036:	bf00      	nop

0040f038 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
  40f038:	f380 8810 	msr	PRIMASK, r0
}
  40f03c:	4770      	bx	lr
  40f03e:	bf00      	nop

0040f040 <__get_FAULTMASK>:
 */
uint32_t __get_FAULTMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
  40f040:	f3ef 8013 	mrs	r0, FAULTMASK
  return(result);
}
  40f044:	4770      	bx	lr
  40f046:	bf00      	nop

0040f048 <__set_FAULTMASK>:
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
  40f048:	f380 8813 	msr	FAULTMASK, r0
}
  40f04c:	4770      	bx	lr
  40f04e:	bf00      	nop

0040f050 <__get_CONTROL>:
 */
uint32_t __get_CONTROL(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
  40f050:	f3ef 8014 	mrs	r0, CONTROL
  return(result);
}
  40f054:	4770      	bx	lr
  40f056:	bf00      	nop

0040f058 <__set_CONTROL>:
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
  40f058:	f380 8814 	msr	CONTROL, r0
}
  40f05c:	4770      	bx	lr
  40f05e:	bf00      	nop

0040f060 <__REV>:
 */
uint32_t __REV(uint32_t value)
{
  uint32_t result=0;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
  40f060:	ba00      	rev	r0, r0
  return(result);
}
  40f062:	4770      	bx	lr

0040f064 <__REV16>:
 */
uint32_t __REV16(uint16_t value)
{
  uint32_t result=0;

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  40f064:	ba40      	rev16	r0, r0
  return(result);
}
  40f066:	4770      	bx	lr

0040f068 <__REVSH>:
 */
int32_t __REVSH(int16_t value)
{
  uint32_t result=0;

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
  40f068:	bac0      	revsh	r0, r0
  return(result);
}
  40f06a:	4770      	bx	lr

0040f06c <__RBIT>:
 */
uint32_t __RBIT(uint32_t value)
{
  uint32_t result=0;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  40f06c:	fa90 f0a0 	rbit	r0, r0
   return(result);
}
  40f070:	4770      	bx	lr
  40f072:	bf00      	nop

0040f074 <__LDREXB>:
 */
uint8_t __LDREXB(uint8_t *addr)
{
    uint8_t result=0;

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
  40f074:	e8d0 0f4f 	ldrexb	r0, [r0]
  40f078:	b2c0      	uxtb	r0, r0
   return(result);
}
  40f07a:	4770      	bx	lr

0040f07c <__LDREXH>:
 */
uint16_t __LDREXH(uint16_t *addr)
{
    uint16_t result=0;

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
  40f07c:	e8d0 0f5f 	ldrexh	r0, [r0]
  40f080:	b280      	uxth	r0, r0
   return(result);
}
  40f082:	4770      	bx	lr

0040f084 <__LDREXW>:
 */
uint32_t __LDREXW(uint32_t *addr)
{
    uint32_t result=0;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
  40f084:	e850 0f00 	ldrex	r0, [r0]
   return(result);
}
  40f088:	4770      	bx	lr
  40f08a:	bf00      	nop

0040f08c <__STREXB>:
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
   uint32_t result=0;

   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
  40f08c:	e8c1 0f40 	strexb	r0, r0, [r1]
   return(result);
}
  40f090:	4770      	bx	lr
  40f092:	bf00      	nop

0040f094 <__STREXH>:
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
   uint32_t result=0;

   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
  40f094:	e8c1 0f50 	strexh	r0, r0, [r1]
   return(result);
}
  40f098:	4770      	bx	lr
  40f09a:	bf00      	nop

0040f09c <__STREXW>:
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
   uint32_t result=0;

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
  40f09c:	e841 0000 	strex	r0, r0, [r1]
   return(result);
}
  40f0a0:	4770      	bx	lr
  40f0a2:	bf00      	nop

0040f0a4 <_Z10revert_oscv>:

	pmcptr = PMC ;


	// Switch back to the internal oscillator
  pmcptr->CKGR_MOR = (0x37 << 16) | BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN ;
  40f0a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40f0a8:	f640 0309 	movw	r3, #2057	; 0x809
  40f0ac:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40f0b0:	f2c0 0337 	movt	r3, #55	; 0x37
  40f0b4:	620b      	str	r3, [r1, #32]
  timeout = 0;
  while (!(pmcptr->PMC_SR & PMC_SR_MOSCSELS) && (++timeout < CLOCK_TIMEOUT));
  40f0b6:	f04f 32ff 	mov.w	r2, #4294967295
  40f0ba:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40f0bc:	03d8      	lsls	r0, r3, #15
  40f0be:	d401      	bmi.n	40f0c4 <_Z10revert_oscv+0x20>
  40f0c0:	3a01      	subs	r2, #1
  40f0c2:	d1fa      	bne.n	40f0ba <_Z10revert_oscv+0x16>

  pmcptr->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS) | PMC_MCKR_CSS_SLOW_CLK;
  40f0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f0c8:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40f0cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
  timeout = 0;
  while (!(pmcptr->PMC_SR & PMC_SR_MCKRDY) && (++timeout < CLOCK_TIMEOUT));
  40f0ce:	f04f 32ff 	mov.w	r2, #4294967295
	// Switch back to the internal oscillator
  pmcptr->CKGR_MOR = (0x37 << 16) | BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN ;
  timeout = 0;
  while (!(pmcptr->PMC_SR & PMC_SR_MOSCSELS) && (++timeout < CLOCK_TIMEOUT));

  pmcptr->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS) | PMC_MCKR_CSS_SLOW_CLK;
  40f0d2:	f021 0103 	bic.w	r1, r1, #3
  40f0d6:	6319      	str	r1, [r3, #48]	; 0x30
  timeout = 0;
  while (!(pmcptr->PMC_SR & PMC_SR_MCKRDY) && (++timeout < CLOCK_TIMEOUT));
  40f0d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
  40f0da:	0709      	lsls	r1, r1, #28
  40f0dc:	d401      	bmi.n	40f0e2 <_Z10revert_oscv+0x3e>
  40f0de:	3a01      	subs	r2, #1
  40f0e0:	d1fa      	bne.n	40f0d8 <_Z10revert_oscv+0x34>

    
	pmcptr->CKGR_PLLAR = 1 << 29 ;		// Stop PLLA
  40f0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f0e6:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40f0ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40f0ee:	629a      	str	r2, [r3, #40]	; 0x28

}
  40f0f0:	4770      	bx	lr
  40f0f2:	bf00      	nop

0040f0f4 <sam_boot>:

void sam_boot()
{
  40f0f4:	b508      	push	{r3, lr}
	revert_osc() ;
  40f0f6:	f7ff ffd5 	bl	40f0a4 <_Z10revert_oscv>
	
  __ASM(" mov.w	r1, #8388608");
  40f0fa:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  __ASM(" movw	r0, #60680");
  40f0fe:	f64e 5008 	movw	r0, #60680	; 0xed08
  __ASM(" movt	r0, #57344");
  40f102:	f2ce 0000 	movt	r0, #57344	; 0xe000
  __ASM(" str	r1, [r0, #0]");		// Set the VTOR
  40f106:	6001      	str	r1, [r0, #0]
	 
  __ASM("mov.w	r3, #0");
  40f108:	f04f 0300 	mov.w	r3, #0
  __ASM("movt		r3, #128");
  40f10c:	f2c0 0380 	movt	r3, #128	; 0x80
  __ASM("ldr	r0, [r3, #0]");
  40f110:	6818      	ldr	r0, [r3, #0]
  __ASM("msr msp, r0");
  40f112:	f380 8808 	msr	MSP, r0
  __ASM("ldr	r0, [r3, #4]");
  40f116:	6858      	ldr	r0, [r3, #4]
  __ASM("mov.w	r3, #1");
  40f118:	f04f 0301 	mov.w	r3, #1
  __ASM("orr		r0, r3");
  40f11c:	ea40 0003 	orr.w	r0, r0, r3
  __ASM("bx r0");
  40f120:	4700      	bx	r0
}
  40f122:	bd08      	pop	{r3, pc}

0040f124 <_Z8usb_modev>:

  return x ;
}

void usb_mode()
{
  40f124:	b4f0      	push	{r4, r5, r6, r7}

void endPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  pUsart->US_PTCR = US_PTCR_RXTDIS ;
  40f126:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  40f12a:	2502      	movs	r5, #2
  start_timer3() ;
}

void end_ppm_capture()
{
  TC1->TC_CHANNEL[0].TC_IDR = TC_IDR0_LDRAS ;
  40f12c:	463e      	mov	r6, r7

void endPdcUsartReceive()
{
  register Usart *pUsart = SECOND_USART;

  pUsart->US_PTCR = US_PTCR_RXTDIS ;
  40f12e:	f2c4 0702 	movt	r7, #16386	; 0x4002
  40f132:	f8c7 5120 	str.w	r5, [r7, #288]	; 0x120
}
#endif

void end_spi()
{
  SPI->SPI_CR = 2 ;                                                               // Disable
  40f136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  start_timer3() ;
}

void end_ppm_capture()
{
  TC1->TC_CHANNEL[0].TC_IDR = TC_IDR0_LDRAS ;
  40f13a:	f2c4 0601 	movt	r6, #16385	; 0x4001
  40f13e:	2720      	movs	r7, #32
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40f140:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  40f144:	62b7      	str	r7, [r6, #40]	; 0x28
  40f146:	f2ce 0300 	movt	r3, #57344	; 0xe000

void end_sound()
{
	DACC->DACC_IDR = DACC_IDR_ENDTX ;
	NVIC_DisableIRQ(DACC_IRQn) ;
	TWI0->TWI_IDR = TWI_IDR_TXCOMP ;
  40f14a:	4608      	mov	r0, r1
  40f14c:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  40f150:	f2c4 0100 	movt	r1, #16384	; 0x4000
  40f154:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  40f158:	600d      	str	r5, [r1, #0]
  SPI->SPI_IDR = 0x07FF ;                                 // All interrupts off
  40f15a:	f240 75ff 	movw	r5, #2047	; 0x7ff
  40f15e:	618d      	str	r5, [r1, #24]
//	}
}

void end_sound()
{
	DACC->DACC_IDR = DACC_IDR_ENDTX ;
  40f160:	f44f 4440 	mov.w	r4, #49152	; 0xc000
  40f164:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40f168:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  40f16c:	f2c4 0403 	movt	r4, #16387	; 0x4003
  40f170:	2104      	movs	r1, #4
  40f172:	62a1      	str	r1, [r4, #40]	; 0x28
  40f174:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40f178:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	NVIC_DisableIRQ(DACC_IRQn) ;
	TWI0->TWI_IDR = TWI_IDR_TXCOMP ;
  40f17c:	f2c4 0001 	movt	r0, #16385	; 0x4001
  40f180:	2101      	movs	r1, #1
  40f182:	6281      	str	r1, [r0, #40]	; 0x28
	NVIC_DisableIRQ(TWI0_IRQn) ;
	PMC->PMC_PCER0 &= ~0x00080000L ;		// Disable peripheral clock to TWI0
  40f184:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40f188:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40f18c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  40f190:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40f194:	6911      	ldr	r1, [r2, #16]
  // BEFORE calling sam_boot()
  endPdcUsartReceive() ;          // Terminate any serial reception
  end_ppm_capture() ;
  end_spi() ;
  end_sound() ;
  TC0->TC_CHANNEL[2].TC_IDR = TC_IDR0_CPCS ;
  40f196:	2500      	movs	r5, #0
  40f198:	f421 2100 	bic.w	r1, r1, #524288	; 0x80000
  40f19c:	6111      	str	r1, [r2, #16]
  PMC->PMC_PCER0 &= ~0x40000000L ;		// Disable peripheral clock to DAC
  40f19e:	6916      	ldr	r6, [r2, #16]
  register Pio *pioptr ;

  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                            // Assign A17 to PIO

  PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  40f1a0:	462c      	mov	r4, r5
  40f1a2:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
  40f1a6:	6116      	str	r6, [r2, #16]
  40f1a8:	f2c4 0501 	movt	r5, #16385	; 0x4001
  40f1ac:	2210      	movs	r2, #16
  40f1ae:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
void disable_main_ppm()
{
  register Pio *pioptr ;

  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                            // Assign A17 to PIO
  40f1b2:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  40f1b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40f1ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40f1be:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40f1c2:	f44f 3000 	mov.w	r0, #131072	; 0x20000

  PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  40f1c6:	2208      	movs	r2, #8
  40f1c8:	f2c4 0402 	movt	r4, #16386	; 0x4002
void disable_main_ppm()
{
  register Pio *pioptr ;

  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                            // Assign A17 to PIO
  40f1cc:	6008      	str	r0, [r1, #0]

  PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  40f1ce:	6162      	str	r2, [r4, #20]
  40f1d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40f1d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  // Revert back to pwm output
  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                         // Assign A17 to PIO

  sscptr = SSC ;
  sscptr->SSC_CR = SSC_CR_TXDIS ;
  40f1d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  40f1dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
  register Pio *pioptr ;
  register Ssc *sscptr ;

  // Revert back to pwm output
  pioptr = PIOA ;
  pioptr->PIO_PER = PIO_PA17 ;                                         // Assign A17 to PIO
  40f1e0:	6008      	str	r0, [r1, #0]

  sscptr = SSC ;
  sscptr->SSC_CR = SSC_CR_TXDIS ;
  40f1e2:	601a      	str	r2, [r3, #0]
  disable_main_ppm() ;
  //      PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  //      NVIC_DisableIRQ(PWM_IRQn) ;
  disable_ssc() ;
  sam_boot() ;
}
  40f1e4:	bcf0      	pop	{r4, r5, r6, r7}
  //      PWM->PWM_IDR1 = PWM_IDR1_CHID0 ;
  disable_main_ppm() ;
  //      PWM->PWM_IDR1 = PWM_IDR1_CHID3 ;
  //      NVIC_DisableIRQ(PWM_IRQn) ;
  disable_ssc() ;
  sam_boot() ;
  40f1e6:	e785      	b.n	40f0f4 <sam_boot>

0040f1e8 <_Z10SystemInitv>:
/*----------------------------------------------------------------------------*/
uint32_t SystemInit (void)
{
    /** Set 2 cycle (1 WS) for Embedded Flash Access */
		// Max clock is 38 MHz (1.8V VVDCORE)
   EFC->EEFC_FMR = (1 << 8) ;
  40f1e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
  40f1ec:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40f1f0:	f44f 7280 	mov.w	r2, #256	; 0x100
//    }


    /* Initialize main oscillator
     ****************************/
    if(!(pmcptr->CKGR_MOR & CKGR_MOR_MOSCSEL))
  40f1f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
/*----------------------------------------------------------------------------*/
uint32_t SystemInit (void)
{
    /** Set 2 cycle (1 WS) for Embedded Flash Access */
		// Max clock is 38 MHz (1.8V VVDCORE)
   EFC->EEFC_FMR = (1 << 8) ;
  40f1f8:	601a      	str	r2, [r3, #0]
//    }


    /* Initialize main oscillator
     ****************************/
    if(!(pmcptr->CKGR_MOR & CKGR_MOR_MOSCSEL))
  40f1fa:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40f1fe:	6a0b      	ldr	r3, [r1, #32]
  40f200:	01da      	lsls	r2, r3, #7
  40f202:	d409      	bmi.n	40f218 <_Z10SystemInitv+0x30>
    {

      pmcptr->CKGR_MOR = (0x37 << 16) | BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
  40f204:	f640 0309 	movw	r3, #2057	; 0x809
  40f208:	f2c0 0337 	movt	r3, #55	; 0x37
  40f20c:	620b      	str	r3, [r1, #32]
  40f20e:	f04f 32ff 	mov.w	r2, #4294967295
      timeout = 0;
      while (!(pmcptr->PMC_SR & PMC_SR_MOSCXTS) && (++timeout < CLOCK_TIMEOUT));
  40f212:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40f214:	07db      	lsls	r3, r3, #31
  40f216:	d541      	bpl.n	40f29c <_Z10SystemInitv+0xb4>

    }

    /* Switch to 3-20MHz Xtal oscillator */
    pmcptr->CKGR_MOR = (0x37 << 16) | BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
  40f218:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40f21c:	f640 0309 	movw	r3, #2057	; 0x809
  40f220:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40f224:	f2c0 1337 	movt	r3, #311	; 0x137
  40f228:	620b      	str	r3, [r1, #32]
  40f22a:	f04f 32ff 	mov.w	r2, #4294967295
    timeout = 0;
    while (!(pmcptr->PMC_SR & PMC_SR_MOSCSELS) && (++timeout < CLOCK_TIMEOUT));
  40f22e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40f230:	03d8      	lsls	r0, r3, #15
  40f232:	d401      	bmi.n	40f238 <_Z10SystemInitv+0x50>
  40f234:	3a01      	subs	r2, #1
  40f236:	d1fa      	bne.n	40f22e <_Z10SystemInitv+0x46>

    pmcptr->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS) | PMC_MCKR_CSS_MAIN_CLK;
  40f238:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f23c:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40f240:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40f242:	f04f 32ff 	mov.w	r2, #4294967295
  40f246:	f021 0103 	bic.w	r1, r1, #3
  40f24a:	f041 0101 	orr.w	r1, r1, #1
  40f24e:	6319      	str	r1, [r3, #48]	; 0x30
    timeout = 0;
    while (!(pmcptr->PMC_SR & PMC_SR_MCKRDY) && (++timeout < CLOCK_TIMEOUT));
  40f250:	6e99      	ldr	r1, [r3, #104]	; 0x68
  40f252:	0709      	lsls	r1, r1, #28
  40f254:	d401      	bmi.n	40f25a <_Z10SystemInitv+0x72>
  40f256:	3a01      	subs	r2, #1
  40f258:	d1fa      	bne.n	40f250 <_Z10SystemInitv+0x68>

    /* Initialize PLLA 72 MHz */
    pmcptr->CKGR_PLLAR = BOARD_PLLR;
  40f25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f25e:	f44f 7281 	mov.w	r2, #258	; 0x102
  40f262:	f2c2 0205 	movt	r2, #8197	; 0x2005
  40f266:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40f26a:	629a      	str	r2, [r3, #40]	; 0x28
  40f26c:	f04f 32ff 	mov.w	r2, #4294967295
    timeout = 0;
    while (!(pmcptr->PMC_SR & PMC_SR_LOCKA) && (++timeout < CLOCK_TIMEOUT));
  40f270:	6e99      	ldr	r1, [r3, #104]	; 0x68
  40f272:	0788      	lsls	r0, r1, #30
  40f274:	d401      	bmi.n	40f27a <_Z10SystemInitv+0x92>
  40f276:	3a01      	subs	r2, #1
  40f278:	d1fa      	bne.n	40f270 <_Z10SystemInitv+0x88>
//    PMC->PMC_MCKR = (BOARD_MCKR & ~PMC_MCKR_CSS) | PMC_MCKR_CSS_MAIN_CLK;
//    timeout = 0;
//    while (!(PMC->PMC_SR & PMC_SR_MCKRDY) && (timeout++ < CLOCK_TIMEOUT));

		// Switch to PLLA as main clock 36MHz
  PMC->PMC_MCKR = BOARD_MCKR;
  40f27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f27e:	2202      	movs	r2, #2
  40f280:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40f284:	631a      	str	r2, [r3, #48]	; 0x30
  40f286:	2200      	movs	r2, #0
  timeout = 0;
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY) && (timeout++ < CLOCK_TIMEOUT));
  40f288:	6e99      	ldr	r1, [r3, #104]	; 0x68
  40f28a:	0709      	lsls	r1, r1, #28
  40f28c:	d401      	bmi.n	40f292 <_Z10SystemInitv+0xaa>
  40f28e:	3a01      	subs	r2, #1
  40f290:	d1fa      	bne.n	40f288 <_Z10SystemInitv+0xa0>
		// Max clock is 38 MHz (1.8V VVDCORE)
   EFC->EEFC_FMR = (1 << 8) ;

   /** Configure PMC */
  return BOARD_ConfigurePmc();
}
  40f292:	f44f 40a2 	mov.w	r0, #20736	; 0x5100
  40f296:	f2c0 2025 	movt	r0, #549	; 0x225
  40f29a:	4770      	bx	lr
    if(!(pmcptr->CKGR_MOR & CKGR_MOR_MOSCSEL))
    {

      pmcptr->CKGR_MOR = (0x37 << 16) | BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
      timeout = 0;
      while (!(pmcptr->PMC_SR & PMC_SR_MOSCXTS) && (++timeout < CLOCK_TIMEOUT));
  40f29c:	3a01      	subs	r2, #1
  40f29e:	d1b8      	bne.n	40f212 <_Z10SystemInitv+0x2a>
  40f2a0:	e7ba      	b.n	40f218 <_Z10SystemInitv+0x30>
  40f2a2:	bf00      	nop

0040f2a4 <_Z12ResetHandlerv>:
/*                                                                         */
/*  This function is used for the C runtime initialisation,                */
/*  for handling the .data and .bss segments.                              */
/***************************************************************************/
void ResetHandler (void)
{
  40f2a4:	b510      	push	{r4, lr}
  	 /*
  	  * Call the SystemInit code from CMSIS interface if available.
  	  * SystemInit is a week function which can be override
  	  * by an external function.
  	  */
  	m_freq = SystemInit();    
  40f2a6:	f7ff ff9f 	bl	40f1e8 <_Z10SystemInitv>
  	 * Copy the initialized data of the ".data" segment
  	 * from the flash to the are in the ram.
  	 */
  	pSrc  = &_etext;
  	pDest = &_sdata;
  	 while(pDest < &_edata)
  40f2aa:	4b10      	ldr	r3, [pc, #64]	; (40f2ec <_Z12ResetHandlerv+0x48>)
  40f2ac:	4910      	ldr	r1, [pc, #64]	; (40f2f0 <_Z12ResetHandlerv+0x4c>)
  	 *
  	 * Use the Vector Table Offset Register to determine:
  	 *  - if the vector table is in RAM or code memory
  	 *  - the vector table offset.    
  	 */
  	*((uint32_t*)0xE000ED08) = (uint32_t)&_stext;
  40f2ae:	f64e 5208 	movw	r2, #60680	; 0xed08
  40f2b2:	4c10      	ldr	r4, [pc, #64]	; (40f2f4 <_Z12ResetHandlerv+0x50>)
  40f2b4:	f2ce 0200 	movt	r2, #57344	; 0xe000
  	 * Copy the initialized data of the ".data" segment
  	 * from the flash to the are in the ram.
  	 */
  	pSrc  = &_etext;
  	pDest = &_sdata;
  	 while(pDest < &_edata)
  40f2b8:	428b      	cmp	r3, r1
  	 *
  	 * Use the Vector Table Offset Register to determine:
  	 *  - if the vector table is in RAM or code memory
  	 *  - the vector table offset.    
  	 */
  	*((uint32_t*)0xE000ED08) = (uint32_t)&_stext;
  40f2ba:	6014      	str	r4, [r2, #0]
  	 * Copy the initialized data of the ".data" segment
  	 * from the flash to the are in the ram.
  	 */
  	pSrc  = &_etext;
  	pDest = &_sdata;
  	 while(pDest < &_edata)
  40f2bc:	d206      	bcs.n	40f2cc <_Z12ResetHandlerv+0x28>
  40f2be:	4a0e      	ldr	r2, [pc, #56]	; (40f2f8 <_Z12ResetHandlerv+0x54>)
  	{
  	  *pDest++ = *pSrc++;
  40f2c0:	f852 4b04 	ldr.w	r4, [r2], #4
  40f2c4:	f843 4b04 	str.w	r4, [r3], #4
  	 * Copy the initialized data of the ".data" segment
  	 * from the flash to the are in the ram.
  	 */
  	pSrc  = &_etext;
  	pDest = &_sdata;
  	 while(pDest < &_edata)
  40f2c8:	428b      	cmp	r3, r1
  40f2ca:	d3f9      	bcc.n	40f2c0 <_Z12ResetHandlerv+0x1c>
   
  	 /*
  	  * Clear the ".bss" segment.
  	  */
  	pDest = &_sbss;
  	while(pDest < &_ebss)
  40f2cc:	4b0b      	ldr	r3, [pc, #44]	; (40f2fc <_Z12ResetHandlerv+0x58>)
  40f2ce:	4a0c      	ldr	r2, [pc, #48]	; (40f300 <_Z12ResetHandlerv+0x5c>)
  40f2d0:	4293      	cmp	r3, r2
  40f2d2:	d204      	bcs.n	40f2de <_Z12ResetHandlerv+0x3a>
  	{
			*pDest++ = 0;
  40f2d4:	2100      	movs	r1, #0
  40f2d6:	f843 1b04 	str.w	r1, [r3], #4
   
  	 /*
  	  * Clear the ".bss" segment.
  	  */
  	pDest = &_sbss;
  	while(pDest < &_ebss)
  40f2da:	4293      	cmp	r3, r2
  40f2dc:	d3fb      	bcc.n	40f2d6 <_Z12ResetHandlerv+0x32>
  	{
			*pDest++ = 0;
		}
		Master_frequency = m_freq ;
  40f2de:	4b09      	ldr	r3, [pc, #36]	; (40f304 <_Z12ResetHandlerv+0x60>)
  40f2e0:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
   
   /*
    * And now the main function can be called.
    * Scotty, energie...
    */       
  main();    
  40f2e4:	f000 f900 	bl	40f4e8 <main>
  40f2e8:	e7fe      	b.n	40f2e8 <_Z12ResetHandlerv+0x44>
  40f2ea:	bf00      	nop
  40f2ec:	20000000 	.word	0x20000000
  40f2f0:	20000104 	.word	0x20000104
  40f2f4:	00400000 	.word	0x00400000
  40f2f8:	00411464 	.word	0x00411464
  40f2fc:	20000108 	.word	0x20000108
  40f300:	20002178 	.word	0x20002178
  40f304:	20000108 	.word	0x20000108

0040f308 <memcpy>:
  40f308:	2a0f      	cmp	r2, #15
  40f30a:	b4f0      	push	{r4, r5, r6, r7}
  40f30c:	bf98      	it	ls
  40f30e:	4603      	movls	r3, r0
  40f310:	d931      	bls.n	40f376 <memcpy+0x6e>
  40f312:	ea41 0300 	orr.w	r3, r1, r0
  40f316:	079b      	lsls	r3, r3, #30
  40f318:	d136      	bne.n	40f388 <memcpy+0x80>
  40f31a:	460c      	mov	r4, r1
  40f31c:	4603      	mov	r3, r0
  40f31e:	4615      	mov	r5, r2
  40f320:	6826      	ldr	r6, [r4, #0]
  40f322:	3d10      	subs	r5, #16
  40f324:	601e      	str	r6, [r3, #0]
  40f326:	6866      	ldr	r6, [r4, #4]
  40f328:	605e      	str	r6, [r3, #4]
  40f32a:	68a6      	ldr	r6, [r4, #8]
  40f32c:	609e      	str	r6, [r3, #8]
  40f32e:	68e6      	ldr	r6, [r4, #12]
  40f330:	3410      	adds	r4, #16
  40f332:	60de      	str	r6, [r3, #12]
  40f334:	3310      	adds	r3, #16
  40f336:	2d0f      	cmp	r5, #15
  40f338:	d8f2      	bhi.n	40f320 <memcpy+0x18>
  40f33a:	f1a2 0410 	sub.w	r4, r2, #16
  40f33e:	f002 020f 	and.w	r2, r2, #15
  40f342:	f024 040f 	bic.w	r4, r4, #15
  40f346:	3410      	adds	r4, #16
  40f348:	2a03      	cmp	r2, #3
  40f34a:	eb00 0304 	add.w	r3, r0, r4
  40f34e:	4421      	add	r1, r4
  40f350:	d911      	bls.n	40f376 <memcpy+0x6e>
  40f352:	460e      	mov	r6, r1
  40f354:	461d      	mov	r5, r3
  40f356:	4614      	mov	r4, r2
  40f358:	f856 7b04 	ldr.w	r7, [r6], #4
  40f35c:	3c04      	subs	r4, #4
  40f35e:	2c03      	cmp	r4, #3
  40f360:	f845 7b04 	str.w	r7, [r5], #4
  40f364:	d8f8      	bhi.n	40f358 <memcpy+0x50>
  40f366:	1f14      	subs	r4, r2, #4
  40f368:	f002 0203 	and.w	r2, r2, #3
  40f36c:	f024 0403 	bic.w	r4, r4, #3
  40f370:	3404      	adds	r4, #4
  40f372:	1909      	adds	r1, r1, r4
  40f374:	191b      	adds	r3, r3, r4
  40f376:	b12a      	cbz	r2, 40f384 <memcpy+0x7c>
  40f378:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f37c:	3a01      	subs	r2, #1
  40f37e:	f803 4b01 	strb.w	r4, [r3], #1
  40f382:	d1f9      	bne.n	40f378 <memcpy+0x70>
  40f384:	bcf0      	pop	{r4, r5, r6, r7}
  40f386:	4770      	bx	lr
  40f388:	4603      	mov	r3, r0
  40f38a:	e7f5      	b.n	40f378 <memcpy+0x70>

0040f38c <memmove>:
  40f38c:	4288      	cmp	r0, r1
  40f38e:	b4f0      	push	{r4, r5, r6, r7}
  40f390:	d912      	bls.n	40f3b8 <memmove+0x2c>
  40f392:	188d      	adds	r5, r1, r2
  40f394:	42a8      	cmp	r0, r5
  40f396:	d20f      	bcs.n	40f3b8 <memmove+0x2c>
  40f398:	b162      	cbz	r2, 40f3b4 <memmove+0x28>
  40f39a:	4613      	mov	r3, r2
  40f39c:	1882      	adds	r2, r0, r2
  40f39e:	4259      	negs	r1, r3
  40f3a0:	186d      	adds	r5, r5, r1
  40f3a2:	1852      	adds	r2, r2, r1
  40f3a4:	18ec      	adds	r4, r5, r3
  40f3a6:	18d1      	adds	r1, r2, r3
  40f3a8:	3b01      	subs	r3, #1
  40f3aa:	f814 4c01 	ldrb.w	r4, [r4, #-1]
  40f3ae:	f801 4c01 	strb.w	r4, [r1, #-1]
  40f3b2:	d1f7      	bne.n	40f3a4 <memmove+0x18>
  40f3b4:	bcf0      	pop	{r4, r5, r6, r7}
  40f3b6:	4770      	bx	lr
  40f3b8:	2a0f      	cmp	r2, #15
  40f3ba:	bf98      	it	ls
  40f3bc:	4603      	movls	r3, r0
  40f3be:	d931      	bls.n	40f424 <memmove+0x98>
  40f3c0:	ea41 0300 	orr.w	r3, r1, r0
  40f3c4:	079b      	lsls	r3, r3, #30
  40f3c6:	d13c      	bne.n	40f442 <memmove+0xb6>
  40f3c8:	460c      	mov	r4, r1
  40f3ca:	4603      	mov	r3, r0
  40f3cc:	4615      	mov	r5, r2
  40f3ce:	6826      	ldr	r6, [r4, #0]
  40f3d0:	3d10      	subs	r5, #16
  40f3d2:	601e      	str	r6, [r3, #0]
  40f3d4:	6866      	ldr	r6, [r4, #4]
  40f3d6:	605e      	str	r6, [r3, #4]
  40f3d8:	68a6      	ldr	r6, [r4, #8]
  40f3da:	609e      	str	r6, [r3, #8]
  40f3dc:	68e6      	ldr	r6, [r4, #12]
  40f3de:	3410      	adds	r4, #16
  40f3e0:	60de      	str	r6, [r3, #12]
  40f3e2:	3310      	adds	r3, #16
  40f3e4:	2d0f      	cmp	r5, #15
  40f3e6:	d8f2      	bhi.n	40f3ce <memmove+0x42>
  40f3e8:	f1a2 0410 	sub.w	r4, r2, #16
  40f3ec:	f002 020f 	and.w	r2, r2, #15
  40f3f0:	f024 040f 	bic.w	r4, r4, #15
  40f3f4:	3410      	adds	r4, #16
  40f3f6:	2a03      	cmp	r2, #3
  40f3f8:	eb00 0304 	add.w	r3, r0, r4
  40f3fc:	4421      	add	r1, r4
  40f3fe:	d911      	bls.n	40f424 <memmove+0x98>
  40f400:	460e      	mov	r6, r1
  40f402:	461d      	mov	r5, r3
  40f404:	4614      	mov	r4, r2
  40f406:	f856 7b04 	ldr.w	r7, [r6], #4
  40f40a:	3c04      	subs	r4, #4
  40f40c:	2c03      	cmp	r4, #3
  40f40e:	f845 7b04 	str.w	r7, [r5], #4
  40f412:	d8f8      	bhi.n	40f406 <memmove+0x7a>
  40f414:	1f14      	subs	r4, r2, #4
  40f416:	f002 0203 	and.w	r2, r2, #3
  40f41a:	f024 0403 	bic.w	r4, r4, #3
  40f41e:	3404      	adds	r4, #4
  40f420:	1909      	adds	r1, r1, r4
  40f422:	191b      	adds	r3, r3, r4
  40f424:	2a00      	cmp	r2, #0
  40f426:	d0c5      	beq.n	40f3b4 <memmove+0x28>
  40f428:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f42c:	3a01      	subs	r2, #1
  40f42e:	f803 4b01 	strb.w	r4, [r3], #1
  40f432:	d0bf      	beq.n	40f3b4 <memmove+0x28>
  40f434:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f438:	3a01      	subs	r2, #1
  40f43a:	f803 4b01 	strb.w	r4, [r3], #1
  40f43e:	d1f3      	bne.n	40f428 <memmove+0x9c>
  40f440:	e7b8      	b.n	40f3b4 <memmove+0x28>
  40f442:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f446:	4603      	mov	r3, r0
  40f448:	3a01      	subs	r2, #1
  40f44a:	f803 4b01 	strb.w	r4, [r3], #1
  40f44e:	d1f1      	bne.n	40f434 <memmove+0xa8>
  40f450:	e7b0      	b.n	40f3b4 <memmove+0x28>
  40f452:	bf00      	nop

0040f454 <memset>:
  40f454:	f010 0f03 	tst.w	r0, #3
  40f458:	4603      	mov	r3, r0
  40f45a:	b470      	push	{r4, r5, r6}
  40f45c:	d041      	beq.n	40f4e2 <memset+0x8e>
  40f45e:	2a00      	cmp	r2, #0
  40f460:	d03d      	beq.n	40f4de <memset+0x8a>
  40f462:	b2ce      	uxtb	r6, r1
  40f464:	e001      	b.n	40f46a <memset+0x16>
  40f466:	2a00      	cmp	r2, #0
  40f468:	d039      	beq.n	40f4de <memset+0x8a>
  40f46a:	f803 6b01 	strb.w	r6, [r3], #1
  40f46e:	1e54      	subs	r4, r2, #1
  40f470:	f013 0f03 	tst.w	r3, #3
  40f474:	4622      	mov	r2, r4
  40f476:	461d      	mov	r5, r3
  40f478:	d1f5      	bne.n	40f466 <memset+0x12>
  40f47a:	2c03      	cmp	r4, #3
  40f47c:	d929      	bls.n	40f4d2 <memset+0x7e>
  40f47e:	b2ca      	uxtb	r2, r1
  40f480:	2c0f      	cmp	r4, #15
  40f482:	bf84      	itt	hi
  40f484:	462b      	movhi	r3, r5
  40f486:	4626      	movhi	r6, r4
  40f488:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
  40f48c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
  40f490:	d911      	bls.n	40f4b6 <memset+0x62>
  40f492:	3e10      	subs	r6, #16
  40f494:	601a      	str	r2, [r3, #0]
  40f496:	605a      	str	r2, [r3, #4]
  40f498:	609a      	str	r2, [r3, #8]
  40f49a:	60da      	str	r2, [r3, #12]
  40f49c:	3310      	adds	r3, #16
  40f49e:	2e0f      	cmp	r6, #15
  40f4a0:	d8f7      	bhi.n	40f492 <memset+0x3e>
  40f4a2:	f1a4 0310 	sub.w	r3, r4, #16
  40f4a6:	f004 040f 	and.w	r4, r4, #15
  40f4aa:	f023 030f 	bic.w	r3, r3, #15
  40f4ae:	3310      	adds	r3, #16
  40f4b0:	2c03      	cmp	r4, #3
  40f4b2:	441d      	add	r5, r3
  40f4b4:	d90d      	bls.n	40f4d2 <memset+0x7e>
  40f4b6:	462e      	mov	r6, r5
  40f4b8:	4623      	mov	r3, r4
  40f4ba:	3b04      	subs	r3, #4
  40f4bc:	f846 2b04 	str.w	r2, [r6], #4
  40f4c0:	2b03      	cmp	r3, #3
  40f4c2:	d8fa      	bhi.n	40f4ba <memset+0x66>
  40f4c4:	1f23      	subs	r3, r4, #4
  40f4c6:	f004 0403 	and.w	r4, r4, #3
  40f4ca:	f023 0303 	bic.w	r3, r3, #3
  40f4ce:	3304      	adds	r3, #4
  40f4d0:	18ed      	adds	r5, r5, r3
  40f4d2:	b2c9      	uxtb	r1, r1
  40f4d4:	b11c      	cbz	r4, 40f4de <memset+0x8a>
  40f4d6:	3c01      	subs	r4, #1
  40f4d8:	f805 1b01 	strb.w	r1, [r5], #1
  40f4dc:	d1fb      	bne.n	40f4d6 <memset+0x82>
  40f4de:	bc70      	pop	{r4, r5, r6}
  40f4e0:	4770      	bx	lr
  40f4e2:	4605      	mov	r5, r0
  40f4e4:	4614      	mov	r4, r2
  40f4e6:	e7c8      	b.n	40f47a <memset+0x26>

0040f4e8 <main>:
}

#endif

int main(void)
{
  40f4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  board_init();
  40f4ec:	f7f6 fad4 	bl	405a98 <_Z10board_initv>
      *p-- = 0x55 ;
    }
  }
#endif

  g_menuStack[0] = menuMainView;
  40f4f0:	4e7e      	ldr	r6, [pc, #504]	; (40f6ec <main+0x204>)

int main(void)
{
  board_init();

  lcd_init();
  40f4f2:	f7f4 f947 	bl	403784 <_Z8lcd_initv>
      *p-- = 0x55 ;
    }
  }
#endif

  g_menuStack[0] = menuMainView;
  40f4f6:	4b7e      	ldr	r3, [pc, #504]	; (40f6f0 <main+0x208>)
  init_rotary_sw();
#endif

  eeReadAll();

  uint8_t cModel = g_eeGeneral.currModel;
  40f4f8:	4c7e      	ldr	r4, [pc, #504]	; (40f6f4 <main+0x20c>)
      *p-- = 0x55 ;
    }
  }
#endif

  g_menuStack[0] = menuMainView;
  40f4fa:	f8c6 3a98 	str.w	r3, [r6, #2712]	; 0xa98
  g_menuStack[1] = menuProcModelSelect;
  40f4fe:	4b7e      	ldr	r3, [pc, #504]	; (40f6f8 <main+0x210>)

  lcdSetRefVolt(25);
  40f500:	2019      	movs	r0, #25
    }
  }
#endif

  g_menuStack[0] = menuMainView;
  g_menuStack[1] = menuProcModelSelect;
  40f502:	f8c6 3a9c 	str.w	r3, [r6, #2716]	; 0xa9c

  lcdSetRefVolt(25);
  40f506:	f7f4 fb13 	bl	403b30 <_Z13lcdSetRefVolth>

  sei(); // interrupts needed for FRSKY_Init and eeReadAll.

#if defined (FRSKY) and !defined (DSM2_SERIAL)
  FRSKY_Init();
  40f50a:	f7f5 fa1f 	bl	40494c <_Z10FRSKY_Initv>

#ifdef MENU_ROTARY_SW
  init_rotary_sw();
#endif

  eeReadAll();
  40f50e:	f7ff fc9d 	bl	40ee4c <_Z9eeReadAllv>

  uint8_t cModel = g_eeGeneral.currModel;

#if defined(PCBARM)
  set_volume(g_eeGeneral.speakerVolume);
  40f512:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
  init_rotary_sw();
#endif

  eeReadAll();

  uint8_t cModel = g_eeGeneral.currModel;
  40f516:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51

#if defined(PCBARM)
  set_volume(g_eeGeneral.speakerVolume);
  40f51a:	f7f6 fa4d 	bl	4059b8 <_Z10set_volumeh>
  PWM->PWM_CH_NUM[0].PWM_CDTYUPD = g_eeGeneral.backlightBright;
  40f51e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
  40f522:	2300      	movs	r3, #0
  40f524:	f2c4 0302 	movt	r3, #16386	; 0x4002
  40f528:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#if defined(PCBV4)
  if (MCUSR != (1 << PORF) && !g_eeGeneral.unexpectedShutdown)
#elif defined(PCBSTD)
  if (MCUCSR != (1 << PORF))
#else
  if (!g_eeGeneral.unexpectedShutdown)
  40f52c:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
  40f530:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40f534:	b2db      	uxtb	r3, r3
  40f536:	bb23      	cbnz	r3, 40f582 <main+0x9a>
#endif
   {
#ifdef SPLASH
    // TODO rather use another Model Parameter
    if (g_model.protocol != PROTO_DSM2)
  40f538:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
  40f53c:	f003 0307 	and.w	r3, r3, #7
  40f540:	2b04      	cmp	r3, #4
  40f542:	d001      	beq.n	40f548 <main+0x60>
      doSplash();
  40f544:	f7f5 fbac 	bl	404ca0 <_Z8doSplashv>

#if !defined(PCBARM)
    checkLowEEPROM();
#endif

    getADC_single();
  40f548:	f7f1 fd96 	bl	401078 <_Z13getADC_singlev>
    checkTHR();
  40f54c:	f7f7 ffc8 	bl	4074e0 <_Z8checkTHRv>

    checkSwitches();
  40f550:	f7f7 ff8e 	bl	407470 <_Z13checkSwitchesv>
    checkAlarm();
  40f554:	f7f7 ff7a 	bl	40744c <_Z10checkAlarmv>
  }

#if defined(PCBARM) || defined(PCBV4)
  if (!g_eeGeneral.unexpectedShutdown) {
  40f558:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
  40f55c:	4b65      	ldr	r3, [pc, #404]	; (40f6f4 <main+0x20c>)
  40f55e:	f002 0180 	and.w	r1, r2, #128	; 0x80
  40f562:	b2c9      	uxtb	r1, r1
  40f564:	b969      	cbnz	r1, 40f582 <main+0x9a>
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40f566:	f893 09a8 	ldrb.w	r0, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40f56a:	f8b3 19aa 	ldrh.w	r1, [r3, #2474]	; 0x9aa
    g_eeGeneral.unexpectedShutdown = 1;
  40f56e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40f572:	f040 0001 	orr.w	r0, r0, #1
  40f576:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  40f57a:	f883 09a8 	strb.w	r0, [r3, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40f57e:	f8a3 19ac 	strh.w	r1, [r3, #2476]	; 0x9ac
    eeDirty(EE_GENERAL);
  }
#endif

  clearKeyEvents(); //make sure no keys are down before proceeding
  40f582:	f7f1 fcf5 	bl	400f70 <_Z14clearKeyEventsv>

  lcdSetRefVolt(g_eeGeneral.contrast);
  40f586:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
  40f58a:	f7f4 fad1 	bl	403b30 <_Z13lcdSetRefVolth>
  g_LightOffCounter = g_eeGeneral.lightAutoOff*500; //turn on light for x seconds - no need to press key Issue 152
  40f58e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c

  if(cModel!=g_eeGeneral.currModel) eeDirty(EE_GENERAL); // if model was quick-selected, make sure it sticks
  40f592:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
#endif

  clearKeyEvents(); //make sure no keys are down before proceeding

  lcdSetRefVolt(g_eeGeneral.contrast);
  g_LightOffCounter = g_eeGeneral.lightAutoOff*500; //turn on light for x seconds - no need to press key Issue 152
  40f596:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  }
#endif

  clearKeyEvents(); //make sure no keys are down before proceeding

  lcdSetRefVolt(g_eeGeneral.contrast);
  40f59a:	4d56      	ldr	r5, [pc, #344]	; (40f6f4 <main+0x20c>)
  g_LightOffCounter = g_eeGeneral.lightAutoOff*500; //turn on light for x seconds - no need to press key Issue 152
  40f59c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40f5a0:	009b      	lsls	r3, r3, #2

  if(cModel!=g_eeGeneral.currModel) eeDirty(EE_GENERAL); // if model was quick-selected, make sure it sticks
  40f5a2:	42ba      	cmp	r2, r7
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40f5a4:	bf18      	it	ne
  40f5a6:	f895 29a8 	ldrbne.w	r2, [r5, #2472]	; 0x9a8
#endif

  clearKeyEvents(); //make sure no keys are down before proceeding

  lcdSetRefVolt(g_eeGeneral.contrast);
  g_LightOffCounter = g_eeGeneral.lightAutoOff*500; //turn on light for x seconds - no need to press key Issue 152
  40f5aa:	f8a6 3b16 	strh.w	r3, [r6, #2838]	; 0xb16
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40f5ae:	bf1f      	itttt	ne
  40f5b0:	f8b5 39aa 	ldrhne.w	r3, [r5, #2474]	; 0x9aa
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40f5b4:	f042 0201 	orrne.w	r2, r2, #1
  40f5b8:	f885 29a8 	strbne.w	r2, [r5, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40f5bc:	f8a5 39ac 	strhne.w	r3, [r5, #2476]	; 0x9ac

  if(cModel!=g_eeGeneral.currModel) eeDirty(EE_GENERAL); // if model was quick-selected, make sure it sticks


#if defined(PCBARM)
  start_ppm_capture();
  40f5c0:	f7f0 ff56 	bl	400470 <_Z17start_ppm_capturev>
  // TODO inside startPulses?
#endif

  startPulses();
  40f5c4:	f7f1 fea8 	bl	401318 <_Z11startPulsesv>

  if (check_soft_power() <= e_power_trainer) {
  40f5c8:	f7f0 fe5c 	bl	400284 <_Z16check_soft_powerv>
  40f5cc:	2801      	cmp	r0, #1
    wdt_enable(WDTO_500MS);
  40f5ce:	bf9f      	itttt	ls
  40f5d0:	f241 4350 	movwls	r3, #5200	; 0x1450
  40f5d4:	f642 72ff 	movwls	r2, #12287	; 0x2fff
  40f5d8:	f2c4 030e 	movtls	r3, #16398	; 0x400e
  40f5dc:	f6c3 72ff 	movtls	r2, #16383	; 0x3fff
    getADC_bandgap();
#endif

    if(heartbeat == 0x3)
    {
      wdt_reset();
  40f5e0:	f241 4750 	movw	r7, #5200	; 0x1450
#endif

  startPulses();

  if (check_soft_power() <= e_power_trainer) {
    wdt_enable(WDTO_500MS);
  40f5e4:	bf98      	it	ls
  40f5e6:	605a      	strls	r2, [r3, #4]
    else {
      getADC_single() ;
    }

#if defined(PCBARM) && defined(REVB)
    Current_analogue = ( Current_analogue * 31 + s_anaFilt[8] ) >> 5 ;
  40f5e8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 40f6f4 <main+0x20c>
    t0 = getTmr2MHz() - t0;
#else
    t0 = getTmr16KHz() - t0;
#endif

    if (t0 > g_timeMain) g_timeMain = t0 ;
  40f5ec:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 40f6ec <main+0x204>
    getADC_bandgap();
#endif

    if(heartbeat == 0x3)
    {
      wdt_reset();
  40f5f0:	f2c4 070e 	movt	r7, #16398	; 0x400e
  40f5f4:	e008      	b.n	40f608 <main+0x120>
extern int8_t s_traceCnt;

extern int8_t *s_trimPtr[NUM_STICKS];

#if defined(PCBARM)
static inline uint16_t getTmr2MHz() { return TC1->TC_CHANNEL[0].TC_CV; }
  40f5f6:	691a      	ldr	r2, [r3, #16]
    t0 = getTmr2MHz() - t0;
#else
    t0 = getTmr16KHz() - t0;
#endif

    if (t0 > g_timeMain) g_timeMain = t0 ;
  40f5f8:	f8b6 3c2a 	ldrh.w	r3, [r6, #3114]	; 0xc2a
    {
      wdt_reset();
      heartbeat = 0;
    }
#if defined(PCBARM)
    t0 = getTmr2MHz() - t0;
  40f5fc:	1b55      	subs	r5, r2, r5
  40f5fe:	b2ad      	uxth	r5, r5
#else
    t0 = getTmr16KHz() - t0;
#endif

    if (t0 > g_timeMain) g_timeMain = t0 ;
  40f600:	42ab      	cmp	r3, r5
  40f602:	bf38      	it	cc
  40f604:	f8a9 5c2a 	strhcc.w	r5, [r9, #3114]	; 0xc2a
  uint8_t shutdown_state = 0;
#endif

  while(1) {
#if defined(PCBARM) || defined(PCBV4)
    if ((shutdown_state=check_soft_power()) > e_power_trainer)
  40f608:	f7f0 fe3c 	bl	400284 <_Z16check_soft_powerv>
  40f60c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40f610:	2801      	cmp	r0, #1
  40f612:	4605      	mov	r5, r0
  40f614:	f2c4 0301 	movt	r3, #16385	; 0x4001
  40f618:	d82b      	bhi.n	40f672 <main+0x18a>
  40f61a:	691d      	ldr	r5, [r3, #16]
    uint16_t t0 = getTmr2MHz();
#else
    uint16_t t0 = getTmr16KHz();
#endif

    if (g_eeGeneral.filterInput == 1) {
  40f61c:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
  40f620:	b2ad      	uxth	r5, r5
  40f622:	2b01      	cmp	r3, #1
  40f624:	d022      	beq.n	40f66c <main+0x184>
      getADC_filt() ;
    }
    else if ( g_eeGeneral.filterInput == 2) {
  40f626:	2b02      	cmp	r3, #2
  40f628:	d01d      	beq.n	40f666 <main+0x17e>
      getADC_osmp() ;
    }
    else {
      getADC_single() ;
  40f62a:	f7f1 fd25 	bl	401078 <_Z13getADC_singlev>
    }

#if defined(PCBARM) && defined(REVB)
    Current_analogue = ( Current_analogue * 31 + s_anaFilt[8] ) >> 5 ;
  40f62e:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
  40f632:	f8b4 29c0 	ldrh.w	r2, [r4, #2496]	; 0x9c0
  40f636:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
  40f63a:	189b      	adds	r3, r3, r2
  40f63c:	115b      	asrs	r3, r3, #5
  40f63e:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
    ADMUX = 0x03|ADC_VREF_TYPE; // Switch MUX to internal reference
#elif defined(PCBSTD)
    ADMUX = 0x1E|ADC_VREF_TYPE; // Switch MUX to internal reference
#endif
  
    perMain();
  40f642:	f7fd fff3 	bl	40d62c <_Z7perMainv>
    // Bandgap has had plenty of time to settle...
#if not defined(PCBARM)
    getADC_bandgap();
#endif

    if(heartbeat == 0x3)
  40f646:	f894 2a81 	ldrb.w	r2, [r4, #2689]	; 0xa81
  40f64a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40f64e:	2a03      	cmp	r2, #3
  40f650:	f2c4 0301 	movt	r3, #16385	; 0x4001
  40f654:	d1cf      	bne.n	40f5f6 <main+0x10e>
    {
      wdt_reset();
  40f656:	2201      	movs	r2, #1
  40f658:	f2ca 5200 	movt	r2, #42240	; 0xa500
  40f65c:	603a      	str	r2, [r7, #0]
      heartbeat = 0;
  40f65e:	2200      	movs	r2, #0
  40f660:	f888 2a81 	strb.w	r2, [r8, #2689]	; 0xa81
  40f664:	e7c7      	b.n	40f5f6 <main+0x10e>

    if (g_eeGeneral.filterInput == 1) {
      getADC_filt() ;
    }
    else if ( g_eeGeneral.filterInput == 2) {
      getADC_osmp() ;
  40f666:	f7f1 fcdf 	bl	401028 <_Z11getADC_osmpv>
  40f66a:	e7e0      	b.n	40f62e <main+0x146>
#else
    uint16_t t0 = getTmr16KHz();
#endif

    if (g_eeGeneral.filterInput == 1) {
      getADC_filt() ;
  40f66c:	f7f1 fcb6 	bl	400fdc <_Z11getADC_filtv>
  40f670:	e7dd      	b.n	40f62e <main+0x146>
    if (t0 > g_timeMain) g_timeMain = t0 ;
  }

#if defined(PCBARM) || defined(PCBV4)
  // Time to switch off
  lcd_clear() ;
  40f672:	f7f2 ffad 	bl	4025d0 <_Z9lcd_clearv>
  displayPopup(STR_SHUTDOWN);
  40f676:	4821      	ldr	r0, [pc, #132]	; (40f6fc <main+0x214>)
  40f678:	f7f4 fb50 	bl	403d1c <_Z12displayPopupPKc>
  g_eeGeneral.unexpectedShutdown=0;
  40f67c:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40f680:	f894 19a8 	ldrb.w	r1, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40f684:	f8b4 29aa 	ldrh.w	r2, [r4, #2474]	; 0x9aa
  40f688:	f36f 13c7 	bfc	r3, #7, #1
#define EE_WAIT		0
#define EE_NO_WAIT	1

void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
  40f68c:	f041 0101 	orr.w	r1, r1, #1
  eeDirty(EE_GENERAL);
  eeCheck(true);
  40f690:	2001      	movs	r0, #1

#if defined(PCBARM) || defined(PCBV4)
  // Time to switch off
  lcd_clear() ;
  displayPopup(STR_SHUTDOWN);
  g_eeGeneral.unexpectedShutdown=0;
  40f692:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  40f696:	f884 19a8 	strb.w	r1, [r4, #2472]	; 0x9a8
  s_eeDirtyTime10ms = get_tmr10ms() ;
  40f69a:	f8a4 29ac 	strh.w	r2, [r4, #2476]	; 0x9ac
  eeDirty(EE_GENERAL);
  eeCheck(true);
  40f69e:	f7f2 fe3d 	bl	40231c <_Z7eeCheckb>
  lcd_clear() ;
  40f6a2:	f7f2 ff95 	bl	4025d0 <_Z9lcd_clearv>
  refreshDisplay() ;
  40f6a6:	f7f4 faa1 	bl	403bec <_Z14refreshDisplayv>
  soft_power_off();            // Only turn power off if necessary
  40f6aa:	f7f0 ff0f 	bl	4004cc <_Z14soft_power_offv>
#endif

#if defined(PCBARM)
  if (shutdown_state == e_power_usb) {
  40f6ae:	2d02      	cmp	r5, #2
  40f6b0:	d005      	beq.n	40f6be <main+0x1d6>
    usb_mode();
  }
#endif

#if defined(PCBARM) || defined(PCBV4)
  lcdSetRefVolt(0); // TODO before soft_power_off?
  40f6b2:	2000      	movs	r0, #0
  40f6b4:	f7f4 fa3c 	bl	403b30 <_Z13lcdSetRefVolth>
#if defined(PCBV4)
  //never return from main() - there is no code to return back, if any daelays occurs in physical power it does dead loop.
  wdt_disable();
  for(;;){}
#endif
}
  40f6b8:	2000      	movs	r0, #0
  40f6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  soft_power_off();            // Only turn power off if necessary
#endif

#if defined(PCBARM)
  if (shutdown_state == e_power_usb) {
    lcd_putcAtt( 48, 24, 'U', DBLSIZE ) ;
  40f6be:	2030      	movs	r0, #48	; 0x30
  40f6c0:	2118      	movs	r1, #24
  40f6c2:	2255      	movs	r2, #85	; 0x55
  40f6c4:	2304      	movs	r3, #4
  40f6c6:	f7f2 ffd1 	bl	40266c <_Z11lcd_putcAtthhhh>
    lcd_putcAtt( 60, 24, 'S', DBLSIZE ) ;
  40f6ca:	203c      	movs	r0, #60	; 0x3c
  40f6cc:	2118      	movs	r1, #24
  40f6ce:	2253      	movs	r2, #83	; 0x53
  40f6d0:	2304      	movs	r3, #4
  40f6d2:	f7f2 ffcb 	bl	40266c <_Z11lcd_putcAtthhhh>
    lcd_putcAtt( 72, 24, 'B', DBLSIZE ) ;
  40f6d6:	2048      	movs	r0, #72	; 0x48
  40f6d8:	2118      	movs	r1, #24
  40f6da:	2242      	movs	r2, #66	; 0x42
  40f6dc:	2304      	movs	r3, #4
  40f6de:	f7f2 ffc5 	bl	40266c <_Z11lcd_putcAtthhhh>
    refreshDisplay() ;
  40f6e2:	f7f4 fa83 	bl	403bec <_Z14refreshDisplayv>
    usb_mode();
  40f6e6:	f7ff fd1d 	bl	40f124 <_Z8usb_modev>
  40f6ea:	e7e2      	b.n	40f6b2 <main+0x1ca>
  40f6ec:	20001200 	.word	0x20001200
  40f6f0:	0040c6a1 	.word	0x0040c6a1
  40f6f4:	20000108 	.word	0x20000108
  40f6f8:	0040e665 	.word	0x0040e665
  40f6fc:	00410f78 	.word	0x00410f78

0040f700 <_GLOBAL__sub_I_Master_frequency>:
// --


audioQueue::audioQueue()
{
  toneTimeLeft = 0;
  40f700:	f241 2300 	movw	r3, #4608	; 0x1200
  40f704:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40f708:	2200      	movs	r2, #0
  40f70a:	f883 2b2c 	strb.w	r2, [r3, #2860]	; 0xb2c
  tonePause = 0;
  40f70e:	f883 2b2d 	strb.w	r2, [r3, #2861]	; 0xb2d

  t_queueRidx = 0;
  40f712:	f883 2b28 	strb.w	r2, [r3, #2856]	; 0xb28
  t_queueWidx = 0;
  40f716:	f883 2b29 	strb.w	r2, [r3, #2857]	; 0xb29



hapticQueue::hapticQueue()
{
  buzzTimeLeft = 0;
  40f71a:	f883 2b1a 	strb.w	r2, [r3, #2842]	; 0xb1a
  buzzPause = 0;
  40f71e:	f883 2b1b 	strb.w	r2, [r3, #2843]	; 0xb1b

  t_queueRidx = 0;
  40f722:	f883 2b18 	strb.w	r2, [r3, #2840]	; 0xb18
  t_queueWidx = 0;
  40f726:	f883 2b19 	strb.w	r2, [r3, #2841]	; 0xb19

  hapticTick = 0;
  40f72a:	f883 2b1c 	strb.w	r2, [r3, #2844]	; 0xb1c
  40f72e:	4770      	bx	lr

0040f730 <bchout_ar>:
  40f730:	1e1b 2d27 3936 4e4b 6c63 7872 8d87 9c93     ..'-69KNclrx....
  40f740:	b4b1 c9c6 d8d2 e4e1                         ........

0040f748 <_ZL9s_charTab>:
  40f748:	2d5f 2c2e 0000 0000                         _-.,....

0040f750 <_ZZ5anaInhE8crossAna>:
  40f750:	0501 0007 0604 0302 0008 0000               ............

0040f75c <_ZL8CRCTable>:
  40f75c:	0000 1189 2312 329b 4624 57ad 6536 74bf     .....#.2$F.W6e.t
  40f76c:	8c48 9dc1 af5a bed3 ca6c dbe5 e97e f8f7     H...Z...l...~...
  40f77c:	1081 0108 3393 221a 56a5 472c 75b7 643e     .....3.".V,G.u>d
  40f78c:	9cc9 8d40 bfdb ae52 daed cb64 f9ff e876     ..@...R...d...v.
  40f79c:	2102 308b 0210 1399 6726 76af 4434 55bd     .!.0....&g.v4D.U
  40f7ac:	ad4a bcc3 8e58 9fd1 eb6e fae7 c87c d9f5     J...X...n...|...
  40f7bc:	3183 200a 1291 0318 77a7 662e 54b5 453c     .1. .....w.f.T<E
  40f7cc:	bdcb ac42 9ed9 8f50 fbef ea66 d8fd c974     ..B...P...f...t.
  40f7dc:	4204 538d 6116 709f 0420 15a9 2732 36bb     .B.S.a.p ...2'.6
  40f7ec:	ce4c dfc5 ed5e fcd7 8868 99e1 ab7a baf3     L...^...h...z...
  40f7fc:	5285 430c 7197 601e 14a1 0528 37b3 263a     .R.C.q.`..(..7:&
  40f80c:	decd cf44 fddf ec56 98e9 8960 bbfb aa72     ..D...V...`...r.
  40f81c:	6306 728f 4014 519d 2522 34ab 0630 17b9     .c.r.@.Q"%.40...
  40f82c:	ef4e fec7 cc5c ddd5 a96a b8e3 8a78 9bf1     N...\...j...x...
  40f83c:	7387 620e 5095 411c 35a3 242a 16b1 0738     .s.b.P.A.5*$..8.
  40f84c:	ffcf ee46 dcdd cd54 b9eb a862 9af9 8b70     ..F...T...b...p.
  40f85c:	8408 9581 a71a b693 c22c d3a5 e13e f0b7     ........,...>...
  40f86c:	0840 19c9 2b52 3adb 4e64 5fed 6d76 7cff     @...R+.:dN._vm.|
  40f87c:	9489 8500 b79b a612 d2ad c324 f1bf e036     ..........$...6.
  40f88c:	18c1 0948 3bd3 2a5a 5ee5 4f6c 7df7 6c7e     ..H..;Z*.^lO.}~l
  40f89c:	a50a b483 8618 9791 e32e f2a7 c03c d1b5     ............<...
  40f8ac:	2942 38cb 0a50 1bd9 6f66 7eef 4c74 5dfd     B).8P...fo.~tL.]
  40f8bc:	b58b a402 9699 8710 f3af e226 d0bd c134     ..........&...4.
  40f8cc:	39c3 284a 1ad1 0b58 7fe7 6e6e 5cf5 4d7c     .9J(..X...nn.\|M
  40f8dc:	c60c d785 e51e f497 8028 91a1 a33a b2b3     ........(...:...
  40f8ec:	4a44 5bcd 6956 78df 0c60 1de9 2f72 3efb     DJ.[Vi.x`...r/.>
  40f8fc:	d68d c704 f59f e416 90a9 8120 b3bb a232     .......... ...2.
  40f90c:	5ac5 4b4c 79d7 685e 1ce1 0d68 3ff3 2e7a     .ZLK.y^h..h..?z.
  40f91c:	e70e f687 c41c d595 a12a b0a3 8238 93b1     ........*...8...
  40f92c:	6b46 7acf 4854 59dd 2d62 3ceb 0e70 1ff9     Fk.zTH.Yb-.<p...
  40f93c:	f78f e606 d49d c514 b1ab a022 92b9 8330     .........."...0.
  40f94c:	7bc7 6a4e 58d5 495c 3de3 2c6a 1ef1 0f78     .{Nj.X\I.=j,..x.

0040f95c <STR_NOFREEEXPO>:
  40f95c:	6f4e 6620 6572 2065 7865 6f70 0021 0000     No free expo!...

0040f96c <STR_NOFREEMIXER>:
  40f96c:	6f4e 6620 6572 2065 696d 6578 2172 0000     No free mixer!..

0040f97c <font_dblsize>:
	...
  40f998:	71fe 71fe 0000 0000 0000 0000 0000 0000     .q.q............
  40f9a8:	003e 007e 0000 0000 007e 003e 0000 0000     >.~.....~.>.....
  40f9b8:	0660 0660 7ffe 7ffe 0660 0660 7ffe 7ffe     `.`.....`.`.....
  40f9c8:	0660 0660 1860 18f0 1998 1998 7ffe 7ffe     `.`.`...........
  40f9d8:	1998 1998 0f18 0618 180c 1c1e 0e1e 070c     ................
  40f9e8:	0380 01c0 30e0 7870 7838 3018 1e78 3ffc     .....0px8x.0x..?
  40f9f8:	718e 63c6 67e6 6676 3c3c 3c18 6600 6600     .q.c.gvf<<.<.f.f
  40fa08:	0000 0000 0066 0076 003e 001e 0000 0000     ....f.v.>.......
	...
  40fa20:	07e0 0ff0 1c38 381c 700e 6006 0000 0000     ....8..8.p.`....
  40fa30:	0000 0000 6006 700e 381c 1c38 0ff0 07e0     .....`.p.88.....
  40fa40:	0000 0000 0660 0660 03c0 0180 1ff8 1ff8     ....`.`.........
  40fa50:	0180 03c0 0660 0660 0180 0180 0180 0180     ....`.`.........
  40fa60:	1ff8 1ff8 0180 0180 0180 0180 0000 0000     ................
  40fa70:	6600 7600 3e00 1e00 0000 0000 0000 0000     .f.v.>..........
  40fa80:	0000 0000 0000 0180 0180 0180 0180 0180     ................
  40fa90:	0180 0180 0000 0000 3000 7800 7800 3000     .........0.x.x.0
	...
  40faa8:	1800 1c00 0e00 0700 0380 01c0 00e0 0070     ..............p.
  40fab8:	0038 0018 0000 0000 1ff8 3ffc 700e 6006     8..........?.p.`
  40fac8:	6006 700e 3ffc 1ff8 0000 0000 6018 601c     .`.p.?.......`.`
  40fad8:	7ffe 7ffe 6000 6000 0000 0000 0000 0000     .....`.`........
  40fae8:	7818 7c1c 6e0e 6706 6386 61ce 60fc 6078     .x.|.n.g.c.a.`x`
  40faf8:	0000 0000 6006 6006 6186 6186 6186 73ce     .....`.`.a.a.a.s
  40fb08:	3ffc 1e78 0000 0000 0780 07c0 06e0 0670     .?x...........p.
  40fb18:	0638 061c 7ffe 7ffe 0000 0000 187e 387e     8...........~.~8
  40fb28:	7066 6066 6066 70e6 3fc6 1f86 0000 0000     fpf`f`.p.?......
  40fb38:	1ff8 3ffc 718e 6186 6186 738e 3f1c 1e18     ...?.q.a.a.s.?..
  40fb48:	0000 0000 0006 0006 7f86 7fc6 00e6 0076     ..............v.
  40fb58:	003e 001e 0000 0000 1e78 3ffc 73ce 6186     >.......x..?.s.a
  40fb68:	6186 73ce 3ffc 1e78 0000 0000 0078 00fc     .a.s.?x.....x...
  40fb78:	61ce 7186 3986 1dce 0ffc 07f8 0000 0000     .a.q.9..........
  40fb88:	0c30 1e78 1e78 0c30 0000 0000 0000 0000     0.x.x.0.........
  40fb98:	0000 0000 6630 7678 3e78 1e30 0000 0000     ....0fxvx>0.....
	...
  40fbb0:	0180 03c0 07e0 0e70 1c38 381c 700e 6006     ......p.8..8.p.`
  40fbc0:	0660 0660 0660 0660 0660 0660 0660 0660     `.`.`.`.`.`.`.`.
  40fbd0:	0660 0660 6006 700e 381c 1c38 0e70 07e0     `.`..`.p.88.p...
  40fbe0:	03c0 0180 0000 0000 0018 001c 000e 0006     ................
  40fbf0:	6606 6706 0386 01ce 00fc 0078 0078 00fc     .f.g......x.x...
  40fc00:	01ce 0186 0186 01ce 00fc 0078 0000 0000     ..........x.....
  40fc10:	7fe0 7ff0 01b8 019c 018e 018e 019c 01b8     ................
  40fc20:	7ff0 7fe0 7ffe 7ffe 6186 6186 6186 6186     .........a.a.a.a
  40fc30:	6186 73ce 3ffc 1e78 1ff8 3ffc 700e 6006     .a.s.?x....?.p.`
  40fc40:	6006 6006 6006 700e 381c 1818 7ffe 7ffe     .`.`.`.p.8......
  40fc50:	6006 6006 6006 700e 381c 1c38 0ff0 07e0     .`.`.`.p.88.....
  40fc60:	7ffe 7ffe 6186 6186 6186 6186 6186 6186     .....a.a.a.a.a.a
  40fc70:	6006 6006 7ffe 7ffe 0186 0186 0186 0186     .`.`............
  40fc80:	0186 0186 0006 0006 1ff8 3ffc 700e 6006     ...........?.p.`
  40fc90:	6186 6186 6186 718e 7f9c 3f98 7ffe 7ffe     .a.a.a.q...?....
  40fca0:	0180 0180 0180 0180 0180 0180 7ffe 7ffe     ................
  40fcb0:	0000 0000 6006 6006 7ffe 7ffe 6006 6006     .....`.`.....`.`
  40fcc0:	0000 0000 1800 3800 7000 6000 6006 7006     .......8.p.`.`.p
  40fcd0:	3ffe 1ffe 0006 0006 7ffe 7ffe 0180 03c0     .?..............
  40fce0:	07e0 0e70 1c38 381c 700e 6006 7ffe 7ffe     ..p.8..8.p.`....
  40fcf0:	6000 6000 6000 6000 6000 6000 6000 6000     .`.`.`.`.`.`.`.`
  40fd00:	7ffe 7ffe 001c 0038 01f0 01f0 0038 001c     ......8.....8...
  40fd10:	7ffe 7ffe 7ffe 7ffe 0070 00e0 01c0 0380     ........p.......
  40fd20:	0700 0e00 7ffe 7ffe 1ff8 3ffc 700e 6006     ...........?.p.`
  40fd30:	6006 6006 6006 700e 3ffc 1ff8 7ffe 7ffe     .`.`.`.p.?......
  40fd40:	0186 0186 0186 0186 0186 01ce 00fc 0078     ..............x.
  40fd50:	1ff8 3ffc 700e 6006 6606 6e06 3c06 380e     ...?.p.`.f.n.<.8
  40fd60:	7ffc 67f8 7ffe 7ffe 0186 0186 0786 0f86     ...g............
  40fd70:	1d86 39ce 70fc 6078 1878 38fc 71ce 6186     ...9.px`x..8.q.a
  40fd80:	6186 6186 6186 738e 3f1c 1e18 0006 0006     .a.a.a.s.?......
  40fd90:	0006 0006 7ffe 7ffe 0006 0006 0006 0006     ................
  40fda0:	1ffe 3ffe 7000 6000 6000 6000 6000 7000     ...?.p.`.`.`.`.p
  40fdb0:	3ffe 1ffe 07fe 0ffe 1c00 3800 7000 7000     .?.........8.p.p
  40fdc0:	3800 1c00 0ffe 07fe 1ffe 3ffe 7000 7000     .8.........?.p.p
  40fdd0:	3e00 3e00 7000 7000 3ffe 1ffe 781e 7c3e     .>.>.p.p.?...x>|
  40fde0:	0e70 07e0 03c0 03c0 07e0 0e70 7c3e 781e     p.........p.>|.x
  40fdf0:	007e 00fe 01c0 0380 7f00 7f00 0380 01c0     ~...............
  40fe00:	00fe 007e 7806 7c06 6e06 6706 6386 61c6     ..~..x.|.n.g.c.a
  40fe10:	60e6 6076 603e 601e 0000 0000 7ffe 7ffe     .`v`>`.`........
  40fe20:	6006 6006 6006 6006 0000 0000 0018 0038     .`.`.`.`......8.
  40fe30:	0070 00e0 01c0 0380 0700 0e00 1c00 1800     p...............
  40fe40:	0000 0000 6006 6006 6006 6006 7ffe 7ffe     .....`.`.`.`....
  40fe50:	0000 0000 0060 0070 0038 001c 000e 000e     ....`.p.8.......
  40fe60:	001c 0038 0070 0060 6000 6000 6000 6000     ..8.p.`..`.`.`.`
  40fe70:	6000 6000 6000 6000 6000 6000 0000 0000     .`.`.`.`.`.`....
  40fe80:	0006 000e 001c 0038 0070 0060 0000 0000     ......8.p.`.....
  40fe90:	1800 3c00 7e60 6660 6660 6660 6660 66e0     ...<`~`f`f`f`f.f
  40fea0:	7fc0 7f80 7ffe 7ffe 6180 61c0 60e0 6060     .........a.a.```
  40feb0:	6060 70e0 3fc0 1f80 1f80 3fc0 70e0 6060     ``.p.?.....?.p``
  40fec0:	6060 6060 6060 7060 3800 1800 1f80 3fc0     ```````p.8.....?
  40fed0:	70e0 6060 6060 60e0 61c0 6180 7ffe 7ffe     .p````.`.a.a....
  40fee0:	1f80 3fc0 76e0 6660 6660 6660 6660 66e0     ...?.v`f`f`f`f.f
  40fef0:	07c0 0780 0180 0180 7ff8 7ffc 018e 0186     ................
  40ff00:	0006 000e 001c 0018 01e0 03f0 6738 6618     ............8g.f
  40ff10:	6618 6618 6618 7618 3ff8 1ff8 7ffe 7ffe     .f.f.f.v.?......
  40ff20:	0180 01c0 00e0 0060 0060 00e0 7fc0 7f80     ......`.`.......
  40ff30:	0000 0000 6060 6060 7fe6 7fe6 6000 6000     ....````.....`.`
  40ff40:	0000 0000 1800 3800 7000 6000 6060 7060     .......8.p.````p
  40ff50:	3fe6 1fe6 0000 0000 7ffe 7ffe 0600 0f00     .?..............
  40ff60:	1f80 39c0 70e0 6060 0000 0000 0000 0000     ...9.p``........
  40ff70:	6006 6006 7ffe 7ffe 6000 6000 0000 0000     .`.`.....`.`....
  40ff80:	7fe0 7fe0 0060 00e0 07c0 07c0 00e0 00e0     ....`...........
  40ff90:	7fc0 7f80 7fe0 7fe0 0180 01c0 00e0 0060     ..............`.
  40ffa0:	0060 00e0 7fc0 7f80 1f80 3fc0 70e0 6060     `..........?.p``
  40ffb0:	6060 6060 6060 70e0 3fc0 1f80 7fe0 7fe0     ``````.p.?......
  40ffc0:	0660 0660 0660 0660 0660 07e0 03c0 0180     `.`.`.`.`.......
  40ffd0:	0180 03c0 07e0 0660 0660 0660 07c0 0780     ......`.`.`.....
  40ffe0:	7fe0 7fe0 7fe0 7fe0 0180 01c0 00e0 0060     ..............`.
  40fff0:	0060 00e0 01c0 0180 6180 63c0 67e0 6660     `........a.c.g`f
  410000:	6660 6660 6660 7e60 3c00 1800 0060 0060     `f`f`f`~.<..`.`.
  410010:	1ffe 3ffe 7060 6060 6000 7000 3800 1800     ...?`p``.`.p.8..
  410020:	1fe0 3fe0 7000 6000 6000 7000 3800 1800     ...?.p.`.`.p.8..
  410030:	7fe0 7fe0 07e0 0fe0 1c00 3800 7000 7000     ...........8.p.p
  410040:	3800 1c00 0fe0 07e0 1fe0 3fe0 7000 7000     .8.........?.p.p
  410050:	3800 3800 7000 7000 3fe0 1fe0 6060 70e0     .8.8.p.p.?..``.p
  410060:	39c0 1f80 0f00 0f00 1f80 39c0 70e0 6060     .9.........9.p``
  410070:	01e0 03e0 6700 6600 6600 6600 6600 7600     .....g.f.f.f.f.v
  410080:	3fe0 1fe0 6060 7060 7860 7c60 6e60 6760     .?..```p`x`|`n`g
  410090:	63e0 61e0 60e0 6060 0000 0000 0180 03c0     .c.a.```........
  4100a0:	1e78 3e7c 700e 6006 0000 0000 0000 0000     x.|>.p.`........
  4100b0:	0000 0000 7ffe 7ffe 0000 0000 0000 0000     ................
  4100c0:	0000 0000 6006 700e 3e7c 1e78 03c0 0180     .....`.p|>x.....
  4100d0:	0000 0000 0180 0180 0180 0180 1818 1c38     ..............8.
  4100e0:	0ff0 07e0 03c0 0180 0180 03c0 07e0 0ff0     ................
  4100f0:	1c38 1818 0180 0180 0180 0180               8...........

004100fc <font>:
	...
  410104:	006f 0700 0700 1400 147f 147f 2a24 2a7f     o...........$*.*
  410114:	2312 0813 6264 4936 2255 0050 0305 0000     .#..db6IU"P.....
  410124:	1c00 4122 0000 2241 001c 0814 083e 0814     .."A..A"....>...
  410134:	3e08 0808 5000 0030 0000 0808 0808 6000     .>...P0........`
  410144:	0060 2000 0810 0204 3e00 4141 003e 4200     `.. .....>AA>..B
  410154:	407f 6200 4951 0046 4941 3649 1800 1214     .@.bQIF.AII6....
  410164:	007f 4527 3945 3e00 4949 0032 7901 0305     ..'EE9.>II2..y..
  410174:	3600 4949 0036 4906 1e29 0000 3636 0000     .6II6..I)...66..
  410184:	5600 0036 0800 2214 1441 1414 1414 2241     .V6...."A.....A"
  410194:	0814 0200 5101 0609 0906 0609 7e00 0909     .....Q.......~..
  4101a4:	7e09 497f 4949 3e36 4141 2241 417f 2241     .~.III6>AAA".AA"
  4101b4:	7f1c 4949 4149 097f 0909 3e01 4941 7a49     ..IIIA.....>AIIz
  4101c4:	087f 0808 007f 7f41 0041 4020 3f41 7f01     ......A.A. @A?..
  4101d4:	1408 4122 407f 4040 7f40 0c02 7f02 047f     .."A.@@@@.......
  4101e4:	1008 3e7f 4141 3e41 097f 0909 3e06 5141     ...>AAA>.....>AQ
  4101f4:	5e21 097f 2919 2646 4949 3249 0101 017f     !^...)F&III2....
  410204:	3f01 4040 3f40 201f 2040 3f1f 3040 3f40     .?@@@?. @ .?@0@?
  410214:	1463 1408 0763 7008 0708 5161 4549 0043     c...c..p..aQIEC.
  410224:	417f 0041 0402 1008 0020 4141 007f 0204     .AA..... .AA....
  410234:	0201 4004 4040 4040 0100 0402 2000 5454     ...@@@@@..... TT
  410244:	7854 487f 4444 3838 4444 2044 4438 4844     Tx.HDD88DDD 8DDH
  410254:	387f 5454 1854 7e08 0109 0c02 5252 3e52     .8TTT..~....RRR>
  410264:	087f 0404 0078 7d44 0040 4020 3d44 7f00     ....x.D}@. @D=..
  410274:	2810 0044 4100 407f 7c00 1804 7804 087c     .(D..A.@.|...x|.
  410284:	0404 3878 4444 3844 147c 1414 0808 1414     ..x8DDD8|.......
  410294:	7c18 087c 0404 4808 5454 2054 3f04 4044     .||....HTTT .?D@
  4102a4:	3c20 4040 7c20 201c 2040 3c1c 2040 3c40      <@@ |. @ .<@ @<
  4102b4:	2844 2810 0c44 5050 3c50 6444 4c54 0044     D(.(D.PPP<DdTLD.
  4102c4:	3608 0041 0000 007f 0000 3641 0008 0808     .6A.......A6....
  4102d4:	1c22 0808 221c 0808                         "...."..

004102dc <STR_OPEN9X>:
  4102dc:	4f03 4646 4e4f 0320 2d2d 492d 564e 3404     .OFFON .---INV.4
  4102ec:	4843 3620 4843 3820 4843 3120 4330 3148     CH 6CH 8CH 10CH1
  4102fc:	4332 3148 4334 3148 4336 0548 7551 6569     2CH14CH16CH.Quie
  41030c:	4174 616c 6d72 6f4e 654b 4179 6c6c 2020     tAlarmNoKeyAll  
  41031c:	7805 6853 7472 6853 726f 4e74 726f 6c6d     .xShrtShortNorml
  41032c:	6f4c 676e 7820 6f4c 676e 5304 4e49 4f47     Long xLong.SINGO
  41033c:	4d53 4650 4c49 0454 6f44 6e77 464f 2046     SMPFILT.DownOFF 
  41034c:	7055 2020 6f03 6666 2b20 203d 3d3a 6303     Up  .off += :=.c
  41035c:	3168 6863 6332 3368 6863 0634 7845 2070     h1ch2ch3ch4.Exp 
  41036c:	2020 7845 6946 656e 6946 656e 2020 654d       ExFineFine  Me
  41037c:	6964 6d75 6f43 7261 6573 5201 5445 3141     diumCoarse.RETA1
  41038c:	3332 5006 4d50 2000 5020 4d50 3631 5000     23.PPM.  PPM16.P
  41039c:	4d50 6973 506d 5858 2000 4420 4d53 0032     PMsimPXX.  DSM2.
  4103ac:	0320 4f50 4e53 4745 2d03 2d2d 3e78 7830      .POSNEG.---x>0x
  4103bc:	303c 787c 667c 303e 3c66 7c30 7c66 4505     <0|x|f>0f<0|f|.E
  4103cc:	4944 2054 5250 4553 4154 542e 5248 5706     DIT PRSETA.THR.W
  4103dc:	6965 6867 4574 7078 206f 4320 7275 6576     eightExpo  Curve
  4103ec:	5020 6168 6573 5320 7477 6863 5320 6469      Phase Swtch Sid
  4103fc:	2065 2020 2020 2020 4108 6464 2020 2020     e       .Add    
  41040c:	4d20 6c75 6974 6c70 5279 7065 616c 6563      MultiplyReplace
  41041c:	0220 3d2b 3d2a 3d3a 4f06 204e 2020 4f20      .+=*=:=.ON    O
  41042c:	4646 2020 4f20 6666 6573 0774 2d2d 2d2d     FF   Offset.----
  41043c:	2000 7620 6f3e 7366 2020 3c76 666f 2073     .  v>ofs  v<ofs 
  41044c:	7c20 7c76 6f3e 7366 767c 3c7c 666f 4173      |v|>ofs|v|<ofsA
  41045c:	444e 2020 2020 524f 2020 2020 5820 524f     ND    OR     XOR
  41046c:	2020 2020 3176 3d3d 3276 7620 2131 763d         v1==v2 v1!=v
  41047c:	2032 3176 763e 2032 7620 3c31 3276 2020     2 v1>v2  v1<v2  
  41048c:	3176 3d3e 3276 7620 3c31 763d 2032 530d     v1>=v2 v1<=v2 .S
  41049c:	6365 7275 7469 2079 2000 2020 7254 6961     ecurity .   Trai
  4104ac:	656e 2072 2000 2020 4920 736e 6174 746e     ner .    Instant
  4104bc:	5420 6972 206d 6c50 7961 5320 756f 646e      Trim Play Sound
  4104cc:	2000 4820 7061 6974 0063 2020 2020 2020     .  Haptic.      
  4104dc:	6552 6573 0074 2020 2020 2020 5620 7261     Reset.       Var
  4104ec:	6f69 2020 2020 2020 2020 5406 6d69 7265     io        .Timer
  4104fc:	5431 6d69 7265 4132 6c6c 2020 5420 6c65     1Timer2All   Tel
  41050c:	6d65 062e 6157 6e72 2031 6157 6e72 2032     em..Warn1 Warn2 
  41051c:	6843 6565 2070 6952 676e 2020 6353 4669     Cheep Ring  SciF
  41052c:	2069 6f52 6f62 2074 6843 7269 2070 6154     i Robot Chirp Ta
  41053c:	6164 2020 7243 6369 746b 6953 6572 206e     da  CricktSiren 
  41054c:	6c41 436d 6b6c 6152 6174 6174 6954 6b63     AlmClkRatataTick
  41055c:	2020 6148 7470 3163 6148 7470 3263 6148       Haptc1Haptc2Ha
  41056c:	7470 3363 2d04 2d2d 5400 726d 5431 726d     ptc3.---.Tmr1Tmr
  41057c:	4132 0031 4120 0032 5420 0078 5220 0078     2A1. A2. Tx. Rx.
  41058c:	4120 746c 5200 6d70 4600 6575 546c 0031      Alt.Rpm.FuelT1.
  41059c:	5420 0032 5320 6470 4400 7369 4774 6c41      T2. Spd.DistGAl
  4105ac:	4374 6c65 416c 6363 4158 6363 4159 6363     tCellAccXAccYAcc
  4105bc:	485a 6764 5600 7053 4164 2d31 4100 2d32     ZHdg.VSpdA1-.A2-
  4105cc:	4100 746c 412d 746c 522b 6d70 542b 2b31     .Alt-Alt+Rpm+T1+
  4105dc:	5400 2b32 5300 6470 442b 7473 412b 6363     .T2+.Spd+Dst+Acc
  4105ec:	5400 6d69 0365 0076 4120 2000 2f6d 2d73     .Time.v. A. m/s-
  4105fc:	2000 6d6b 6d68 2000 0040 2520 2000 416d     . kmhm. @. %. mA
  41060c:	0300 2d2d 592d 6c65 724f 5267 6465 3c01     ..---YelOrgRed.<
  41061c:	043e 6f4e 656e 7548 2062 5357 4848 4804     >.NoneHub WSHH.H
  41062c:	534d 4e20 454d 0441 6f4e 656e 6142 6f72     MS NMEA.NoneBaro
  41063c:	3141 2020 3241 2020 430d 656c 7261 4d20     A1  A2  .Clear M
  41064c:	7869 7365 0000 6953 706d 656c 3420 432d     ixes..Simple 4-C
  41065c:	2048 5400 432d 7475 2020 2020 2020 0020     H .T-Cut       .
  41066c:	2d56 6154 6c69 2020 2020 2020 4500 656c     V-Tail      .Ele
  41067c:	6f76 5c6e 6544 746c 0061 4365 5043 204d     von\Delta.eCCPM 
  41068c:	2020 2020 2020 4800 6c65 2069 6553 7574           .Heli Setu
  41069c:	2070 0020 6553 7672 206f 6554 7473 2020     p  .Servo Test  
  4106ac:	0500 4d20 6e65 2075 7845 7469 4420 776f     .. Menu Exit Dow
  4106bc:	206e 2020 7055 6952 6867 2074 654c 7466     n   UpRight Left
  4106cc:	5403 5248 5552 4544 454c 4449 4930 3144     .THRRUDELEID0ID1
  4106dc:	4449 4132 4c49 4547 5441 4e52 5753 5331     ID2AILGEATRNSW1S
  4106ec:	3257 5753 5333 3457 5753 5335 3657 5753     W2SW3SW4SW5SW6SW
  4106fc:	5337 3857 5753 5339 4157 5753 5342 4357     7SW8SW9SWASWBSWC
  41070c:	5753 5344 4557 5753 5346 4757 5753 5348     SWDSWESWFSWGSWHS
  41071c:	4957 5753 534a 4b57 5753 534c 4d57 5753     WISWJSWKSWLSWMSW
  41072c:	534e 4f57 5753 5350 5157 5753 5352 5357     NSWOSWPSWQSWRSWS
  41073c:	5753 5354 5557 5753 5356 5757 5204 6475     SWTSWUSWVSWW.Rud
  41074c:	4520 656c 5420 7268 4120 6c69 5020 2031      Ele Thr Ail P1 
  41075c:	5020 2032 5020 2033 4d20 5841 3320 4f50      P2  P3  MAX 3PO
  41076c:	4353 4359 4331 4359 4332 4359 0333 464f     SCYC1CYC2CYC3.OF
  41077c:	4146 5342 4854 5473 2548 4854 0074 0000     FABSTHsTH%THt...

0041078c <modn12x3>:
  41078c:	0201 0403 0301 0402 0204 0103 0304 0102     ................

0041079c <STR_POPUPS>:
  41079c:	4d5b 4e45 5d55 5b04 5845 5449 005d 0000     [MENU].[EXIT]...

004107ac <STR_PPM>:
  4107ac:	5050 004d                                   PPM.

004107b0 <STR_CH>:
  4107b0:	4843 0000                                   CH..

004107b4 <STR_MODEL>:
  4107b4:	4f4d 4544 004c 0000                         MODEL...

004107bc <STR_FP>:
  4107bc:	5046 0000                                   FP..

004107c0 <_ZL10bchunit_ar>:
  4107c0:	0305 0607 0406 0505                         ........

004107c8 <STR_TX>:
  4107c8:	7854 003a 7852 003a                         Tx:.Rx:.

004107d0 <STR_NODATA>:
  4107d0:	4f4e 4420 5441 0041                         NO DATA.

004107d8 <_ZL12Volume_scale>:
  4107d8:	0200 0604 0a08 110d 1b16 2821 5240 6960     ..........!(@R`i
  4107e8:	7570 7a78 7d7c 7f7e                         puxz|}~.

004107f0 <STR_MENUSTAT>:
  4107f0:	5453 5441 0053 0000                         STATS...

004107f8 <STR_TM1TM2>:
  4107f8:	4d54 0d31 4d54 0032                         TM1.TM2.

00410800 <STR_THRTHP>:
  410800:	4854 0d52 4854 0025                         THR.TH%.

00410808 <STR_TOT>:
  410808:	4f54 0054                                   TOT.

0041080c <STR_ACCEL>:
  41080c:	6341 3a63 0000 0000                         Acc:....

00410814 <STR_LATITUDE>:
  410814:	614c 6974 7574 6564 0000 0000               Latitude....

00410820 <STR_LONGITUDE>:
  410820:	6f4c 676e 7469 6475 0065 0000               Longitude...

0041082c <STR_MINRSSI>:
  41082c:	694d 206e 7352 6973 0000 0000               Min Rssi....

00410838 <STR_MENUDEBUG>:
  410838:	4544 5542 0047 0000                         DEBUG...

00410840 <STR_TMAINMAXMS>:
  410840:	6d54 6961 206e 616d 0578 736d 0000 0000     Tmain max.ms....

00410850 <STR_CURRENT>:
  410850:	7543 7272 6e65 0074                         Current.

00410858 <STR_MENUTORESET>:
  410858:	4d5b 4e45 5d55 7420 206f 6572 6573 0074     [MENU] to reset.

00410868 <STR_ALERT>:
  410868:	4107 454c 5452 0000                         .ALERT..

00410870 <STR_PRESSANYKEY>:
  410870:	5004 6572 7373 6120 796e 4b20 7965 0000     .Press any Key..

00410880 <STR_ALARMSDISABLED>:
  410880:	6c41 7261 736d 4420 7369 6261 656c 0064     Alarms Disabled.

00410890 <STR_SWITCHESNOTOFF>:
  410890:	7753 7469 6863 7365 6e20 746f 6f20 6666     Switches not off
  4108a0:	0000 0000                                   ....

004108a4 <STR_PLEASERESETTHEM>:
  4108a4:	6c50 6165 6573 7220 7365 7465 7420 6568     Please reset the
  4108b4:	006d 0000                                   m...

004108b8 <STR_PRESSANYKEYTOSKIP>:
  4108b8:	7250 7365 2073 6e61 2079 656b 2079 6f74     Press any key to
  4108c8:	7320 696b 0070 0000                          skip...

004108d0 <STR_THROTTLENOTIDLE>:
  4108d0:	6854 6f72 7474 656c 6e20 746f 6920 6c64     Throttle not idl
  4108e0:	0065 0000                                   e...

004108e4 <STR_RESETTHROTTLE>:
  4108e4:	6552 6573 2074 6874 6f72 7474 656c 0000     Reset throttle..

004108f4 <STR_MENUSERROR>:
  4108f4:	454d 554e 2053 564f 5245 4c46 574f 0000     MENUS OVERFLOW..

00410904 <STR_MENUCURVE>:
  410904:	5543 5652 0045 0000                         CURVE...

0041090c <STR_MODE>:
  41090c:	6f4d 6564 0000 0000                         Mode....

00410914 <_ZL11menuTabDiag>:
  410914:	81f1 0040 c12d 0040 9f89 0040 9e51 0040     ..@.-.@...@.Q.@.
  410924:	9cc1 0040 b4d5 0040                         ..@...@.

0041092c <_ZZ13menuProcSetuphE10mstate_tab>:
	...
  410948:	ff00 0001                                   ....

0041094c <STR_MENURADIOSETUP>:
  41094c:	4152 4944 204f 4553 5554 0050               RADIO SETUP.

00410958 <STR_BEEPERMODE>:
  410958:	7053 6165 656b 2072 6f4d 6564 0000 0000     Speaker Mode....

00410968 <STR_BEEPERLEN>:
  410968:	7053 6165 656b 2072 654c 676e 6874 0000     Speaker Length..

00410978 <STR_SPKRPITCH>:
  410978:	7053 6165 656b 2072 6950 6374 0068 0000     Speaker Pitch...

00410988 <STR_HAPTICMODE>:
  410988:	6148 7470 6369 4d20 646f 0065               Haptic Mode.

00410994 <STR_HAPTICLENGTH>:
  410994:	6148 7470 6369 4c20 6e65 7467 0068 0000     Haptic Length...

004109a4 <STR_HAPTICSTRENGTH>:
  4109a4:	6148 7470 6369 5320 7274 6e65 7467 0068     Haptic Strength.

004109b4 <STR_CONTRAST>:
  4109b4:	6f43 746e 6172 7473 0000 0000               Contrast....

004109c0 <STR_BATTERYWARNING>:
  4109c0:	6142 7474 7265 2079 6157 6e72 6e69 0067     Battery Warning.

004109d0 <STR_INACTIVITYALARM>:
  4109d0:	6e49 6361 6974 6976 7974 6120 726c 006d     Inactivity alrm.

004109e0 <STR_FILTERADC>:
  4109e0:	6946 746c 7265 4120 4344 0000               Filter ADC..

004109ec <STR_THROTTLEREVERSE>:
  4109ec:	6854 2072 6572 6576 7372 0065               Thr reverse.

004109f8 <STR_MINUTEBEEP>:
  4109f8:	694d 756e 6574 6220 6565 0070               Minute beep.

00410a04 <STR_BEEPCOUNTDOWN>:
  410a04:	6542 7065 6320 756f 746e 6f64 6e77 0000     Beep countdown..

00410a14 <STR_FLASHONBEEP>:
  410a14:	6c46 7361 2068 6e6f 6220 6565 0070 0000     Flash on beep...

00410a24 <STR_LIGHTSWITCH>:
  410a24:	694c 6867 2074 7773 7469 6863 0000 0000     Light switch....

00410a34 <STR_LIGHTOFFAFTER>:
  410a34:	694c 6867 2074 666f 2066 6661 6574 0072     Light off after.

00410a44 <STR_SPLASHSCREEN>:
  410a44:	7053 616c 6873 7320 7263 6565 006e 0000     Splash screen...

00410a54 <STR_THROTTLEWARNING>:
  410a54:	6854 2072 6157 6e72 6e69 0067               Thr Warning.

00410a60 <STR_SWITCHWARNING>:
  410a60:	7753 7469 6863 5720 7261 696e 676e 0000     Switch Warning..

00410a70 <STR_MEMORYWARNING>:
  410a70:	654d 6f6d 7972 5720 7261 696e 676e 0000     Memory Warning..

00410a80 <STR_ALARMWARNING>:
  410a80:	6c41 7261 206d 6157 6e72 6e69 0067 0000     Alarm Warning...

00410a90 <STR_NODATAALARM>:
  410a90:	4f4e 4420 5441 2041 6c41 7261 006d 0000     NO DATA Alarm...

00410aa0 <STR_TIMEZONE>:
  410aa0:	6954 656d 5a20 6e6f 0065 0000               Time Zone...

00410aac <STR_GPSCOORD>:
  410aac:	7047 2073 6f43 726f 7364 0000               Gps Coords..

00410ab8 <STR_RXCHANNELORD>:
  410ab8:	7852 4320 6168 6e6e 6c65 4f20 6472 0000     Rx Channel Ord..

00410ac8 <_ZL6sticks>:
  410ac8:	0812 0800 081c 0808 081c 0000 2208 4900     .............".I
  410ad8:	2200 0008 0000 0000 7f22 0022 0000 2208     ."......"."...."
  410ae8:	4900 2200 0008 0800 0022 0049 0822 0000     .I."....".I."...
  410af8:	2200 227f 0000 0000 0800 0022 0049 0822     ."."......".I.".
  410b08:	0000 1c08 0808 1c08 0008 0000               ............

00410b14 <_ZL12menuTabModel>:
  410b14:	e665 0040 b6d1 0040 ac21 0040 ac19 0040     e.@...@.!.@...@.
  410b24:	ac11 0040 ced9 0040 a00d 0040 999d 0040     ..@...@...@...@.
  410b34:	975d 0040 8a45 0040 eecd 0040               ].@.E.@...@.

00410b40 <_ZZ17menuProcTelemetryhE10mstate_tab>:
  410b40:	ff00 0001 0202 01ff 0200 ff02 0101 00ff     ................
  410b50:	ff00 0100 01ff 0101 ff01 0202 0202 0000     ................

00410b60 <STR_MENUTELEMETRY>:
  410b60:	4554 454c 454d 5254 0059 0000               TELEMETRY...

00410b6c <STR_ACHANNEL>:
  410b6c:	0241 6863 6e61 656e 006c 0000               A.channel...

00410b78 <STR_RANGE>:
  410b78:	6152 676e 0065 0000                         Range...

00410b80 <STR_OFFSET>:
  410b80:	664f 7366 7465 0000                         Offset..

00410b88 <STR_ALARM>:
  410b88:	6c41 7261 006d 0000                         Alarm...

00410b90 <STR_USRDATA>:
  410b90:	7355 4472 7461 0061                         UsrData.

00410b98 <STR_PROTO>:
  410b98:	7250 746f 006f 0000                         Proto...

00410ba0 <STR_BLADES>:
  410ba0:	6c42 6461 7365 0000                         Blades..

00410ba8 <STR_VARIO>:
  410ba8:	6156 6972 006f 0000                         Vario...

00410bb0 <STR_SOURCE>:
  410bb0:	6f53 7275 6563 0000                         Source..

00410bb8 <STR_MINLIMIT>:
  410bb8:	694d 206e 694c 696d 0074 0000               Min Limit...

00410bc4 <STR_DISPLAY>:
  410bc4:	6944 7073 616c 0079                         Display.

00410bcc <STR_BARS>:
  410bcc:	6142 7372 0000 0000                         Bars....

00410bd4 <_ZZ24menuProcFunctionSwitcheshE10mstate_tab>:
  410bd4:	0200 0000                                   ....

00410bd8 <STR_MENUFUNCSWITCHES>:
  410bd8:	5546 434e 5320 4957 4354 4548 0053 0000     FUNC SWITCHES...

00410be8 <_ZZ22menuProcCustomSwitcheshE10mstate_tab>:
  410be8:	0200 0000                                   ....

00410bec <STR_MENUCUSTOMSWITCHES>:
  410bec:	5543 5453 4d4f 5320 4957 4354 4548 0053     CUSTOM SWITCHES.

00410bfc <STR_SW>:
  410bfc:	5753 0000                                   SW..

00410c00 <STR_MENUANA>:
  410c00:	4e41 5341 0000 0000                         ANAS....

00410c08 <STR_BATT_CALIB>:
  410c08:	6142 7474 7265 2079 6143 696c 0062 0000     Battery Calib...

00410c18 <STR_CURRENT_CALIB>:
  410c18:	7543 7272 6e65 2074 6143 696c 0062 0000     Current Calib...

00410c28 <STR_MENUDIAG>:
  410c28:	4944 4741 0000 0000                         DIAG....

00410c30 <STR_VTRIM>:
  410c30:	7254 6d69 202d 002b                         Trim- +.

00410c38 <STR_MENUVERSION>:
  410c38:	4556 5352 4f49 004e                         VERSION.

00410c40 <stamp1>:
  410c40:	4556 5352 203a 3256 302e 2d30 5746 0000     VERS: V2.00-FW..

00410c50 <stamp2>:
  410c50:	5320 4e56 203a 706f 6e65 7839 722d 0000      SVN: open9x-r..

00410c60 <stamp3>:
  410c60:	4144 4554 203a 3032 3231 302d 2d35 3330     DATE: 2012-05-03
  410c70:	0000 0000                                   ....

00410c74 <stamp4>:
  410c74:	4954 454d 203a 3631 323a 3a30 3333 0000     TIME: 16:20:33..

00410c84 <STR_EEPROMV>:
  410c84:	4545 5250 4d4f 7620 0000 0000               EEPROM v....

00410c90 <STR_MENUCURVES>:
  410c90:	5543 5652 5345 0000                         CURVES..

00410c98 <STR_CV>:
  410c98:	5643 0000                                   CV..

00410c9c <STR_MENUDREXPO>:
  410c9c:	5244 452f 5058 004f                         DR/EXPO.

00410ca4 <STR_MIXER>:
  410ca4:	494d 4558 0052 0000                         MIXER...

00410cac <STR_MENUFLIGHTPHASES>:
  410cac:	4c46 4749 5448 5020 4148 4553 0053 0000     FLIGHT PHASES...

00410cbc <STR_DEFAULT>:
  410cbc:	6428 6665 7561 746c 0029 0000               (default)...

00410cc8 <STR_CHECKTRIMS>:
  410cc8:	6843 6365 056b 7254 6d69 0073               Check.Trims.

00410cd4 <STR_INSERTMIX>:
  410cd4:	4e49 4553 5452 4d20 5849 0020               INSERT MIX .

00410ce0 <STR_EDITMIX>:
  410ce0:	4445 5449 4d20 5849 0020 0000               EDIT MIX ...

00410cec <STR_WEIGHT>:
  410cec:	6557 6769 7468 0000                         Weight..

00410cf4 <STR_DIFFERENTIAL>:
  410cf4:	6944 6666 7265 0000                         Differ..

00410cfc <STR_TRIM>:
  410cfc:	7254 6d69 0000 0000                         Trim....

00410d04 <STR_CURVES>:
  410d04:	7543 7672 7365 0000                         Curves..

00410d0c <STR_SWITCH>:
  410d0c:	7753 7469 6863 0000                         Switch..

00410d14 <STR_FPHASE>:
  410d14:	2e46 6850 7361 0065                         F.Phase.

00410d1c <STR_WARNING>:
  410d1c:	6157 6e72 6e69 0067                         Warning.

00410d24 <STR_OFF>:
  410d24:	464f 0046                                   OFF.

00410d28 <STR_MULTPX>:
  410d28:	754d 746c 7870 0000                         Multpx..

00410d30 <STR_DELAYUP>:
  410d30:	6544 616c 2079 7055 0000 0000               Delay Up....

00410d3c <STR_DELAYDOWN>:
  410d3c:	6544 616c 2079 6f44 6e77 0000               Delay Down..

00410d48 <STR_SLOWUP>:
  410d48:	6c53 776f 2020 7055 0000 0000               Slow  Up....

00410d54 <STR_SLOWDOWN>:
  410d54:	6c53 776f 2020 6f44 6e77 0000               Slow  Down..

00410d60 <STR_MENUCALIBRATION>:
  410d60:	4143 494c 5242 5441 4f49 004e               CALIBRATION.

00410d6c <STR_MENUTOSTART>:
  410d6c:	4d5b 4e45 5d55 5420 204f 5453 5241 0054     [MENU] TO START.

00410d7c <STR_SETMIDPOINT>:
  410d7c:	4553 2054 494d 5044 494f 544e 0000 0000     SET MIDPOINT....

00410d8c <STR_MENUWHENDONE>:
  410d8c:	4d5b 4e45 5d55 5720 4548 204e 4f44 454e     [MENU] WHEN DONE
  410d9c:	0000 0000                                   ....

00410da0 <STR_MOVESTICKSPOTS>:
  410da0:	4f4d 4556 5320 4954 4b43 2f53 4f50 5354     MOVE STICKS/POTS
  410db0:	0000 0000                                   ....

00410db4 <_ZZ13menuProcModelhE10mstate_tab>:
  410db4:	2900 0202 0000 0000 0600 0201               .)..........

00410dc0 <STR_MENUSETUP>:
  410dc0:	4553 5554 0050 0000                         SETUP...

00410dc8 <STR_NAME>:
  410dc8:	614e 656d 0000 0000                         Name....

00410dd0 <STR_TIMER>:
  410dd0:	6954 656d 0072 0000                         Timer...

00410dd8 <STR_ELIMITS>:
  410dd8:	2e45 694c 696d 7374 0000 0000               E.Limits....

00410de4 <STR_ETRIMS>:
  410de4:	2e45 7254 6d69 0073                         E.Trims.

00410dec <STR_TRIMINC>:
  410dec:	7254 6d69 4920 636e 0000 0000               Trim Inc....

00410df8 <STR_TTRACE>:
  410df8:	2d54 7254 6361 0065                         T-Trace.

00410e00 <STR_TTRIM>:
  410e00:	2d54 7254 6d69 0000                         T-Trim..

00410e08 <STR_BEEPCTR>:
  410e08:	6542 7065 4320 7274 0000 0000               Beep Ctr....

00410e14 <STR_PPMFRAME>:
  410e14:	5050 204d 7266 6d61 0065 0000               PPM frame...

00410e20 <STR_MS>:
  410e20:	736d 0000                                   ms..

00410e24 <_ZZ16menuProcPhaseOnehE10mstate_tab>:
  410e24:	0025 0003                                   %...

00410e28 <STR_MENUFLIGHTPHASE>:
  410e28:	4c46 4749 5448 5020 4148 4553 0000 0000     FLIGHT PHASE....

00410e38 <STR_TRIMS>:
  410e38:	7254 6d69 0073 0000                         Trims...

00410e40 <STR_FADEIN>:
  410e40:	6146 6564 4920 006e                         Fade In.

00410e48 <STR_FADEOUT>:
  410e48:	6146 6564 4f20 7475 0000 0000               Fade Out....

00410e54 <_ZZ15menuProcTrainerhE10mstate_tab>:
  410e54:	0200 0202 0002 0000                         ........

00410e5c <STR_MENUTRAINER>:
  410e5c:	5254 4941 454e 0052                         TRAINER.

00410e64 <STR_SLAVE>:
  410e64:	6c53 7661 0065 0000                         Slave...

00410e6c <STR_MODESRC>:
  410e6c:	6f6d 6564 2503 7320 6372 0000               mode.% src..

00410e78 <STR_MULTIPLIER>:
  410e78:	754d 746c 7069 696c 7265 0000               Multiplier..

00410e84 <STR_CAL>:
  410e84:	6143 006c                                   Cal.

00410e88 <_ZZ12menuMainViewhE1x>:
  410e88:	0422 5e7c                                   ".|^

00410e8c <_ZZ12menuMainViewhE4vert>:
  410e8c:	0100 0001                                   ....

00410e90 <_ZZ14menuProcLimitshE10mstate_tab>:
  410e90:	0300 0303 0303 0303 0303 0303 0303 0303     ................
  410ea0:	0003 0000                                   ....

00410ea4 <STR_MENULIMITS>:
  410ea4:	494c 494d 5354 0000                         LIMITS..

00410eac <STR_TRIMS2OFFSETS>:
  410eac:	7254 6d69 2073 3e3d 4f20 6666 6573 7374     Trims => Offsets
  410ebc:	0000 0000                                   ....

00410ec0 <_ZL8heli_ar1>:
  410ec0:	149c 4632 005a 0000                         ..2FZ...

00410ec8 <_ZL8heli_ar2>:
  410ec8:	465a 4632 005a 0000                         ZF2FZ...

00410ed0 <_ZL8heli_ar3>:
  410ed0:	ecec 3c00 0064 0000                         ...<d...

00410ed8 <_ZL8heli_ar4>:
  410ed8:	c49c 3c00 0064 0000                         ...<d...

00410ee0 <_ZL8heli_ar5>:
  410ee0:	009c 0000 0064 0000                         ....d...

00410ee8 <STR_MENUMODELSEL>:
  410ee8:	4f4d 4544 534c 4c45 0000 0000               MODELSEL....

00410ef4 <STR_DELETEMODEL>:
  410ef4:	4544 454c 4554 4d20 444f 4c45 0000 0000     DELETE MODEL....

00410f04 <STR_COPYINGMODEL>:
  410f04:	6f43 7970 6e69 2067 6f6d 6564 2e6c 2e2e     Copying model...
  410f14:	0000 0000                                   ....

00410f18 <STR_LOADINGMODEL>:
  410f18:	6f4c 6461 6e69 2067 6f6d 6564 2e6c 2e2e     Loading model...
  410f28:	0000 0000                                   ....

00410f2c <STR_MOVINGMODEL>:
  410f2c:	6f4d 6976 676e 6d20 646f 6c65 2e2e 002e     Moving model....

00410f3c <STR_BADEEPROMDATA>:
  410f3c:	6142 2064 4545 7270 6d6f 4420 7461 0061     Bad EEprom Data.

00410f4c <STR_MESSAGE>:
  410f4c:	4d04 5345 4153 4547 0000 0000               .MESSAGE....

00410f58 <STR_EEPROMFORMATTING>:
  410f58:	4545 5250 4d4f 4620 726f 616d 7474 6e69     EEPROM Formattin
  410f68:	0067 0000                                   g...

00410f6c <STR_MENUTEMPLATES>:
  410f6c:	4554 504d 414c 4554 0053 0000               TEMPLATES...

00410f78 <STR_SHUTDOWN>:
  410f78:	4853 5455 4954 474e 4420 574f 004e 0000     SHUTTING DOWN...

00410f88 <STR_EEPROMOVERFLOW>:
  410f88:	4545 5250 4d4f 6f20 6576 6672 6f6c 0077     EEPROM overflow.

00410f98 <STR_EEPROMLOWMEM>:
  410f98:	4545 5250 4d4f 6c20 776f 6d20 6d65 0000     EEPROM low mem..

00410fa8 <STR_FREESTACKMINB>:
  410fa8:	7246 6565 5320 6174 6b63 6204 0000 0000     Free Stack.b....

00410fb8 <STR_TMR1JITTERUS>:
  410fb8:	6d54 3172 4a20 7469 6574 0372 7375 0000     Tmr1 Jitter.us..

00410fc8 <STR_TMR1LATMINUS>:
  410fc8:	6d54 3172 614c 2074 696d 036e 7375 0000     Tmr1Lat min.us..

00410fd8 <STR_TMR1LATMAXUS>:
  410fd8:	6d54 3172 614c 2074 616d 0378 7375 0000     Tmr1Lat max.us..

00410fe8 <STR_RXBATT>:
  410fe8:	7852 4220 7461 3a74 0000 0000               Rx Batt:....

00410ff4 <STR_BG>:
  410ff4:	4742 003a                                   BG:.

00410ff8 <STR_BAR>:
  410ff8:	6142 0072                                   Bar.

00410ffc <STR_FREE>:
  410ffc:	7266 6565 0000 0000                         free....

00411004 <_ZL10splashdata>:
  411004:	5053 0053 4080 0000 0000 0000 0000 0000     SPS..@..........
	...
  411088:	0000 fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  411098:	fcfc fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  4110a8:	fcfc fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  4110b8:	fcfc fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  4110c8:	fcfc fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  4110d8:	fcfc fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  4110e8:	fcfc fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  4110f8:	fcfc fcfc fcfc fcfc fcfc fcfc fcfc fcfc     ................
  411108:	fcfc ffff ffff ffff ffff 7fff 3f7f 3f3f     .............???
  411118:	3f3f 7f3f ff7f ffff ffff ffff 3fff 3f3f     ???..........???
  411128:	3f3f 7fff 3f7f 3f3f 7f3f ffff ffff ffff     ??...????.......
  411138:	ffff 7fff 3f7f 3f3f 3f3f 7f3f ff7f ffff     .....??????.....
  411148:	ffff ffff ffff 3f3f 3f3f ff3f 3f7f 3f3f     ......?????..???
  411158:	3f3f ff7f ffff 7fff 070f 0103 e081 f0f0     ??..............
  411168:	e0f0 0100 0701 ff1f ffff ffff 3fbf 3f3f     .............???
  411178:	7f3f ffff ffff 7fff 3f3f 3f3f bf3f ffff     ?.......?????...
  411188:	ffff ffff ffff 073f 0103 c000 f8f0 fcfc     ......?.........
  411198:	fcfc 00f8 0000 0301 ffff 3fff 0001 0000     ...........?....
  4111a8:	e080 fcf8 fcfc 00f8 0000 0100 ffff 073f     ..............?.
  4111b8:	0103 0000 1810 1c1c 1c1c 0018 0000 0301     ................
  4111c8:	ffff ffff 001f 0000 c000 fcf8 fcfc 0010     ................
  4111d8:	0000 c000 ffff e0ff 0080 0000 1f0f 1f1f     ................
  4111e8:	030f 0000 0000 ffe0 ffff ffff feff e0f8     ................
  4111f8:	0000 0701 0107 e080 f8f0 fefc ffff ffff     ................
  411208:	ffff ffff ffff c0e0 0080 0f00 1f1f 1f1f     ................
  411218:	070f 8001 e0c0 fef0 ffff 0007 0000 c000     ................
  411228:	1f0f 1f1f 070f 0001 e080 fef0 ffff c0e0     ................
  411238:	0080 0e00 1e0e 1e1e 1e1e 1e1e ce0e fefe     ................
  411248:	ffff 037f 0000 8000 fffc ffff 033f 0000     ............?...
  411258:	8000 fffc 1fff 0f0f 1f1f 1e1e 0e1e 070e     ................
  411268:	c081 f0e0 fffc ffff 7fff 1f3f 030f 8001     ..........?.....
  411278:	f0e0 e0f8 0080 0701 7f1f ffff ffff ffff     ................
  411288:	ffff ffff ffff ffff ffff feff fefe fefe     ................
  411298:	fffe ffff ffff ffff 001f 0000 c000 fffe     ................
  4112a8:	feff fefe fefe ffff ffff ffff ffff ffff     ................
  4112b8:	ffff feff fefe fefe fefe fffe ffff ffff     ................
  4112c8:	ffff fefe fefe fffe ffff ffff fefe fefe     ................
  4112d8:	fffe ffff ffff feff fefe fefe fefe ffff     ................
  4112e8:	ffff ffff ffff ffff fefe fefe fefe ffff     ................
  4112f8:	ffff ffff feff fefe fefe ffff ffff ffff     ................
  411308:	ffff 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411318:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411328:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411338:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411348:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411358:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411368:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411378:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f 1f1f     ................
  411388:	1f1f 0000 0000 0000 0000 0000 0000 0000     ................
	...
  411408:	0000 5053 0045 0000 0063 0000 5043 2055     ..SPE...c...CPU 
  411418:	6574 706d 082e 003e 7053 6165 656b 2072     temp..>.Speaker 
  411428:	6f56 756c 656d 0000 704f 7274 7865 4420     Volume..Optrex D
  411438:	7369 6c70 7961 0000 7242 6769 7468 656e     isplay..Brightne
  411448:	7373 0000 5352 4953 0000 0000 0041 0000     ss..RSSI....A...
  411458:	332f 0032 362f 0034 7375 0000               /32./64.us..
